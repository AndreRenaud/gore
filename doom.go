package gore

import (
	"crypto/sha1"
	"fmt"
	"hash"
	"image"
	"image/color"
	"io"
	"log"
	"math"
	"os"
	"path/filepath"
	"runtime/debug"
	"strconv"
	"strings"
	"time"
	"unsafe"
)

type DoomFrontend interface {
	DrawFrame(img *image.RGBA)
	SetTitle(title string)
	GetKey(event *DoomKeyEvent) bool
}

var dg_frontend DoomFrontend
var dg_speed_ratio float64 = 1.0 // ratio of real time we're going to run at. We adjust this to make testing easier.
var dg_exiting bool
var start_time time.Time

type boolean = uint32

const uintptr_negative_one = ^uintptr(0)

func alloc(size int) uintptr {
	data := make([]byte, size)
	return uintptr(unsafe.Pointer(&data[0]))
}

// Horrible memory allocation hack to avoid Go GC
// Once we're done with libc, this should go
var dg_alloced = make(map[uintptr][]byte)

func xmalloc(n uint64) uintptr {
	data := make([]byte, n)
	res := uintptr(unsafe.Pointer(&data[0]))
	dg_alloced[res] = data
	return res
}

// LIBC functions
func xabs(j int32) int32 {
	if j < 0 {
		return -j
	}
	return j
}

func xstrlen(nptr uintptr) uint64 {
	if nptr == 0 {
		return 0
	}
	var r uint64
	for ; *(*int8)(unsafe.Pointer(nptr)) != 0; nptr++ {
		r++
	}
	return r
}

func xstrcmp(s1, s2 uintptr) int32 {
	for {
		ch1 := *(*byte)(unsafe.Pointer(s1))
		s1++
		ch2 := *(*byte)(unsafe.Pointer(s2))
		s2++
		if ch1 != ch2 || ch1 == 0 || ch2 == 0 {
			return int32(ch1) - int32(ch2)
		}
	}
}

func xstrncmp(s1, s2 uintptr, n uint64) int32 {
	var ch1, ch2 byte
	for ; n != 0; n-- {
		ch1 = *(*byte)(unsafe.Pointer(s1))
		s1++
		ch2 = *(*byte)(unsafe.Pointer(s2))
		s2++
		if ch1 != ch2 {
			return int32(ch1) - int32(ch2)
		}

		if ch1 == 0 {
			return 0
		}
	}
	return 0
}

func xstrncpy(dest, src uintptr, n uint64) (r uintptr) {
	r = dest
	for c := *(*int8)(unsafe.Pointer(src)); c != 0 && n > 0; n-- {
		*(*int8)(unsafe.Pointer(dest)) = c
		dest++
		src++
		c = *(*int8)(unsafe.Pointer(src))
	}
	for ; uintptr(n) > 0; n-- {
		*(*int8)(unsafe.Pointer(dest)) = 0
		dest++
	}
	return r
}

func xstrncasecmp(s1, s2 uintptr, n uint64) int32 {
	for n > 0 {
		ch1 := *(*byte)(unsafe.Pointer(s1))
		if ch1 >= 'a' && ch1 <= 'z' {
			ch1 = ch1 - ('a' - 'A')
		}
		s1++
		ch2 := *(*byte)(unsafe.Pointer(s2))
		if ch2 >= 'a' && ch2 <= 'z' {
			ch2 = ch2 - ('a' - 'A')
		}
		s2++
		if ch1 != ch2 || ch1 == 0 || ch2 == 0 {
			r := int32(ch1) - int32(ch2)
			return r
		}
		n--
	}
	return 0
}

func xstrcasecmp(s1, s2 uintptr) int32 {
	return xstrncasecmp(s1, s2, 0xffff_ffff_ffff_ffff) // max uint64
}

func xtoupper(c int32) int32 {
	if c >= 'a' && c <= 'z' {
		return c - ('a' - 'A')
	}

	return c
}

func xmemset(dest uintptr, c uint8, n uint64) {
	if n != 0 {
		destSlice := unsafe.Slice((*byte)(unsafe.Pointer(dest)), n)
		for i := range n {
			destSlice[i] = byte(c)
		}
	}
}

func xmemcpy(dest, src uintptr, n uint64) (r uintptr) {
	if n != 0 {
		srcSlice := unsafe.Slice((*byte)(unsafe.Pointer(src)), n)
		destSlice := unsafe.Slice((*byte)(unsafe.Pointer(dest)), n)
		copy(destSlice, srcSlice)
	}
	return dest
}

func boolint32(b bool) int32 {
	if b {
		return 1
	}
	return 0
}

func booluint32(b bool) uint32 {
	if b {
		return 1
	}
	return 0
}

func gostring_bytes(s []byte) string {
	if len(s) == 0 {
		return ""
	}
	var end int
	for ; end < len(s) && s[end] != 0; end++ {
	}
	return string(s[:end])
}

func gostring(s uintptr) string {
	if s == 0 {
		return ""
	}

	p := s
	for *(*byte)(unsafe.Pointer(p)) != 0 {
		p++
	}
	return string(unsafe.Slice((*byte)(unsafe.Pointer(s)), p-s))
}

func gostring_n(s uintptr, n int) string {
	if s == 0 || n <= 0 {
		return ""
	}
	p := s
	for i := 0; i < n && *(*byte)(unsafe.Pointer(p)) != 0; i++ {
		p++
	}
	return string(unsafe.Slice((*byte)(unsafe.Pointer(s)), p-s))
}

func bytestring(s string) []byte {
	if len(s) == 0 {
		return []byte{0}
	}
	data := make([]byte, len(s)+1)
	copy(data, s)
	data[len(s)] = 0 // null-terminate
	return data
}

const AM_NUMMARKPOINTS = 10
const ANGLETOFINESHIFT = 19
const BACKUPTICS = 128
const BASETHRESHOLD = 100
const BLACK = 0
const BUTTONTIME = 35
const DOOM_191_VERSION = 111
const FASTDARK = 15
const FINEANGLES = 8192
const FRACBITS = 16
const FRACUNIT = 1 << FRACBITS
const F_PANINC = 4
const GLOWSPEED = 8
const GRAYSRANGE = 16
const GREENRANGE = 16
const INT_MAX1 = 2147483647
const ITEMQUESIZE = 128
const KEY_ENTER = 13
const KEY_ESCAPE = 27
const KEY_TAB = 9
const LIGHTLEVELS = 16
const LIGHTSCALESHIFT = 12
const LIGHTSEGSHIFT = 4
const LIGHTZSHIFT = 20
const MAPBLOCKUNITS = 128
const MAXBUTTONS = 16
const MAXCEILINGS = 30
const MAXDRAWSEGS = 256
const MAXHEALTH = 100
const MAXINTERCEPTS_ORIGINAL = 128
const MAXLIGHTSCALE = 48
const MAXLIGHTZ = 128
const MAXPLATS = 30
const MAXPLAYERS = 4
const MAXSPECIALCROSS_ORIGINAL = 8
const MAXSWITCHES = 50
const MAX_MOUSE_BUTTONS = 8
const ML_BLOCKING = 1
const ML_BLOCKMONSTERS = 2
const ML_DONTDRAW = 128
const ML_DONTPEGBOTTOM = 16
const ML_DONTPEGTOP = 8
const ML_MAPPED = 256
const ML_SECRET = 32
const ML_SOUNDBLOCK = 64
const ML_TWOSIDED = 4
const MTF_AMBUSH = 8
const NET_MAXPLAYERS = 8
const NUMCOLORMAPS = 32
const NUM_QUITMESSAGES = 8
const PLATWAIT = 3
const PT_ADDLINES = 1
const PT_ADDTHINGS = 2
const PT_EARLYOUT = 4
const REDRANGE = 16
const SCREENHEIGHT = 200
const SCREENHEIGHT_4_3 = 240
const SCREENWIDTH = 320
const SCREENWIDTH_4_3 = 256
const SIL_BOTH = 3
const SIL_BOTTOM = 1
const SIL_TOP = 2
const SLOPEBITS = 11
const SLOPERANGE = 2048
const SLOWDARK = 35
const STROBEBRIGHT = 5
const ST_HEIGHT = 32
const TICRATE = 35
const VDOORWAIT = 150

type sha1_digest_t = [20]uint8

const PU_STATIC = 1
const PU_FREE = 4
const PU_LEVEL = 5
const PU_LEVSPEC = 6
const PU_PURGELEVEL = 7
const PU_CACHE = 8

type GameMission_t int32

const doom GameMission_t = 0
const doom2 GameMission_t = 1
const pack_tnt GameMission_t = 2
const pack_plut GameMission_t = 3
const pack_chex GameMission_t = 4
const pack_hacx GameMission_t = 5
const heretic GameMission_t = 6
const hexen GameMission_t = 7
const strife GameMission_t = 8
const none GameMission_t = 9

type GameMode_t int32

const shareware GameMode_t = 0
const registered GameMode_t = 1
const commercial GameMode_t = 2
const retail GameMode_t = 3
const indetermined GameMode_t = 4

type GameVersion_t int32

const exe_doom_1_2 GameVersion_t = 0
const exe_doom_1_666 GameVersion_t = 1
const exe_doom_1_7 GameVersion_t = 2
const exe_doom_1_8 GameVersion_t = 3
const exe_doom_1_9 GameVersion_t = 4
const exe_hacx GameVersion_t = 5
const exe_ultimate GameVersion_t = 6
const exe_final GameVersion_t = 7
const exe_final2 GameVersion_t = 8
const exe_chex GameVersion_t = 9

type skill_t int32

const sk_baby skill_t = 0
const sk_easy skill_t = 1
const sk_medium skill_t = 2
const sk_nightmare skill_t = 4

type gamestate_t int32

const GS_LEVEL gamestate_t = 0
const GS_INTERMISSION gamestate_t = 1
const GS_FINALE gamestate_t = 2
const GS_DEMOSCREEN gamestate_t = 3

type gameaction_t int32

const ga_nothing = 0
const ga_loadlevel = 1
const ga_newgame = 2
const ga_loadgame = 3
const ga_savegame = 4
const ga_playdemo = 5
const ga_completed = 6
const ga_victory = 7
const ga_worlddone = 8
const ga_screenshot = 9

type card_t int32

const it_bluecard = 0
const it_yellowcard = 1
const it_redcard = 2
const it_blueskull = 3
const it_yellowskull = 4
const it_redskull = 5
const NUMCARDS = 6

type weapontype_t int32

const wp_fist = 0
const wp_pistol = 1
const wp_shotgun = 2
const wp_chaingun = 3
const wp_missile = 4
const wp_plasma = 5
const wp_bfg = 6
const wp_chainsaw = 7
const wp_supershotgun = 8
const NUMWEAPONS = 9
const wp_nochange = 10

type ammotype_t int32

const am_clip = 0
const am_shell = 1
const am_cell = 2
const am_misl = 3
const NUMAMMO = 4
const am_noammo = 5

const pw_invulnerability = 0
const pw_strength = 1
const pw_invisibility = 2
const pw_ironfeet = 3
const pw_allmap = 4
const pw_infrared = 5
const NUMPOWERS = 6

const INVULNTICS = 1050
const INVISTICS = 2100
const INFRATICS = 4200
const IRONTICS = 2100

type evtype_t = int32

const ev_keydown = 0
const ev_keyup = 1
const ev_mouse = 2
const ev_joystick = 3
const ev_quit = 4

type event_t struct {
	Ftype1 evtype_t
	Fdata1 int32
	Fdata2 int32
	Fdata3 int32
	Fdata4 int32
}

const BT_ATTACK = 1
const BT_USE = 2
const BT_SPECIAL = 128
const BT_SPECIALMASK = 3
const BT_CHANGE = 4
const BT_WEAPONMASK = 56
const BT_WEAPONSHIFT = 3
const BTS_PAUSE = 1
const BTS_SAVEGAME = 2
const BTS_SAVEMASK = 28
const BTS_SAVESHIFT = 2

type lumpType interface {
	*patch_t
}

type cheatseq_t struct {
	Fsequence         [25]int8
	Fsequence_len     uint64
	Fparameter_chars  int32
	Fchars_read       uint64
	Fparam_chars_read int32
	Fparameter_buf    [5]byte
}

type fixed_t = int32

func float2fixed(f float32) fixed_t {
	return fixed_t(f * float32(FRACUNIT))
}

func float2fixedinv(f float32) fixed_t {
	return fixed_t(float32(FRACUNIT) / f)
}

type angle_t = uint32

type actionf_v = uintptr

type actionf_p1 = uintptr

type actionf_p2 = uintptr

type actionf_t struct {
	Facv actionf_v
}

type thinker_t struct {
	Fprev     *thinker_t
	Fnext     *thinker_t
	Ffunction actionf_t
}

const ML_THINGS = 1
const ML_LINEDEFS = 2
const ML_SIDEDEFS = 3
const ML_VERTEXES = 4
const ML_SEGS = 5
const ML_SSECTORS = 6
const ML_NODES = 7
const ML_SECTORS = 8
const ML_REJECT = 9
const ML_BLOCKMAP = 10

type mapvertex_t struct {
	Fx int16
	Fy int16
}

type mapsidedef_t struct {
	Ftextureoffset int16
	Frowoffset     int16
	Ftoptexture    [8]int8
	Fbottomtexture [8]int8
	Fmidtexture    [8]int8
	Fsector        int16
}

type maplinedef_t struct {
	Fv1      int16
	Fv2      int16
	Fflags   int16
	Fspecial int16
	Ftag     int16
	Fsidenum [2]int16
}

type mapsector_t struct {
	Ffloorheight   int16
	Fceilingheight int16
	Ffloorpic      [8]int8
	Fceilingpic    [8]int8
	Flightlevel    int16
	Fspecial       int16
	Ftag           int16
}

type mapsubsector_t struct {
	Fnumsegs  int16
	Ffirstseg int16
}

type mapseg_t struct {
	Fv1      int16
	Fv2      int16
	Fangle   int16
	Flinedef int16
	Fside    int16
	Foffset  int16
}

type mapnode_t struct {
	Fx        int16
	Fy        int16
	Fdx       int16
	Fdy       int16
	Fbbox     [2][4]int16
	Fchildren [2]uint16
}

type mapthing_t struct {
	Fx       int16
	Fy       int16
	Fangle   int16
	Ftype1   int16
	Foptions int16
}

type spritenum_t = int32

const SPR_SHTG = 1
const SPR_PUNG = 2
const SPR_PISG = 3
const SPR_PISF = 4
const SPR_SHTF = 5
const SPR_SHT2 = 6
const SPR_CHGG = 7
const SPR_CHGF = 8
const SPR_MISG = 9
const SPR_MISF = 10
const SPR_SAWG = 11
const SPR_PLSG = 12
const SPR_PLSF = 13
const SPR_BFGG = 14
const SPR_BFGF = 15
const SPR_BLUD = 16
const SPR_PUFF = 17
const SPR_BAL1 = 18
const SPR_BAL2 = 19
const SPR_PLSS = 20
const SPR_PLSE = 21
const SPR_MISL = 22
const SPR_BFS1 = 23
const SPR_BFE1 = 24
const SPR_BFE2 = 25
const SPR_TFOG = 26
const SPR_IFOG = 27
const SPR_PLAY = 28
const SPR_POSS = 29
const SPR_SPOS = 30
const SPR_VILE = 31
const SPR_FIRE = 32
const SPR_FATB = 33
const SPR_FBXP = 34
const SPR_SKEL = 35
const SPR_MANF = 36
const SPR_FATT = 37
const SPR_CPOS = 38
const SPR_SARG = 39
const SPR_HEAD = 40
const SPR_BAL7 = 41
const SPR_BOSS = 42
const SPR_BOS2 = 43
const SPR_SKUL = 44
const SPR_SPID = 45
const SPR_BSPI = 46
const SPR_APLS = 47
const SPR_APBX = 48
const SPR_CYBR = 49
const SPR_PAIN = 50
const SPR_SSWV = 51
const SPR_KEEN = 52
const SPR_BBRN = 53
const SPR_BOSF = 54
const SPR_ARM1 = 55
const SPR_ARM2 = 56
const SPR_BAR1 = 57
const SPR_BEXP = 58
const SPR_FCAN = 59
const SPR_BON1 = 60
const SPR_BON2 = 61
const SPR_BKEY = 62
const SPR_RKEY = 63
const SPR_YKEY = 64
const SPR_BSKU = 65
const SPR_RSKU = 66
const SPR_YSKU = 67
const SPR_STIM = 68
const SPR_MEDI = 69
const SPR_SOUL = 70
const SPR_PINV = 71
const SPR_PSTR = 72
const SPR_PINS = 73
const SPR_MEGA = 74
const SPR_SUIT = 75
const SPR_PMAP = 76
const SPR_PVIS = 77
const SPR_CLIP = 78
const SPR_AMMO = 79
const SPR_ROCK = 80
const SPR_BROK = 81
const SPR_CELL = 82
const SPR_CELP = 83
const SPR_SHEL = 84
const SPR_SBOX = 85
const SPR_BPAK = 86
const SPR_BFUG = 87
const SPR_MGUN = 88
const SPR_CSAW = 89
const SPR_LAUN = 90
const SPR_PLAS = 91
const SPR_SHOT = 92
const SPR_SGN2 = 93
const SPR_COLU = 94
const SPR_SMT2 = 95
const SPR_GOR1 = 96
const SPR_POL2 = 97
const SPR_POL5 = 98
const SPR_POL4 = 99
const SPR_POL3 = 100
const SPR_POL1 = 101
const SPR_POL6 = 102
const SPR_GOR2 = 103
const SPR_GOR3 = 104
const SPR_GOR4 = 105
const SPR_GOR5 = 106
const SPR_SMIT = 107
const SPR_COL1 = 108
const SPR_COL2 = 109
const SPR_COL3 = 110
const SPR_COL4 = 111
const SPR_CAND = 112
const SPR_CBRA = 113
const SPR_COL6 = 114
const SPR_TRE1 = 115
const SPR_TRE2 = 116
const SPR_ELEC = 117
const SPR_CEYE = 118
const SPR_FSKU = 119
const SPR_COL5 = 120
const SPR_TBLU = 121
const SPR_TGRN = 122
const SPR_TRED = 123
const SPR_SMBT = 124
const SPR_SMGT = 125
const SPR_SMRT = 126
const SPR_HDB1 = 127
const SPR_HDB2 = 128
const SPR_HDB3 = 129
const SPR_HDB4 = 130
const SPR_HDB5 = 131
const SPR_HDB6 = 132
const SPR_POB1 = 133
const SPR_POB2 = 134
const SPR_BRS1 = 135
const SPR_TLMP = 136
const SPR_TLP2 = 137

type statenum_t = int32

const S_NULL = 0
const S_LIGHTDONE = 1
const S_PUNCH = 2
const S_PUNCHDOWN = 3
const S_PUNCHUP = 4
const S_PUNCH1 = 5
const S_PUNCH2 = 6
const S_PUNCH3 = 7
const S_PUNCH4 = 8
const S_PUNCH5 = 9
const S_PISTOL = 10
const S_PISTOLDOWN = 11
const S_PISTOLUP = 12
const S_PISTOL1 = 13
const S_PISTOL2 = 14
const S_PISTOL3 = 15
const S_PISTOL4 = 16
const S_PISTOLFLASH = 17
const S_SGUN = 18
const S_SGUNDOWN = 19
const S_SGUNUP = 20
const S_SGUN1 = 21
const S_SGUN2 = 22
const S_SGUN3 = 23
const S_SGUN4 = 24
const S_SGUN5 = 25
const S_SGUN6 = 26
const S_SGUN7 = 27
const S_SGUN8 = 28
const S_SGUN9 = 29
const S_SGUNFLASH1 = 30
const S_SGUNFLASH2 = 31
const S_DSGUN = 32
const S_DSGUNDOWN = 33
const S_DSGUNUP = 34
const S_DSGUN1 = 35
const S_DSGUN2 = 36
const S_DSGUN3 = 37
const S_DSGUN4 = 38
const S_DSGUN5 = 39
const S_DSGUN6 = 40
const S_DSGUN7 = 41
const S_DSGUN8 = 42
const S_DSGUN9 = 43
const S_DSGUN10 = 44
const S_DSNR2 = 46
const S_DSGUNFLASH1 = 47
const S_DSGUNFLASH2 = 48
const S_CHAIN = 49
const S_CHAINDOWN = 50
const S_CHAINUP = 51
const S_CHAIN1 = 52
const S_CHAIN2 = 53
const S_CHAIN3 = 54
const S_CHAINFLASH1 = 55
const S_MISSILE = 57
const S_MISSILEDOWN = 58
const S_MISSILEUP = 59
const S_MISSILE1 = 60
const S_MISSILE2 = 61
const S_MISSILE3 = 62
const S_MISSILEFLASH1 = 63
const S_MISSILEFLASH2 = 64
const S_MISSILEFLASH3 = 65
const S_MISSILEFLASH4 = 66
const S_SAW = 67
const S_SAWB = 68
const S_SAWDOWN = 69
const S_SAWUP = 70
const S_SAW1 = 71
const S_SAW2 = 72
const S_SAW3 = 73
const S_PLASMA = 74
const S_PLASMADOWN = 75
const S_PLASMAUP = 76
const S_PLASMA1 = 77
const S_PLASMA2 = 78
const S_PLASMAFLASH1 = 79
const S_BFG = 81
const S_BFGDOWN = 82
const S_BFGUP = 83
const S_BFG1 = 84
const S_BFG2 = 85
const S_BFG3 = 86
const S_BFG4 = 87
const S_BFGFLASH1 = 88
const S_BFGFLASH2 = 89
const S_BLOOD1 = 90
const S_BLOOD2 = 91
const S_BLOOD3 = 92
const S_PUFF1 = 93
const S_PUFF2 = 94
const S_PUFF3 = 95
const S_PUFF4 = 96
const S_TBALL1 = 97
const S_TBALL2 = 98
const S_TBALLX1 = 99
const S_TBALLX2 = 100
const S_TBALLX3 = 101
const S_RBALL1 = 102
const S_RBALL2 = 103
const S_RBALLX1 = 104
const S_RBALLX2 = 105
const S_RBALLX3 = 106
const S_PLASBALL = 107
const S_PLASBALL2 = 108
const S_PLASEXP = 109
const S_PLASEXP2 = 110
const S_PLASEXP3 = 111
const S_PLASEXP4 = 112
const S_PLASEXP5 = 113
const S_ROCKET = 114
const S_BFGSHOT = 115
const S_BFGSHOT2 = 116
const S_BFGLAND = 117
const S_BFGLAND2 = 118
const S_BFGLAND3 = 119
const S_BFGLAND4 = 120
const S_BFGLAND5 = 121
const S_BFGLAND6 = 122
const S_BFGEXP = 123
const S_BFGEXP2 = 124
const S_BFGEXP3 = 125
const S_BFGEXP4 = 126
const S_EXPLODE1 = 127
const S_EXPLODE2 = 128
const S_EXPLODE3 = 129
const S_TFOG = 130
const S_TFOG01 = 131
const S_TFOG02 = 132
const S_TFOG2 = 133
const S_TFOG3 = 134
const S_TFOG4 = 135
const S_TFOG5 = 136
const S_TFOG6 = 137
const S_TFOG7 = 138
const S_TFOG8 = 139
const S_TFOG9 = 140
const S_TFOG10 = 141
const S_IFOG = 142
const S_IFOG01 = 143
const S_IFOG02 = 144
const S_IFOG2 = 145
const S_IFOG3 = 146
const S_IFOG4 = 147
const S_IFOG5 = 148
const S_PLAY = 149
const S_PLAY_RUN1 = 150
const S_PLAY_RUN2 = 151
const S_PLAY_RUN3 = 152
const S_PLAY_RUN4 = 153
const S_PLAY_ATK1 = 154
const S_PLAY_ATK2 = 155
const S_PLAY_PAIN = 156
const S_PLAY_PAIN2 = 157
const S_PLAY_DIE1 = 158
const S_PLAY_DIE2 = 159
const S_PLAY_DIE3 = 160
const S_PLAY_DIE4 = 161
const S_PLAY_DIE5 = 162
const S_PLAY_DIE6 = 163
const S_PLAY_DIE7 = 164
const S_PLAY_XDIE1 = 165
const S_PLAY_XDIE2 = 166
const S_PLAY_XDIE3 = 167
const S_PLAY_XDIE4 = 168
const S_PLAY_XDIE5 = 169
const S_PLAY_XDIE6 = 170
const S_PLAY_XDIE7 = 171
const S_PLAY_XDIE8 = 172
const S_PLAY_XDIE9 = 173
const S_POSS_STND = 174
const S_POSS_STND2 = 175
const S_POSS_RUN1 = 176
const S_POSS_RUN2 = 177
const S_POSS_RUN3 = 178
const S_POSS_RUN4 = 179
const S_POSS_RUN5 = 180
const S_POSS_RUN6 = 181
const S_POSS_RUN7 = 182
const S_POSS_RUN8 = 183
const S_POSS_ATK1 = 184
const S_POSS_ATK2 = 185
const S_POSS_ATK3 = 186
const S_POSS_PAIN = 187
const S_POSS_PAIN2 = 188
const S_POSS_DIE1 = 189
const S_POSS_DIE2 = 190
const S_POSS_DIE3 = 191
const S_POSS_DIE4 = 192
const S_POSS_DIE5 = 193
const S_POSS_XDIE1 = 194
const S_POSS_XDIE2 = 195
const S_POSS_XDIE3 = 196
const S_POSS_XDIE4 = 197
const S_POSS_XDIE5 = 198
const S_POSS_XDIE6 = 199
const S_POSS_XDIE7 = 200
const S_POSS_XDIE8 = 201
const S_POSS_XDIE9 = 202
const S_POSS_RAISE1 = 203
const S_POSS_RAISE2 = 204
const S_POSS_RAISE3 = 205
const S_POSS_RAISE4 = 206
const S_SPOS_STND = 207
const S_SPOS_STND2 = 208
const S_SPOS_RUN1 = 209
const S_SPOS_RUN2 = 210
const S_SPOS_RUN3 = 211
const S_SPOS_RUN4 = 212
const S_SPOS_RUN5 = 213
const S_SPOS_RUN6 = 214
const S_SPOS_RUN7 = 215
const S_SPOS_RUN8 = 216
const S_SPOS_ATK1 = 217
const S_SPOS_ATK2 = 218
const S_SPOS_ATK3 = 219
const S_SPOS_PAIN = 220
const S_SPOS_PAIN2 = 221
const S_SPOS_DIE1 = 222
const S_SPOS_DIE2 = 223
const S_SPOS_DIE3 = 224
const S_SPOS_DIE4 = 225
const S_SPOS_DIE5 = 226
const S_SPOS_XDIE1 = 227
const S_SPOS_XDIE2 = 228
const S_SPOS_XDIE3 = 229
const S_SPOS_XDIE4 = 230
const S_SPOS_XDIE5 = 231
const S_SPOS_XDIE6 = 232
const S_SPOS_XDIE7 = 233
const S_SPOS_XDIE8 = 234
const S_SPOS_XDIE9 = 235
const S_SPOS_RAISE1 = 236
const S_SPOS_RAISE2 = 237
const S_SPOS_RAISE3 = 238
const S_SPOS_RAISE4 = 239
const S_SPOS_RAISE5 = 240
const S_VILE_STND = 241
const S_VILE_STND2 = 242
const S_VILE_RUN1 = 243
const S_VILE_RUN2 = 244
const S_VILE_RUN3 = 245
const S_VILE_RUN4 = 246
const S_VILE_RUN5 = 247
const S_VILE_RUN6 = 248
const S_VILE_RUN7 = 249
const S_VILE_RUN8 = 250
const S_VILE_RUN9 = 251
const S_VILE_RUN10 = 252
const S_VILE_RUN11 = 253
const S_VILE_RUN12 = 254
const S_VILE_ATK1 = 255
const S_VILE_ATK2 = 256
const S_VILE_ATK3 = 257
const S_VILE_ATK4 = 258
const S_VILE_ATK5 = 259
const S_VILE_ATK6 = 260
const S_VILE_ATK7 = 261
const S_VILE_ATK8 = 262
const S_VILE_ATK9 = 263
const S_VILE_ATK10 = 264
const S_VILE_ATK11 = 265
const S_VILE_HEAL1 = 266
const S_VILE_HEAL2 = 267
const S_VILE_HEAL3 = 268
const S_VILE_PAIN = 269
const S_VILE_PAIN2 = 270
const S_VILE_DIE1 = 271
const S_VILE_DIE2 = 272
const S_VILE_DIE3 = 273
const S_VILE_DIE4 = 274
const S_VILE_DIE5 = 275
const S_VILE_DIE6 = 276
const S_VILE_DIE7 = 277
const S_VILE_DIE8 = 278
const S_VILE_DIE9 = 279
const S_VILE_DIE10 = 280
const S_FIRE1 = 281
const S_FIRE2 = 282
const S_FIRE3 = 283
const S_FIRE4 = 284
const S_FIRE5 = 285
const S_FIRE6 = 286
const S_FIRE7 = 287
const S_FIRE8 = 288
const S_FIRE9 = 289
const S_FIRE10 = 290
const S_FIRE11 = 291
const S_FIRE12 = 292
const S_FIRE13 = 293
const S_FIRE14 = 294
const S_FIRE15 = 295
const S_FIRE16 = 296
const S_FIRE17 = 297
const S_FIRE18 = 298
const S_FIRE19 = 299
const S_FIRE20 = 300
const S_FIRE21 = 301
const S_FIRE22 = 302
const S_FIRE23 = 303
const S_FIRE24 = 304
const S_FIRE25 = 305
const S_FIRE26 = 306
const S_FIRE27 = 307
const S_FIRE28 = 308
const S_FIRE29 = 309
const S_FIRE30 = 310
const S_SMOKE1 = 311
const S_SMOKE2 = 312
const S_SMOKE3 = 313
const S_SMOKE4 = 314
const S_SMOKE5 = 315
const S_TRACER = 316
const S_TRACER2 = 317
const S_TRACEEXP1 = 318
const S_TRACEEXP2 = 319
const S_TRACEEXP3 = 320
const S_SKEL_STND = 321
const S_SKEL_STND2 = 322
const S_SKEL_RUN1 = 323
const S_SKEL_RUN2 = 324
const S_SKEL_RUN3 = 325
const S_SKEL_RUN4 = 326
const S_SKEL_RUN5 = 327
const S_SKEL_RUN6 = 328
const S_SKEL_RUN7 = 329
const S_SKEL_RUN8 = 330
const S_SKEL_RUN9 = 331
const S_SKEL_RUN10 = 332
const S_SKEL_RUN11 = 333
const S_SKEL_RUN12 = 334
const S_SKEL_FIST1 = 335
const S_SKEL_FIST2 = 336
const S_SKEL_FIST3 = 337
const S_SKEL_FIST4 = 338
const S_SKEL_MISS1 = 339
const S_SKEL_MISS2 = 340
const S_SKEL_MISS3 = 341
const S_SKEL_MISS4 = 342
const S_SKEL_PAIN = 343
const S_SKEL_PAIN2 = 344
const S_SKEL_DIE1 = 345
const S_SKEL_DIE2 = 346
const S_SKEL_DIE3 = 347
const S_SKEL_DIE4 = 348
const S_SKEL_DIE5 = 349
const S_SKEL_DIE6 = 350
const S_SKEL_RAISE1 = 351
const S_SKEL_RAISE2 = 352
const S_SKEL_RAISE3 = 353
const S_SKEL_RAISE4 = 354
const S_SKEL_RAISE5 = 355
const S_SKEL_RAISE6 = 356
const S_FATSHOT1 = 357
const S_FATSHOT2 = 358
const S_FATSHOTX1 = 359
const S_FATSHOTX2 = 360
const S_FATSHOTX3 = 361
const S_FATT_STND = 362
const S_FATT_STND2 = 363
const S_FATT_RUN1 = 364
const S_FATT_RUN2 = 365
const S_FATT_RUN3 = 366
const S_FATT_RUN4 = 367
const S_FATT_RUN5 = 368
const S_FATT_RUN6 = 369
const S_FATT_RUN7 = 370
const S_FATT_RUN8 = 371
const S_FATT_RUN9 = 372
const S_FATT_RUN10 = 373
const S_FATT_RUN11 = 374
const S_FATT_RUN12 = 375
const S_FATT_ATK1 = 376
const S_FATT_ATK2 = 377
const S_FATT_ATK3 = 378
const S_FATT_ATK4 = 379
const S_FATT_ATK5 = 380
const S_FATT_ATK6 = 381
const S_FATT_ATK7 = 382
const S_FATT_ATK8 = 383
const S_FATT_ATK9 = 384
const S_FATT_ATK10 = 385
const S_FATT_PAIN = 386
const S_FATT_PAIN2 = 387
const S_FATT_DIE1 = 388
const S_FATT_DIE2 = 389
const S_FATT_DIE3 = 390
const S_FATT_DIE4 = 391
const S_FATT_DIE5 = 392
const S_FATT_DIE6 = 393
const S_FATT_DIE7 = 394
const S_FATT_DIE8 = 395
const S_FATT_DIE9 = 396
const S_FATT_DIE10 = 397
const S_FATT_RAISE1 = 398
const S_FATT_RAISE2 = 399
const S_FATT_RAISE3 = 400
const S_FATT_RAISE4 = 401
const S_FATT_RAISE5 = 402
const S_FATT_RAISE6 = 403
const S_FATT_RAISE7 = 404
const S_FATT_RAISE8 = 405
const S_CPOS_STND = 406
const S_CPOS_STND2 = 407
const S_CPOS_RUN1 = 408
const S_CPOS_RUN2 = 409
const S_CPOS_RUN3 = 410
const S_CPOS_RUN4 = 411
const S_CPOS_RUN5 = 412
const S_CPOS_RUN6 = 413
const S_CPOS_RUN7 = 414
const S_CPOS_RUN8 = 415
const S_CPOS_ATK1 = 416
const S_CPOS_ATK2 = 417
const S_CPOS_ATK3 = 418
const S_CPOS_ATK4 = 419
const S_CPOS_PAIN = 420
const S_CPOS_PAIN2 = 421
const S_CPOS_DIE1 = 422
const S_CPOS_DIE2 = 423
const S_CPOS_DIE3 = 424
const S_CPOS_DIE4 = 425
const S_CPOS_DIE5 = 426
const S_CPOS_DIE6 = 427
const S_CPOS_DIE7 = 428
const S_CPOS_XDIE1 = 429
const S_CPOS_XDIE2 = 430
const S_CPOS_XDIE3 = 431
const S_CPOS_XDIE4 = 432
const S_CPOS_XDIE5 = 433
const S_CPOS_XDIE6 = 434
const S_CPOS_RAISE1 = 435
const S_CPOS_RAISE2 = 436
const S_CPOS_RAISE3 = 437
const S_CPOS_RAISE4 = 438
const S_CPOS_RAISE5 = 439
const S_CPOS_RAISE6 = 440
const S_CPOS_RAISE7 = 441
const S_TROO_STND = 442
const S_TROO_STND2 = 443
const S_TROO_RUN1 = 444
const S_TROO_RUN2 = 445
const S_TROO_RUN3 = 446
const S_TROO_RUN4 = 447
const S_TROO_RUN5 = 448
const S_TROO_RUN6 = 449
const S_TROO_RUN7 = 450
const S_TROO_RUN8 = 451
const S_TROO_ATK1 = 452
const S_TROO_ATK2 = 453
const S_TROO_ATK3 = 454
const S_TROO_PAIN = 455
const S_TROO_PAIN2 = 456
const S_TROO_DIE1 = 457
const S_TROO_DIE2 = 458
const S_TROO_DIE3 = 459
const S_TROO_DIE4 = 460
const S_TROO_DIE5 = 461
const S_TROO_XDIE1 = 462
const S_TROO_XDIE2 = 463
const S_TROO_XDIE3 = 464
const S_TROO_XDIE4 = 465
const S_TROO_XDIE5 = 466
const S_TROO_XDIE6 = 467
const S_TROO_XDIE7 = 468
const S_TROO_XDIE8 = 469
const S_TROO_RAISE1 = 470
const S_TROO_RAISE2 = 471
const S_TROO_RAISE3 = 472
const S_TROO_RAISE4 = 473
const S_TROO_RAISE5 = 474
const S_SARG_STND = 475
const S_SARG_STND2 = 476
const S_SARG_RUN1 = 477
const S_SARG_RUN2 = 478
const S_SARG_RUN3 = 479
const S_SARG_RUN4 = 480
const S_SARG_RUN5 = 481
const S_SARG_RUN6 = 482
const S_SARG_RUN7 = 483
const S_SARG_RUN8 = 484
const S_SARG_ATK1 = 485
const S_SARG_ATK2 = 486
const S_SARG_ATK3 = 487
const S_SARG_PAIN = 488
const S_SARG_PAIN2 = 489
const S_SARG_DIE1 = 490
const S_SARG_DIE2 = 491
const S_SARG_DIE3 = 492
const S_SARG_DIE4 = 493
const S_SARG_DIE5 = 494
const S_SARG_DIE6 = 495
const S_SARG_RAISE1 = 496
const S_SARG_RAISE2 = 497
const S_SARG_RAISE3 = 498
const S_SARG_RAISE4 = 499
const S_SARG_RAISE5 = 500
const S_SARG_RAISE6 = 501
const S_HEAD_STND = 502
const S_HEAD_RUN1 = 503
const S_HEAD_ATK1 = 504
const S_HEAD_ATK2 = 505
const S_HEAD_ATK3 = 506
const S_HEAD_PAIN = 507
const S_HEAD_PAIN2 = 508
const S_HEAD_PAIN3 = 509
const S_HEAD_DIE1 = 510
const S_HEAD_DIE2 = 511
const S_HEAD_DIE3 = 512
const S_HEAD_DIE4 = 513
const S_HEAD_DIE5 = 514
const S_HEAD_DIE6 = 515
const S_HEAD_RAISE1 = 516
const S_HEAD_RAISE2 = 517
const S_HEAD_RAISE3 = 518
const S_HEAD_RAISE4 = 519
const S_HEAD_RAISE5 = 520
const S_HEAD_RAISE6 = 521
const S_BRBALL1 = 522
const S_BRBALL2 = 523
const S_BRBALLX1 = 524
const S_BRBALLX2 = 525
const S_BRBALLX3 = 526
const S_BOSS_STND = 527
const S_BOSS_STND2 = 528
const S_BOSS_RUN1 = 529
const S_BOSS_RUN2 = 530
const S_BOSS_RUN3 = 531
const S_BOSS_RUN4 = 532
const S_BOSS_RUN5 = 533
const S_BOSS_RUN6 = 534
const S_BOSS_RUN7 = 535
const S_BOSS_RUN8 = 536
const S_BOSS_ATK1 = 537
const S_BOSS_ATK2 = 538
const S_BOSS_ATK3 = 539
const S_BOSS_PAIN = 540
const S_BOSS_PAIN2 = 541
const S_BOSS_DIE1 = 542
const S_BOSS_DIE2 = 543
const S_BOSS_DIE3 = 544
const S_BOSS_DIE4 = 545
const S_BOSS_DIE5 = 546
const S_BOSS_DIE6 = 547
const S_BOSS_DIE7 = 548
const S_BOSS_RAISE1 = 549
const S_BOSS_RAISE2 = 550
const S_BOSS_RAISE3 = 551
const S_BOSS_RAISE4 = 552
const S_BOSS_RAISE5 = 553
const S_BOSS_RAISE6 = 554
const S_BOSS_RAISE7 = 555
const S_BOS2_STND = 556
const S_BOS2_STND2 = 557
const S_BOS2_RUN1 = 558
const S_BOS2_RUN2 = 559
const S_BOS2_RUN3 = 560
const S_BOS2_RUN4 = 561
const S_BOS2_RUN5 = 562
const S_BOS2_RUN6 = 563
const S_BOS2_RUN7 = 564
const S_BOS2_RUN8 = 565
const S_BOS2_ATK1 = 566
const S_BOS2_ATK2 = 567
const S_BOS2_ATK3 = 568
const S_BOS2_PAIN = 569
const S_BOS2_PAIN2 = 570
const S_BOS2_DIE1 = 571
const S_BOS2_DIE2 = 572
const S_BOS2_DIE3 = 573
const S_BOS2_DIE4 = 574
const S_BOS2_DIE5 = 575
const S_BOS2_DIE6 = 576
const S_BOS2_DIE7 = 577
const S_BOS2_RAISE1 = 578
const S_BOS2_RAISE2 = 579
const S_BOS2_RAISE3 = 580
const S_BOS2_RAISE4 = 581
const S_BOS2_RAISE5 = 582
const S_BOS2_RAISE6 = 583
const S_BOS2_RAISE7 = 584
const S_SKULL_STND = 585
const S_SKULL_STND2 = 586
const S_SKULL_RUN1 = 587
const S_SKULL_RUN2 = 588
const S_SKULL_ATK1 = 589
const S_SKULL_ATK2 = 590
const S_SKULL_ATK3 = 591
const S_SKULL_ATK4 = 592
const S_SKULL_PAIN = 593
const S_SKULL_PAIN2 = 594
const S_SKULL_DIE1 = 595
const S_SKULL_DIE2 = 596
const S_SKULL_DIE3 = 597
const S_SKULL_DIE4 = 598
const S_SKULL_DIE5 = 599
const S_SKULL_DIE6 = 600
const S_SPID_STND = 601
const S_SPID_STND2 = 602
const S_SPID_RUN1 = 603
const S_SPID_RUN2 = 604
const S_SPID_RUN3 = 605
const S_SPID_RUN4 = 606
const S_SPID_RUN5 = 607
const S_SPID_RUN6 = 608
const S_SPID_RUN7 = 609
const S_SPID_RUN8 = 610
const S_SPID_RUN9 = 611
const S_SPID_RUN10 = 612
const S_SPID_RUN11 = 613
const S_SPID_RUN12 = 614
const S_SPID_ATK1 = 615
const S_SPID_ATK2 = 616
const S_SPID_ATK3 = 617
const S_SPID_ATK4 = 618
const S_SPID_PAIN = 619
const S_SPID_PAIN2 = 620
const S_SPID_DIE1 = 621
const S_SPID_DIE2 = 622
const S_SPID_DIE3 = 623
const S_SPID_DIE4 = 624
const S_SPID_DIE5 = 625
const S_SPID_DIE6 = 626
const S_SPID_DIE7 = 627
const S_SPID_DIE8 = 628
const S_SPID_DIE9 = 629
const S_SPID_DIE10 = 630
const S_SPID_DIE11 = 631
const S_BSPI_STND = 632
const S_BSPI_STND2 = 633
const S_BSPI_SIGHT = 634
const S_BSPI_RUN1 = 635
const S_BSPI_RUN2 = 636
const S_BSPI_RUN3 = 637
const S_BSPI_RUN4 = 638
const S_BSPI_RUN5 = 639
const S_BSPI_RUN6 = 640
const S_BSPI_RUN7 = 641
const S_BSPI_RUN8 = 642
const S_BSPI_RUN9 = 643
const S_BSPI_RUN10 = 644
const S_BSPI_RUN11 = 645
const S_BSPI_RUN12 = 646
const S_BSPI_ATK1 = 647
const S_BSPI_ATK2 = 648
const S_BSPI_ATK3 = 649
const S_BSPI_ATK4 = 650
const S_BSPI_PAIN = 651
const S_BSPI_PAIN2 = 652
const S_BSPI_DIE1 = 653
const S_BSPI_DIE2 = 654
const S_BSPI_DIE3 = 655
const S_BSPI_DIE4 = 656
const S_BSPI_DIE5 = 657
const S_BSPI_DIE6 = 658
const S_BSPI_DIE7 = 659
const S_BSPI_RAISE1 = 660
const S_BSPI_RAISE2 = 661
const S_BSPI_RAISE3 = 662
const S_BSPI_RAISE4 = 663
const S_BSPI_RAISE5 = 664
const S_BSPI_RAISE6 = 665
const S_BSPI_RAISE7 = 666
const S_ARACH_PLAZ = 667
const S_ARACH_PLAZ2 = 668
const S_ARACH_PLEX = 669
const S_ARACH_PLEX2 = 670
const S_ARACH_PLEX3 = 671
const S_ARACH_PLEX4 = 672
const S_ARACH_PLEX5 = 673
const S_CYBER_STND = 674
const S_CYBER_STND2 = 675
const S_CYBER_RUN1 = 676
const S_CYBER_RUN2 = 677
const S_CYBER_RUN3 = 678
const S_CYBER_RUN4 = 679
const S_CYBER_RUN5 = 680
const S_CYBER_RUN6 = 681
const S_CYBER_RUN7 = 682
const S_CYBER_RUN8 = 683
const S_CYBER_ATK1 = 684
const S_CYBER_ATK2 = 685
const S_CYBER_ATK3 = 686
const S_CYBER_ATK4 = 687
const S_CYBER_ATK5 = 688
const S_CYBER_ATK6 = 689
const S_CYBER_PAIN = 690
const S_CYBER_DIE1 = 691
const S_CYBER_DIE2 = 692
const S_CYBER_DIE3 = 693
const S_CYBER_DIE4 = 694
const S_CYBER_DIE5 = 695
const S_CYBER_DIE6 = 696
const S_CYBER_DIE7 = 697
const S_CYBER_DIE8 = 698
const S_CYBER_DIE9 = 699
const S_CYBER_DIE10 = 700
const S_PAIN_STND = 701
const S_PAIN_RUN1 = 702
const S_PAIN_RUN2 = 703
const S_PAIN_RUN3 = 704
const S_PAIN_RUN4 = 705
const S_PAIN_RUN5 = 706
const S_PAIN_RUN6 = 707
const S_PAIN_ATK1 = 708
const S_PAIN_ATK2 = 709
const S_PAIN_ATK3 = 710
const S_PAIN_ATK4 = 711
const S_PAIN_PAIN = 712
const S_PAIN_PAIN2 = 713
const S_PAIN_DIE1 = 714
const S_PAIN_DIE2 = 715
const S_PAIN_DIE3 = 716
const S_PAIN_DIE4 = 717
const S_PAIN_DIE5 = 718
const S_PAIN_DIE6 = 719
const S_PAIN_RAISE1 = 720
const S_PAIN_RAISE2 = 721
const S_PAIN_RAISE3 = 722
const S_PAIN_RAISE4 = 723
const S_PAIN_RAISE5 = 724
const S_PAIN_RAISE6 = 725
const S_SSWV_STND = 726
const S_SSWV_STND2 = 727
const S_SSWV_RUN1 = 728
const S_SSWV_RUN2 = 729
const S_SSWV_RUN3 = 730
const S_SSWV_RUN4 = 731
const S_SSWV_RUN5 = 732
const S_SSWV_RUN6 = 733
const S_SSWV_RUN7 = 734
const S_SSWV_RUN8 = 735
const S_SSWV_ATK1 = 736
const S_SSWV_ATK2 = 737
const S_SSWV_ATK3 = 738
const S_SSWV_ATK4 = 739
const S_SSWV_ATK5 = 740
const S_SSWV_ATK6 = 741
const S_SSWV_PAIN = 742
const S_SSWV_PAIN2 = 743
const S_SSWV_DIE1 = 744
const S_SSWV_DIE2 = 745
const S_SSWV_DIE3 = 746
const S_SSWV_DIE4 = 747
const S_SSWV_DIE5 = 748
const S_SSWV_XDIE1 = 749
const S_SSWV_XDIE2 = 750
const S_SSWV_XDIE3 = 751
const S_SSWV_XDIE4 = 752
const S_SSWV_XDIE5 = 753
const S_SSWV_XDIE6 = 754
const S_SSWV_XDIE7 = 755
const S_SSWV_XDIE8 = 756
const S_SSWV_XDIE9 = 757
const S_SSWV_RAISE1 = 758
const S_SSWV_RAISE2 = 759
const S_SSWV_RAISE3 = 760
const S_SSWV_RAISE4 = 761
const S_SSWV_RAISE5 = 762
const S_KEENSTND = 763
const S_COMMKEEN = 764
const S_COMMKEEN2 = 765
const S_COMMKEEN3 = 766
const S_COMMKEEN4 = 767
const S_COMMKEEN5 = 768
const S_COMMKEEN6 = 769
const S_COMMKEEN7 = 770
const S_COMMKEEN8 = 771
const S_COMMKEEN9 = 772
const S_COMMKEEN10 = 773
const S_COMMKEEN11 = 774
const S_COMMKEEN12 = 775
const S_KEENPAIN = 776
const S_KEENPAIN2 = 777
const S_BRAIN = 778
const S_BRAIN_PAIN = 779
const S_BRAIN_DIE1 = 780
const S_BRAIN_DIE2 = 781
const S_BRAIN_DIE3 = 782
const S_BRAIN_DIE4 = 783
const S_BRAINEYE = 784
const S_BRAINEYESEE = 785
const S_BRAINEYE1 = 786
const S_SPAWN1 = 787
const S_SPAWN2 = 788
const S_SPAWN3 = 789
const S_SPAWN4 = 790
const S_SPAWNFIRE1 = 791
const S_SPAWNFIRE2 = 792
const S_SPAWNFIRE3 = 793
const S_SPAWNFIRE4 = 794
const S_SPAWNFIRE5 = 795
const S_SPAWNFIRE6 = 796
const S_SPAWNFIRE7 = 797
const S_SPAWNFIRE8 = 798
const S_BRAINEXPLODE1 = 799
const S_BRAINEXPLODE2 = 800
const S_BRAINEXPLODE3 = 801
const S_ARM1 = 802
const S_ARM1A = 803
const S_ARM2 = 804
const S_ARM2A = 805
const S_BAR1 = 806
const S_BAR2 = 807
const S_BEXP = 808
const S_BEXP2 = 809
const S_BEXP3 = 810
const S_BEXP4 = 811
const S_BEXP5 = 812
const S_BBAR1 = 813
const S_BBAR2 = 814
const S_BBAR3 = 815
const S_BON1 = 816
const S_BON1A = 817
const S_BON1B = 818
const S_BON1C = 819
const S_BON1D = 820
const S_BON1E = 821
const S_BON2 = 822
const S_BON2A = 823
const S_BON2B = 824
const S_BON2C = 825
const S_BON2D = 826
const S_BON2E = 827
const S_BKEY = 828
const S_BKEY2 = 829
const S_RKEY = 830
const S_RKEY2 = 831
const S_YKEY = 832
const S_YKEY2 = 833
const S_BSKULL = 834
const S_BSKULL2 = 835
const S_RSKULL = 836
const S_RSKULL2 = 837
const S_YSKULL = 838
const S_YSKULL2 = 839
const S_STIM = 840
const S_MEDI = 841
const S_SOUL = 842
const S_SOUL2 = 843
const S_SOUL3 = 844
const S_SOUL4 = 845
const S_SOUL5 = 846
const S_SOUL6 = 847
const S_PINV = 848
const S_PINV2 = 849
const S_PINV3 = 850
const S_PINV4 = 851
const S_PSTR = 852
const S_PINS = 853
const S_PINS2 = 854
const S_PINS3 = 855
const S_PINS4 = 856
const S_MEGA = 857
const S_MEGA2 = 858
const S_MEGA3 = 859
const S_MEGA4 = 860
const S_SUIT = 861
const S_PMAP = 862
const S_PMAP2 = 863
const S_PMAP3 = 864
const S_PMAP4 = 865
const S_PMAP5 = 866
const S_PMAP6 = 867
const S_PVIS = 868
const S_PVIS2 = 869
const S_CLIP = 870
const S_AMMO = 871
const S_ROCK = 872
const S_BROK = 873
const S_CELL = 874
const S_CELP = 875
const S_SHEL = 876
const S_SBOX = 877
const S_BPAK = 878
const S_BFUG = 879
const S_MGUN = 880
const S_CSAW = 881
const S_LAUN = 882
const S_PLAS = 883
const S_SHOT = 884
const S_SHOT2 = 885
const S_COLU = 886
const S_BLOODYTWITCH = 888
const S_BLOODYTWITCH2 = 889
const S_BLOODYTWITCH3 = 890
const S_BLOODYTWITCH4 = 891
const S_HEADSONSTICK = 894
const S_GIBS = 895
const S_HEADONASTICK = 896
const S_HEADCANDLES = 897
const S_HEADCANDLES2 = 898
const S_DEADSTICK = 899
const S_LIVESTICK = 900
const S_LIVESTICK2 = 901
const S_MEAT2 = 902
const S_MEAT3 = 903
const S_MEAT4 = 904
const S_MEAT5 = 905
const S_STALAGTITE = 906
const S_TALLGRNCOL = 907
const S_SHRTGRNCOL = 908
const S_TALLREDCOL = 909
const S_SHRTREDCOL = 910
const S_CANDLESTIK = 911
const S_CANDELABRA = 912
const S_SKULLCOL = 913
const S_TORCHTREE = 914
const S_BIGTREE = 915
const S_TECHPILLAR = 916
const S_EVILEYE = 917
const S_EVILEYE2 = 918
const S_EVILEYE3 = 919
const S_EVILEYE4 = 920
const S_FLOATSKULL = 921
const S_FLOATSKULL2 = 922
const S_FLOATSKULL3 = 923
const S_HEARTCOL = 924
const S_HEARTCOL2 = 925
const S_BLUETORCH = 926
const S_BLUETORCH2 = 927
const S_BLUETORCH3 = 928
const S_BLUETORCH4 = 929
const S_GREENTORCH = 930
const S_GREENTORCH2 = 931
const S_GREENTORCH3 = 932
const S_GREENTORCH4 = 933
const S_REDTORCH = 934
const S_REDTORCH2 = 935
const S_REDTORCH3 = 936
const S_REDTORCH4 = 937
const S_BTORCHSHRT = 938
const S_BTORCHSHRT2 = 939
const S_BTORCHSHRT3 = 940
const S_BTORCHSHRT4 = 941
const S_GTORCHSHRT = 942
const S_GTORCHSHRT2 = 943
const S_GTORCHSHRT3 = 944
const S_GTORCHSHRT4 = 945
const S_RTORCHSHRT = 946
const S_RTORCHSHRT2 = 947
const S_RTORCHSHRT3 = 948
const S_RTORCHSHRT4 = 949
const S_HANGNOGUTS = 950
const S_HANGBNOBRAIN = 951
const S_HANGTLOOKDN = 952
const S_HANGTSKULL = 953
const S_HANGTLOOKUP = 954
const S_HANGTNOBRAIN = 955
const S_COLONGIBS = 956
const S_SMALLPOOL = 957
const S_BRAINSTEM = 958
const S_TECHLAMP = 959
const S_TECHLAMP2 = 960
const S_TECHLAMP3 = 961
const S_TECHLAMP4 = 962
const S_TECH2LAMP = 963
const S_TECH2LAMP2 = 964
const S_TECH2LAMP3 = 965
const S_TECH2LAMP4 = 966

type state_t struct {
	Fsprite    spritenum_t
	Fframe     int32
	Ftics      int32
	Faction    func(*mobj_t, *pspdef_t)
	Fnextstate statenum_t
	Fmisc1     int32
	Fmisc2     int32
}

type mobjtype_t = int32

const MT_PLAYER = 0
const MT_POSSESSED = 1
const MT_SHOTGUY = 2
const MT_VILE = 3
const MT_FIRE = 4
const MT_UNDEAD = 5
const MT_TRACER = 6
const MT_SMOKE = 7
const MT_FATSO = 8
const MT_FATSHOT = 9
const MT_CHAINGUY = 10
const MT_TROOP = 11
const MT_SERGEANT = 12
const MT_SHADOWS = 13
const MT_HEAD = 14
const MT_BRUISER = 15
const MT_BRUISERSHOT = 16
const MT_KNIGHT = 17
const MT_SKULL = 18
const MT_SPIDER = 19
const MT_BABY = 20
const MT_CYBORG = 21
const MT_PAIN = 22
const MT_WOLFSS = 23
const MT_BOSSTARGET = 27
const MT_SPAWNSHOT = 28
const MT_SPAWNFIRE = 29
const MT_TROOPSHOT = 31
const MT_HEADSHOT = 32
const MT_ROCKET = 33
const MT_PLASMA = 34
const MT_BFG = 35
const MT_ARACHPLAZ = 36
const MT_PUFF = 37
const MT_BLOOD = 38
const MT_TFOG = 39
const MT_IFOG = 40
const MT_TELEPORTMAN = 41
const MT_EXTRABFG = 42
const MT_INV = 56
const MT_INS = 58
const MT_CLIP = 63
const MT_CHAINGUN = 73
const MT_SHOTGUN = 77
const NUMMOBJTYPES = 137

type mobjinfo_t struct {
	Fdoomednum    int32
	Fspawnstate   int32
	Fspawnhealth  int32
	Fseestate     int32
	Fseesound     int32
	Freactiontime int32
	Fattacksound  int32
	Fpainstate    int32
	Fpainchance   int32
	Fpainsound    int32
	Fmeleestate   int32
	Fmissilestate int32
	Fdeathstate   int32
	Fxdeathstate  int32
	Fdeathsound   int32
	Fspeed        int32
	Fradius       int32
	Fheight       int32
	Fmass         int32
	Fdamage       int32
	Factivesound  int32
	Fflags        int32
	Fraisestate   int32
}

const MF_SPECIAL = 1
const MF_SOLID = 2
const MF_SHOOTABLE = 4
const MF_NOSECTOR = 8
const MF_NOBLOCKMAP = 16
const MF_AMBUSH = 32
const MF_JUSTHIT = 64
const MF_JUSTATTACKED = 128
const MF_SPAWNCEILING = 256
const MF_NOGRAVITY = 512
const MF_DROPOFF = 1024
const MF_PICKUP = 2048
const MF_NOCLIP = 4096
const MF_FLOAT = 16384
const MF_TELEPORT = 32768
const MF_MISSILE = 65536
const MF_DROPPED = 131072
const MF_SHADOW = 262144
const MF_NOBLOOD = 524288
const MF_CORPSE = 1048576
const MF_INFLOAT = 2097152
const MF_COUNTKILL = 4194304
const MF_COUNTITEM = 8388608
const MF_SKULLFLY = 16777216
const MF_NOTDMATCH = 33554432
const MF_TRANSLATION = 201326592
const MF_TRANSSHIFT = 26

type mobj_t struct {
	degenmobj_t
	Fsnext        *mobj_t
	Fsprev        *mobj_t
	Fangle        angle_t
	Fsprite       spritenum_t
	Fframe        int32
	Fbnext        *mobj_t
	Fbprev        *mobj_t
	Fsubsector    *subsector_t
	Ffloorz       fixed_t
	Fceilingz     fixed_t
	Fradius       fixed_t
	Fheight       fixed_t
	Fmomx         fixed_t
	Fmomy         fixed_t
	Fmomz         fixed_t
	Fvalidcount   int32
	Ftype1        mobjtype_t
	Finfo         *mobjinfo_t
	Ftics         int32
	Fstate        *state_t
	Fflags        int32
	Fhealth       int32
	Fmovedir      int32
	Fmovecount    int32
	Ftarget       *mobj_t
	Freactiontime int32
	Fthreshold    int32
	Fplayer       *player_t
	Flastlook     int32
	Fspawnpoint   mapthing_t
	Ftracer       *mobj_t
}

type grabmouse_callback_t = uintptr

type patch_t struct {
	Fwidth      int16
	Fheight     int16
	Fleftoffset int16
	Ftopoffset  int16
	// TODO: This is a bit of a lie, as this array is really of Fwidth in length.
	// but we don't have a way to express that in Go, as this data is loaded directly
	// from the lump data
	Fcolumnofs [320]int32
}

func (p *patch_t) GetColumn(i int32) uintptr {
	if i < 0 || i >= int32(p.Fwidth) {
		panic("GetColumn: index out of bounds")
	}
	return (uintptr)(unsafe.Pointer(p)) + uintptr(p.Fcolumnofs[i])
}

type column_t struct {
	Ftopdelta uint8
	Flength   uint8
}

type vertex_t struct {
	Fx fixed_t
	Fy fixed_t
}

const ST_HORIZONTAL = 0
const ST_VERTICAL = 1
const ST_POSITIVE = 2
const ST_NEGATIVE = 3

type degenmobj_t struct {
	Fthinker thinker_t
	Fx       fixed_t
	Fy       fixed_t
	Fz       fixed_t
}

type sector_t struct {
	Ffloorheight    fixed_t
	Fceilingheight  fixed_t
	Ffloorpic       int16
	Fceilingpic     int16
	Flightlevel     int16
	Fspecial        int16
	Ftag            int16
	Fsoundtraversed int32
	Fsoundtarget    *mobj_t
	Fblockbox       [4]int32
	Fsoundorg       degenmobj_t
	Fvalidcount     int32
	Fthinglist      *mobj_t
	Fspecialdata    uintptr
	Flinecount      int32
	Flines          []*line_t
}

type side_t struct {
	Ftextureoffset fixed_t
	Frowoffset     fixed_t
	Ftoptexture    int16
	Fbottomtexture int16
	Fmidtexture    int16
	Fsector        *sector_t
}

type slopetype_t = int32

type box_t [4]fixed_t

type line_t struct {
	Fv1          *vertex_t
	Fv2          *vertex_t
	Fdx          fixed_t
	Fdy          fixed_t
	Fflags       int16
	Fspecial     int16
	Ftag         int16
	Fsidenum     [2]int16
	Fbbox        box_t
	Fslopetype   slopetype_t
	Ffrontsector *sector_t
	Fbacksector  *sector_t
	Fvalidcount  int32
	Fspecialdata uintptr
}

type subsector_t struct {
	Fsector    *sector_t
	Fnumlines  int16
	Ffirstline int16
}

type seg_t struct {
	Fv1          *vertex_t
	Fv2          *vertex_t
	Foffset      fixed_t
	Fangle       angle_t
	Fsidedef     *side_t
	Flinedef     *line_t
	Ffrontsector *sector_t
	Fbacksector  *sector_t
}

type node_t struct {
	Fx        fixed_t
	Fy        fixed_t
	Fdx       fixed_t
	Fdy       fixed_t
	Fbbox     [2]box_t
	Fchildren [2]uint16
}

type lighttable_t = uint8

type drawseg_t struct {
	Fcurline          *seg_t
	Fx1               int32
	Fx2               int32
	Fscale1           fixed_t
	Fscale2           fixed_t
	Fscalestep        fixed_t
	Fsilhouette       int32
	Fbsilheight       fixed_t
	Ftsilheight       fixed_t
	Fsprtopclip       uintptr
	Fsprbottomclip    uintptr
	Fmaskedtexturecol uintptr
}

type vissprite_t struct {
	Fprev       *vissprite_t
	Fnext       *vissprite_t
	Fx1         int32
	Fx2         int32
	Fgx         fixed_t
	Fgy         fixed_t
	Fgz         fixed_t
	Fgzt        fixed_t
	Fstartfrac  fixed_t
	Fscale      fixed_t
	Fxiscale    fixed_t
	Ftexturemid fixed_t
	Fpatch      int32
	Fcolormap   []lighttable_t
	Fmobjflags  int32
}

type spriteframe_t struct {
	Frotate boolean
	Flump   [8]int16
	Fflip   [8]uint8
}

type spritedef_t struct {
	Fnumframes    int32
	Fspriteframes []spriteframe_t
}

type visplane_t struct {
	Fheight     fixed_t
	Fpicnum     int32
	Flightlevel int32
	Fminx       int32
	Fmaxx       int32
	Fpad1       uint8
	Ftop        [320]uint8
	Fpad2       uint8
	Fpad3       uint8
	Fbottom     [320]uint8
	Fpad4       uint8
}

type weaponinfo_t struct {
	Fammo       ammotype_t
	Fupstate    int32
	Fdownstate  int32
	Freadystate int32
	Fatkstate   int32
	Fflashstate int32
}

const ps_weapon = 0
const ps_flash = 1
const NUMPSPRITES = 2

type pspdef_t struct {
	Fstate *state_t
	Ftics  int32
	Fsx    fixed_t
	Fsy    fixed_t
}

type ticcmd_t struct {
	Fforwardmove int8
	Fsidemove    int8
	Fangleturn   int16
	Fchatchar    uint8
	Fbuttons     uint8
	Fconsistancy uint8
	Fbuttons2    uint8
	Finventory   int32
	Flookfly     uint8
	Farti        uint8
}

type net_connect_data_t struct {
	Fgamemode     GameMode_t
	Fgamemission  GameMission_t
	Flowres_turn  int32
	Fdrone        int32
	Fmax_players  int32
	Fis_freedoom  int32
	Fwad_sha1sum  sha1_digest_t
	Fdeh_sha1sum  sha1_digest_t
	Fplayer_class int32
}

type net_gamesettings_t struct {
	Fticdup           int32
	Fextratics        int32
	Fdeathmatch       int32
	Fepisode          int32
	Fnomonsters       int32
	Ffast_monsters    int32
	Frespawn_monsters int32
	Fmap1             int32
	Fskill            skill_t
	Fgameversion      GameVersion_t
	Flowres_turn      int32
	Fnew_sync         int32
	Ftimelimit        int32
	Floadgame         int32
	Frandom           int32
	Fnum_players      int32
	Fconsoleplayer    int32
	Fplayer_classes   [8]int32
}

type playerstate_t = int32

const PST_LIVE = 0
const PST_DEAD = 1
const PST_REBORN = 2

const CF_NOCLIP = 1
const CF_GODMODE = 2
const CF_NOMOMENTUM = 4

type player_t struct {
	Fmo              *mobj_t
	Fplayerstate     playerstate_t
	Fcmd             ticcmd_t
	Fviewz           fixed_t
	Fviewheight      fixed_t
	Fdeltaviewheight fixed_t
	Fbob             fixed_t
	Fhealth          int32
	Farmorpoints     int32
	Farmortype       int32
	Fpowers          [6]int32
	Fcards           [6]boolean
	Fbackpack        boolean
	Ffrags           [4]int32
	Freadyweapon     weapontype_t
	Fpendingweapon   weapontype_t
	Fweaponowned     [9]boolean
	Fammo            [4]int32
	Fmaxammo         [4]int32
	Fattackdown      int32
	Fusedown         int32
	Fcheats          int32
	Frefire          int32
	Fkillcount       int32
	Fitemcount       int32
	Fsecretcount     int32
	Fmessage         string
	Fdamagecount     int32
	Fbonuscount      int32
	Fattacker        *mobj_t
	Fextralight      int32
	Ffixedcolormap   int32
	Fcolormap        int32
	Fpsprites        [2]pspdef_t
	Fdidsecret       boolean
}

type wbplayerstruct_t struct {
	Fin      boolean
	Fskills  int32
	Fsitems  int32
	Fssecret int32
	Fstime   int32
	Ffrags   [4]int32
	Fscore   int32
}

type wbstartstruct_t struct {
	Fepsd      int32
	Fdidsecret boolean
	Flast      int32
	Fnext      int32
	Fmaxkills  int32
	Fmaxitems  int32
	Fmaxsecret int32
	Fmaxfrags  int32
	Fpartime   int32
	Fpnum      int32
	Fplyr      [4]wbplayerstruct_t
}

type divline_t struct {
	Fx  fixed_t
	Fy  fixed_t
	Fdx fixed_t
	Fdy fixed_t
}

type intercept_t struct {
	Ffrac    fixed_t
	Fisaline boolean
	Fd       struct {
		Fthing any
	}
}

type fireflicker_t struct {
	Fthinker  thinker_t
	Fsector   *sector_t
	Fcount    int32
	Fmaxlight int32
	Fminlight int32
}

type lightflash_t struct {
	Fthinker  thinker_t
	Fsector   *sector_t
	Fcount    int32
	Fmaxlight int32
	Fminlight int32
	Fmaxtime  int32
	Fmintime  int32
}

type strobe_t struct {
	Fthinker    thinker_t
	Fsector     *sector_t
	Fcount      int32
	Fminlight   int32
	Fmaxlight   int32
	Fdarktime   int32
	Fbrighttime int32
}

type glow_t struct {
	Fthinker   thinker_t
	Fsector    *sector_t
	Fminlight  int32
	Fmaxlight  int32
	Fdirection int32
}

type switchlist_t struct {
	Fname1   [9]int8
	Fname2   [9]int8
	Fepisode int16
}

type bwhere_e = int32

const top = 0
const middle = 1
const bottom = 2

type button_t struct {
	Fline     *line_t
	Fwhere    bwhere_e
	Fbtexture int32
	Fbtimer   int32
	Fsoundorg *degenmobj_t
}

type plat_e = int32

const up = 0
const down = 1
const waiting = 2
const in_stasis = 3

type plattype_e = int32

const perpetualRaise = 0
const downWaitUpStay = 1
const raiseAndChange = 2
const raiseToNearestAndChange = 3
const blazeDWUS = 4

type plat_t struct {
	Fthinker   thinker_t
	Fsector    *sector_t
	Fspeed     fixed_t
	Flow       fixed_t
	Fhigh      fixed_t
	Fwait      int32
	Fcount     int32
	Fstatus    plat_e
	Foldstatus plat_e
	Fcrush     boolean
	Ftag       int32
	Ftype1     plattype_e
}

type vldoor_e = int32

const vld_normal = 0
const vld_close30ThenOpen = 1
const vld_close = 2
const vld_open = 3
const vld_raiseIn5Mins = 4
const vld_blazeRaise = 5
const vld_blazeOpen = 6
const vld_blazeClose = 7

type vldoor_t struct {
	Fthinker      thinker_t
	Ftype1        vldoor_e
	Fsector       *sector_t
	Ftopheight    fixed_t
	Fspeed        fixed_t
	Fdirection    int32
	Ftopwait      int32
	Ftopcountdown int32
}

type ceiling_e = int32

const lowerToFloor = 0
const raiseToHighest = 1
const lowerAndCrush = 2
const crushAndRaise = 3
const fastCrushAndRaise = 4
const silentCrushAndRaise = 5

type ceiling_t struct {
	Fthinker      thinker_t
	Ftype1        ceiling_e
	Fsector       *sector_t
	Fbottomheight fixed_t
	Ftopheight    fixed_t
	Fspeed        fixed_t
	Fcrush        boolean
	Fdirection    int32
	Ftag          int32
	Folddirection int32
}

type floor_e = int32

const lowerFloor = 0
const lowerFloorToLowest = 1
const turboLower = 2
const raiseFloor = 3
const raiseFloorToNearest = 4
const raiseToTexture = 5
const lowerAndChange = 6
const raiseFloor24 = 7
const raiseFloor24AndChange = 8
const raiseFloorCrush = 9
const raiseFloorTurbo = 10
const donutRaise = 11
const raiseFloor512 = 12

type stair_e = int32

const build8 = 0
const turbo16 = 1

type floormove_t struct {
	Fthinker         thinker_t
	Ftype1           floor_e
	Fcrush           boolean
	Fsector          *sector_t
	Fdirection       int32
	Fnewspecial      int32
	Ftexture         int16
	Ffloordestheight fixed_t
	Fspeed           fixed_t
}

type result_e = int32

const ok = 0
const crushed = 1
const pastdest = 2

type lumpinfo_t struct {
	Fname     [8]int8
	Fwad_file *os.File
	Fposition int32
	Fsize     int32
	Fcache    uintptr
	Fnext     *lumpinfo_t
}

func (l *lumpinfo_t) NamePtr() uintptr {
	return uintptr(unsafe.Pointer(&l.Fname[0]))
}

type netgame_startup_callback_t = uintptr

type loop_interface_t struct {
	FProcessEvents func()
	FBuildTiccmd   func(*ticcmd_t, int32)
	FRunTic        func([]ticcmd_t, []boolean)
	FRunMenu       func()
}

// For use if I do walls with outsides/insides

// Automap colors

// drawing stuff

// scale on entry
// how much the automap moves window per tic in frame-buffer coordinates
// moves 140 pixels in 1 second
// how much zoom-in per tic
// goes to 2x in 1 second
// how much zoom-out per tic
// pulls out to 0.5x in 1 second

// translates between frame-buffer and map distances
// translates between frame-buffer and map coordinates

// the following is crap

type fpoint_t struct {
	Fx int32
	Fy int32
}

type fline_t struct {
	Fa fpoint_t
	Fb fpoint_t
}

type mpoint_t struct {
	Fx fixed_t
	Fy fixed_t
}

type mline_t struct {
	Fa mpoint_t
	Fb mpoint_t
}

func init() {
	player_arrow = [7]mline_t{
		0: {
			Fa: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) + 8*16*(1<<FRACBITS)/7/8,
			},
			Fb: mpoint_t{
				Fx: 8 * 16 * (1 << FRACBITS) / 7,
			},
		},
		1: {
			Fa: mpoint_t{
				Fx: 8 * 16 * (1 << FRACBITS) / 7,
			},
			Fb: mpoint_t{
				Fx: 8*16*(1<<FRACBITS)/7 - 8*16*(1<<FRACBITS)/7/2,
				Fy: 8 * 16 * (1 << FRACBITS) / 7 / 4,
			},
		},
		2: {
			Fa: mpoint_t{
				Fx: 8 * 16 * (1 << FRACBITS) / 7,
			},
			Fb: mpoint_t{
				Fx: 8*16*(1<<FRACBITS)/7 - 8*16*(1<<FRACBITS)/7/2,
				Fy: -(8 * 16 * (1 << FRACBITS) / 7) / 4,
			},
		},
		3: {
			Fa: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) + 8*16*(1<<FRACBITS)/7/8,
			},
			Fb: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) - 8*16*(1<<FRACBITS)/7/8,
				Fy: 8 * 16 * (1 << FRACBITS) / 7 / 4,
			},
		},
		4: {
			Fa: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) + 8*16*(1<<FRACBITS)/7/8,
			},
			Fb: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) - 8*16*(1<<FRACBITS)/7/8,
				Fy: -(8 * 16 * (1 << FRACBITS) / 7) / 4,
			},
		},
		5: {
			Fa: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) + 3*(8*16*(1<<FRACBITS)/7)/8,
			},
			Fb: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) + 8*16*(1<<FRACBITS)/7/8,
				Fy: 8 * 16 * (1 << FRACBITS) / 7 / 4,
			},
		},
		6: {
			Fa: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) + 3*(8*16*(1<<FRACBITS)/7)/8,
			},
			Fb: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) + 8*16*(1<<FRACBITS)/7/8,
				Fy: -(8 * 16 * (1 << FRACBITS) / 7) / 4,
			},
		},
	}

	cheat_player_arrow = [16]mline_t{
		0: {
			Fa: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) + 8*16*(1<<FRACBITS)/7/8,
			},
			Fb: mpoint_t{
				Fx: 8 * 16 * (1 << FRACBITS) / 7,
			},
		},
		1: {
			Fa: mpoint_t{
				Fx: 8 * 16 * (1 << FRACBITS) / 7,
			},
			Fb: mpoint_t{
				Fx: 8*16*(1<<FRACBITS)/7 - 8*16*(1<<FRACBITS)/7/2,
				Fy: 8 * 16 * (1 << FRACBITS) / 7 / 6,
			},
		},
		2: {
			Fa: mpoint_t{
				Fx: 8 * 16 * (1 << FRACBITS) / 7,
			},
			Fb: mpoint_t{
				Fx: 8*16*(1<<FRACBITS)/7 - 8*16*(1<<FRACBITS)/7/2,
				Fy: -(8 * 16 * (1 << FRACBITS) / 7) / 6,
			},
		},
		3: {
			Fa: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) + 8*16*(1<<FRACBITS)/7/8,
			},
			Fb: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) - 8*16*(1<<FRACBITS)/7/8,
				Fy: 8 * 16 * (1 << FRACBITS) / 7 / 6,
			},
		},
		4: {
			Fa: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) + 8*16*(1<<FRACBITS)/7/8,
			},
			Fb: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) - 8*16*(1<<FRACBITS)/7/8,
				Fy: -(8 * 16 * (1 << FRACBITS) / 7) / 6,
			},
		},
		5: {
			Fa: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) + 3*(8*16*(1<<FRACBITS)/7)/8,
			},
			Fb: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) + 8*16*(1<<FRACBITS)/7/8,
				Fy: 8 * 16 * (1 << FRACBITS) / 7 / 6,
			},
		},
		6: {
			Fa: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) + 3*(8*16*(1<<FRACBITS)/7)/8,
			},
			Fb: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) + 8*16*(1<<FRACBITS)/7/8,
				Fy: -(8 * 16 * (1 << FRACBITS) / 7) / 6,
			},
		},
		7: {
			Fa: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) / 2,
			},
			Fb: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) / 2,
				Fy: -(8 * 16 * (1 << FRACBITS) / 7) / 6,
			},
		},
		8: {
			Fa: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) / 2,
				Fy: -(8 * 16 * (1 << FRACBITS) / 7) / 6,
			},
			Fb: mpoint_t{
				Fx: -(8*16*(1<<FRACBITS)/7)/2 + 8*16*(1<<FRACBITS)/7/6,
				Fy: -(8 * 16 * (1 << FRACBITS) / 7) / 6,
			},
		},
		9: {
			Fa: mpoint_t{
				Fx: -(8*16*(1<<FRACBITS)/7)/2 + 8*16*(1<<FRACBITS)/7/6,
				Fy: -(8 * 16 * (1 << FRACBITS) / 7) / 6,
			},
			Fb: mpoint_t{
				Fx: -(8*16*(1<<FRACBITS)/7)/2 + 8*16*(1<<FRACBITS)/7/6,
				Fy: 8 * 16 * (1 << FRACBITS) / 7 / 4,
			},
		},
		10: {
			Fa: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) / 6,
			},
			Fb: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) / 6,
				Fy: -(8 * 16 * (1 << FRACBITS) / 7) / 6,
			},
		},
		11: {
			Fa: mpoint_t{
				Fx: -(8 * 16 * (1 << FRACBITS) / 7) / 6,
				Fy: -(8 * 16 * (1 << FRACBITS) / 7) / 6,
			},
			Fb: mpoint_t{
				Fy: -(8 * 16 * (1 << FRACBITS) / 7) / 6,
			},
		},
		12: {
			Fa: mpoint_t{
				Fy: -(8 * 16 * (1 << FRACBITS) / 7) / 6,
			},
			Fb: mpoint_t{
				Fy: 8 * 16 * (1 << FRACBITS) / 7 / 4,
			},
		},
		13: {
			Fa: mpoint_t{
				Fx: 8 * 16 * (1 << FRACBITS) / 7 / 6,
				Fy: 8 * 16 * (1 << FRACBITS) / 7 / 4,
			},
			Fb: mpoint_t{
				Fx: 8 * 16 * (1 << FRACBITS) / 7 / 6,
				Fy: -(8 * 16 * (1 << FRACBITS) / 7) / 7,
			},
		},
		14: {
			Fa: mpoint_t{
				Fx: 8 * 16 * (1 << FRACBITS) / 7 / 6,
				Fy: -(8 * 16 * (1 << FRACBITS) / 7) / 7,
			},
			Fb: mpoint_t{
				Fx: 8*16*(1<<FRACBITS)/7/6 + 8*16*(1<<FRACBITS)/7/32,
				Fy: -(8*16*(1<<FRACBITS)/7)/7 - 8*16*(1<<FRACBITS)/7/32,
			},
		},
		15: {
			Fa: mpoint_t{
				Fx: 8*16*(1<<FRACBITS)/7/6 + 8*16*(1<<FRACBITS)/7/32,
				Fy: -(8*16*(1<<FRACBITS)/7)/7 - 8*16*(1<<FRACBITS)/7/32,
			},
			Fb: mpoint_t{
				Fx: 8*16*(1<<FRACBITS)/7/6 + 8*16*(1<<FRACBITS)/7/10,
				Fy: -(8 * 16 * (1 << FRACBITS) / 7) / 7,
			},
		},
	}

	thintriangle_guy = [3]mline_t{
		0: {
			Fa: mpoint_t{
				Fx: float2fixed(-0.5),
				Fy: float2fixed(-0.7),
			},
			Fb: mpoint_t{
				Fx: 1 << FRACBITS,
			},
		},
		1: {
			Fa: mpoint_t{
				Fx: 1 << FRACBITS,
			},
			Fb: mpoint_t{
				Fx: float2fixed(-0.5),
				Fy: float2fixed(0.7),
			},
		},
		2: {
			Fa: mpoint_t{
				Fx: float2fixed(-0.5),
				Fy: float2fixed(0.7),
			},
			Fb: mpoint_t{
				Fx: float2fixed(-0.5),
				Fy: float2fixed(-0.7),
			},
		},
	}
}

var cheating int32 = 0
var grid int32 = 0

var finit_width int32 = SCREENWIDTH
var finit_height int32 = SCREENHEIGHT - 32

// C documentation
//
//	// location of window on screen
var f_x int32
var f_y int32

// C documentation
//
//	// size of window on screen
var f_w int32
var f_h int32

var lightlev int32 // used for funky strobing effect
var fb uintptr     // pseudo-frame buffer

var m_paninc mpoint_t    // how far the window pans each tic (map coords)
var mtof_zoommul fixed_t // how far the window zooms in each tic (map coords)
var ftom_zoommul fixed_t // how far the window zooms in each tic (fb coords)

var m_x fixed_t
var m_y fixed_t // LL x,y where the window is on the map (map coords)
var m_x2 fixed_t
var m_y2 fixed_t // UR x,y where the window is on the map (map coords)

// C documentation
//
//	//
//	// width/height of window on map (map coords)
//	//
var m_w fixed_t
var m_h fixed_t

// C documentation
//
//	// based on level size
var min_x fixed_t
var min_y fixed_t
var max_x fixed_t
var max_y fixed_t

var max_w fixed_t // max_x-min_x,
var max_h fixed_t // max_y-min_y

// C documentation
//

var min_scale_mtof fixed_t // used to tell when to stop zooming out
var max_scale_mtof fixed_t // used to tell when to stop zooming in

// C documentation
//
//	// old stuff for recovery later
var old_m_w fixed_t
var old_m_h fixed_t
var old_m_x fixed_t
var old_m_y fixed_t

// C documentation
//
//	// old location used by the Follower routine
var f_oldloc mpoint_t

// C documentation
//
//	// used by MTOF to scale from map-to-frame-buffer coords
var scale_mtof = float2fixed(0.2)

// C documentation
//
//	// used by FTOM to scale from frame-buffer-to-map coords (=1/scale_mtof)
var scale_ftom fixed_t

var plr *player_t // the player represented by an arrow

var marknums [10]*patch_t   // numbers used for marking by the automap
var markpoints [10]mpoint_t // where the points are
var markpointnum int32 = 0  // next point to be assigned

var followplayer int32 = 1 // specifies whether to follow the player around

func init() {
	cheat_amap = cheatseq_t{
		Fsequence:      [25]int8{'i', 'd', 'd', 't'},
		Fsequence_len:  5 - 1,
		Fparameter_buf: [5]byte{},
	}
}

var stopped int32 = 1

// C documentation
//
//	//
//	//
//	//
func AM_activateNewScale() {
	m_x += m_w / 2
	m_y += m_h / 2
	m_w = FixedMul(f_w<<16, scale_ftom)
	m_h = FixedMul(f_h<<16, scale_ftom)
	m_x -= m_w / 2
	m_y -= m_h / 2
	m_x2 = m_x + m_w
	m_y2 = m_y + m_h
}

// C documentation
//
//	//
//	//
//	//
func AM_saveScaleAndLoc() {
	old_m_x = m_x
	old_m_y = m_y
	old_m_w = m_w
	old_m_h = m_h
}

// C documentation
//
//	//
//	//
//	//
func AM_restoreScaleAndLoc() {
	m_w = old_m_w
	m_h = old_m_h
	if followplayer == 0 {
		m_x = old_m_x
		m_y = old_m_y
	} else {
		m_x = plr.Fmo.Fx - m_w/int32(2)
		m_y = plr.Fmo.Fy - m_h/int32(2)
	}
	m_x2 = m_x + m_w
	m_y2 = m_y + m_h
	// Change the scaling multipliers
	scale_mtof = FixedDiv(f_w<<int32(FRACBITS), m_w)
	scale_ftom = FixedDiv(1<<FRACBITS, scale_mtof)
}

// C documentation
//
//	//
//	// adds a marker at the current location
//	//
func AM_addMark() {
	markpoints[markpointnum].Fx = m_x + m_w/int32(2)
	markpoints[markpointnum].Fy = m_y + m_h/int32(2)
	markpointnum = (markpointnum + 1) % AM_NUMMARKPOINTS
}

// C documentation
//
//	//
//	// Determines bounding box of all vertices,
//	// sets global variables controlling zoom range.
//	//
func AM_findMinMaxBoundaries() {
	var a, b, v1, v2 fixed_t
	var i, v4 int32
	v1 = INT_MAX1
	min_y = v1
	min_x = v1
	v2 = -INT_MAX1
	max_y = v2
	max_x = v2
	i = 0
	for {
		if i >= numvertexes {
			break
		}
		if vertexes[i].Fx < min_x {
			min_x = vertexes[i].Fx
		} else {
			if vertexes[i].Fx > max_x {
				max_x = vertexes[i].Fx
			}
		}
		if vertexes[i].Fy < min_y {
			min_y = vertexes[i].Fy
		} else {
			if vertexes[i].Fy > max_y {
				max_y = vertexes[i].Fy
			}
		}
		goto _3
	_3:
		;
		i++
	}
	max_w = max_x - min_x
	max_h = max_y - min_y
	a = FixedDiv(f_w<<int32(FRACBITS), max_w)
	b = FixedDiv(f_h<<int32(FRACBITS), max_h)
	if a < b {
		v4 = a
	} else {
		v4 = b
	}
	min_scale_mtof = v4
	max_scale_mtof = FixedDiv(f_h<<int32(FRACBITS), 2*16*(1<<FRACBITS))
}

// C documentation
//
//	//
//	//
//	//
func AM_changeWindowLoc() {
	if m_paninc.Fx != 0 || m_paninc.Fy != 0 {
		followplayer = 0
		f_oldloc.Fx = int32(INT_MAX1)
	}
	m_x += m_paninc.Fx
	m_y += m_paninc.Fy
	if m_x+m_w/int32(2) > max_x {
		m_x = max_x - m_w/int32(2)
	} else {
		if m_x+m_w/int32(2) < min_x {
			m_x = min_x - m_w/int32(2)
		}
	}
	if m_y+m_h/int32(2) > max_y {
		m_y = max_y - m_h/int32(2)
	} else {
		if m_y+m_h/int32(2) < min_y {
			m_y = min_y - m_h/int32(2)
		}
	}
	m_x2 = m_x + m_w
	m_y2 = m_y + m_h
}

// C documentation
//
//	//
//	//
//	//
func AM_initVariables() {
	var v1 fixed_t
	automapactive = 1
	fb = I_VideoBuffer
	f_oldloc.Fx = int32(INT_MAX1)
	lightlev = 0
	v1 = 0
	m_paninc.Fy = v1
	m_paninc.Fx = v1
	ftom_zoommul = 1 << FRACBITS
	mtof_zoommul = 1 << FRACBITS
	m_w = FixedMul(f_w<<16, scale_ftom)
	m_h = FixedMul(f_h<<16, scale_ftom)
	// find player to center on initially
	if playeringame[consoleplayer] != 0 {
		plr = &players[consoleplayer]
	} else {
		plr = &players[0]
		for pnum := 0; pnum < MAXPLAYERS; pnum++ {
			if playeringame[pnum] != 0 {
				plr = &players[pnum]
				break
			}
		}
	}
	m_x = plr.Fmo.Fx - m_w/int32(2)
	m_y = plr.Fmo.Fy - m_h/int32(2)
	AM_changeWindowLoc()
	// for saving & restoring
	old_m_x = m_x
	old_m_y = m_y
	old_m_w = m_w
	old_m_h = m_h
	// inform the status bar of the change
	ST_Responder(&st_notify)
}

var st_notify = event_t{
	Ftype1: ev_keyup,
	Fdata1: int32('a')<<24 + int32('m')<<16 | int32('e')<<8,
}

// C documentation
//
//	//
//	//
//	//
func AM_loadPics() {
	bp := alloc(32)
	var i int32
	i = 0
	for {
		if i >= 10 {
			break
		}
		snprintf_ccgo(bp, 9, 0, i)
		marknums[i] = W_CacheLumpNameT(bp, int32(PU_STATIC))
		goto _1
	_1:
		;
		i++
	}
}

func AM_unloadPics() {
	bp := alloc(32)
	var i int32
	i = 0
	for {
		if i >= 10 {
			break
		}
		snprintf_ccgo(bp, 9, 0, i)
		W_ReleaseLumpName(bp)
		goto _1
	_1:
		;
		i++
	}
}

func AM_clearMarks() {
	var i int32
	i = 0
	for {
		if i >= AM_NUMMARKPOINTS {
			break
		}
		markpoints[i].Fx = -1
		goto _1
	_1:
		;
		i++
	} // means empty
	markpointnum = 0
}

// C documentation
//
//	//
//	// should be called at the start of every level
//	// right now, i figure it out myself
//	//
func AM_LevelInit() {
	f_y = 0
	f_x = 0
	f_w = finit_width
	f_h = finit_height
	AM_clearMarks()
	AM_findMinMaxBoundaries()
	scale_mtof = FixedDiv(min_scale_mtof, float2fixed(0.7))
	if scale_mtof > max_scale_mtof {
		scale_mtof = min_scale_mtof
	}
	scale_ftom = FixedDiv(1<<FRACBITS, scale_mtof)
}

// C documentation
//
//	//
//	//
//	//
func AM_Stop() {
	AM_unloadPics()
	automapactive = 0
	ST_Responder(&st_notify1)
	stopped = 1
}

var st_notify1 = event_t{
	Fdata1: ev_keyup,
	Fdata2: int32('a')<<24 + int32('m')<<16 | int32('x')<<8,
}

// C documentation
//
//	//
//	//
//	//
func AM_Start() {
	if stopped == 0 {
		AM_Stop()
	}
	stopped = 0
	if lastlevel != gamemap || lastepisode != gameepisode {
		AM_LevelInit()
		lastlevel = gamemap
		lastepisode = gameepisode
	}
	AM_initVariables()
	AM_loadPics()
}

var lastlevel int32 = -1

var lastepisode int32 = -1

// C documentation
//
//	//
//	// set the window scale to the maximum size
//	//
func AM_minOutWindowScale() {
	scale_mtof = min_scale_mtof
	scale_ftom = FixedDiv(1<<FRACBITS, scale_mtof)
	AM_activateNewScale()
}

// C documentation
//
//	//
//	// set the window scale to the minimum size
//	//
func AM_maxOutWindowScale() {
	scale_mtof = max_scale_mtof
	scale_ftom = FixedDiv(1<<FRACBITS, scale_mtof)
	AM_activateNewScale()
}

// C documentation
//
//	//
//	// Handle events (user inputs) in automap mode
//	//
func AM_Responder(ev *event_t) (r boolean) {
	var key, rc int32
	rc = 0
	if automapactive == 0 {
		if ev.Ftype1 == ev_keydown && ev.Fdata1 == key_map_toggle {
			AM_Start()
			viewactive = 0
			rc = 1
		}
	} else {
		if ev.Ftype1 == ev_keydown {
			rc = 1
			key = ev.Fdata1
			if key == key_map_east { // pan right
				if followplayer == 0 {
					m_paninc.Fx = FixedMul(F_PANINC<<16, scale_ftom)
				} else {
					rc = 0
				}
			} else {
				if key == key_map_west { // pan left
					if followplayer == 0 {
						m_paninc.Fx = -FixedMul(F_PANINC<<16, scale_ftom)
					} else {
						rc = 0
					}
				} else {
					if key == key_map_north { // pan up
						if followplayer == 0 {
							m_paninc.Fy = FixedMul(F_PANINC<<16, scale_ftom)
						} else {
							rc = 0
						}
					} else {
						if key == key_map_south { // pan down
							if followplayer == 0 {
								m_paninc.Fy = -FixedMul(F_PANINC<<16, scale_ftom)
							} else {
								rc = 0
							}
						} else {
							if key == key_map_zoomout { // zoom out
								mtof_zoommul = float2fixedinv(1.02)
								ftom_zoommul = float2fixed(1.02)
							} else {
								if key == key_map_zoomin { // zoom in
									mtof_zoommul = float2fixed(1.02)
									ftom_zoommul = float2fixedinv(1.02)
								} else {
									if key == key_map_toggle {
										bigstate = 0
										viewactive = 1
										AM_Stop()
									} else {
										if key == key_map_maxzoom {
											bigstate = boolint32(bigstate == 0)
											if bigstate != 0 {
												AM_saveScaleAndLoc()
												AM_minOutWindowScale()
											} else {
												AM_restoreScaleAndLoc()
											}
										} else {
											if key == key_map_follow {
												followplayer = boolint32(followplayer == 0)
												f_oldloc.Fx = int32(INT_MAX1)
												if followplayer != 0 {
													plr.Fmessage = __ccgo_ts_str(9)
												} else {
													plr.Fmessage = __ccgo_ts_str(24)
												}
											} else {
												if key == key_map_grid {
													grid = boolint32(grid == 0)
													if grid != 0 {
														plr.Fmessage = __ccgo_ts_str(40)
													} else {
														plr.Fmessage = __ccgo_ts_str(48)
													}
												} else {
													if key == key_map_mark {
														plr.Fmessage = fmt.Sprintf(__ccgo_ts_str(57), __ccgo_ts_str(63), markpointnum)
														AM_addMark()
													} else {
														if key == key_map_clearmark {
															AM_clearMarks()
															plr.Fmessage = __ccgo_ts_str(75)
														} else {
															rc = 0
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if deathmatch == 0 && cht_CheckCheat(&cheat_amap, int8(ev.Fdata2)) != 0 {
				rc = 0
				cheating = (cheating + 1) % 3
			}
		} else {
			if ev.Ftype1 == ev_keyup {
				rc = 0
				key = ev.Fdata1
				if key == key_map_east {
					if followplayer == 0 {
						m_paninc.Fx = 0
					}
				} else {
					if key == key_map_west {
						if followplayer == 0 {
							m_paninc.Fx = 0
						}
					} else {
						if key == key_map_north {
							if followplayer == 0 {
								m_paninc.Fy = 0
							}
						} else {
							if key == key_map_south {
								if followplayer == 0 {
									m_paninc.Fy = 0
								}
							} else {
								if key == key_map_zoomout || key == key_map_zoomin {
									mtof_zoommul = 1 << FRACBITS
									ftom_zoommul = 1 << FRACBITS
								}
							}
						}
					}
				}
			}
		}
	}
	return uint32(rc)
}

var bigstate int32

// C documentation
//
//	//
//	// Zooming
//	//
func AM_changeWindowScale() {
	// Change the scaling multipliers
	scale_mtof = FixedMul(scale_mtof, mtof_zoommul)
	scale_ftom = FixedDiv(1<<FRACBITS, scale_mtof)
	if scale_mtof < min_scale_mtof {
		AM_minOutWindowScale()
	} else {
		if scale_mtof > max_scale_mtof {
			AM_maxOutWindowScale()
		} else {
			AM_activateNewScale()
		}
	}
}

// C documentation
//
//	//
//	//
//	//
func AM_doFollowPlayer() {
	if f_oldloc.Fx != plr.Fmo.Fx || f_oldloc.Fy != plr.Fmo.Fy {
		m_x = FixedMul(FixedMul(plr.Fmo.Fx, scale_mtof)>>int32(16)<<int32(16), scale_ftom) - m_w/int32(2)
		m_y = FixedMul(FixedMul(plr.Fmo.Fy, scale_mtof)>>int32(16)<<int32(16), scale_ftom) - m_h/int32(2)
		m_x2 = m_x + m_w
		m_y2 = m_y + m_h
		f_oldloc.Fx = plr.Fmo.Fx
		f_oldloc.Fy = plr.Fmo.Fy
		//  m_x = FTOM(MTOF(plr->mo->x - m_w/2));
		//  m_y = FTOM(MTOF(plr->mo->y - m_h/2));
		//  m_x = plr->mo->x - m_w/2;
		//  m_y = plr->mo->y - m_h/2;
	}
}

// C documentation
//
//	//
//	// Updates on Game Tick
//	//
func AM_Ticker() {
	if automapactive == 0 {
		return
	}
	if followplayer != 0 {
		AM_doFollowPlayer()
	}
	// Change the zoom if necessary
	if ftom_zoommul != 1<<FRACBITS {
		AM_changeWindowScale()
	}
	// Change x,y location
	if m_paninc.Fx != 0 || m_paninc.Fy != 0 {
		AM_changeWindowLoc()
	}
	// Update light level
	// AM_updateLightLev();
}

// C documentation
//
//	//
//	// Clear automap frame buffer.
//	//
func AM_clearFB(color uint8) {
	xmemset(fb, color, uint64(f_w*f_h))
}

// C documentation
//
//	//
//	// Automap clipping of lines.
//	//
//	// Based on Cohen-Sutherland clipping algorithm but with a slightly
//	// faster reject and precalculated slopes.  If the speed is needed,
//	// use a hash algorithm to handle  the common cases.
//	//
func AM_clipMline(ml *mline_t, fl *fline_t) (r boolean) {
	var dx, dy, outcode1, outcode2, outside int32
	var tmp fpoint_t
	outcode1 = 0
	outcode2 = 0
	// do trivial rejects and outcodes
	if ml.Fa.Fy > m_y2 {
		outcode1 = 8
	} else {
		if ml.Fa.Fy < m_y {
			outcode1 = 4
		}
	}
	if ml.Fb.Fy > m_y2 {
		outcode2 = 8
	} else {
		if ml.Fb.Fy < m_y {
			outcode2 = 4
		}
	}
	if outcode1&outcode2 != 0 {
		return 0
	} // trivially outside
	if ml.Fa.Fx < m_x {
		outcode1 |= 1
	} else {
		if ml.Fa.Fx > m_x2 {
			outcode1 |= 2
		}
	}
	if ml.Fb.Fx < m_x {
		outcode2 |= 1
	} else {
		if ml.Fb.Fx > m_x2 {
			outcode2 |= 2
		}
	}
	if outcode1&outcode2 != 0 {
		return 0
	} // trivially outside
	// transform to frame-buffer coordinates.
	fl.Fa.Fx = f_x + FixedMul(ml.Fa.Fx-m_x, scale_mtof)>>16
	fl.Fa.Fy = f_y + (f_h - FixedMul(ml.Fa.Fy-m_y, scale_mtof)>>16)
	fl.Fb.Fx = f_x + FixedMul(ml.Fb.Fx-m_x, scale_mtof)>>16
	fl.Fb.Fy = f_y + (f_h - FixedMul(ml.Fb.Fy-m_y, scale_mtof)>>16)
	outcode1 = 0
	if fl.Fa.Fy < 0 {
		outcode1 |= 8
	} else {
		if fl.Fa.Fy >= f_h {
			outcode1 |= 4
		}
	}
	if fl.Fa.Fx < 0 {
		outcode1 |= 1
	} else {
		if fl.Fa.Fx >= f_w {
			outcode1 |= 2
		}
	}
	outcode2 = 0
	if fl.Fb.Fy < 0 {
		outcode2 |= 8
	} else {
		if fl.Fb.Fy >= f_h {
			outcode2 |= 4
		}
	}
	if fl.Fb.Fx < 0 {
		outcode2 |= 1
	} else {
		if fl.Fb.Fx >= f_w {
			outcode2 |= 2
		}
	}
	if outcode1&outcode2 != 0 {
		return 0
	}
	for outcode1|outcode2 != 0 {
		// may be partially inside box
		// find an outside point
		if outcode1 != 0 {
			outside = outcode1
		} else {
			outside = outcode2
		}
		// clip to each side
		if outside&8 != 0 {
			dy = fl.Fa.Fy - fl.Fb.Fy
			dx = fl.Fb.Fx - fl.Fa.Fx
			tmp.Fx = fl.Fa.Fx + dx*fl.Fa.Fy/dy
			tmp.Fy = 0
		} else {
			if outside&4 != 0 {
				dy = fl.Fa.Fy - fl.Fb.Fy
				dx = fl.Fb.Fx - fl.Fa.Fx
				tmp.Fx = fl.Fa.Fx + dx*(fl.Fa.Fy-f_h)/dy
				tmp.Fy = f_h - 1
			} else {
				if outside&2 != 0 {
					dy = fl.Fb.Fy - fl.Fa.Fy
					dx = fl.Fb.Fx - fl.Fa.Fx
					tmp.Fy = fl.Fa.Fy + dy*(f_w-1-fl.Fa.Fx)/dx
					tmp.Fx = f_w - 1
				} else {
					if outside&1 != 0 {
						dy = fl.Fb.Fy - fl.Fa.Fy
						dx = fl.Fb.Fx - fl.Fa.Fx
						tmp.Fy = fl.Fa.Fy + dy*-fl.Fa.Fx/dx
						tmp.Fx = 0
					} else {
						tmp.Fx = 0
						tmp.Fy = 0
					}
				}
			}
		}
		if outside == outcode1 {
			fl.Fa = tmp
			outcode1 = 0
			if fl.Fa.Fy < 0 {
				outcode1 |= 8
			} else {
				if fl.Fa.Fy >= f_h {
					outcode1 |= 4
				}
			}
			if fl.Fa.Fx < 0 {
				outcode1 |= 1
			} else {
				if fl.Fa.Fx >= f_w {
					outcode1 |= 2
				}
			}
		} else {
			fl.Fb = tmp
			outcode2 = 0
			if fl.Fb.Fy < 0 {
				outcode2 |= 8
			} else {
				if fl.Fb.Fy >= f_h {
					outcode2 |= 4
				}
			}
			if fl.Fb.Fx < 0 {
				outcode2 |= 1
			} else {
				if fl.Fb.Fx >= f_w {
					outcode2 |= 2
				}
			}
		}
		if outcode1&outcode2 != 0 {
			return 0
		} // trivially outside
	}
	return 1
}

// C documentation
//
//	//
//	// Classic Bresenham w/ whatever optimizations needed for speed
//	//
func AM_drawFline(fl *fline_t, color int32) {
	var ax, ay, d, dx, dy, sx, sy, x, y, v1, v2, v3, v4, v5 int32
	// For debugging only
	if fl.Fa.Fx < 0 || fl.Fa.Fx >= f_w || fl.Fa.Fy < 0 || fl.Fa.Fy >= f_h || fl.Fb.Fx < 0 || fl.Fb.Fx >= f_w || fl.Fb.Fy < 0 || fl.Fb.Fy >= f_h {
		v1 = fuck
		fuck++

		fprintf_ccgo(os.Stderr, 93, v1)
		return
	}
	dx = fl.Fb.Fx - fl.Fa.Fx
	if dx < 0 {
		v2 = -dx
	} else {
		v2 = dx
	}
	ax = 2 * v2
	if dx < 0 {
		v3 = -1
	} else {
		v3 = 1
	}
	sx = v3
	dy = fl.Fb.Fy - fl.Fa.Fy
	if dy < 0 {
		v4 = -dy
	} else {
		v4 = dy
	}
	ay = 2 * v4
	if dy < 0 {
		v5 = -1
	} else {
		v5 = 1
	}
	sy = v5
	x = fl.Fa.Fx
	y = fl.Fa.Fy
	if ax > ay {
		d = ay - ax/int32(2)
		for 1 != 0 {
			*(*uint8)(unsafe.Pointer(fb + uintptr(y*f_w+x))) = uint8(color)
			if x == fl.Fb.Fx {
				return
			}
			if d >= 0 {
				y += sy
				d -= ax
			}
			x += sx
			d += ay
		}
	} else {
		d = ax - ay/int32(2)
		for 1 != 0 {
			*(*uint8)(unsafe.Pointer(fb + uintptr(y*f_w+x))) = uint8(color)
			if y == fl.Fb.Fy {
				return
			}
			if d >= 0 {
				x += sx
				d -= ay
			}
			y += sy
			d += ax
		}
	}
}

var fuck int32

// C documentation
//
//	//
//	// Clip lines, draw visible part sof lines.
//	//
func AM_drawMline(ml *mline_t, color int32) {
	if AM_clipMline(ml, &fl) != 0 {
		AM_drawFline(&fl, color)
	} // draws it on frame buffer using fb coords
}

var fl fline_t

// C documentation
//
//	//
//	// Draws flat (floor/ceiling tile) aligned grid lines.
//	//
func AM_drawGrid(color int32) {
	bp := &mline_t{}
	var end, start, x, y fixed_t
	// Figure out start of vertical gridlines
	start = m_x
	if (start-bmaporgx)%(MAPBLOCKUNITS<<FRACBITS) != 0 {
		start += MAPBLOCKUNITS<<FRACBITS - (start-bmaporgx)%(MAPBLOCKUNITS<<FRACBITS)
	}
	end = m_x + m_w
	// draw vertical gridlines
	bp.Fa.Fy = m_y
	bp.Fb.Fy = m_y + m_h
	x = start
	for {
		if x >= end {
			break
		}
		bp.Fa.Fx = x
		bp.Fb.Fx = x
		AM_drawMline(bp, color)
		goto _1
	_1:
		;
		x += MAPBLOCKUNITS << FRACBITS
	}
	// Figure out start of horizontal gridlines
	start = m_y
	if (start-bmaporgy)%(MAPBLOCKUNITS<<FRACBITS) != 0 {
		start += MAPBLOCKUNITS<<FRACBITS - (start-bmaporgy)%(MAPBLOCKUNITS<<FRACBITS)
	}
	end = m_y + m_h
	// draw horizontal gridlines
	bp.Fa.Fx = m_x
	bp.Fb.Fx = m_x + m_w
	y = start
	for {
		if y >= end {
			break
		}
		bp.Fa.Fy = y
		bp.Fb.Fy = y
		AM_drawMline(bp, color)
		goto _2
	_2:
		;
		y += MAPBLOCKUNITS << FRACBITS
	}
}

// C documentation
//
//	//
//	// Determines visible lines, draws them.
//	// This is LineDef based, not LineSeg based.
//	//
func AM_drawWalls() {
	for i := int32(0); i < numlines; i++ {
		line := &lines[i]
		l.Fa.Fx = line.Fv1.Fx
		l.Fa.Fy = line.Fv1.Fy
		l.Fb.Fx = line.Fv2.Fx
		l.Fb.Fy = line.Fv2.Fy
		if cheating != 0 || int32(line.Fflags)&ML_MAPPED != 0 {
			if int32(line.Fflags)&ML_DONTDRAW != 0 && cheating == 0 {
				continue
			}
			if line.Fbacksector == nil {
				AM_drawMline(&l, 256-5*16+lightlev)
			} else {
				if int32(line.Fspecial) == 39 {
					// teleporters
					AM_drawMline(&l, 256-5*16+REDRANGE/2)
				} else {
					if int32(line.Fflags)&ML_SECRET != 0 { // secret door
						if cheating != 0 {
							AM_drawMline(&l, 256-5*16+lightlev)
						} else {
							AM_drawMline(&l, 256-5*16+lightlev)
						}
					} else {
						if line.Fbacksector.Ffloorheight != line.Ffrontsector.Ffloorheight {
							AM_drawMline(&l, 4*16+lightlev) // floor level change
						} else {
							if line.Fbacksector.Fceilingheight != line.Ffrontsector.Fceilingheight {
								AM_drawMline(&l, 256-32+7+lightlev) // ceiling level change
							} else {
								if cheating != 0 {
									AM_drawMline(&l, 6*16+lightlev)
								}
							}
						}
					}
				}
			}
		} else {
			if plr.Fpowers[pw_allmap] != 0 {
				if int32(line.Fflags)&ML_DONTDRAW == 0 {
					AM_drawMline(&l, 6*16+3)
				}
			}
		}
	}
}

var l mline_t

// C documentation
//
//	//
//	// Rotation in 2D.
//	// Used to rotate player arrow line character.
//	//
func AM_rotate(x *fixed_t, y *fixed_t, a angle_t) {
	tmpx := FixedMul(*y, finecosine[a>>int32(ANGLETOFINESHIFT)]) - FixedMul(*y, finesine[a>>int32(ANGLETOFINESHIFT)])
	*y = FixedMul(*x, finesine[a>>int32(ANGLETOFINESHIFT)]) + FixedMul(*y, finecosine[a>>int32(ANGLETOFINESHIFT)])
	*x = tmpx
}

func AM_drawLineCharacter(lineguy []mline_t, scale fixed_t, angle angle_t, color int32, x fixed_t, y fixed_t) {
	for i := range lineguy {
		var bp mline_t
		bp.Fa.Fx = lineguy[i].Fa.Fx
		bp.Fa.Fy = lineguy[i].Fa.Fy
		if scale != 0 {
			bp.Fa.Fx = FixedMul(scale, bp.Fa.Fx)
			bp.Fa.Fy = FixedMul(scale, bp.Fa.Fy)
		}
		if angle != 0 {
			AM_rotate(&bp.Fa.Fx, &bp.Fb.Fy, angle)
		}
		bp.Fa.Fx += x
		bp.Fa.Fy += y
		bp.Fb.Fx = lineguy[i].Fb.Fx
		bp.Fb.Fy = lineguy[i].Fb.Fy
		if scale != 0 {
			bp.Fb.Fx = FixedMul(scale, bp.Fb.Fx)
			bp.Fb.Fy = FixedMul(scale, bp.Fb.Fy)
		}
		if angle != 0 {
			AM_rotate(&bp.Fb.Fx, &bp.Fb.Fy, angle)
		}
		bp.Fb.Fx += x
		bp.Fb.Fy += y
		AM_drawMline(&bp, color)
	}
}

func AM_drawPlayers() {
	var color, their_color int32
	their_color = -1
	if netgame == 0 {
		if cheating != 0 {
			AM_drawLineCharacter(cheat_player_arrow[:], 0, plr.Fmo.Fangle, 256-47, plr.Fmo.Fx, plr.Fmo.Fy)
		} else {
			AM_drawLineCharacter(player_arrow[:], 0, plr.Fmo.Fangle, 256-47, plr.Fmo.Fx, plr.Fmo.Fy)
		}
		return
	}
	for i := 0; i < MAXPLAYERS; i++ {
		their_color++
		p := &players[i]
		if deathmatch != 0 && singledemo == 0 && p != plr {
			continue
		}
		if playeringame[i] == 0 {
			continue
		}
		if p.Fpowers[pw_invisibility] != 0 {
			color = 246
		} else {
			color = their_colors[their_color]
		}
		AM_drawLineCharacter(player_arrow[:], 0, p.Fmo.Fangle, color, p.Fmo.Fx, p.Fmo.Fy)
	}
}

var their_colors = [4]int32{
	0: 7 * 16,
	1: 6 * 16,
	2: 4 * 16,
	3: 256 - 5*16,
}

func AM_drawThings(colors int32, colorrange int32) {
	var t *mobj_t
	for i := int32(0); i < numsectors; i++ {
		t = sectors[i].Fthinglist
		for t != nil {
			AM_drawLineCharacter(thintriangle_guy[:], 16<<FRACBITS, t.Fangle, colors+lightlev, t.Fx, t.Fy)
			t = t.Fsnext
		}
	}
}

func AM_drawMarks() {
	var fx, fy, h, w int32
	for i := 0; i < AM_NUMMARKPOINTS; i++ {
		if markpoints[i].Fx != -1 {
			//      w = SHORT(marknums[i]->width);
			//      h = SHORT(marknums[i]->height);
			w = 5 // because something's wrong with the wad, i guess
			h = 6 // because something's wrong with the wad, i guess
			fx = f_x + FixedMul(markpoints[i].Fx-m_x, scale_mtof)>>16
			fy = f_y + (f_h - FixedMul(markpoints[i].Fy-m_y, scale_mtof)>>16)
			if fx >= f_x && fx <= f_w-w && fy >= f_y && fy <= f_h-h {
				V_DrawPatch(fx, fy, marknums[i])
			}
		}
	}
}

func AM_drawCrosshair(color int32) {
	*(*uint8)(unsafe.Pointer(fb + uintptr(f_w*(f_h+int32(1))/int32(2)))) = uint8(color) // single point for now
}

func AM_Drawer() {
	if automapactive == 0 {
		return
	}
	AM_clearFB(BLACK)
	if grid != 0 {
		AM_drawGrid(6*16 + GRAYSRANGE/2)
	}
	AM_drawWalls()
	AM_drawPlayers()
	if cheating == 2 {
		AM_drawThings(7*16, int32(GREENRANGE))
	}
	AM_drawCrosshair(6 * 16)
	AM_drawMarks()
	V_MarkRect(f_x, f_y, f_w, f_h)
}

func init() {
	gamemode = indetermined
	gameversion = exe_final2
	doom1_endmsg = [8]string{
		0: __ccgo_ts_str(103),
		1: __ccgo_ts_str(150),
		2: __ccgo_ts_str(200),
		3: __ccgo_ts_str(251),
		4: __ccgo_ts_str(302),
		5: __ccgo_ts_str(359),
		6: __ccgo_ts_str(414),
		7: __ccgo_ts_str(470),
	}
	doom2_endmsg = [8]string{
		0: __ccgo_ts_str(103),
		1: __ccgo_ts_str(505),
		2: __ccgo_ts_str(555),
		3: __ccgo_ts_str(628),
		4: __ccgo_ts_str(680),
		5: __ccgo_ts_str(734),
		6: __ccgo_ts_str(792),
		7: __ccgo_ts_str(852),
	}
}

const MAXEVENTS = 64

var events [64]event_t
var eventhead int32
var eventtail int32

// C documentation
//
//	//
//	// D_PostEvent
//	// Called by the I/O functions when input is detected
//	//
func D_PostEvent(ev *event_t) {
	events[eventhead] = *ev
	eventhead = (eventhead + 1) % int32(MAXEVENTS)
}

// Read an event from the queue.

func D_PopEvent() *event_t {
	// No more events waiting.
	if eventtail == eventhead {
		return nil
	}
	result := &events[eventtail]
	// Advance to the next event in the queue.
	eventtail = (eventtail + 1) % MAXEVENTS
	return result
}

func init() {
	weaponinfo = [9]weaponinfo_t{
		0: {
			Fammo:       am_noammo,
			Fupstate:    S_PUNCHUP,
			Fdownstate:  S_PUNCHDOWN,
			Freadystate: S_PUNCH,
			Fatkstate:   S_PUNCH1,
		},
		1: {
			Fupstate:    S_PISTOLUP,
			Fdownstate:  S_PISTOLDOWN,
			Freadystate: S_PISTOL,
			Fatkstate:   S_PISTOL1,
			Fflashstate: S_PISTOLFLASH,
		},
		2: {
			Fammo:       am_shell,
			Fupstate:    S_SGUNUP,
			Fdownstate:  S_SGUNDOWN,
			Freadystate: S_SGUN,
			Fatkstate:   S_SGUN1,
			Fflashstate: S_SGUNFLASH1,
		},
		3: {
			Fupstate:    S_CHAINUP,
			Fdownstate:  S_CHAINDOWN,
			Freadystate: S_CHAIN,
			Fatkstate:   S_CHAIN1,
			Fflashstate: S_CHAINFLASH1,
		},
		4: {
			Fammo:       am_misl,
			Fupstate:    S_MISSILEUP,
			Fdownstate:  S_MISSILEDOWN,
			Freadystate: S_MISSILE,
			Fatkstate:   S_MISSILE1,
			Fflashstate: S_MISSILEFLASH1,
		},
		5: {
			Fammo:       am_cell,
			Fupstate:    S_PLASMAUP,
			Fdownstate:  S_PLASMADOWN,
			Freadystate: S_PLASMA,
			Fatkstate:   S_PLASMA1,
			Fflashstate: S_PLASMAFLASH1,
		},
		6: {
			Fammo:       am_cell,
			Fupstate:    S_BFGUP,
			Fdownstate:  S_BFGDOWN,
			Freadystate: S_BFG,
			Fatkstate:   S_BFG1,
			Fflashstate: S_BFGFLASH1,
		},
		7: {
			Fammo:       am_noammo,
			Fupstate:    S_SAWUP,
			Fdownstate:  S_SAWDOWN,
			Freadystate: S_SAW,
			Fatkstate:   S_SAW1,
		},
		8: {
			Fammo:       am_shell,
			Fupstate:    S_DSGUNUP,
			Fdownstate:  S_DSGUNDOWN,
			Freadystate: S_DSGUN,
			Fatkstate:   S_DSGUN1,
			Fflashstate: S_DSGUNFLASH1,
		},
	}
}

const MAX_IWAD_DIRS = 128

type iwad_t struct {
	Fname        string
	Fmission     GameMission_t
	Fmode        GameMode_t
	Fdescription string
}

//
// This is used to get the local FILE:LINE info from CPP
// prior to really call the function in question.
//

var iwads = [14]iwad_t{
	0: {
		Fname:        __ccgo_ts_str(911),
		Fmission:     doom2,
		Fmode:        commercial,
		Fdescription: __ccgo_ts_str(921),
	},
	1: {
		Fname:        __ccgo_ts_str(929),
		Fmission:     pack_plut,
		Fmode:        commercial,
		Fdescription: __ccgo_ts_str(942),
	},
	2: {
		Fname:        __ccgo_ts_str(974),
		Fmission:     pack_tnt,
		Fmode:        commercial,
		Fdescription: __ccgo_ts_str(982),
	},
	3: {
		Fname:        __ccgo_ts_str(1009),
		Fmode:        retail,
		Fdescription: __ccgo_ts_str(1018),
	},
	4: {
		Fname:        __ccgo_ts_str(1023),
		Fdescription: __ccgo_ts_str(1033),
	},
	5: {
		Fname:        __ccgo_ts_str(1048),
		Fmission:     pack_chex,
		Fdescription: __ccgo_ts_str(1057),
	},
	6: {
		Fname:        __ccgo_ts_str(1068),
		Fmission:     pack_hacx,
		Fmode:        commercial,
		Fdescription: __ccgo_ts_str(1077),
	},
	7: {
		Fname:        __ccgo_ts_str(1082),
		Fmission:     doom2,
		Fmode:        commercial,
		Fdescription: __ccgo_ts_str(1093),
	},
	8: {
		Fname:        __ccgo_ts_str(1100),
		Fmission:     doom2,
		Fmode:        commercial,
		Fdescription: __ccgo_ts_str(1114),
	},
	9: {
		Fname:        __ccgo_ts_str(1132),
		Fmode:        retail,
		Fdescription: __ccgo_ts_str(1146),
	},
	10: {
		Fname:        __ccgo_ts_str(1164),
		Fmission:     heretic,
		Fmode:        retail,
		Fdescription: __ccgo_ts_str(1176),
	},
	11: {
		Fname:        __ccgo_ts_str(1184),
		Fmission:     heretic,
		Fdescription: __ccgo_ts_str(1197),
	},
	12: {
		Fname:        __ccgo_ts_str(1215),
		Fmission:     hexen,
		Fmode:        commercial,
		Fdescription: __ccgo_ts_str(1225),
	},
	13: {
		Fname:        __ccgo_ts_str(1231),
		Fmission:     strife,
		Fmode:        commercial,
		Fdescription: __ccgo_ts_str(1243),
	},
}

// Array of locations to search for IWAD files
//
// "128 IWAD search directories should be enough for anybody".

var iwad_dirs [128]string
var num_iwad_dirs int32 = 0

func AddIWADDir(dir string) {
	if num_iwad_dirs < int32(MAX_IWAD_DIRS) {
		iwad_dirs[num_iwad_dirs] = dir
		num_iwad_dirs++
	}
}

// This is Windows-specific code that automatically finds the location
// of installed IWAD files.  The registry is inspected to find special
// keys installed by the Windows installers for various CD versions
// of Doom.  From these keys we can deduce where to find an IWAD.

// Returns true if the specified path is a path to a file
// of the specified name.

func DirIsFile(path string, filename string) (r boolean) {
	if strings.HasPrefix(filename, path) && path[len(path)-1] == '/' {
		return 1
	}
	return 0
}

// Check if the specified directory contains the specified IWAD
// file, returning the full path to the IWAD if found, or NULL
// if not found.

func CheckDirectoryHasIWAD(dir string, iwadname string) string {
	var filename string
	// As a special case, the "directory" may refer directly to an
	// IWAD file if the path comes from DOOMWADDIR or DOOMWADPATH.
	if DirIsFile(dir, iwadname) != 0 && M_FileExists(dir) != 0 {
		return dir
	}
	// Construct the full path to the IWAD if it is located in
	// this directory, and check if it exists.
	if dir == __ccgo_ts_str(1250) {
		filename = iwadname
	} else {
		filename = dir + __ccgo_ts_str(1252) + iwadname
	}
	fprintf_ccgo(os.Stdout, 1254, filename)
	if M_FileExists(filename) != 0 {
		return filename
	}
	return ""
}

// Search a directory to try to find an IWAD
// Returns the location of the IWAD if found, otherwise NULL.

func SearchDirectoryForIWAD(dir string, mask int32, mission *GameMission_t) string {
	var filename string
	var i uint64
	i = 0
	for {
		if i >= 336/24 {
			break
		}
		if 1<<iwads[i].Fmission&mask == 0 {
			goto _1
		}
		filename = CheckDirectoryHasIWAD(dir, iwads[i].Fname)
		if filename != "" {
			*mission = iwads[i].Fmission
			return filename
		}
		goto _1
	_1:
		;
		i++
	}
	return ""
}

// When given an IWAD with the '-iwad' parameter,
// attempt to identify it by its name.

func IdentifyIWADByName(name string, mask int32) (r GameMission_t) {
	var i uint64
	var mission GameMission_t
	mission = none
	i = 0
	for {
		if i >= 336/24 {
			break
		}
		// Check if the filename is this IWAD name.
		// Only use supported missions:
		if 1<<iwads[i].Fmission&mask == 0 {
			goto _1
		}
		// Check if it ends in this IWAD name.
		if name == iwads[i].Fname {
			mission = iwads[i].Fmission
			break
		}
		goto _1
	_1:
		;
		i++
	}
	return mission
}

//
// Build a list of IWAD files
//

func BuildIWADDirList() {
	AddIWADDir(__ccgo_ts_str(1250))
}

//
// Searches WAD search paths for an WAD with a specific filename.
//

func D_FindWADByName(name string) string {
	var i int32
	// Absolute path?
	if M_FileExists(name) != 0 {
		return name
	}
	BuildIWADDirList()
	// Search through all IWAD paths for a file with the given name.
	i = 0
	for {
		if i >= num_iwad_dirs {
			break
		}
		// As a special case, if this is in DOOMWADDIR or DOOMWADPATH,
		// the "directory" may actually refer directly to an IWAD
		// file.
		if DirIsFile(iwad_dirs[i], name) != 0 && M_FileExists(iwad_dirs[i]) != 0 {
			return iwad_dirs[i]
		}
		// Construct a string for the full path
		path := iwad_dirs[i] + __ccgo_ts_str(1252)
		if M_FileExists(path) != 0 {
			return path
		}
		goto _1
	_1:
		;
		i++
	}
	// File not found
	return ""
}

//
// D_TryWADByName
//
// Searches for a WAD by its filename, or passes through the filename
// if not found.
//

func D_TryFindWADByName(filename string) string {
	result := D_FindWADByName(filename)
	if result != "" {
		return result
	} else {
		return filename
	}
}

//
// FindIWAD
// Checks availability of IWAD files by name,
// to determine whether registered/commercial features
// should be executed (notably loading PWADs).
//

func D_FindIWAD(mask int32, mission *GameMission_t) string {
	var i, iwadparm int32
	var result string
	var iwadfile string
	// Check for the -iwad parameter
	//!
	// Specify an IWAD file to use.
	//
	// @arg <file>
	//
	iwadparm = M_CheckParmWithArgs(__ccgo_ts_str(1275), 1)
	if iwadparm != 0 {
		// Search through IWAD dirs for an IWAD with the given name.
		iwadfile = myargs[iwadparm+1]
		result = D_FindWADByName(iwadfile)
		if result == "" {
			I_Error(1281, iwadfile)
		}
		*mission = IdentifyIWADByName(result, mask)
	} else {
		// Search through the list and look for an IWAD
		fprintf_ccgo(os.Stdout, 1307)
		result = ""
		BuildIWADDirList()
		i = 0
		for {
			if !(result == "" && i < num_iwad_dirs) {
				break
			}
			result = SearchDirectoryForIWAD(iwad_dirs[i], mask, mission)
			goto _1
		_1:
			;
			i++
		}
	}
	return result
}

//
// Get the IWAD name used for savegames.
//

func D_SaveGameIWADName(gamemission GameMission_t) string {
	var i uint64
	// Determine the IWAD name to use for savegames.
	// This determines the directory the savegame files get put into.
	//
	// Note that we match on gamemission rather than on IWAD name.
	// This ensures that doom1.wad and doom.wad saves are stored
	// in the same place.
	i = 0
	for {
		if i >= 336/24 {
			break
		}
		if gamemission == iwads[i].Fmission {
			return iwads[i].Fname
		}
		goto _1
	_1:
		;
		i++
	}
	// Default fallback:
	return __ccgo_ts_str(1353)
}

func D_SuggestGameName(mission GameMission_t, mode GameMode_t) string {
	for i := 0; i < len(iwads); i++ {
		if iwads[i].Fmission == mission && (mode == indetermined || iwads[i].Fmode == mode) {
			return iwads[i].Fdescription
		}
	}
	return __ccgo_ts_str(1365)
}

// The complete set of data for a particular tic.

type ticcmd_set_t struct {
	Fcmds   [8]ticcmd_t
	Fingame [8]boolean
}

//
// gametic is the tic about to (or currently being) run
// maketic is the tic that hasn't had control made for it yet
// recvtic is the latest tic received from the server.
//
// a gametic cannot be run until ticcmds are received for it
// from all players.
//

var ticdata [128]ticcmd_set_t

// The index of the next tic to be made (with a call to BuildTiccmd).

var maketic int32

// The number of complete tics received from the server so far.

var recvtic int32

// Index of the local player.

var localplayer int32

// Used for original sync code.

var skiptics int32 = 0

// Use new client syncronisation code

var new_sync uint32 = 1

// Callback functions for loop code.

var loop_interface *loop_interface_t

// Current players in the multiplayer game.
// This is distinct from playeringame[] used by the game code, which may
// modify playeringame[] when playing back multiplayer demos.

var local_playeringame [8]boolean

// Requested player class "sent" to the server on connect.
// If we are only doing a single player game then this needs to be remembered
// and saved in the game settings.

var player_class int32

// 35 fps clock adjusted by offsetms milliseconds

func GetAdjustedTime() (r int32) {
	var time_ms int32
	time_ms = I_GetTimeMS()
	if new_sync != 0 {
		// Use the adjustments from net_client.c only if we are
		// using the new sync mode.
		time_ms += offsetms / (1 << FRACBITS)
	}
	return time_ms * int32(TICRATE) / 1000
}

func BuildNewTic() (r boolean) {
	var cmd ticcmd_t
	var gameticdiv int32
	gameticdiv = gametic / ticdup
	I_StartTic()
	loop_interface.FProcessEvents()
	// Always run the menu
	loop_interface.FRunMenu()
	if drone != 0 {
		// In drone mode, do not generate any ticcmds.
		return 0
	}
	if new_sync != 0 {
		// If playing single player, do not allow tics to buffer
		// up very far
		if net_client_connected == 0 && maketic-gameticdiv > 2 {
			return 0
		}
		// Never go more than ~200ms ahead
		if maketic-gameticdiv > 8 {
			return 0
		}
	} else {
		if maketic-gameticdiv >= 5 {
			return 0
		}
	}
	//printf ("mk:%i ",maketic);
	loop_interface.FBuildTiccmd(&cmd, maketic)

	ticdata[maketic%BACKUPTICS].Fcmds[localplayer] = cmd
	ticdata[maketic%BACKUPTICS].Fingame[localplayer] = 1

	maketic++
	return 1
}

func NetUpdate() {
	var i, newtics, nowtime int32
	// If we are running with singletics (timing a demo), this
	// is all done separately.
	if singletics != 0 {
		return
	}
	// check time
	nowtime = GetAdjustedTime() / ticdup
	newtics = nowtime - lasttime
	lasttime = nowtime
	if skiptics <= newtics {
		newtics -= skiptics
		skiptics = 0
	} else {
		skiptics -= newtics
		newtics = 0
	}
	// build new ticcmds for console player
	i = 0
	for {
		if i >= newtics {
			break
		}
		if BuildNewTic() == 0 {
			break
		}
		goto _1
	_1:
		;
		i++
	}
}

//
// Start game loop
//
// Called after the screen is set but before the game starts running.
//

func D_StartGameLoop() {
	lasttime = GetAdjustedTime() / ticdup
}

func D_StartNetGame(settings *net_gamesettings_t, callback netgame_startup_callback_t) {
	settings.Fconsoleplayer = 0
	settings.Fnum_players = 1
	settings.Fplayer_classes[0] = player_class
	settings.Fnew_sync = 0
	settings.Fextratics = 1
	settings.Fticdup = 1
	ticdup = settings.Fticdup
	new_sync = uint32(settings.Fnew_sync)
}

func D_InitNetGame(connect_data *net_connect_data_t) (r boolean) {
	// Call D_QuitNetGame on exit:
	I_AtExit(D_QuitNetGame, 1)
	player_class = connect_data.Fplayer_class
	return 0
}

// C documentation
//
//	//
//	// D_QuitNetGame
//	// Called before quitting to leave a net game
//	// without hanging the other players
//	//
func D_QuitNetGame() {
}

func GetLowTic() (r int32) {
	var lowtic int32
	lowtic = maketic
	return lowtic
}

var frameon int32
var frameskip [4]int32
var oldnettics int32

func OldNetSync() {
	var i uint32
	var keyplayer int32
	keyplayer = -1
	frameon++
	// ideally maketic should be 1 - 3 tics above lowtic
	// if we are consistantly slower, speed up time
	i = 0
	for {
		if i >= uint32(NET_MAXPLAYERS) {
			break
		}
		if local_playeringame[i] != 0 {
			keyplayer = int32(i)
			break
		}
		goto _1
	_1:
		;
		i++
	}
	if keyplayer < 0 {
		// If there are no players, we can never advance anyway
		return
	}
	if localplayer == keyplayer {
		// the key player does not adapt
	} else {
		if maketic <= recvtic {
			lasttime--
			// printf ("-");
		}
		frameskip[frameon&int32(3)] = boolint32(oldnettics > recvtic)
		oldnettics = maketic
		if frameskip[0] != 0 && frameskip[int32(1)] != 0 && frameskip[int32(2)] != 0 && frameskip[int32(3)] != 0 {
			skiptics = 1
			// printf ("+");
		}
	}
}

// Returns true if there are players in the game:

func PlayersInGame() (r boolean) {
	var i uint32
	var result boolean
	result = 0
	// If we are connected to a server, check if there are any players
	// in the game.
	if net_client_connected != 0 {
		i = 0
		for {
			if i >= uint32(NET_MAXPLAYERS) {
				break
			}
			result = booluint32(result != 0 || local_playeringame[i] != 0)
			goto _1
		_1:
			;
			i++
		}
	}
	// Whether single or multi-player, unless we are running as a drone,
	// we are in the game.
	if drone == 0 {
		result = 1
	}
	return result
}

// When using ticdup, certain values must be cleared out when running
// the duplicate ticcmds.

func TicdupSquash(set *ticcmd_set_t) {
	var i uint32
	i = 0
	for {
		if i >= uint32(NET_MAXPLAYERS) {
			break
		}
		cmd := &set.Fcmds[i]
		cmd.Fchatchar = 0
		if int32(cmd.Fbuttons)&BT_SPECIAL != 0 {
			cmd.Fbuttons = 0
		}
		goto _1
	_1:
		;
		i++
	}
}

// When running in single player mode, clear all the ingame[] array
// except the local player.

func SinglePlayerClear(set *ticcmd_set_t) {
	var i uint32
	i = 0
	for {
		if i >= uint32(NET_MAXPLAYERS) {
			break
		}
		if i != uint32(localplayer) {
			set.Fingame[i] = 0
		}
		goto _1
	_1:
		;
		i++
	}
}

//
// TryRunTics
//

func TryRunTics() {
	var availabletics, counts, entertic, i, lowtic, realtics, v1 int32
	var set *ticcmd_set_t
	// get real tics
	entertic = I_GetTime() / ticdup
	realtics = entertic - oldentertics
	oldentertics = entertic
	// in singletics mode, run a single tic every time this function
	// is called.
	if singletics != 0 {
		BuildNewTic()
	} else {
		NetUpdate()
	}
	lowtic = GetLowTic()
	availabletics = lowtic - gametic/ticdup
	// decide how many tics to run
	if new_sync != 0 {
		counts = availabletics
	} else {
		// decide how many tics to run
		if realtics < availabletics-1 {
			counts = realtics + 1
		} else {
			if realtics < availabletics {
				counts = realtics
			} else {
				counts = availabletics
			}
		}
		if counts < 1 {
			counts = 1
		}
		if net_client_connected != 0 {
			OldNetSync()
		}
	}
	if counts < 1 {
		counts = 1
	}
	// wait for new tics if needed
	for PlayersInGame() == 0 || lowtic < gametic/ticdup+counts {
		NetUpdate()
		lowtic = GetLowTic()
		if lowtic < gametic/ticdup {
			I_Error(1446, 0)
		}
		// Don't stay in this loop forever.  The menu is still running,
		// so return to update the screen
		if I_GetTime()/ticdup-entertic > 0 {
			return
		}
		I_Sleep(1)
	}
	// run the count * ticdup dics
	for {
		v1 = counts
		counts--
		if v1 == 0 {
			break
		}
		if PlayersInGame() == 0 {
			return
		}
		set = &ticdata[gametic/ticdup%BACKUPTICS]
		if net_client_connected == 0 {
			SinglePlayerClear(set)
		}
		i = 0
		for {
			if i >= ticdup {
				break
			}
			if gametic/ticdup > lowtic {
				I_Error(1475, 0)
			}
			local_playeringame = set.Fingame
			loop_interface.FRunTic(set.Fcmds[:], set.Fingame[:])
			gametic++
			// modify command for duplicated tics
			TicdupSquash(set)
			goto _2
		_2:
			;
			i++
		}
		NetUpdate() // check for new console commands
	}
}

var oldentertics int32

func D_RegisterLoopCallbacks(i *loop_interface_t) {
	loop_interface = i
}

const HU_BROADCAST = 5
const HU_MSGHEIGHT = 1
const HU_MSGX = 0
const HU_MSGY = 0
const NUM_VIRTUAL_BUTTONS = 10
const SAVESTRINGSIZE = 24

type sfxinfo_t struct {
	Ftagname     uintptr
	Fname        [9]int8
	Fpriority    int32
	Flink        uintptr
	Fpitch       int32
	Fvolume      int32
	Fusefulness  int32
	Flumpnum     int32
	Fnumchannels int32
	Fdriver_data uintptr
}

type musicinfo_t struct {
	Fname    uintptr
	Flumpnum int32
	Fdata    uintptr
	Fhandle  uintptr
}

type snddevice_t = int32

const SNDDEVICE_ADLIB = 2
const SNDDEVICE_SB = 3
const SNDDEVICE_GUS = 5
const SNDDEVICE_GENMIDI = 8

type sound_module_t struct {
	Fsound_devices     []snddevice_t
	Fnum_sound_devices int32
	FInit              func(boolean) boolean
	FShutdown          func()
	FGetSfxLumpNum     func(sfxinfo *sfxinfo_t) int32
	FUpdate            func()
	FUpdateSoundParams func(channel int32, vol int32, sep int32)
	FStartSound        func(sfxinfo *sfxinfo_t, channel int32, vol int32, sep int32) int32
	FStopSound         func(channel int32)
	FSoundIsPlaying    func(channel int32) boolean
	FCacheSounds       func([]sfxinfo_t) boolean
}

type music_module_t struct {
	Fsound_devices     uintptr
	Fnum_sound_devices int32
	FInit              func()
	FShutdown          func()
	FSetMusicVolume    func(volume int32)
	FPauseMusic        func()
	FResumeMusic       func()
	FRegisterSong      func(data uintptr, len1 int32) (r uintptr)
	FUnRegisterSong    func(handle uintptr)
	FPlaySong          func(handle uintptr, looping boolean) (r boolean)
	FStopSong          func()
	FMusicIsPlaying    uintptr
	FPoll              func()
}

const mus_None = 0
const mus_e1m1 = 1
const mus_e1m5 = 5
const mus_e1m9 = 9
const mus_e2m4 = 13
const mus_e2m5 = 14
const mus_e2m6 = 15
const mus_e2m7 = 16
const mus_e3m2 = 20
const mus_e3m3 = 21
const mus_e3m4 = 22
const mus_inter = 28
const mus_intro = 29
const mus_bunny = 30
const mus_victor = 31
const mus_introa = 32
const mus_runnin = 33
const mus_evil = 63
const mus_read_m = 65
const mus_dm2ttl = 66
const mus_dm2int = 67
const NUMMUSIC = 68
const sfx_pistol = 1
const sfx_shotgn = 2
const sfx_sgcock = 3
const sfx_dshtgn = 4
const sfx_dbopn = 5
const sfx_dbcls = 6
const sfx_dbload = 7
const sfx_plasma = 8
const sfx_bfg = 9
const sfx_sawup = 10
const sfx_sawidl = 11
const sfx_sawful = 12
const sfx_sawhit = 13
const sfx_rlaunc = 14
const sfx_rxplod = 15
const sfx_firsht = 16
const sfx_firxpl = 17
const sfx_pstart = 18
const sfx_pstop = 19
const sfx_doropn = 20
const sfx_dorcls = 21
const sfx_stnmov = 22
const sfx_swtchn = 23
const sfx_swtchx = 24
const sfx_plpain = 25
const sfx_dmpain = 26
const sfx_popain = 27
const sfx_vipain = 28
const sfx_mnpain = 29
const sfx_pepain = 30
const sfx_slop = 31
const sfx_itemup = 32
const sfx_wpnup = 33
const sfx_oof = 34
const sfx_telept = 35
const sfx_posit1 = 36
const sfx_posit2 = 37
const sfx_posit3 = 38
const sfx_bgsit1 = 39
const sfx_bgsit2 = 40
const sfx_sgtsit = 41
const sfx_cacsit = 42
const sfx_brssit = 43
const sfx_cybsit = 44
const sfx_spisit = 45
const sfx_bspsit = 46
const sfx_kntsit = 47
const sfx_vilsit = 48
const sfx_mansit = 49
const sfx_pesit = 50
const sfx_sklatk = 51
const sfx_sgtatk = 52
const sfx_skepch = 53
const sfx_vilatk = 54
const sfx_claw = 55
const sfx_skeswg = 56
const sfx_pldeth = 57
const sfx_pdiehi = 58
const sfx_podth1 = 59
const sfx_podth2 = 60
const sfx_podth3 = 61
const sfx_bgdth1 = 62
const sfx_bgdth2 = 63
const sfx_sgtdth = 64
const sfx_cacdth = 65
const sfx_brsdth = 67
const sfx_cybdth = 68
const sfx_spidth = 69
const sfx_bspdth = 70
const sfx_vildth = 71
const sfx_kntdth = 72
const sfx_pedth = 73
const sfx_skedth = 74
const sfx_posact = 75
const sfx_bgact = 76
const sfx_dmact = 77
const sfx_bspact = 78
const sfx_bspwlk = 79
const sfx_vilact = 80
const sfx_noway = 81
const sfx_barexp = 82
const sfx_punch = 83
const sfx_hoof = 84
const sfx_metal = 85
const sfx_tink = 87
const sfx_bdopn = 88
const sfx_bdcls = 89
const sfx_itmbk = 90
const sfx_flame = 91
const sfx_flamst = 92
const sfx_getpow = 93
const sfx_bospit = 94
const sfx_boscub = 95
const sfx_bossit = 96
const sfx_bospn = 97
const sfx_bosdth = 98
const sfx_manatk = 99
const sfx_mandth = 100
const sfx_sssit = 101
const sfx_ssdth = 102
const sfx_keenpn = 103
const sfx_keendt = 104
const sfx_skeact = 105
const sfx_skesit = 106
const sfx_skeatk = 107
const sfx_radio = 108
const NUMSFX = 109
const wipe_Melt = 1

type stateenum_t = int32

const NoState = -1
const StatCount = 0
const ShowNextLoc = 1

func init() {
	show_endoom = 1
}

// C documentation
//
//	//
//	// D_ProcessEvents
//	// Send all the events of the given timestamp down the responder chain
//	//
func D_ProcessEvents() {
	// IF STORE DEMO, DO NOT ACCEPT INPUT
	if storedemo != 0 {
		return
	}
	for {
		ev := D_PopEvent()
		if ev == nil {
			break
		}
		if M_Responder(ev) != 0 {
			continue
		} // menu ate the event
		G_Responder(ev)
	}
}

func init() {
	wipegamestate = GS_DEMOSCREEN
}

func D_Display() {
	var done, redrawsbar, wipe boolean
	var nowtime, tics, wipestart, y int32
	var v1 gamestate_t
	if nodrawers != 0 {
		return
	} // for comparative timing / profiling
	redrawsbar = 0
	// change the view size if needed
	if setsizeneeded != 0 {
		R_ExecuteSetViewSize()
		oldgamestate1 = -1 // force background redraw
		borderdrawcount = 3
	}
	// save the current screen if about to wipe
	if gamestate != wipegamestate {
		wipe = 1
		wipe_StartScreen(0, 0, SCREENWIDTH, SCREENHEIGHT)
	} else {
		wipe = 0
	}
	if gamestate == GS_LEVEL && gametic != 0 {
		HU_Erase()
	}
	// do buffered drawing
	switch gamestate {
	case GS_LEVEL:
		if gametic == 0 {
			break
		}
		if automapactive != 0 {
			AM_Drawer()
		}
		if wipe != 0 || viewheight != 200 && fullscreen != 0 {
			redrawsbar = 1
		}
		if inhelpscreensstate != 0 && inhelpscreens == 0 {
			redrawsbar = 1
		} // just put away the help screen
		ST_Drawer(booluint32(viewheight == 200), redrawsbar)
		fullscreen = booluint32(viewheight == 200)
	case GS_INTERMISSION:
		WI_Drawer()
	case GS_FINALE:
		F_Drawer()
	case GS_DEMOSCREEN:
		D_PageDrawer()
		break
	}
	// draw buffered stuff to screen
	I_UpdateNoBlit()
	// draw the view directly
	if gamestate == GS_LEVEL && automapactive == 0 && gametic != 0 {
		R_RenderPlayerView(&players[displayplayer])
	}
	if gamestate == GS_LEVEL && gametic != 0 {
		HU_Drawer()
	}
	// clean up border stuff
	if gamestate != oldgamestate1 && gamestate != GS_LEVEL {
		I_SetPalette(W_CacheLumpName(__ccgo_ts(1490), int32(PU_CACHE)))
	}
	// see if the border needs to be initially drawn
	if gamestate == GS_LEVEL && oldgamestate1 != GS_LEVEL {
		viewactivestate = 0 // view was not active
		R_FillBackScreen()  // draw the pattern into the back screen
	}
	// see if the border needs to be updated to the screen
	if gamestate == GS_LEVEL && automapactive == 0 && scaledviewwidth != 320 {
		if menuactive != 0 || menuactivestate != 0 || viewactivestate == 0 {
			borderdrawcount = 3
		}
		if borderdrawcount != 0 {
			R_DrawViewBorder() // erase old menu stuff
			borderdrawcount--
		}
	}
	if testcontrols != 0 {
		// Box showing current mouse speed
		V_DrawMouseSpeedBox(testcontrols_mousespeed)
	}
	menuactivestate = menuactive
	viewactivestate = viewactive
	inhelpscreensstate = inhelpscreens
	v1 = gamestate
	wipegamestate = v1
	oldgamestate1 = v1
	// draw pause pic
	if paused != 0 {
		if automapactive != 0 {
			y = 4
		} else {
			y = viewwindowy + 4
		}
		V_DrawPatchDirect(viewwindowx+(scaledviewwidth-int32(68))/int32(2), y, W_CacheLumpNameT(__ccgo_ts(1498), int32(PU_CACHE)))
	}
	// menus go directly to the screen
	M_Drawer()  // menu is drawn even on top of everything
	NetUpdate() // send out any new accumulation
	// normal update
	if wipe == 0 {
		I_FinishUpdate() // page flip or blit buffer
		return
	}
	// wipe update
	wipe_EndScreen(0, 0, SCREENWIDTH, SCREENHEIGHT)
	wipestart = I_GetTime() - 1
	for cond := true; cond; cond = done == 0 {
		for cond := true; cond; cond = tics <= 0 {
			nowtime = I_GetTime()
			tics = nowtime - wipestart
			I_Sleep(1)
		}
		wipestart = nowtime
		done = uint32(wipe_ScreenWipe(int32(wipe_Melt), 0, 0, SCREENWIDTH, SCREENHEIGHT, tics))
		I_UpdateNoBlit()
		M_Drawer()       // menu is drawn even on top of wipes
		I_FinishUpdate() // page flip or blit buffer
	}
}

var viewactivestate boolean

var menuactivestate boolean

var inhelpscreensstate boolean

var fullscreen boolean

var oldgamestate1 gamestate_t = -1

var borderdrawcount int32

//
// Add configuration file variable bindings.
//

func D_BindVariables() {
	bp := alloc(32)
	var i int32
	M_ApplyPlatformDefaults()
	I_BindVideoVariables()
	I_BindJoystickVariables()
	I_BindSoundVariables()
	M_BindBaseControls()
	M_BindWeaponControls()
	M_BindMapControls()
	M_BindMenuControls()
	M_BindChatControls(uint32(MAXPLAYERS))
	key_multi_msgplayer[0] = int32('g')
	key_multi_msgplayer[int32(1)] = int32('i')
	key_multi_msgplayer[int32(2)] = int32('b')
	key_multi_msgplayer[int32(3)] = int32('r')
	M_BindVariable(__ccgo_ts(1506), uintptr(unsafe.Pointer(&mouseSensitivity)))
	M_BindVariable(__ccgo_ts(1524), uintptr(unsafe.Pointer(&sfxVolume)))
	M_BindVariable(__ccgo_ts(1535), uintptr(unsafe.Pointer(&musicVolume)))
	M_BindVariable(__ccgo_ts(1548), uintptr(unsafe.Pointer(&showMessages)))
	M_BindVariable(__ccgo_ts(1562), uintptr(unsafe.Pointer(&screenblocks)))
	M_BindVariable(__ccgo_ts(1575), uintptr(unsafe.Pointer(&detailLevel)))
	M_BindVariable(__ccgo_ts(1587), uintptr(unsafe.Pointer(&snd_channels)))
	M_BindVariable(__ccgo_ts(1600), uintptr(unsafe.Pointer(&vanilla_savegame_limit)))
	M_BindVariable(__ccgo_ts(1623), uintptr(unsafe.Pointer(&vanilla_demo_limit)))
	M_BindVariable(__ccgo_ts(1642), uintptr(unsafe.Pointer(&show_endoom)))
	// Multiplayer chat macros
	i = 0
	for {
		if i >= 10 {
			break
		}
		M_snprintf(bp, 12, __ccgo_ts_str(1654), i)
		M_BindVariable(bp, uintptr(unsafe.Pointer(&chat_macros[i])))
		goto _1
	_1:
		;
		i++
	}
}

//
// D_GrabMouseCallback
//
// Called to determine whether to grab the mouse pointer
//

func D_GrabMouseCallback() (r boolean) {
	// Drone players don't need mouse focus
	if drone != 0 {
		return 0
	}
	// when menu is active or game is paused, release the mouse
	if menuactive != 0 || paused != 0 {
		return 0
	}
	// only grab mouse when playing levels (but not demos)
	return booluint32(gamestate == GS_LEVEL && demoplayback == 0 && advancedemo == 0)
}

func doomgeneric_Tick() {
	// frame syncronous IO operations
	I_StartFrame()
	TryRunTics() // will run at least one tic
	var dmo *degenmobj_t
	if players[consoleplayer].Fmo != nil {
		dmo = &players[consoleplayer].Fmo.degenmobj_t // console player
	}
	S_UpdateSounds(dmo) // move positional sounds
	// Update display, next frame, with current state.
	D_Display()
}

// C documentation
//
//	//
//	//  D_DoomLoop
//	//
func D_DoomLoop() {
	if bfgedition != 0 && (demorecording != 0 || gameaction == ga_playdemo || netgame != 0) {
		fprintf_ccgo(os.Stdout, 1666)
	}
	if demorecording != 0 {
		G_BeginRecording()
	}
	main_loop_started = 1
	TryRunTics()
	I_SetWindowTitle(gamedescription)
	I_GraphicsCheckCommandLine()
	I_SetGrabMouseCallback(D_GrabMouseCallback)
	I_InitGraphics()
	I_EnableLoadingDisk()
	V_RestoreBuffer()
	R_ExecuteSetViewSize()
	D_StartGameLoop()
	if testcontrols != 0 {
		wipegamestate = gamestate
	}
	doomgeneric_Tick()
}

// C documentation
//
//	//
//	// D_PageTicker
//	// Handles timing for warped projection
//	//
func D_PageTicker() {
	var v1 int32
	pagetic--
	v1 = pagetic
	if v1 < 0 {
		D_AdvanceDemo()
	}
}

// C documentation
//
//	//
//	// D_PageDrawer
//	//
func D_PageDrawer() {
	V_DrawPatch(0, 0, W_CacheLumpNameT(pagename, int32(PU_CACHE)))
}

// C documentation
//
//	//
//	// D_AdvanceDemo
//	// Called after each demo or intro demosequence finishes
//	//
func D_AdvanceDemo() {
	advancedemo = 1
}

// C documentation
//
//	//
//	// This cycles through the demo sequences.
//	// FIXME - version dependend demo numbers?
//	//
func D_DoAdvanceDemo() {
	players[consoleplayer].Fplayerstate = int32(PST_LIVE) // not reborn
	advancedemo = 0
	usergame = 0 // no save / end game here
	paused = 0
	gameaction = ga_nothing
	// The Ultimate Doom executable changed the demo sequence to add
	// a DEMO4 demo.  Final Doom was based on Ultimate, so also
	// includes this change; however, the Final Doom IWADs do not
	// include a DEMO4 lump, so the game bombs out with an error
	// when it reaches this point in the demo sequence.
	// However! There is an alternate version of Final Doom that
	// includes a fixed executable.
	if gameversion == exe_ultimate || gameversion == exe_final {
		demosequence = (demosequence + 1) % 7
	} else {
		demosequence = (demosequence + 1) % 6
	}
	switch demosequence {
	case 0:
		if gamemode == commercial {
			pagetic = TICRATE * 11
		} else {
			pagetic = 170
		}
		gamestate = GS_DEMOSCREEN
		pagename = __ccgo_ts(1896)
		if gamemode == commercial {
			S_StartMusic(int32(mus_dm2ttl))
		} else {
			S_StartMusic(int32(mus_intro))
		}
	case 1:
		G_DeferedPlayDemo(__ccgo_ts_str(1905))
	case 2:
		pagetic = 200
		gamestate = GS_DEMOSCREEN
		pagename = __ccgo_ts(1911)
	case 3:
		G_DeferedPlayDemo(__ccgo_ts_str(1918))
	case 4:
		gamestate = GS_DEMOSCREEN
		if gamemode == commercial {
			pagetic = TICRATE * 11
			pagename = __ccgo_ts(1896)
			S_StartMusic(int32(mus_dm2ttl))
		} else {
			pagetic = 200
			if gamemode == retail {
				pagename = __ccgo_ts(1911)
			} else {
				pagename = __ccgo_ts(1924)
			}
		}
	case 5:
		G_DeferedPlayDemo(__ccgo_ts_str(1930))
		break
		// THE DEFINITIVE DOOM Special Edition demo
		fallthrough
	case 6:
		G_DeferedPlayDemo(__ccgo_ts_str(1936))
		break
	}
	// The Doom 3: BFG Edition version of doom2.wad does not have a
	// TITLETPIC lump. Use INTERPIC instead as a workaround.
	if bfgedition != 0 && xstrcasecmp(pagename, __ccgo_ts(1896)) == 0 && W_CheckNumForName(__ccgo_ts(1942)) < 0 {
		pagename = __ccgo_ts(1951)
	}
}

// C documentation
//
//	//
//	// D_StartTitle
//	//
func D_StartTitle() {
	gameaction = ga_nothing
	demosequence = -1
	D_AdvanceDemo()
}

// Strings for dehacked replacements of the startup banner
//
// These are from the original source: some of them are perhaps
// not used in any dehacked patches

var banners = [7]string{
	0: __ccgo_ts_str(1960),
	1: __ccgo_ts_str(2041),
	2: __ccgo_ts_str(2126),
	3: __ccgo_ts_str(2212),
	4: __ccgo_ts_str(2291),
	5: __ccgo_ts_str(2373),
	6: __ccgo_ts_str(2452),
}

//
// Get game name: if the startup banner has been replaced, use that.
// Otherwise, use the name given
//

func GetGameName(gamename string) string {
	var deh_sub string
	var i uint64
	var version, v2, v3, v6, v7 int32
	i = 0
	for {
		if i >= 56/8 {
			break
		}
		// Has the banner been replaced?
		deh_sub = banners[i]
		if deh_sub != banners[i] {
			// Has been replaced.
			// We need to expand via printf to include the Doom version number
			// We also need to cut off spaces to get the basic name
			version = G_VanillaVersionCode()
			gamename = fmt.Sprintf(deh_sub, version/int32(100), version%int32(100))
			for {
				if len(gamename) >= 1 {
					v2 = int32(gamename[0])
					v3 = boolint32(v2 == int32(' ') || uint32(v2)-uint32('\t') < 5)
					goto _4
				_4:
				}
				if !(len(gamename) >= 1 && v3 != 0) {
					break
				}
				gamename = gamename[1:]
			}
			for {
				if len(gamename) >= 1 {
					v6 = int32(gamename[len(gamename)-1])
					v7 = boolint32(v6 == int32(' ') || uint32(v6)-uint32('\t') < 5)
					goto _8
				_8:
				}
				if !(len(gamename) >= 1 && v7 != 0) {
					break
				}
				gamename = gamename[:len(gamename)-1]
			}
			return gamename
		}
		goto _1
	_1:
		;
		i++
	}
	return gamename
}

func SetMissionForPackName(pack_name string) {
	var i int32
	i = 0
	for {
		if uint64(i) >= 48/16 {
			break
		}
		if strings.EqualFold(pack_name, packs[i].Fname) {
			gamemission = packs[i].Fmission
			return
		}
		goto _1
	_1:
		;
		i++
	}
	fprintf_ccgo(os.Stdout, 2552)
	i = 0
	for {
		if uint64(i) >= 48/16 {
			break
		}
		fprintf_ccgo(os.Stdout, 2578, packs[i].Fname)
		goto _2
	_2:
		;
		i++
	}
	I_Error(2583, pack_name)
}

var packs = [3]struct {
	Fname    string
	Fmission GameMission_t
}{
	0: {
		Fname:    __ccgo_ts_str(2533),
		Fmission: doom2,
	},
	1: {
		Fname:    __ccgo_ts_str(2539),
		Fmission: pack_tnt,
	},
	2: {
		Fname:    __ccgo_ts_str(2543),
		Fmission: pack_plut,
	},
}

//
// Find out what version of Doom is playing.
//

func D_IdentifyVersion() {
	var i uint32
	var p int32
	var v2, v3 GameMission_t
	// gamemission is set up by the D_FindIWAD function.  But if
	// we specify '-iwad', we have to identify using
	// IdentifyIWADByName.  However, if the iwad does not match
	// any known IWAD name, we may have a dilemma.  Try to
	// identify by its contents.
	if gamemission == none {
		i = 0
		for {
			if i >= numlumps {
				break
			}
			if xstrncasecmp(lumpinfo[i].NamePtr(), __ccgo_ts(2613), 8) == 0 {
				gamemission = doom2
				break
			} else {
				if xstrncasecmp(lumpinfo[i].NamePtr(), __ccgo_ts(2619), 8) == 0 {
					gamemission = doom
					break
				}
			}
			goto _1
		_1:
			;
			i++
		}
		if gamemission == none {
			// Still no idea.  I don't think this is going to work.
			I_Error(2624, 0)
		}
	}
	// Make sure gamemode is set up correctly
	if gamemission == pack_chex {
		v2 = doom
	} else {
		if gamemission == pack_hacx {
			v3 = doom2
		} else {
			v3 = gamemission
		}
		v2 = v3
	}
	if v2 == doom {
		// Doom 1.  But which version?
		if W_CheckNumForName(__ccgo_ts(2654)) > 0 {
			// Ultimate Doom
			gamemode = retail
		} else {
			if W_CheckNumForName(__ccgo_ts(2659)) > 0 {
				gamemode = registered
			} else {
				gamemode = shareware
			}
		}
	} else {
		// Doom 2 of some kind.
		gamemode = commercial
		// We can manually override the gamemission that we got from the
		// IWAD detection code. This allows us to eg. play Plutonia 2
		// with Freedoom and get the right level names.
		//!
		// @arg <pack>
		//
		// Explicitly specify a Doom II "mission pack" to run as, instead of
		// detecting it based on the filename. Valid values are: "doom2",
		// "tnt" and "plutonia".
		//
		p = M_CheckParmWithArgs(__ccgo_ts_str(2664), 1)
		if p > 0 {
			SetMissionForPackName(myargs[p+1])
		}
	}
}

// Set the gamedescription string

func D_SetGameDescription() {
	var is_freedm, is_freedoom boolean
	var v7, v5, v3, v1 GameMission_t
	is_freedoom = booluint32(W_CheckNumForName(__ccgo_ts(2670)) >= 0)
	is_freedm = booluint32(W_CheckNumForName(__ccgo_ts(2679)) >= 0)
	gamedescription = __ccgo_ts_str(2686)
	if gamemission == pack_chex {
		v1 = doom
	} else {
		if gamemission == pack_hacx {
			v1 = doom2
		} else {
			v1 = gamemission
		}
	}
	if v1 == doom {
		// Doom 1.  But which version?
		if is_freedoom != 0 {
			gamedescription = GetGameName(__ccgo_ts_str(1146))
		} else {
			if gamemode == retail {
				// Ultimate Doom
				gamedescription = GetGameName(__ccgo_ts_str(2694))
			} else {
				if gamemode == registered {
					gamedescription = GetGameName(__ccgo_ts_str(2712))
				} else {
					if gamemode == shareware {
						gamedescription = GetGameName(__ccgo_ts_str(2728))
					}
				}
			}
		}
	} else {
		// Doom 2 of some kind.  But which mission?
		if is_freedoom != 0 {
			if is_freedm != 0 {
				gamedescription = GetGameName(__ccgo_ts_str(1093))
			} else {
				gamedescription = GetGameName(__ccgo_ts_str(1114))
			}
		} else {
			if gamemission == pack_chex {
				v3 = doom
			} else {
				if gamemission == pack_hacx {
					v3 = doom2
				} else {
					v3 = gamemission
				}
			}
			if v3 == doom2 {
				gamedescription = GetGameName(__ccgo_ts_str(2743))
			} else {
				if gamemission == pack_chex {
					v5 = doom
				} else {
					if gamemission == pack_hacx {
						v5 = doom2
					} else {
						v5 = gamemission
					}
				}
				if v5 == pack_plut {
					gamedescription = GetGameName(__ccgo_ts_str(2765))
				} else {
					if gamemission == pack_chex {
						v7 = doom
					} else {
						if gamemission == pack_hacx {
							v7 = doom2
						} else {
							v7 = gamemission
						}
					}
					if v7 == pack_tnt {
						gamedescription = GetGameName(__ccgo_ts_str(2793))
					}
				}
			}
		}
	}
}

func D_AddFile(filename string) (r boolean) {
	var handle *os.File
	fprintf_ccgo(os.Stdout, 2817, filename)
	handle = W_AddFile(filename)
	return booluint32(handle != nil)
}

// Copyright message banners
// Some dehacked mods replace these.  These are only displayed if they are
// replaced by dehacked.

var copyright_banners = [3]string{
	0: __ccgo_ts_str(2829),
	1: __ccgo_ts_str(3245),
	2: __ccgo_ts_str(3521),
}

// Prints a message only if it has been modified by dehacked.

func PrintDehackedBanners() {
	var deh_s string
	for i := 0; i < len(copyright_banners); i++ {
		deh_s = copyright_banners[i]
		if deh_s != copyright_banners[i] {
			// Make sure the modified banner always ends in a newline character.
			// If it doesn't, add a newline.  This fixes av.wad.
			if deh_s[len(deh_s)-1] != '\n' {
				deh_s += "\n"
			}
			fprintf_ccgo(os.Stdout, 3717, deh_s)
		}
	}
}

var gameversions = [10]struct {
	Fdescription uintptr
	Fcmdline     string
	Fversion     GameVersion_t
}{
	0: {
		Fdescription: __ccgo_ts(3722),
		Fcmdline:     __ccgo_ts_str(3733),
		Fversion:     exe_doom_1_666,
	},
	1: {
		Fdescription: __ccgo_ts(3739),
		Fcmdline:     __ccgo_ts_str(3753),
		Fversion:     exe_doom_1_7,
	},
	2: {
		Fdescription: __ccgo_ts(3757),
		Fcmdline:     __ccgo_ts_str(3766),
		Fversion:     exe_doom_1_8,
	},
	3: {
		Fdescription: __ccgo_ts(3770),
		Fcmdline:     __ccgo_ts_str(3779),
		Fversion:     exe_doom_1_9,
	},
	4: {
		Fdescription: __ccgo_ts(1077),
		Fcmdline:     __ccgo_ts_str(3783),
		Fversion:     exe_hacx,
	},
	5: {
		Fdescription: __ccgo_ts(3788),
		Fcmdline:     __ccgo_ts_str(3802),
		Fversion:     exe_ultimate,
	},
	6: {
		Fdescription: __ccgo_ts(3811),
		Fcmdline:     __ccgo_ts_str(3822),
		Fversion:     exe_final,
	},
	7: {
		Fdescription: __ccgo_ts(3828),
		Fcmdline:     __ccgo_ts_str(3845),
		Fversion:     exe_final2,
	},
	8: {
		Fdescription: __ccgo_ts(1057),
		Fcmdline:     __ccgo_ts_str(3852),
		Fversion:     exe_chex,
	},
	9: {},
}

// Initialize the game version

func InitGameVersion() {
	var i, p int32
	//!
	// @arg <version>
	// @category compat
	//
	// Emulate a specific version of Doom.  Valid values are "1.9",
	// "ultimate", "final", "final2", "hacx" and "chex".
	//
	p = M_CheckParmWithArgs(__ccgo_ts_str(3857), 1)
	if p != 0 {
		i = 0
		for {
			if gameversions[i].Fdescription == uintptr(0) {
				break
			}
			if strings.EqualFold(myargs[p+1], gameversions[i].Fcmdline) {
				gameversion = gameversions[i].Fversion
				break
			}
			goto _1
		_1:
			;
			i++
		}
		if gameversions[i].Fdescription == uintptr(0) {
			fprintf_ccgo(os.Stdout, 3870)
			i = 0
			for {
				if gameversions[i].Fdescription == uintptr(0) {
					break
				}
				fprintf_ccgo(os.Stdout, 3896, gameversions[i].Fcmdline, gostring(gameversions[i].Fdescription))
				goto _2
			_2:
				;
				i++
			}
			I_Error(3906, myargs[p+1])
		}
	} else {
		// Determine automatically
		if gamemission == pack_chex {
			// chex.exe - identified by iwad filename
			gameversion = exe_chex
		} else {
			if gamemission == pack_hacx {
				// hacx.exe: identified by iwad filename
				gameversion = exe_hacx
			} else {
				if gamemode == shareware || gamemode == registered {
					// original
					gameversion = exe_doom_1_9
					// TODO: Detect IWADs earlier than Doom v1.9.
				} else {
					if gamemode == retail {
						gameversion = exe_ultimate
					} else {
						if gamemode == commercial {
							if gamemission == doom2 {
								gameversion = exe_doom_1_9
							} else {
								// Final Doom: tnt or plutonia
								// Defaults to emulating the first Final Doom executable,
								// which has the crash in the demo loop; however, having
								// this as the default should mean that it plays back
								// most demos correctly.
								gameversion = exe_final
							}
						}
					}
				}
			}
		}
	}
	// The original exe does not support retail - 4th episode not supported
	if gameversion < exe_ultimate && gamemode == retail {
		gamemode = registered
	}
	// EXEs prior to the Final Doom exes do not support Final Doom.
	if gameversion < exe_final && gamemode == commercial && (gamemission == pack_tnt || gamemission == pack_plut) {
		gamemission = doom2
	}
}

func PrintGameVersion() {
	var i int32
	i = 0
	for {
		if gameversions[i].Fdescription == uintptr(0) {
			break
		}
		if gameversions[i].Fversion == gameversion {
			fprintf_ccgo(os.Stdout, 3932, gostring(gameversions[i].Fdescription))
			break
		}
		goto _1
	_1:
		;
		i++
	}
}

// Function called at exit to display the ENDOOM screen

func D_Endoom() {
	var endoom uintptr
	// Don't show ENDOOM if we have it disabled, or we're running
	// in screensaver or control test mode. Only show it once the
	// game has actually started.
	if show_endoom == 0 || main_loop_started == 0 || screensaver_mode != 0 || M_CheckParm(__ccgo_ts_str(3980)) > 0 {
		return
	}
	endoom = W_CacheLumpName(__ccgo_ts(3994), int32(PU_STATIC))
	I_Endoom(endoom)
	log.Printf("Exiting - outstanding memory: %d", len(dg_alloced))
	dg_exiting = true
}

// C documentation
//
//	//
//	// D_DoomMain
//	//
func D_DoomMain() {
	bp := alloc(480)
	var argDemoName string
	var i, p, v1 int32
	I_AtExit(D_Endoom, 0)
	// print banner
	I_PrintBanner(__ccgo_ts_str(4001))
	fprintf_ccgo(os.Stdout, 4018)
	Z_Init()
	//!
	// @vanilla
	//
	// Disable monsters.
	//
	nomonsters = uint32(M_CheckParm(__ccgo_ts_str(4064)))
	//!
	// @vanilla
	//
	// Monsters respawn after being killed.
	//
	respawnparm = uint32(M_CheckParm(__ccgo_ts_str(4076)))
	//!
	// @vanilla
	//
	// Monsters move faster.
	//
	fastparm = uint32(M_CheckParm(__ccgo_ts_str(4085)))
	//!
	// @vanilla
	//
	// Developer mode.  F1 saves a screenshot in the current working
	// directory.
	//
	devparm = uint32(M_CheckParm(__ccgo_ts_str(4091)))
	I_DisplayFPSDots(devparm)
	//!
	// @category net
	// @vanilla
	//
	// Start a deathmatch game.
	//
	if M_CheckParm(__ccgo_ts_str(4100)) != 0 {
		deathmatch = 1
	}
	//!
	// @category net
	// @vanilla
	//
	// Start a deathmatch 2.0 game.  Weapons do not stay in place and
	// all items respawn after 30 seconds.
	//
	if M_CheckParm(__ccgo_ts_str(4112)) != 0 {
		deathmatch = 2
	}
	if devparm != 0 {
		fprintf_ccgo(os.Stdout, 4122)
	}
	// find which dir to use for config files
	// Auto-detect the configuration dir.
	M_SetConfigDir("")
	//!
	// @arg <x>
	// @vanilla
	//
	// Turbo mode.  The player's speed is multiplied by x%.  If unspecified,
	// x defaults to 200.  Values are rounded up to 10 and down to 400.
	//
	v1 = M_CheckParm(__ccgo_ts_str(4144))
	p = v1
	if v1 != 0 {
		scale := 200
		if p < int32(len(myargs)-1) {
			scale, _ = strconv.Atoi(myargs[p+1])
		}
		if scale < 10 {
			scale = 10
		}
		if scale > 400 {
			scale = 400
		}
		fprintf_ccgo(os.Stdout, 4151, scale)
		forwardmove[0] = forwardmove[0] * int32(scale) / 100
		forwardmove[int32(1)] = forwardmove[int32(1)] * int32(scale) / 100
		sidemove[0] = sidemove[0] * int32(scale) / 100
		sidemove[int32(1)] = sidemove[int32(1)] * int32(scale) / 100
	}
	// init subsystems
	fprintf_ccgo(os.Stdout, 4170)
	V_Init()
	// Load configuration files before initialising other subsystems.
	fprintf_ccgo(os.Stdout, 4197)
	M_SetConfigFilenames(__ccgo_ts_str(4236), __ccgo_ts_str(4248))
	D_BindVariables()
	M_LoadDefaults()
	// Save configuration at exit.
	I_AtExit(M_SaveDefaults, 0)
	// Find main IWAD file and load it.
	iwadfile = D_FindIWAD(1<<int32(doom)|1<<int32(doom2)|1<<int32(pack_tnt)|1<<int32(pack_plut)|1<<int32(pack_chex)|1<<int32(pack_hacx), &gamemission)
	// None found?
	if iwadfile == "" {
		I_Error(4268, 0)
	}
	modifiedgame = 0
	fprintf_ccgo(os.Stdout, 4380)
	D_AddFile(iwadfile)
	W_CheckCorrectIWAD(doom)
	// Now that we've loaded the IWAD, we can figure out what gamemission
	// we're playing and which version of Vanilla Doom we need to emulate.
	D_IdentifyVersion()
	InitGameVersion()
	// Doom 3: BFG Edition includes modified versions of the classic
	// IWADs which can be identified by an additional DMENUPIC lump.
	// Furthermore, the M_GDHIGH lumps have been modified in a way that
	// makes them incompatible to Vanilla Doom and the modified version
	// of doom2.wad is missing the TITLEPIC lump.
	// We specifically check for DMENUPIC here, before PWADs have been
	// loaded which could probably include a lump of that name.
	if W_CheckNumForName(__ccgo_ts(4404)) >= 0 {
		fprintf_ccgo(os.Stdout, 4413)
		bfgedition = 1
		// BFG Edition changes the names of the secret levels to
		// censor the Wolfenstein references. It also has an extra
		// secret level (MAP33). In Vanilla Doom (meaning the DOS
		// version), MAP33 overflows into the Plutonia level names
		// array, so HUSTR_33 is actually PHUSTR_1.
		// The BFG edition doesn't have the "low detail" menu option (fair
		// enough). But bizarrely, it reuses the M_GDHIGH patch as a label
		// for the options menu (says "Fullscreen:"). Why the perpetrators
		// couldn't just add a new graphic lump and had to reuse this one,
		// I don't know.
		//
		// The end result is that M_GDHIGH is too wide and causes the game
		// to crash. As a workaround to get a minimum level of support for
		// the BFG edition IWADs, use the "ON"/"OFF" graphics instead.
	}
	// Load PWAD files.
	modifiedgame = W_ParseCommandLine()
	// Debug:
	//    W_PrintDirectory();
	//!
	// @arg <demo>
	// @category demo
	// @vanilla
	//
	// Play back the demo named demo.lmp.
	//
	p = M_CheckParmWithArgs(__ccgo_ts_str(4456), 1)
	if p == 0 {
		//!
		// @arg <demo>
		// @category demo
		// @vanilla
		//
		// Play back the demo named demo.lmp, determining the framerate
		// of the screen.
		//
		p = M_CheckParmWithArgs(__ccgo_ts_str(4466), 1)
	}
	if p != 0 {
		// With Vanilla you have to specify the file without extension,
		// but make that optional.
		var name string
		if strings.HasSuffix(myargs[p+1], __ccgo_ts_str(4476)) {
			name = myargs[p+1]
		} else {
			name = fmt.Sprintf(__ccgo_ts_str(4481), myargs[p+1])
		}
		if D_AddFile(name) != 0 {
			argDemoName = gostring_n(lumpinfo[numlumps-1].NamePtr(), 8)
		} else {
			// If file failed to load, still continue trying to play
			// the demo in the same way as Vanilla Doom.  This makes
			// tricks like "-playdemo demo1" possible.
			argDemoName = myargs[p+1]
		}
		fprintf_ccgo(os.Stdout, 4488, gostring(bp))
	}
	I_AtExit(G_CheckDemoStatus, 1)
	// Generate the WAD hash table.  Speed things up a bit.
	W_GenerateHashTable()
	// Load DEHACKED lumps from WAD files - but only if we give the right
	// command line parameter.
	// Set the gamedescription string. This is only possible now that
	// we've finished loading Dehacked patches.
	D_SetGameDescription()
	savegamedir = M_GetSaveGameDir(D_SaveGameIWADName(gamemission))
	// Check for -file in shareware
	if modifiedgame != 0 {
		// These are the lumps that will be checked in IWAD,
		// if any one is not present, execution will be aborted.
		*(*[23][8]int8)(unsafe.Pointer(bp + 265)) = [23][8]int8{
			0:  {'e', '2', 'm', '1'},
			1:  {'e', '2', 'm', '2'},
			2:  {'e', '2', 'm', '3'},
			3:  {'e', '2', 'm', '4'},
			4:  {'e', '2', 'm', '5'},
			5:  {'e', '2', 'm', '6'},
			6:  {'e', '2', 'm', '7'},
			7:  {'e', '2', 'm', '8'},
			8:  {'e', '2', 'm', '9'},
			9:  {'e', '3', 'm', '1'},
			10: {'e', '3', 'm', '3'},
			11: {'e', '3', 'm', '3'},
			12: {'e', '3', 'm', '4'},
			13: {'e', '3', 'm', '5'},
			14: {'e', '3', 'm', '6'},
			15: {'e', '3', 'm', '7'},
			16: {'e', '3', 'm', '8'},
			17: {'e', '3', 'm', '9'},
			18: {'d', 'p', 'h', 'o', 'o', 'f'},
			19: {'b', 'f', 'g', 'g', 'a', '0'},
			20: {'h', 'e', 'a', 'd', 'a', '1'},
			21: {'c', 'y', 'b', 'r', 'a', '1'},
			22: {'s', 'p', 'i', 'd', 'a', '1', 'd', '1'},
		}
		if gamemode == shareware {
			I_Error(4506, 0)
		}
		// Check for fake IWAD with right name,
		// but w/o all the lumps of the registered version.
		if gamemode == registered {
			i = 0
			for {
				if i >= 23 {
					break
				}
				if W_CheckNumForName(bp+265+uintptr(i)*8) < 0 {
					I_Error(4562, 0)
				}
				goto _2
			_2:
				;
				i++
			}
		}
	}
	if W_CheckNumForName(__ccgo_ts(4599)) >= 0 || W_CheckNumForName(__ccgo_ts(4608)) >= 0 {
		I_PrintDivider()
		fprintf_ccgo(os.Stdout, 4615)
	}
	I_PrintStartupBanner(gamedescription)
	PrintDehackedBanners()
	// Freedoom's IWADs are Boom-compatible, which means they usually
	// don't work in Vanilla (though FreeDM is okay). Show a warning
	// message and give a link to the website.
	if W_CheckNumForName(__ccgo_ts(2670)) >= 0 && W_CheckNumForName(__ccgo_ts(2679)) < 0 {
		fprintf_ccgo(os.Stdout, 4767)
		I_PrintDivider()
	}
	fprintf_ccgo(os.Stdout, 4992)
	I_CheckIsScreensaver()
	I_InitSound(1)
	I_InitMusic()
	// Initial netgame startup. Connect to server etc.
	D_ConnectNetGame()
	// get skill / episode / map from parms
	startskill = sk_medium
	startepisode = 1
	startmap = 1
	autostart = 0
	//!
	// @arg <skill>
	// @vanilla
	//
	// Set the game skill, 1-5 (1: easiest, 5: hardest).  A skill of
	// 0 disables all monsters.
	//
	p = M_CheckParmWithArgs(__ccgo_ts_str(5027), 1)
	if p != 0 {
		startskill = skill_t(myargs[p+1][0] - '1')
		autostart = 1
	}
	//!
	// @arg <n>
	// @vanilla
	//
	// Start playing on episode n (1-4)
	//
	p = M_CheckParmWithArgs(__ccgo_ts_str(5034), 1)
	if p != 0 {
		startepisode = int32(myargs[p+1][0] - '0')
		startmap = 1
		autostart = 1
	}
	timelimit = 0
	//!
	// @arg <n>
	// @category net
	// @vanilla
	//
	// For multiplayer games: exit each level after n minutes.
	//
	p = M_CheckParmWithArgs(__ccgo_ts_str(5043), 1)
	if p != 0 {
		v, _ := strconv.Atoi(myargs[p+1])
		timelimit = int32(v)
	}
	//!
	// @category net
	// @vanilla
	//
	// Austin Virtual Gaming: end levels after 20 minutes.
	//
	p = M_CheckParm(__ccgo_ts_str(5050))
	if p != 0 {
		timelimit = 20
	}
	//!
	// @arg [<x> <y> | <xy>]
	// @vanilla
	//
	// Start a game immediately, warping to ExMy (Doom 1) or MAPxy
	// (Doom 2)
	//
	p = M_CheckParmWithArgs(__ccgo_ts_str(5055), 1)
	if p != 0 {
		if gamemode == commercial {
			v, _ := strconv.Atoi(myargs[p+1])
			startmap = int32(v)
		} else {
			startepisode = int32(myargs[p+1][0] - '0')
			if p+int32(2) < int32(len(myargs)) {
				startmap = int32(myargs[p+2][0] - '0')
			} else {
				startmap = 1
			}
		}
		autostart = 1
	}
	// Undocumented:
	// Invoked by setup to test the controls.
	p = M_CheckParm(__ccgo_ts_str(3980))
	if p > 0 {
		startepisode = 1
		startmap = 1
		autostart = 1
		testcontrols = 1
	}
	// Check for load game parameter
	// We do this here and save the slot number, so that the network code
	// can override it or send the load slot to other players.
	//!
	// @arg <s>
	// @vanilla
	//
	// Load the game in slot s.
	//
	p = M_CheckParmWithArgs(__ccgo_ts_str(5061), 1)
	if p != 0 {
		v, _ := strconv.Atoi(myargs[p+1])
		startloadgame = int32(v)
	} else {
		// Not loading a game
		startloadgame = -1
	}
	fprintf_ccgo(os.Stdout, 5071)
	M_Init()
	fprintf_ccgo(os.Stdout, 5105)
	R_Init()
	fprintf_ccgo(os.Stdout, 5141)
	P_Init()
	fprintf_ccgo(os.Stdout, 5172)
	S_Init(sfxVolume*int32(8), musicVolume*int32(8))
	fprintf_ccgo(os.Stdout, 5199)
	D_CheckNetGame()
	PrintGameVersion()
	fprintf_ccgo(os.Stdout, 5246)
	HU_Init()
	fprintf_ccgo(os.Stdout, 5285)
	ST_Init()
	// If Doom II without a MAP01 lump, this is a store demo.
	// Moved this here so that MAP01 isn't constantly looked up
	// in the main loop.
	if gamemode == commercial && W_CheckNumForName(__ccgo_ts(5312)) < 0 {
		storedemo = 1
	}
	if M_CheckParmWithArgs(__ccgo_ts_str(5318), 1) != 0 {
		I_AtExit(StatDump, 1)
		fprintf_ccgo(os.Stdout, 5328)
	}
	//!
	// @arg <x>
	// @category demo
	// @vanilla
	//
	// Record a demo named x.lmp.
	//
	p = M_CheckParmWithArgs(__ccgo_ts_str(5361), 1)
	if p != 0 {
		G_RecordDemo(myargs[p+1])
		autostart = 1
	}
	p = M_CheckParmWithArgs(__ccgo_ts_str(4456), 1)
	if p != 0 {
		singledemo = 1 // quit after one demo
		G_DeferedPlayDemo(argDemoName)
		D_DoomLoop()
		return
	}
	p = M_CheckParmWithArgs(__ccgo_ts_str(4466), 1)
	if p != 0 {
		G_TimeDemo(argDemoName)
		D_DoomLoop()
		return
	}
	if startloadgame >= 0 {
		G_LoadGame(P_SaveGameFile(startloadgame))
	}
	if gameaction != ga_loadgame {
		if autostart != 0 || netgame != 0 {
			G_InitNew(startskill, startepisode, startmap)
		} else {
			D_StartTitle()
		} // start up intro loop
	}
	D_DoomLoop()
}

func D_GameMissionString(mission GameMission_t) string {
	switch mission {
	case none:
		fallthrough
	default:
		return __ccgo_ts_str(5369)
	case doom:
		return __ccgo_ts_str(5374)
	case doom2:
		return __ccgo_ts_str(2533)
	case pack_tnt:
		return __ccgo_ts_str(2539)
	case pack_plut:
		return __ccgo_ts_str(2543)
	case pack_hacx:
		return __ccgo_ts_str(3783)
	case pack_chex:
		return __ccgo_ts_str(3852)
	case heretic:
		return __ccgo_ts_str(5379)
	case hexen:
		return __ccgo_ts_str(5387)
	case strife:
		return __ccgo_ts_str(5393)
	}
	return ""
}

const ANG2701 = 3221225472
const ANG901 = 1073741824

// Called when a player leaves the game

func PlayerQuitGame(player *player_t) {
	player_num := playerIndex(player)
	// Do this the same way as Vanilla Doom does, to allow dehacked
	// replacements of this message
	exitmsg = fmt.Sprintf("Player %d left the game", player_num+1)
	playeringame[player_num] = 0
	players[consoleplayer].Fmessage = exitmsg
	// TODO: check if it is sensible to do this:
	if demorecording != 0 {
		G_CheckDemoStatus()
	}
}

var exitmsg string

func RunTic(cmds []ticcmd_t, ingame []boolean) {
	var i uint32
	// Check for player quits.
	i = 0
	for {
		if i >= uint32(MAXPLAYERS) {
			break
		}
		if demoplayback == 0 && playeringame[i] != 0 && ingame[i] == 0 {
			PlayerQuitGame(&players[i])
		}
		goto _1
	_1:
		;
		i++
	}
	netcmds = cmds
	// check that there are players in the game.  if not, we cannot
	// run a tic.
	if advancedemo != 0 {
		D_DoAdvanceDemo()
	}
	G_Ticker()
}

var doom_loop_interface = loop_interface_t{
	D_ProcessEvents,
	G_BuildTiccmd,
	RunTic,
	M_Ticker,
}

// Load game settings from the specified structure and
// set global variables.

func LoadGameSettings(settings *net_gamesettings_t) {
	deathmatch = settings.Fdeathmatch
	startepisode = settings.Fepisode
	startmap = settings.Fmap1
	startskill = settings.Fskill
	startloadgame = settings.Floadgame
	lowres_turn = uint32(settings.Flowres_turn)
	nomonsters = uint32(settings.Fnomonsters)
	fastparm = uint32(settings.Ffast_monsters)
	respawnparm = uint32(settings.Frespawn_monsters)
	timelimit = settings.Ftimelimit
	consoleplayer = settings.Fconsoleplayer
	if lowres_turn != 0 {
		fprintf_ccgo(os.Stdout, 5423)
	}
	for i := 0; i < MAXPLAYERS; i++ {
		playeringame[i] = booluint32(i < int(settings.Fnum_players))
	}
}

// Save the game settings from global variables to the specified
// game settings structure.

func SaveGameSettings(settings *net_gamesettings_t) {
	// Fill in game settings structure with appropriate parameters
	// for the new game
	settings.Fdeathmatch = deathmatch
	settings.Fepisode = startepisode
	settings.Fmap1 = startmap
	settings.Fskill = startskill
	settings.Floadgame = startloadgame
	settings.Fgameversion = gameversion
	settings.Fnomonsters = int32(nomonsters)
	settings.Ffast_monsters = int32(fastparm)
	settings.Frespawn_monsters = int32(respawnparm)
	settings.Ftimelimit = timelimit
	settings.Flowres_turn = boolint32(M_CheckParm(__ccgo_ts_str(5361)) > 0 && M_CheckParm(__ccgo_ts_str(5530)) == 0)
}

func InitConnectData(connect_data *net_connect_data_t) {
	connect_data.Fmax_players = int32(MAXPLAYERS)
	connect_data.Fdrone = 0
	//!
	// @category net
	//
	// Run as the left screen in three screen mode.
	//
	if M_CheckParm(__ccgo_ts_str(5540)) > 0 {
		viewangleoffset = ANG901
		connect_data.Fdrone = 1
	}
	//!
	// @category net
	//
	// Run as the right screen in three screen mode.
	//
	if M_CheckParm(__ccgo_ts_str(5546)) > 0 {
		viewangleoffset = ANG2701
		connect_data.Fdrone = 1
	}
	//
	// Connect data
	//
	// Game type fields:
	connect_data.Fgamemode = gamemode
	connect_data.Fgamemission = gamemission
	// Are we recording a demo? Possibly set lowres turn mode
	connect_data.Flowres_turn = boolint32(M_CheckParm(__ccgo_ts_str(5361)) > 0 && M_CheckParm(__ccgo_ts_str(5530)) == 0)
	// Read checksums of our WAD directory and dehacked information
	W_Checksum(&connect_data.Fwad_sha1sum)
	// Are we playing with the Freedoom IWAD?
	connect_data.Fis_freedoom = boolint32(W_CheckNumForName(__ccgo_ts(2670)) >= 0)
}

func D_ConnectNetGame() {
	connect_data := &net_connect_data_t{}
	InitConnectData(connect_data)
	netgame = D_InitNetGame(connect_data)
	//!
	// @category net
	//
	// Start the game playing as though in a netgame with a single
	// player.  This can also be used to play back single player netgame
	// demos.
	//
	if M_CheckParm(__ccgo_ts_str(5553)) > 0 {
		netgame = 1
	}
}

// C documentation
//
//	//
//	// D_CheckNetGame
//	// Works out player numbers among the net participants
//	//
func D_CheckNetGame() {
	settings := &net_gamesettings_t{}
	if netgame != 0 {
		autostart = 1
	}
	D_RegisterLoopCallbacks(&doom_loop_interface)
	SaveGameSettings(settings)
	D_StartNetGame(settings, uintptr(0))
	LoadGameSettings(settings)
	fprintf_ccgo(os.Stdout, 5563, startskill, deathmatch, startmap, startepisode)
	fprintf_ccgo(os.Stdout, 5626, consoleplayer+int32(1), settings.Fnum_players, settings.Fnum_players)
	// Show players here; the server might have specified a time limit
	if timelimit > 0 && deathmatch != 0 {
		// Gross hack to work like Vanilla:
		if timelimit == 20 && M_CheckParm(__ccgo_ts_str(5050)) != 0 {
			fprintf_ccgo(os.Stdout, 5654)
		} else {
			fprintf_ccgo(os.Stdout, 5711, timelimit)
			if timelimit > 1 {
				fprintf_ccgo(os.Stdout, 5743)
			}
			fprintf_ccgo(os.Stdout, 5745)
		}
	}
}

const FF_FRAMEMASK1 = 32767
const TEXTSPEED = 3
const TEXTWAIT = 250

type finalestage_t = int32

const F_STAGE_TEXT = 0
const F_STAGE_ARTSCREEN = 1
const F_STAGE_CAST = 2

type textscreen_t struct {
	Fmission    GameMission_t
	Fepisode    int32
	Flevel      int32
	Fbackground uintptr
	Ftext       uintptr
}

var textscreens = [22]textscreen_t{
	0: {
		Fepisode:    1,
		Flevel:      8,
		Fbackground: __ccgo_ts(5748),
		Ftext:       __ccgo_ts(5757),
	},
	1: {
		Fepisode:    2,
		Flevel:      8,
		Fbackground: __ccgo_ts(6198),
		Ftext:       __ccgo_ts(6206),
	},
	2: {
		Fepisode:    3,
		Flevel:      8,
		Fbackground: __ccgo_ts(6673),
		Ftext:       __ccgo_ts(6681),
	},
	3: {
		Fepisode:    4,
		Flevel:      8,
		Fbackground: __ccgo_ts(7174),
		Ftext:       __ccgo_ts(7182),
	},
	4: {
		Fmission:    doom2,
		Fepisode:    1,
		Flevel:      6,
		Fbackground: __ccgo_ts(7686),
		Ftext:       __ccgo_ts(7694),
	},
	5: {
		Fmission:    doom2,
		Fepisode:    1,
		Flevel:      11,
		Fbackground: __ccgo_ts(8100),
		Ftext:       __ccgo_ts(8108),
	},
	6: {
		Fmission:    doom2,
		Fepisode:    1,
		Flevel:      20,
		Fbackground: __ccgo_ts(8726),
		Ftext:       __ccgo_ts(8734),
	},
	7: {
		Fmission:    doom2,
		Fepisode:    1,
		Flevel:      30,
		Fbackground: __ccgo_ts(9047),
		Ftext:       __ccgo_ts(9055),
	},
	8: {
		Fmission:    doom2,
		Fepisode:    1,
		Flevel:      15,
		Fbackground: __ccgo_ts(9550),
		Ftext:       __ccgo_ts(9558),
	},
	9: {
		Fmission:    doom2,
		Fepisode:    1,
		Flevel:      31,
		Fbackground: __ccgo_ts(9723),
		Ftext:       __ccgo_ts(9731),
	},
	10: {
		Fmission:    pack_tnt,
		Fepisode:    1,
		Flevel:      6,
		Fbackground: __ccgo_ts(7686),
		Ftext:       __ccgo_ts(9824),
	},
	11: {
		Fmission:    pack_tnt,
		Fepisode:    1,
		Flevel:      11,
		Fbackground: __ccgo_ts(8100),
		Ftext:       __ccgo_ts(10214),
	},
	12: {
		Fmission:    pack_tnt,
		Fepisode:    1,
		Flevel:      20,
		Fbackground: __ccgo_ts(8726),
		Ftext:       __ccgo_ts(10525),
	},
	13: {
		Fmission:    pack_tnt,
		Fepisode:    1,
		Flevel:      30,
		Fbackground: __ccgo_ts(9047),
		Ftext:       __ccgo_ts(10835),
	},
	14: {
		Fmission:    pack_tnt,
		Fepisode:    1,
		Flevel:      15,
		Fbackground: __ccgo_ts(9550),
		Ftext:       __ccgo_ts(11221),
	},
	15: {
		Fmission:    pack_tnt,
		Fepisode:    1,
		Flevel:      31,
		Fbackground: __ccgo_ts(9723),
		Ftext:       __ccgo_ts(11395),
	},
	16: {
		Fmission:    pack_plut,
		Fepisode:    1,
		Flevel:      6,
		Fbackground: __ccgo_ts(7686),
		Ftext:       __ccgo_ts(11749),
	},
	17: {
		Fmission:    pack_plut,
		Fepisode:    1,
		Flevel:      11,
		Fbackground: __ccgo_ts(8100),
		Ftext:       __ccgo_ts(12183),
	},
	18: {
		Fmission:    pack_plut,
		Fepisode:    1,
		Flevel:      20,
		Fbackground: __ccgo_ts(8726),
		Ftext:       __ccgo_ts(12377),
	},
	19: {
		Fmission:    pack_plut,
		Fepisode:    1,
		Flevel:      30,
		Fbackground: __ccgo_ts(9047),
		Ftext:       __ccgo_ts(12706),
	},
	20: {
		Fmission:    pack_plut,
		Fepisode:    1,
		Flevel:      15,
		Fbackground: __ccgo_ts(9550),
		Ftext:       __ccgo_ts(13167),
	},
	21: {
		Fmission:    pack_plut,
		Fepisode:    1,
		Flevel:      31,
		Fbackground: __ccgo_ts(9723),
		Ftext:       __ccgo_ts(13327),
	},
}

// C documentation
//
//	//
//	// F_StartFinale
//	//
func F_StartFinale() {
	var i uint64
	var screen *textscreen_t
	var v1, v4, v6 GameMission_t
	var v8 bool
	gameaction = ga_nothing
	gamestate = GS_FINALE
	viewactive = 0
	automapactive = 0
	if gamemission == pack_chex {
		v1 = doom
	} else {
		if gamemission == pack_hacx {
			v1 = doom2
		} else {
			v1 = gamemission
		}
	}
	if v1 == doom {
		S_ChangeMusic(int32(mus_victor), 1)
	} else {
		S_ChangeMusic(int32(mus_read_m), 1)
	}
	// Find the right screen and set the text and background
	i = 0
	for {
		if i >= 704/32 {
			break
		}
		screen = &textscreens[i]
		// Hack for Chex Quest
		if gameversion == exe_chex && screen.Fmission == doom {
			screen.Flevel = 5
		}
		if gamemission == pack_chex {
			v4 = doom
		} else {
			if gamemission == pack_hacx {
				v4 = doom2
			} else {
				v4 = gamemission
			}
		}
		if v8 = v4 == screen.Fmission; v8 {
			if gamemission == pack_chex {
				v6 = doom
			} else {
				if gamemission == pack_hacx {
					v6 = doom2
				} else {
					v6 = gamemission
				}
			}
		}
		if v8 && (v6 != doom || gameepisode == screen.Fepisode) && gamemap == screen.Flevel {
			finaletext = screen.Ftext
			finaleflat = screen.Fbackground
		}
		goto _3
	_3:
		;
		i++
	}
	// Do dehacked substitutions of strings
	finalestage = int32(F_STAGE_TEXT)
	finalecount = 0
}

func F_Responder(event *event_t) (r boolean) {
	if finalestage == int32(F_STAGE_CAST) {
		return F_CastResponder(event)
	}
	return 0
}

// C documentation
//
//	//
//	// F_Ticker
//	//
func F_Ticker() {
	var i uint64
	// check for skipping
	if gamemode == commercial && finalecount > 50 {
		// go on to the next level
		i = 0
		for {
			if i >= uint64(MAXPLAYERS) {
				break
			}
			if players[i].Fcmd.Fbuttons != 0 {
				break
			}
			goto _1
		_1:
			;
			i++
		}
		if i < uint64(MAXPLAYERS) {
			if gamemap == 30 {
				F_StartCast()
			} else {
				gameaction = ga_worlddone
			}
		}
	}
	// advance animation
	finalecount++
	if finalestage == int32(F_STAGE_CAST) {
		F_CastTicker()
		return
	}
	if gamemode == commercial {
		return
	}
	if finalestage == int32(F_STAGE_TEXT) && uint64(finalecount) > xstrlen(finaletext)*uint64(TEXTSPEED)+uint64(TEXTWAIT) {
		finalecount = 0
		finalestage = int32(F_STAGE_ARTSCREEN)
		wipegamestate = -1 // force a wipe
		if gameepisode == 3 {
			S_StartMusic(int32(mus_bunny))
		}
	}
}

func F_TextWrite() {
	var c, count, cx, cy, w, x, y int32
	var ch, dest, src, v4 uintptr
	// erase the entire screen to a tiled background
	src = W_CacheLumpName(finaleflat, int32(PU_CACHE))
	dest = I_VideoBuffer
	y = 0
	for {
		if y >= SCREENHEIGHT {
			break
		}
		x = 0
		for {
			if x >= SCREENWIDTH/64 {
				break
			}
			xmemcpy(dest, src+uintptr(y&63<<6), 64)
			dest += uintptr(64)
			goto _2
		_2:
			;
			x++
		}
		if SCREENWIDTH&63 != 0 {
			xmemcpy(dest, src+uintptr(y&63<<6), SCREENWIDTH&63)
			dest += SCREENWIDTH & 63
		}
		goto _1
	_1:
		;
		y++
	}
	V_MarkRect(0, 0, SCREENWIDTH, SCREENHEIGHT)
	// draw some of the text onto the screen
	cx = 10
	cy = 10
	ch = finaletext
	count = (int32(finalecount) - 10) / int32(TEXTSPEED)
	if count < 0 {
		count = 0
	}
	for {
		if count == 0 {
			break
		}
		v4 = ch
		ch++
		c = int32(*(*int8)(unsafe.Pointer(v4)))
		if c == 0 {
			break
		}
		if c == int32('\n') {
			cx = 10
			cy += 11
			goto _3
		}
		c = xtoupper(c) - int32('!')
		if c < 0 || c > int32('_')-int32('!')+1 {
			cx += 4
			goto _3
		}
		w = int32((*patch_t)(unsafe.Pointer(hu_font[c])).Fwidth)
		if cx+w > SCREENWIDTH {
			break
		}
		V_DrawPatch(cx, cy, hu_font[c])
		cx += w
		goto _3
	_3:
		;
		count--
	}
}

// C documentation
//
//	//
//	// Final DOOM 2 animation
//	// Casting by id Software.
//	//   in order of appearance
//	//
type castinfo_t struct {
	Fname  uintptr
	Ftype1 mobjtype_t
}

func init() {
	castorder = [18]castinfo_t{
		0: {
			Fname:  __ccgo_ts(13434),
			Ftype1: int32(MT_POSSESSED),
		},
		1: {
			Fname:  __ccgo_ts(13444),
			Ftype1: int32(MT_SHOTGUY),
		},
		2: {
			Fname:  __ccgo_ts(13456),
			Ftype1: int32(MT_CHAINGUY),
		},
		3: {
			Fname:  __ccgo_ts(13474),
			Ftype1: int32(MT_TROOP),
		},
		4: {
			Fname:  __ccgo_ts(13478),
			Ftype1: int32(MT_SERGEANT),
		},
		5: {
			Fname:  __ccgo_ts(13484),
			Ftype1: int32(MT_SKULL),
		},
		6: {
			Fname:  __ccgo_ts(13494),
			Ftype1: int32(MT_HEAD),
		},
		7: {
			Fname:  __ccgo_ts(13504),
			Ftype1: int32(MT_KNIGHT),
		},
		8: {
			Fname:  __ccgo_ts(13516),
			Ftype1: int32(MT_BRUISER),
		},
		9: {
			Fname:  __ccgo_ts(13530),
			Ftype1: int32(MT_BABY),
		},
		10: {
			Fname:  __ccgo_ts(13542),
			Ftype1: int32(MT_PAIN),
		},
		11: {
			Fname:  __ccgo_ts(13557),
			Ftype1: int32(MT_UNDEAD),
		},
		12: {
			Fname:  __ccgo_ts(13566),
			Ftype1: int32(MT_FATSO),
		},
		13: {
			Fname:  __ccgo_ts(13575),
			Ftype1: int32(MT_VILE),
		},
		14: {
			Fname:  __ccgo_ts(13585),
			Ftype1: int32(MT_SPIDER),
		},
		15: {
			Fname:  __ccgo_ts(13607),
			Ftype1: int32(MT_CYBORG),
		},
		16: {
			Fname: __ccgo_ts(13622),
		},
		17: {},
	}
}

// C documentation
//
//	//
//	// F_StartCast
//	//
func F_StartCast() {
	wipegamestate = -1 // force a screen wipe
	castnum = 0
	caststate = &states[mobjinfo[castorder[castnum].Ftype1].Fseestate]
	casttics = caststate.Ftics
	castdeath = 0
	finalestage = int32(F_STAGE_CAST)
	castframes = 0
	castonmelee = 0
	castattacking = 0
	S_ChangeMusic(int32(mus_evil), 1)
}

// C documentation
//
//	//
//	// F_CastTicker
//	//
func F_CastTicker() {
	var sfx, st, v1 int32
	casttics--
	v1 = casttics
	if v1 > 0 {
		return
	} // not time to change state yet
	if caststate.Ftics == -1 || caststate.Fnextstate == S_NULL {
		// switch from deathstate to next monster
		castnum++
		castdeath = 0
		if castorder[castnum].Fname == uintptr(0) {
			castnum = 0
		}
		if mobjinfo[castorder[castnum].Ftype1].Fseesound != 0 {
			S_StartSound(nil, mobjinfo[castorder[castnum].Ftype1].Fseesound)
		}
		caststate = &states[mobjinfo[castorder[castnum].Ftype1].Fseestate]
		castframes = 0
	} else {
		// just advance to next state in animation
		if caststate == &states[S_PLAY_ATK1] {
			goto stopattack
		} // Oh, gross hack!
		st = caststate.Fnextstate
		caststate = &states[st]
		castframes++
		// sound hacks....
		switch st {
		case S_PLAY_ATK1:
			sfx = int32(sfx_dshtgn)
		case S_POSS_ATK2:
			sfx = int32(sfx_pistol)
		case S_SPOS_ATK2:
			sfx = int32(sfx_shotgn)
		case S_VILE_ATK2:
			sfx = int32(sfx_vilatk)
		case S_SKEL_FIST2:
			sfx = int32(sfx_skeswg)
		case S_SKEL_FIST4:
			sfx = int32(sfx_skepch)
		case S_SKEL_MISS2:
			sfx = int32(sfx_skeatk)
		case S_FATT_ATK8:
			fallthrough
		case S_FATT_ATK5:
			fallthrough
		case S_FATT_ATK2:
			sfx = int32(sfx_firsht)
		case S_CPOS_ATK2:
			fallthrough
		case S_CPOS_ATK3:
			fallthrough
		case S_CPOS_ATK4:
			sfx = int32(sfx_shotgn)
		case S_TROO_ATK3:
			sfx = int32(sfx_claw)
		case S_SARG_ATK2:
			sfx = int32(sfx_sgtatk)
		case S_BOSS_ATK2:
			fallthrough
		case S_BOS2_ATK2:
			fallthrough
		case S_HEAD_ATK2:
			sfx = int32(sfx_firsht)
		case S_SKULL_ATK2:
			sfx = int32(sfx_sklatk)
		case S_SPID_ATK2:
			fallthrough
		case S_SPID_ATK3:
			sfx = int32(sfx_shotgn)
		case S_BSPI_ATK2:
			sfx = int32(sfx_plasma)
		case S_CYBER_ATK2:
			fallthrough
		case S_CYBER_ATK4:
			fallthrough
		case S_CYBER_ATK6:
			sfx = int32(sfx_rlaunc)
		case S_PAIN_ATK3:
			sfx = int32(sfx_sklatk)
		default:
			sfx = 0
			break
		}
		if sfx != 0 {
			S_StartSound(nil, sfx)
		}
	}
	if castframes == 12 {
		// go into attack frame
		castattacking = 1
		if castonmelee != 0 {
			caststate = &states[mobjinfo[castorder[castnum].Ftype1].Fmeleestate]
		} else {
			caststate = &states[mobjinfo[castorder[castnum].Ftype1].Fmissilestate]
		}
		castonmelee ^= 1
		if caststate == &states[0] {
			if castonmelee != 0 {
				caststate = &states[mobjinfo[castorder[castnum].Ftype1].Fmeleestate]
			} else {
				caststate = &states[mobjinfo[castorder[castnum].Ftype1].Fmissilestate]
			}
		}
	}
	if castattacking == 0 {
		goto _2
	}
	if !(castframes == 24 || caststate == &states[mobjinfo[castorder[castnum].Ftype1].Fseestate]) {
		goto _3
	}
	goto stopattack
stopattack:
	;
	castattacking = 0
	castframes = 0
	caststate = &states[mobjinfo[castorder[castnum].Ftype1].Fseestate]
_3:
	;
_2:
	;
	casttics = caststate.Ftics
	if casttics == -1 {
		casttics = 15
	}
}

//
// F_CastResponder
//

func F_CastResponder(ev *event_t) (r boolean) {
	if ev.Ftype1 != ev_keydown {
		return 0
	}
	if castdeath != 0 {
		return 1
	} // already in dying frames
	// go into death frame
	castdeath = 1
	caststate = &states[mobjinfo[castorder[castnum].Ftype1].Fdeathstate]
	casttics = caststate.Ftics
	castframes = 0
	castattacking = 0
	if mobjinfo[castorder[castnum].Ftype1].Fdeathsound != 0 {
		S_StartSound(nil, mobjinfo[castorder[castnum].Ftype1].Fdeathsound)
	}
	return 1
}

func F_CastPrint(text uintptr) {
	var c, cx, w, width int32
	var ch, v1, v2 uintptr
	// find width
	ch = text
	width = 0
	for ch != 0 {
		v1 = ch
		ch++
		c = int32(*(*int8)(unsafe.Pointer(v1)))
		if c == 0 {
			break
		}
		c = xtoupper(c) - int32('!')
		if c < 0 || c > int32('_')-int32('!')+1 {
			width += 4
			continue
		}
		w = int32((*patch_t)(unsafe.Pointer(hu_font[c])).Fwidth)
		width += w
	}
	// draw it
	cx = 160 - width/int32(2)
	ch = text
	for ch != 0 {
		v2 = ch
		ch++
		c = int32(*(*int8)(unsafe.Pointer(v2)))
		if c == 0 {
			break
		}
		c = xtoupper(c) - int32('!')
		if c < 0 || c > int32('_')-int32('!')+1 {
			cx += 4
			continue
		}
		w = int32((*patch_t)(unsafe.Pointer(hu_font[c])).Fwidth)
		V_DrawPatch(cx, 180, hu_font[c])
		cx += w
	}
}

//
// F_CastDrawer
//

func F_CastDrawer() {
	var flip boolean
	var lump int32
	var patch *patch_t
	var sprdef *spritedef_t
	var sprframe *spriteframe_t
	// erase the entire screen to a background
	V_DrawPatch(0, 0, W_CacheLumpNameT(__ccgo_ts(13631), int32(PU_CACHE)))
	F_CastPrint(castorder[castnum].Fname)
	// draw the current frame in the middle of the screen
	sprdef = &sprites[caststate.Fsprite]
	sprframe = &sprdef.Fspriteframes[caststate.Fframe&int32(FF_FRAMEMASK1)]
	lump = int32(sprframe.Flump[0])
	flip = uint32(sprframe.Fflip[0])
	patch = W_CacheLumpNumT(lump+firstspritelump, int32(PU_CACHE))
	if flip != 0 {
		V_DrawPatchFlipped(160, 170, patch)
	} else {
		V_DrawPatch(160, 170, patch)
	}
}

// C documentation
//
//	//
//	// F_DrawPatchCol
//	//
func F_DrawPatchCol(x int32, patch uintptr, col int32) {
	var column, dest, desttop, source, v2 uintptr
	var count, v1 int32
	column = patch + uintptr(*(*int32)(unsafe.Pointer(patch + 8 + uintptr(col)*4)))
	desttop = I_VideoBuffer + uintptr(x)
	// step through the posts in a column
	for int32((*column_t)(unsafe.Pointer(column)).Ftopdelta) != 0xff {
		source = column + uintptr(3)
		dest = desttop + uintptr(int32((*column_t)(unsafe.Pointer(column)).Ftopdelta)*SCREENWIDTH)
		count = int32((*column_t)(unsafe.Pointer(column)).Flength)
		for {
			v1 = count
			count--
			if v1 == 0 {
				break
			}
			v2 = source
			source++
			*(*uint8)(unsafe.Pointer(dest)) = *(*uint8)(unsafe.Pointer(v2))
			dest += SCREENWIDTH
		}
		column = column + uintptr((*column_t)(unsafe.Pointer(column)).Flength) + uintptr(4)
	}
}

// C documentation
//
//	//
//	// F_BunnyScroll
//	//
func F_BunnyScroll() {
	bp := alloc(32)
	var p1, p2 uintptr
	var scrolled, stage, x int32
	p1 = W_CacheLumpName(__ccgo_ts(13640), int32(PU_LEVEL))
	p2 = W_CacheLumpName(__ccgo_ts(13646), int32(PU_LEVEL))
	V_MarkRect(0, 0, SCREENWIDTH, SCREENHEIGHT)
	scrolled = 320 - (int32(finalecount)-int32(230))/int32(2)
	if scrolled > 320 {
		scrolled = 320
	}
	if scrolled < 0 {
		scrolled = 0
	}
	x = 0
	for {
		if x >= SCREENWIDTH {
			break
		}
		if x+scrolled < 320 {
			F_DrawPatchCol(x, p1, x+scrolled)
		} else {
			F_DrawPatchCol(x, p2, x+scrolled-int32(320))
		}
		goto _1
	_1:
		;
		x++
	}
	if finalecount < 1130 {
		return
	}
	if finalecount < 1180 {
		V_DrawPatch((SCREENWIDTH-13*8)/2, (SCREENHEIGHT-8*8)/2, W_CacheLumpNameT(__ccgo_ts(13652), int32(PU_CACHE)))
		laststage = 0
		return
	}
	stage = int32((finalecount - 1180) / 5)
	if stage > 6 {
		stage = 6
	}
	if stage > laststage {
		S_StartSound(nil, int32(sfx_pistol))
		laststage = stage
	}
	snprintf_ccgo(bp, 10, 13657, stage)
	V_DrawPatch((SCREENWIDTH-13*8)/2, (SCREENHEIGHT-8*8)/2, W_CacheLumpNameT(bp, int32(PU_CACHE)))
}

var laststage int32

func F_ArtScreenDrawer() {
	var lumpname uintptr
	if gameepisode == 3 {
		F_BunnyScroll()
	} else {
		switch gameepisode {
		case 1:
			if gamemode == retail {
				lumpname = __ccgo_ts(1911)
			} else {
				lumpname = __ccgo_ts(1924)
			}
		case 2:
			lumpname = __ccgo_ts(13663)
		case 4:
			lumpname = __ccgo_ts(13672)
		default:
			return
		}
		lumpname = lumpname
		V_DrawPatch(0, 0, W_CacheLumpNameT(lumpname, int32(PU_CACHE)))
	}
}

// C documentation
//
//	//
//	// F_Drawer
//	//
func F_Drawer() {
	switch finalestage {
	case int32(F_STAGE_CAST):
		F_CastDrawer()
	case int32(F_STAGE_TEXT):
		F_TextWrite()
	case int32(F_STAGE_ARTSCREEN):
		F_ArtScreenDrawer()
		break
	}
}

//
//                       SCREEN WIPE PACKAGE
//

// C documentation
//
//	// when zero, stop the wipe
var wipe_running = 0

var wipe_scr_start uintptr
var wipe_scr_end uintptr
var wipe_scr uintptr

func wipe_shittyColMajorXform(array uintptr, width int32, height int32) {
	var x, y int32
	dest := make([]int16, width*height)
	y = 0
	for {
		if y >= height {
			break
		}
		x = 0
		for {
			if x >= width {
				break
			}
			dest[x*height+y] = *(*int16)(unsafe.Pointer(array + uintptr(y*width+x)*2))
			goto _2
		_2:
			;
			x++
		}
		goto _1
	_1:
		;
		y++
	}
	xmemcpy(array, uintptr(unsafe.Pointer(&dest[0])), uint64(width*height*int32(2)))
}

func wipe_initColorXForm(width int32, height int32, ticks int32) (r int32) {
	xmemcpy(wipe_scr, wipe_scr_start, uint64(width*height))
	return 0
}

func wipe_doColorXForm(width int32, height int32, ticks int32) (r int32) {
	var changed boolean
	var e, w uintptr
	var newval int32
	changed = 0
	w = wipe_scr
	e = wipe_scr_end
	for w != wipe_scr+uintptr(width*height) {
		if int32(*(*uint8)(unsafe.Pointer(w))) != int32(*(*uint8)(unsafe.Pointer(e))) {
			if int32(*(*uint8)(unsafe.Pointer(w))) > int32(*(*uint8)(unsafe.Pointer(e))) {
				newval = int32(*(*uint8)(unsafe.Pointer(w))) - ticks
				if newval < int32(*(*uint8)(unsafe.Pointer(e))) {
					*(*uint8)(unsafe.Pointer(w)) = *(*uint8)(unsafe.Pointer(e))
				} else {
					*(*uint8)(unsafe.Pointer(w)) = uint8(newval)
				}
				changed = 1
			} else {
				if int32(*(*uint8)(unsafe.Pointer(w))) < int32(*(*uint8)(unsafe.Pointer(e))) {
					newval = int32(*(*uint8)(unsafe.Pointer(w))) + ticks
					if newval > int32(*(*uint8)(unsafe.Pointer(e))) {
						*(*uint8)(unsafe.Pointer(w)) = *(*uint8)(unsafe.Pointer(e))
					} else {
						*(*uint8)(unsafe.Pointer(w)) = uint8(newval)
					}
					changed = 1
				}
			}
		}
		w++
		e++
	}
	return boolint32(changed == 0)
}

func wipe_exitColorXForm(width int32, height int32, ticks int32) (r int32) {
	return 0
}

var y_screen uintptr

func wipe_initMelt(width int32, height int32, ticks int32) (r1 int32) {
	var i, r int32
	// copy start screen to main screen
	xmemcpy(wipe_scr, wipe_scr_start, uint64(width*height))
	// makes this wipe faster (in theory)
	// to have stuff in column-major format
	wipe_shittyColMajorXform(wipe_scr_start, width/int32(2), height)
	wipe_shittyColMajorXform(wipe_scr_end, width/int32(2), height)
	// setup initial column positions
	// (y<0 => not ready to scroll yet)
	y_screen = Z_Malloc(int32(uint64(width)*4), int32(PU_STATIC), uintptr(0))
	*(*int32)(unsafe.Pointer(y_screen)) = -(M_Random() % 16)
	i = 1
	for {
		if i >= width {
			break
		}
		r = M_Random()%int32(3) - 1
		*(*int32)(unsafe.Pointer(y_screen + uintptr(i)*4)) = *(*int32)(unsafe.Pointer(y_screen + uintptr(i-1)*4)) + r
		if *(*int32)(unsafe.Pointer(y_screen + uintptr(i)*4)) > 0 {
			*(*int32)(unsafe.Pointer(y_screen + uintptr(i)*4)) = 0
		} else {
			if *(*int32)(unsafe.Pointer(y_screen + uintptr(i)*4)) == -int32(16) {
				*(*int32)(unsafe.Pointer(y_screen + uintptr(i)*4)) = -int32(15)
			}
		}
		goto _1
	_1:
		;
		i++
	}
	return 0
}

func wipe_doMelt(width int32, height int32, ticks int32) (r int32) {
	var d, s, v5, v7 uintptr
	var done boolean
	var dy, i, idx, j, v1, v3 int32
	done = 1
	width /= 2
	for {
		v1 = ticks
		ticks--
		if v1 == 0 {
			break
		}
		i = 0
		for {
			if i >= width {
				break
			}
			if *(*int32)(unsafe.Pointer(y_screen + uintptr(i)*4)) < 0 {
				*(*int32)(unsafe.Pointer(y_screen + uintptr(i)*4))++
				done = 0
			} else {
				if *(*int32)(unsafe.Pointer(y_screen + uintptr(i)*4)) < height {
					if *(*int32)(unsafe.Pointer(y_screen + uintptr(i)*4)) < 16 {
						v3 = *(*int32)(unsafe.Pointer(y_screen + uintptr(i)*4)) + 1
					} else {
						v3 = 8
					}
					dy = v3
					if *(*int32)(unsafe.Pointer(y_screen + uintptr(i)*4))+dy >= height {
						dy = height - *(*int32)(unsafe.Pointer(y_screen + uintptr(i)*4))
					}
					s = wipe_scr_end + uintptr(i*height+*(*int32)(unsafe.Pointer(y_screen + uintptr(i)*4)))*2
					d = wipe_scr + uintptr(*(*int32)(unsafe.Pointer(y_screen + uintptr(i)*4))*width+i)*2
					idx = 0
					j = dy
					for {
						if j == 0 {
							break
						}
						v5 = s
						s += 2
						*(*int16)(unsafe.Pointer(d + uintptr(idx)*2)) = *(*int16)(unsafe.Pointer(v5))
						idx += width
						goto _4
					_4:
						;
						j--
					}
					*(*int32)(unsafe.Pointer(y_screen + uintptr(i)*4)) += dy
					s = wipe_scr_start + uintptr(i*height)*2
					d = wipe_scr + uintptr(*(*int32)(unsafe.Pointer(y_screen + uintptr(i)*4))*width+i)*2
					idx = 0
					j = height - *(*int32)(unsafe.Pointer(y_screen + uintptr(i)*4))
					for {
						if j == 0 {
							break
						}
						v7 = s
						s += 2
						*(*int16)(unsafe.Pointer(d + uintptr(idx)*2)) = *(*int16)(unsafe.Pointer(v7))
						idx += width
						goto _6
					_6:
						;
						j--
					}
					done = 0
				}
			}
			goto _2
		_2:
			;
			i++
		}
	}
	return int32(done)
}

func wipe_exitMelt(width int32, height int32, ticks int32) (r int32) {
	Z_Free(y_screen)
	Z_Free(wipe_scr_start)
	Z_Free(wipe_scr_end)
	return 0
}

func wipe_StartScreen(x int32, y int32, width int32, height int32) (r int32) {
	wipe_scr_start = Z_Malloc(SCREENWIDTH*SCREENHEIGHT, int32(PU_STATIC), uintptr(0))
	I_ReadScreen(wipe_scr_start)
	return 0
}

func wipe_EndScreen(x int32, y int32, width int32, height int32) (r int32) {
	wipe_scr_end = Z_Malloc(SCREENWIDTH*SCREENHEIGHT, int32(PU_STATIC), uintptr(0))
	I_ReadScreen(wipe_scr_end)
	V_DrawBlock(x, y, width, height, wipe_scr_start) // restore start scr.
	return 0
}

func wipe_ScreenWipe(wipeno int32, x int32, y int32, width int32, height int32, ticks int32) (r int32) {
	var rc int32
	// initial stuff
	if wipe_running == 0 {
		wipe_running = 1
		// wipe_scr = (byte *) Z_Malloc(width*height, PU_STATIC, 0); // DEBUG
		wipe_scr = I_VideoBuffer
		wipes[wipeno*3](width, height, ticks)
	}
	// do a piece of wipe-in
	V_MarkRect(0, 0, width, height)
	rc = wipes[wipeno*3+1](width, height, ticks)
	//  V_DrawBlock(x, y, 0, width, height, wipe_scr); // DEBUG
	// final stuff
	if rc != 0 {
		wipe_running = 0
		wipes[wipeno*3+2](width, height, ticks)
	}
	return boolint32(wipe_running == 0)
}

var wipes = [6]func(int32, int32, int32) int32{
	wipe_initColorXForm,
	wipe_doColorXForm,
	wipe_exitColorXForm,
	wipe_initMelt,
	wipe_doMelt,
	wipe_exitMelt,
}

const ANG451 = 536870912
const ANGLETOSKYSHIFT = 22
const BODYQUESIZE = 32
const DEH_DEFAULT_BFG_CELLS_PER_SHOT = 40
const DEH_DEFAULT_BLUE_ARMOR_CLASS = 2
const DEH_DEFAULT_GOD_MODE_HEALTH = 100
const DEH_DEFAULT_GREEN_ARMOR_CLASS = 1
const DEH_DEFAULT_IDFA_ARMOR = 200
const DEH_DEFAULT_IDFA_ARMOR_CLASS = 2
const DEH_DEFAULT_IDKFA_ARMOR = 200
const DEH_DEFAULT_IDKFA_ARMOR_CLASS = 2
const DEH_DEFAULT_INITIAL_BULLETS = 50
const DEH_DEFAULT_INITIAL_HEALTH = 100
const DEH_DEFAULT_MAX_ARMOR = 200
const DEH_DEFAULT_MAX_HEALTH = 200
const DEH_DEFAULT_MAX_SOULSPHERE = 200
const DEH_DEFAULT_MEGASPHERE_HEALTH = 200
const DEH_DEFAULT_SOULSPHERE_HEALTH = 100
const DEH_DEFAULT_SPECIES_INFIGHTING = 0
const DEMOMARKER = 128
const MAX_JOY_BUTTONS = 20
const NUMKEYS = 256
const SAVEGAMESIZE = 180224
const SLOWTURNTICS = 6
const TURBOTHRESHOLD = 50
const VERSIONSIZE = 16

func init() {
	precache = 1
}

func init() {
	forwardmove = [2]fixed_t{
		0: 0x19,
		1: 0x32,
	}
}

func init() {
	sidemove = [2]fixed_t{
		0: 0x18,
		1: 0x28,
	}
}

func init() {
	angleturn = [3]fixed_t{
		0: 640,
		1: 1280,
		2: 320,
	}
}

// + slow turn

var weapon_keys = [8]int32{
	0: key_weapon1,
	1: key_weapon2,
	2: key_weapon3,
	3: key_weapon4,
	4: key_weapon5,
	5: key_weapon6,
	6: key_weapon7,
	7: key_weapon8,
}

// Set to -1 or +1 to switch to the previous or next weapon.

var next_weapon weapontype_t = 0

// Used for prev/next weapon keys.

var weapon_order_table = [9]struct {
	Fweapon     weapontype_t
	Fweapon_num weapontype_t
}{
	0: {},
	1: {
		Fweapon: wp_chainsaw,
	},
	2: {
		Fweapon:     wp_pistol,
		Fweapon_num: wp_pistol,
	},
	3: {
		Fweapon:     wp_shotgun,
		Fweapon_num: wp_shotgun,
	},
	4: {
		Fweapon:     wp_supershotgun,
		Fweapon_num: wp_shotgun,
	},
	5: {
		Fweapon:     wp_chaingun,
		Fweapon_num: wp_chaingun,
	},
	6: {
		Fweapon:     wp_missile,
		Fweapon_num: wp_missile,
	},
	7: {
		Fweapon:     wp_plasma,
		Fweapon_num: wp_plasma,
	},
	8: {
		Fweapon:     wp_bfg,
		Fweapon_num: wp_bfg,
	},
}

var gamekeydown [256]boolean
var turnheld int32 // for accelerative turning
var mousearray [9]boolean
var mousebuttons = uintptr(unsafe.Pointer(&mousearray)) + 1*4 // allow [-1]

var dclicktime int32
var dclickstate boolean
var dclicks int32
var dclicktime2 int32
var dclickstate2 boolean
var dclicks2 int32

// C documentation
//
//	// joystick values are repeated
var joyxmove int32
var joyymove int32
var joystrafemove int32
var joyarray [21]boolean
var joybuttons = uintptr(unsafe.Pointer(&joyarray)) + 1*4 // allow [-1]
var savegameslot int32
var savedescription string

func init() {
	vanilla_savegame_limit = 1
}

func init() {
	vanilla_demo_limit = 1
}

func WeaponSelectable(weapon weapontype_t) (r boolean) {
	var v1 GameMission_t
	var v3 bool
	// Can't select the super shotgun in Doom 1.
	if v3 = weapon == wp_supershotgun; v3 {
		if gamemission == pack_chex {
			v1 = doom
		} else {
			if gamemission == pack_hacx {
				v1 = doom2
			} else {
				v1 = gamemission
			}
		}
	}
	if v3 && v1 == doom {
		return 0
	}
	// These weapons aren't available in shareware.
	if (weapon == wp_plasma || weapon == wp_bfg) && gamemission == doom && gamemode == shareware {
		return 0
	}
	// Can't select a weapon if we don't own it.
	if players[consoleplayer].Fweaponowned[weapon] == 0 {
		return 0
	}
	// Can't select the fist if we have the chainsaw, unless
	// we also have the berserk pack.
	if weapon == wp_fist && players[consoleplayer].Fweaponowned[wp_chainsaw] != 0 && players[consoleplayer].Fpowers[pw_strength] == 0 {
		return 0
	}
	return 1
}

func G_NextWeapon(direction int32) weapontype_t {
	var i, start_i int32
	var weapon weapontype_t
	// Find index in the table.
	if players[consoleplayer].Fpendingweapon == wp_nochange {
		weapon = players[consoleplayer].Freadyweapon
	} else {
		weapon = players[consoleplayer].Fpendingweapon
	}
	i = 0
	for {
		if uint64(i) >= 72/8 {
			break
		}
		if weapon_order_table[i].Fweapon == weapon {
			break
		}
		goto _1
	_1:
		;
		i++
	}
	// Switch weapon. Don't loop forever.
	start_i = i
	for cond := true; cond; cond = i != start_i && WeaponSelectable(weapon_order_table[i].Fweapon) == 0 {
		i += direction
		i = int32((uint64(i) + 72/8) % (72 / 8))
	}
	return weapon_order_table[i].Fweapon_num
}

// C documentation
//
//	//
//	// G_BuildTiccmd
//	// Builds a ticcmd from all of the available inputs
//	// or reads it from the demo buffer.
//	// If recording a demo, write it out
//	//
func G_BuildTiccmd(cmd *ticcmd_t, maketic int32) {
	var bstrafe, strafe boolean
	var desired_angleturn int16
	var forward, side, speed, tspeed, v1, v16 int32
	*cmd = ticcmd_t{}
	cmd.Fconsistancy = *(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&consistancy)) + uintptr(consoleplayer)*128 + uintptr(maketic%int32(BACKUPTICS))))
	strafe = booluint32(gamekeydown[key_strafe] != 0 || *(*boolean)(unsafe.Pointer(mousebuttons + uintptr(mousebstrafe)*4)) != 0 || *(*boolean)(unsafe.Pointer(joybuttons + uintptr(joybstrafe)*4)) != 0)
	// fraggle: support the old "joyb_speed = 31" hack which
	// allowed an autorun effect
	speed = boolint32(key_speed >= int32(NUMKEYS) || joybspeed >= int32(MAX_JOY_BUTTONS) || gamekeydown[key_speed] != 0 || *(*boolean)(unsafe.Pointer(joybuttons + uintptr(joybspeed)*4)) != 0)
	v1 = 0
	side = v1
	forward = v1
	// use two stage accelerative turning
	// on the keyboard and joystick
	if joyxmove < 0 || joyxmove > 0 || gamekeydown[key_right] != 0 || gamekeydown[key_left] != 0 {
		turnheld += ticdup
	} else {
		turnheld = 0
	}
	if turnheld < int32(SLOWTURNTICS) {
		tspeed = 2
	} else {
		tspeed = speed
	}
	// let movement keys cancel each other out
	if strafe != 0 {
		if gamekeydown[key_right] != 0 {
			// fprintf(stderr, "strafe right\n");
			side += sidemove[speed]
		}
		if gamekeydown[key_left] != 0 {
			//	fprintf(stderr, "strafe left\n");
			side -= sidemove[speed]
		}
		if joyxmove > 0 {
			side += sidemove[speed]
		}
		if joyxmove < 0 {
			side -= sidemove[speed]
		}
	} else {
		if gamekeydown[key_right] != 0 {
			cmd.Fangleturn -= int16(angleturn[tspeed])
		}
		if gamekeydown[key_left] != 0 {
			cmd.Fangleturn += int16(angleturn[tspeed])
		}
		if joyxmove > 0 {
			cmd.Fangleturn -= int16(angleturn[tspeed])
		}
		if joyxmove < 0 {
			cmd.Fangleturn += int16(angleturn[tspeed])
		}
	}
	if gamekeydown[key_up] != 0 {
		// fprintf(stderr, "up\n");
		forward += forwardmove[speed]
	}
	if gamekeydown[key_down] != 0 {
		// fprintf(stderr, "down\n");
		forward -= forwardmove[speed]
	}
	if joyymove < 0 {
		forward += forwardmove[speed]
	}
	if joyymove > 0 {
		forward -= forwardmove[speed]
	}
	if gamekeydown[key_strafeleft] != 0 || *(*boolean)(unsafe.Pointer(joybuttons + uintptr(joybstrafeleft)*4)) != 0 || *(*boolean)(unsafe.Pointer(mousebuttons + uintptr(mousebstrafeleft)*4)) != 0 || joystrafemove < 0 {
		side -= sidemove[speed]
	}
	if gamekeydown[key_straferight] != 0 || *(*boolean)(unsafe.Pointer(joybuttons + uintptr(joybstraferight)*4)) != 0 || *(*boolean)(unsafe.Pointer(mousebuttons + uintptr(mousebstraferight)*4)) != 0 || joystrafemove > 0 {
		side += sidemove[speed]
	}
	// buttons
	cmd.Fchatchar = uint8(HU_dequeueChatChar())
	if gamekeydown[key_fire] != 0 || *(*boolean)(unsafe.Pointer(mousebuttons + uintptr(mousebfire)*4)) != 0 || *(*boolean)(unsafe.Pointer(joybuttons + uintptr(joybfire)*4)) != 0 {
		cmd.Fbuttons |= BT_ATTACK
	}
	if gamekeydown[key_use] != 0 || *(*boolean)(unsafe.Pointer(joybuttons + uintptr(joybuse)*4)) != 0 || *(*boolean)(unsafe.Pointer(mousebuttons + uintptr(mousebuse)*4)) != 0 {
		cmd.Fbuttons |= BT_USE
		// clear double clicks if hit use button
		dclicks = 0
	}
	// If the previous or next weapon button is pressed, the
	// next_weapon variable is set to change weapons when
	// we generate a ticcmd.  Choose a new weapon.
	if gamestate == GS_LEVEL && next_weapon != 0 {
		i := G_NextWeapon(int32(next_weapon))
		cmd.Fbuttons |= BT_CHANGE
		cmd.Fbuttons |= uint8(i << BT_WEAPONSHIFT)
	} else {
		// Check weapon keys.
		for i := 0; i < len(weapon_keys); i++ {
			if gamekeydown[weapon_keys[i]] != 0 {
				cmd.Fbuttons |= BT_CHANGE
				cmd.Fbuttons |= uint8(i << BT_WEAPONSHIFT)
				break
			}
		}
	}
	next_weapon = 0
	// mouse
	if *(*boolean)(unsafe.Pointer(mousebuttons + uintptr(mousebforward)*4)) != 0 {
		forward += forwardmove[speed]
	}
	if *(*boolean)(unsafe.Pointer(mousebuttons + uintptr(mousebbackward)*4)) != 0 {
		forward -= forwardmove[speed]
	}
	if dclick_use != 0 {
		// forward double click
		if *(*boolean)(unsafe.Pointer(mousebuttons + uintptr(mousebforward)*4)) != dclickstate && dclicktime > 1 {
			dclickstate = *(*boolean)(unsafe.Pointer(mousebuttons + uintptr(mousebforward)*4))
			if dclickstate != 0 {
				dclicks++
			}
			if dclicks == 2 {
				cmd.Fbuttons |= BT_USE
				dclicks = 0
			} else {
				dclicktime = 0
			}
		} else {
			dclicktime += ticdup
			if dclicktime > 20 {
				dclicks = 0
				dclickstate = 0
			}
		}
		// strafe double click
		bstrafe = booluint32(*(*boolean)(unsafe.Pointer(mousebuttons + uintptr(mousebstrafe)*4)) != 0 || *(*boolean)(unsafe.Pointer(joybuttons + uintptr(joybstrafe)*4)) != 0)
		if bstrafe != dclickstate2 && dclicktime2 > 1 {
			dclickstate2 = bstrafe
			if dclickstate2 != 0 {
				dclicks2++
			}
			if dclicks2 == 2 {
				cmd.Fbuttons |= BT_USE
				dclicks2 = 0
			} else {
				dclicktime2 = 0
			}
		} else {
			dclicktime2 += ticdup
			if dclicktime2 > 20 {
				dclicks2 = 0
				dclickstate2 = 0
			}
		}
	}
	forward += mousey
	if strafe != 0 {
		side += mousex * 2
	} else {
		cmd.Fangleturn -= int16(mousex * 8)
	}
	if mousex == 0 {
		// No movement in the previous frame
		testcontrols_mousespeed = 0
	}
	v16 = 0
	mousey = v16
	mousex = v16
	if forward > forwardmove[int32(1)] {
		forward = forwardmove[int32(1)]
	} else {
		if forward < -forwardmove[int32(1)] {
			forward = -forwardmove[int32(1)]
		}
	}
	if side > forwardmove[int32(1)] {
		side = forwardmove[int32(1)]
	} else {
		if side < -forwardmove[int32(1)] {
			side = -forwardmove[int32(1)]
		}
	}
	cmd.Fforwardmove += int8(forward)
	cmd.Fsidemove += int8(side)
	// special buttons
	if sendpause != 0 {
		sendpause = 0
		cmd.Fbuttons = uint8(BT_SPECIAL | BTS_PAUSE)
	}
	if sendsave != 0 {
		sendsave = 0
		cmd.Fbuttons = uint8(BT_SPECIAL | BTS_SAVEGAME | savegameslot<<BTS_SAVESHIFT)
	}
	// low-res turning
	if lowres_turn != 0 {
		desired_angleturn = int16(int32(cmd.Fangleturn) + int32(carry))
		// round angleturn to the nearest 256 unit boundary
		// for recording demos with single byte values for turn
		cmd.Fangleturn = int16((int32(desired_angleturn) + 128) & 0xff00)
		// Carry forward the error from the reduced resolution to the
		// next tic, so that successive small movements can accumulate.
		carry = int16(int32(desired_angleturn) - int32(cmd.Fangleturn))
	}
}

var carry int16

// C documentation
//
//	//
//	// G_DoLoadLevel
//	//
func G_DoLoadLevel() {
	var i, v2, v3, v4 int32
	var skytexturename uintptr
	var v5, v6 boolean
	// Set the sky map.
	// First thing, we have a dummy sky texture name,
	//  a flat. The data is in the WAD only because
	//  we look for an actual index, instead of simply
	//  setting one.
	skyflatnum = R_FlatNumForName(__ccgo_ts(13679))
	// The "Sky never changes in Doom II" bug was fixed in
	// the id Anthology version of doom2.exe for Final Doom.
	if gamemode == commercial && (gameversion == exe_final2 || gameversion == exe_chex) {
		if gamemap < 12 {
			skytexturename = __ccgo_ts(13686)
		} else {
			if gamemap < 21 {
				skytexturename = __ccgo_ts(13691)
			} else {
				skytexturename = __ccgo_ts(13696)
			}
		}
		skytexturename = skytexturename
		skytexture = R_TextureNumForName(skytexturename)
	}
	if wipegamestate == GS_LEVEL {
		wipegamestate = -1
	} // force a wipe
	gamestate = GS_LEVEL
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		turbodetected[i] = 0
		if playeringame[i] != 0 && players[i].Fplayerstate == int32(PST_DEAD) {
			players[i].Fplayerstate = int32(PST_REBORN)
		}
		clear(players[i].Ffrags[:])
		goto _1
	_1:
		;
		i++
	}
	P_SetupLevel(gameepisode, gamemap, 0, gameskill)
	displayplayer = consoleplayer // view the guy you are playing
	gameaction = ga_nothing
	Z_CheckHeap()
	// clear cmd building stuff
	clear(gamekeydown[:])
	v3 = 0
	joystrafemove = v3
	v2 = v3
	joyymove = v2
	joyxmove = v2
	v4 = 0
	mousey = v4
	mousex = v4
	v6 = 0
	paused = v6
	v5 = v6
	sendsave = v5
	sendpause = v5
	clear(mousearray[:])
	clear(joyarray[:])
	if testcontrols != 0 {
		players[consoleplayer].Fmessage = __ccgo_ts_str(13701)
	}
}

func SetJoyButtons(buttons_mask uint32) {
	var button_on, i int32
	i = 0
	for {
		if i >= int32(MAX_JOY_BUTTONS) {
			break
		}
		button_on = boolint32(buttons_mask&uint32(1<<i) != 0)
		// Detect button press:
		if *(*boolean)(unsafe.Pointer(joybuttons + uintptr(i)*4)) == 0 && button_on != 0 {
			// Weapon cycling:
			if i == joybprevweapon {
				next_weapon = -1
			} else {
				if i == joybnextweapon {
					next_weapon = 1
				}
			}
		}
		*(*boolean)(unsafe.Pointer(joybuttons + uintptr(i)*4)) = uint32(button_on)
		goto _1
	_1:
		;
		i++
	}
}

func SetMouseButtons(buttons_mask uint32) {
	var button_on uint32
	var i int32
	i = 0
	for {
		if i >= int32(MAX_MOUSE_BUTTONS) {
			break
		}
		button_on = booluint32(buttons_mask&uint32(1<<i) != 0)
		// Detect button press:
		if *(*boolean)(unsafe.Pointer(mousebuttons + uintptr(i)*4)) == 0 && button_on != 0 {
			if i == mousebprevweapon {
				next_weapon = -1
			} else {
				if i == mousebnextweapon {
					next_weapon = 1
				}
			}
		}
		*(*boolean)(unsafe.Pointer(mousebuttons + uintptr(i)*4)) = button_on
		goto _1
	_1:
		;
		i++
	}
}

// C documentation
//
//	//
//	// G_Responder
//	// Get info needed to make ticcmd_ts for the players.
//	//
func G_Responder(ev *event_t) (r boolean) {
	// allow spy mode changes even during the demo
	if gamestate == GS_LEVEL && ev.Ftype1 == ev_keydown && ev.Fdata1 == key_spy && (singledemo != 0 || deathmatch == 0) {
		// spy mode
		for cond := true; cond; cond = playeringame[displayplayer] == 0 && displayplayer != consoleplayer {
			displayplayer++
			if displayplayer == int32(MAXPLAYERS) {
				displayplayer = 0
			}
		}
		return 1
	}
	// any other key pops up menu if in demos
	if gameaction == ga_nothing && singledemo == 0 && (demoplayback != 0 || gamestate == GS_DEMOSCREEN) {
		if ev.Ftype1 == ev_keydown || ev.Ftype1 == ev_mouse && ev.Fdata1 != 0 || ev.Ftype1 == ev_joystick && ev.Fdata1 != 0 {
			M_StartControlPanel()
			return 1
		}
		return 0
	}
	if gamestate == GS_LEVEL {
		if HU_Responder(ev) != 0 {
			return 1
		} // chat ate the event
		if ST_Responder(ev) != 0 {
			return 1
		} // status window ate it
		if AM_Responder(ev) != 0 {
			return 1
		} // automap ate it
	}
	if gamestate == GS_FINALE {
		if F_Responder(ev) != 0 {
			return 1
		} // finale ate the event
	}
	if testcontrols != 0 && ev.Ftype1 == ev_mouse {
		// If we are invoked by setup to test the controls, save the
		// mouse speed so that we can display it on-screen.
		// Perform a low pass filter on this so that the thermometer
		// appears to move smoothly.
		testcontrols_mousespeed = xabs(ev.Fdata2)
	}
	// If the next/previous weapon keys are pressed, set the next_weapon
	// variable to change weapons when the next ticcmd is generated.
	if ev.Ftype1 == ev_keydown && ev.Fdata1 == key_prevweapon {
		next_weapon = -1
	} else {
		if ev.Ftype1 == ev_keydown && ev.Fdata1 == key_nextweapon {
			next_weapon = 1
		}
	}
	switch ev.Ftype1 {
	case ev_keydown:
		if ev.Fdata1 == key_pause {
			sendpause = 1
		} else {
			if ev.Fdata1 < int32(NUMKEYS) {
				gamekeydown[ev.Fdata1] = 1
			}
		}
		return 1 // eat key down events
	case ev_keyup:
		if ev.Fdata1 < int32(NUMKEYS) {
			gamekeydown[ev.Fdata1] = 0
		}
		return 0 // always let key up events filter down
	case ev_mouse:
		SetMouseButtons(uint32(ev.Fdata1))
		mousex = ev.Fdata2 * (mouseSensitivity + 5) / 10
		mousey = ev.Fdata3 * (mouseSensitivity + 5) / 10
		return 1 // eat events
	case ev_joystick:
		SetJoyButtons(uint32(ev.Fdata1))
		joyxmove = ev.Fdata2
		joyymove = ev.Fdata3
		joystrafemove = ev.Fdata4
		return 1 // eat events
	default:
		break
	}
	return 0
}

// C documentation
//
//	//
//	// G_Ticker
//	// Make ticcmd_ts for the players.
//	//
func G_Ticker() {
	var buf, i int32
	var cmd *ticcmd_t
	// do player reborns if needed
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		if playeringame[i] != 0 && players[i].Fplayerstate == int32(PST_REBORN) {
			G_DoReborn(i)
		}
		goto _1
	_1:
		;
		i++
	}
	// do things to change the game state
	for gameaction != ga_nothing {
		switch gameaction {
		case ga_loadlevel:
			G_DoLoadLevel()
		case ga_newgame:
			G_DoNewGame()
		case ga_loadgame:
			G_DoLoadGame()
		case ga_savegame:
			G_DoSaveGame()
		case ga_playdemo:
			G_DoPlayDemo()
		case ga_completed:
			G_DoCompleted()
		case ga_victory:
			F_StartFinale()
		case ga_worlddone:
			G_DoWorldDone()
		case ga_nothing:
			break
		}
	}
	// get commands, check consistancy,
	// and build new consistancy check
	buf = gametic / ticdup % int32(BACKUPTICS)
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		if playeringame[i] != 0 {
			cmd = &players[i].Fcmd
			*cmd = netcmds[i]
			if demoplayback != 0 {
				G_ReadDemoTiccmd(cmd)
			}
			if demorecording != 0 {
				G_WriteDemoTiccmd(cmd)
			}
			// check for turbo cheats
			// check ~ 4 seconds whether to display the turbo message.
			// store if the turbo threshold was exceeded in any tics
			// over the past 4 seconds.  offset the checking period
			// for each player so messages are not displayed at the
			// same time.
			if int32(cmd.Fforwardmove) > int32(TURBOTHRESHOLD) {
				turbodetected[i] = 1
			}
			if gametic&int32(31) == 0 && gametic>>int32(5)%int32(MAXPLAYERS) == i && turbodetected[i] != 0 {
				players[consoleplayer].Fmessage = fmt.Sprintf("%s is turbo!", player_names[i])
				turbodetected[i] = 0
			}
			if netgame != 0 && netdemo == 0 && gametic%ticdup == 0 {
				if gametic > int32(BACKUPTICS) && int32(*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&consistancy)) + uintptr(i)*128 + uintptr(buf)))) != int32(cmd.Fconsistancy) {
					I_Error(13760, int32(cmd.Fconsistancy), int32(*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&consistancy)) + uintptr(i)*128 + uintptr(buf)))))
				}
				if players[i].Fmo != nil {
					*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&consistancy)) + uintptr(i)*128 + uintptr(buf))) = uint8(players[i].Fmo.Fx)
				} else {
					*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&consistancy)) + uintptr(i)*128 + uintptr(buf))) = uint8(rndindex)
				}
			}
		}
		goto _2
	_2:
		;
		i++
	}
	// check for special buttons
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		if playeringame[i] != 0 {
			if int32(players[i].Fcmd.Fbuttons)&BT_SPECIAL != 0 {
				switch int32(players[i].Fcmd.Fbuttons) & BT_SPECIALMASK {
				case BTS_PAUSE:
					paused = boolean(paused ^ 1)
					if paused != 0 {
						S_PauseSound()
					} else {
						S_ResumeSound()
					}
				case BTS_SAVEGAME:
					if len(savedescription) == 0 {
						M_StringCopy(uintptr(unsafe.Pointer(&savedescription)), __ccgo_ts(13798), 32)
					}
					savegameslot = int32(players[i].Fcmd.Fbuttons) & BTS_SAVEMASK >> BTS_SAVESHIFT
					gameaction = ga_savegame
					break
				}
			}
		}
		goto _3
	_3:
		;
		i++
	}
	// Have we just finished displaying an intermission screen?
	if oldgamestate == GS_INTERMISSION && gamestate != GS_INTERMISSION {
		WI_End()
	}
	oldgamestate = gamestate
	// do main actions
	switch gamestate {
	case GS_LEVEL:
		P_Ticker()
		ST_Ticker()
		AM_Ticker()
		HU_Ticker()
	case GS_INTERMISSION:
		WI_Ticker()
	case GS_FINALE:
		F_Ticker()
	case GS_DEMOSCREEN:
		D_PageTicker()
		break
	}
}

// C documentation
//
//	//
//	// G_PlayerFinishLevel
//	// Can when a player completes a level.
//	//
func G_PlayerFinishLevel(player int32) {
	p := &players[player]
	clear(p.Fpowers[:])
	clear(p.Fcards[:])
	p.Fmo.Fflags &= ^MF_SHADOW // cancel invisibility
	p.Fextralight = 0          // cancel gun flashes
	p.Ffixedcolormap = 0       // cancel ir gogles
	p.Fdamagecount = 0         // no palette changes
	p.Fbonuscount = 0
}

// C documentation
//
//	//
//	// G_PlayerReborn
//	// Called after a player dies
//	// almost everything is cleared and initialized
//	//
func G_PlayerReborn(player int32) {
	var itemcount, killcount, secretcount int32
	var frags [4]int32

	p := &players[player]
	frags = p.Ffrags
	killcount = p.Fkillcount
	itemcount = p.Fitemcount
	secretcount = p.Fsecretcount
	*p = player_t{Ffrags: frags} // clear the player structure
	p.Fkillcount = killcount
	p.Fitemcount = itemcount
	p.Fsecretcount = secretcount
	p.Fattackdown = 1
	p.Fusedown = 1 // don't do anything immediately
	p.Fplayerstate = PST_LIVE
	p.Fhealth = DEH_DEFAULT_INITIAL_HEALTH // Use dehacked value
	p.Fpendingweapon = wp_pistol
	p.Freadyweapon = wp_pistol

	p.Fweaponowned[wp_fist] = 1
	p.Fweaponowned[wp_pistol] = 1
	p.Fammo[am_clip] = DEH_DEFAULT_INITIAL_BULLETS
	for i := 0; i < NUMAMMO; i++ {
		p.Fmaxammo[i] = maxammo[i]
	}
}

func G_CheckSpot(playernum int32, mthing *mapthing_t) (r boolean) {
	var an, i int32
	var mo *mobj_t
	var ss *subsector_t
	var x, xa, y, ya, v2 fixed_t
	if players[playernum].Fmo == nil {
		// first spawn of level, before corpses
		i = 0
		for {
			if i >= playernum {
				break
			}
			if players[i].Fmo.Fx == int32(mthing.Fx)<<int32(FRACBITS) && players[i].Fmo.Fy == int32(mthing.Fy)<<int32(FRACBITS) {
				return 0
			}
			goto _1
		_1:
			;
			i++
		}
		return 1
	}
	x = int32(mthing.Fx) << int32(FRACBITS)
	y = int32(mthing.Fy) << int32(FRACBITS)
	if P_CheckPosition(players[playernum].Fmo, x, y) == 0 {
		return 0
	}
	// flush an old corpse if needed
	if bodyqueslot >= int32(BODYQUESIZE) {
		P_RemoveMobj(bodyque[bodyqueslot%int32(BODYQUESIZE)])
	}
	bodyque[bodyqueslot%int32(BODYQUESIZE)] = players[playernum].Fmo
	bodyqueslot++
	// spawn a teleport fog
	ss = R_PointInSubsector(x, y)
	// The code in the released source looks like this:
	//
	//    an = ( ANG45 * (((unsigned int) mthing->angle)/45) )
	//         >> ANGLETOFINESHIFT;
	//    mo = P_SpawnMobj (x+20*finecosine[an], y+20*finesine[an]
	//                     , ss->sector->floorheight
	//                     , MT_TFOG);
	//
	// But 'an' can be a signed value in the DOS version. This means that
	// we get a negative index and the lookups into finecosine/finesine
	// end up dereferencing values in finetangent[].
	// A player spawning on a deathmatch start facing directly west spawns
	// "silently" with no spawn fog. Emulate this.
	//
	// This code is imported from PrBoom+.
	// This calculation overflows in Vanilla Doom, but here we deliberately
	// avoid integer overflow as it is undefined behavior, so the value of
	// 'an' will always be positive.
	an = ANG451 >> ANGLETOFINESHIFT * (int32(mthing.Fangle) / 45)
	switch an {
	case 4096: // -4096:
		xa = finetangent[int32(2048)] // finecosine[-4096]
		ya = finetangent[0]           // finesine[-4096]
	case 5120: // -3072:
		xa = finetangent[int32(3072)] // finecosine[-3072]
		ya = finetangent[int32(1024)] // finesine[-3072]
	case 6144: // -2048:
		xa = finesine[0]              // finecosine[-2048]
		ya = finetangent[int32(2048)] // finesine[-2048]
	case 7168: // -1024:
		xa = finesine[int32(1024)]    // finecosine[-1024]
		ya = finetangent[int32(3072)] // finesine[-1024]
	case 0:
		fallthrough
	case 1024:
		fallthrough
	case 2048:
		fallthrough
	case 3072:
		xa = finecosine[an]
		ya = finesine[an]
	default:
		I_Error(13807, an)
		v2 = 0
		ya = v2
		xa = v2
		break
	}
	mo = P_SpawnMobj(x+int32(20)*xa, y+int32(20)*ya, ss.Fsector.Ffloorheight, int32(MT_TFOG))
	if players[consoleplayer].Fviewz != 1 {
		S_StartSound(&mo.degenmobj_t, int32(sfx_telept))
	} // don't start sound on first frame
	return 1
}

// C documentation
//
//	//
//	// G_DeathMatchSpawnPlayer
//	// Spawns a player at one of the random death match spots
//	// called at level load and each death
//	//
func G_DeathMatchSpawnPlayer(playernum int32) {
	var i, j, selections int32
	selections = int32(deathmatch_pos)
	if selections < 4 {
		I_Error(13841, selections)
	}
	j = 0
	for {
		if j >= 20 {
			break
		}
		i = P_Random() % selections
		if G_CheckSpot(playernum, &deathmatchstarts[i]) != 0 {
			deathmatchstarts[i].Ftype1 = int16(playernum + 1)
			P_SpawnPlayer(&deathmatchstarts[i])
			return
		}
		goto _1
	_1:
		;
		j++
	}
	// no good spot, so the player will probably get stuck
	P_SpawnPlayer(&playerstarts[playernum])
}

// C documentation
//
//	//
//	// G_DoReborn
//	//
func G_DoReborn(playernum int32) {
	var i int32
	if netgame == 0 {
		// reload the level from scratch
		gameaction = ga_loadlevel
	} else {
		// respawn at the start
		// first dissasociate the corpse
		players[playernum].Fmo.Fplayer = nil
		// spawn at random spot if in death match
		if deathmatch != 0 {
			G_DeathMatchSpawnPlayer(playernum)
			return
		}
		if G_CheckSpot(playernum, &playerstarts[playernum]) != 0 {
			P_SpawnPlayer(&playerstarts[playernum])
			return
		}
		// try to spawn at one of the other players spots
		i = 0
		for {
			if i >= int32(MAXPLAYERS) {
				break
			}
			if G_CheckSpot(playernum, &playerstarts[i]) != 0 {
				playerstarts[i].Ftype1 = int16(playernum + 1) // fake as other player
				P_SpawnPlayer(&playerstarts[i])
				playerstarts[i].Ftype1 = int16(i + 1) // restore
				return
			}
			// he's going to be inside something.  Too bad.
			goto _1
		_1:
			;
			i++
		}
		P_SpawnPlayer(&playerstarts[playernum])
	}
}

func init() {
	pars = [4][10]int32{
		0: {},
		1: {
			1: 30,
			2: 75,
			3: 120,
			4: 90,
			5: 165,
			6: 180,
			7: 180,
			8: 30,
			9: 165,
		},
		2: {
			1: 90,
			2: 90,
			3: 90,
			4: 120,
			5: 90,
			6: 360,
			7: 240,
			8: 30,
			9: 170,
		},
		3: {
			1: 90,
			2: 45,
			3: 90,
			4: 150,
			5: 90,
			6: 90,
			7: 165,
			8: 30,
			9: 135,
		},
	}
}

func init() {
	cpars = [32]int32{
		0:  30,
		1:  90,
		2:  120,
		3:  120,
		4:  90,
		5:  150,
		6:  120,
		7:  120,
		8:  270,
		9:  90,
		10: 210,
		11: 150,
		12: 150,
		13: 150,
		14: 210,
		15: 150,
		16: 420,
		17: 150,
		18: 210,
		19: 150,
		20: 240,
		21: 150,
		22: 180,
		23: 150,
		24: 150,
		25: 300,
		26: 330,
		27: 420,
		28: 300,
		29: 180,
		30: 120,
		31: 30,
	}
}

func G_ExitLevel() {
	secretexit = 0
	gameaction = ga_completed
}

// C documentation
//
//	// Here's for the german edition.
func G_SecretExitLevel() {
	// IF NO WOLF3D LEVELS, NO SECRET EXIT!
	if gamemode == commercial && W_CheckNumForName(__ccgo_ts(13878)) < 0 {
		secretexit = 0
	} else {
		secretexit = 1
	}
	gameaction = ga_completed
}

func G_DoCompleted() {
	var i int32
	gameaction = ga_nothing
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		if playeringame[i] != 0 {
			G_PlayerFinishLevel(i)
		}
		goto _1
	_1:
		;
		i++
	} // take away cards and stuff
	if automapactive != 0 {
		AM_Stop()
	}
	if gamemode != commercial {
		// Chex Quest ends after 5 levels, rather than 8.
		if gameversion == exe_chex {
			if gamemap == 5 {
				gameaction = ga_victory
				return
			}
		} else {
			switch gamemap {
			case 8:
				goto _2
			case 9:
				goto _3
			}
			goto _4
		_2:
			;
			gameaction = ga_victory
			return
		_3:
			;
			i = 0
		_7:
			;
			if i >= int32(MAXPLAYERS) {
				goto _5
			}
			players[i].Fdidsecret = 1
			goto _6
		_6:
			;
			i++
			goto _7
			goto _5
		_5:
			;
			goto _4
		_4:
		}
	}
	//#if 0  Hmmm - why?
	if gamemap == 8 && gamemode != commercial {
		// victory
		gameaction = ga_victory
		return
	}
	if gamemap == 9 && gamemode != commercial {
		// exit secret level
		i = 0
		for {
			if i >= int32(MAXPLAYERS) {
				break
			}
			players[i].Fdidsecret = 1
			goto _8
		_8:
			;
			i++
		}
	}
	//#endif
	wminfo.Fdidsecret = players[consoleplayer].Fdidsecret
	wminfo.Fepsd = gameepisode - 1
	wminfo.Flast = gamemap - 1
	// wminfo.next is 0 biased, unlike gamemap
	if gamemode == commercial {
		if secretexit != 0 {
			switch gamemap {
			case 15:
				wminfo.Fnext = 30
			case 31:
				wminfo.Fnext = 31
				break
			}
		} else {
			switch gamemap {
			case 31:
				fallthrough
			case 32:
				wminfo.Fnext = 15
			default:
				wminfo.Fnext = gamemap
			}
		}
	} else {
		if secretexit != 0 {
			wminfo.Fnext = 8
		} else {
			if gamemap == 9 {
				// returning from secret level
				switch gameepisode {
				case 1:
					wminfo.Fnext = 3
				case 2:
					wminfo.Fnext = 5
				case 3:
					wminfo.Fnext = 6
				case 4:
					wminfo.Fnext = 2
					break
				}
			} else {
				wminfo.Fnext = gamemap
			}
		} // go to next level
	}
	wminfo.Fmaxkills = totalkills
	wminfo.Fmaxitems = totalitems
	wminfo.Fmaxsecret = totalsecret
	wminfo.Fmaxfrags = 0
	// Set par time. Doom episode 4 doesn't have a par time, so this
	// overflows into the cpars array. It's necessary to emulate this
	// for statcheck regression testing.
	if gamemode == commercial {
		wminfo.Fpartime = int32(TICRATE) * cpars[gamemap-1]
	} else {
		if gameepisode < 4 {
			wminfo.Fpartime = int32(TICRATE) * *(*int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&pars)) + uintptr(gameepisode)*40 + uintptr(gamemap)*4))
		} else {
			wminfo.Fpartime = int32(TICRATE) * cpars[gamemap]
		}
	}
	wminfo.Fpnum = consoleplayer
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		wminfo.Fplyr[i].Fin = playeringame[i]
		wminfo.Fplyr[i].Fskills = players[i].Fkillcount
		wminfo.Fplyr[i].Fsitems = players[i].Fitemcount
		wminfo.Fplyr[i].Fssecret = players[i].Fsecretcount
		wminfo.Fplyr[i].Fstime = leveltime
		wminfo.Fplyr[i].Ffrags = players[i].Ffrags
		goto _9
	_9:
		;
		i++
	}
	gamestate = GS_INTERMISSION
	viewactive = 0
	automapactive = 0
	StatCopy(&wminfo)
	WI_Start(&wminfo)
}

// C documentation
//
//	//
//	// G_WorldDone
//	//
func G_WorldDone() {
	gameaction = ga_worlddone
	if secretexit != 0 {
		players[consoleplayer].Fdidsecret = 1
	}
	if gamemode == commercial {
		switch gamemap {
		case 15:
			fallthrough
		case 31:
			if secretexit == 0 {
				break
			}
			fallthrough
		case 6:
			fallthrough
		case 11:
			fallthrough
		case 20:
			fallthrough
		case 30:
			F_StartFinale()
			break
		}
	}
}

func G_DoWorldDone() {
	gamestate = GS_LEVEL
	gamemap = wminfo.Fnext + 1
	G_DoLoadLevel()
	gameaction = ga_nothing
	viewactive = 1
}

func G_LoadGame(name string) {
	savename = name
	gameaction = ga_loadgame
}

func G_DoLoadGame() {
	var savedleveltime int32
	var err error
	gameaction = ga_nothing
	save_stream, err = os.Open(savename)
	if err != nil {
		log.Printf("G_DoLoadGame: error opening savegame file %s: %v\n", savename, err)
		return
	}
	defer save_stream.Close()
	savegame_error = 0
	if P_ReadSaveGameHeader() == 0 {
		save_stream.Close()
		return
	}
	savedleveltime = leveltime
	// load a base level
	G_InitNew(gameskill, gameepisode, gamemap)
	leveltime = savedleveltime
	// dearchive all the modifications
	P_UnArchivePlayers()
	P_UnArchiveWorld()
	P_UnArchiveThinkers()
	P_UnArchiveSpecials()
	if P_ReadSaveGameEOF() == 0 {
		I_Error(13887, 0)
	}
	if setsizeneeded != 0 {
		R_ExecuteSetViewSize()
	}
	// draw the pattern into the back screen
	R_FillBackScreen()
}

// C documentation
//
//	//
//	// G_SaveGame
//	// Called by the menu task.
//	// Description is a 24 byte text string
//	//
func G_SaveGame(slot int32, description string) {
	savegameslot = slot
	savedescription = description
	sendsave = 1
}

func G_DoSaveGame() {
	var recovery_savegame_file, savegame_file, temp_savegame_file string
	recovery_savegame_file = ""
	temp_savegame_file = P_TempSaveGameFile()
	savegame_file = P_SaveGameFile(savegameslot)
	// Open the savegame file for writing.  We write to a temporary file
	// and then rename it at the end if it was successfully written.
	// This prevents an existing savegame from being overwritten by
	// a corrupted one, or if a savegame buffer overrun occurs.
	var err error
	save_stream, err = os.OpenFile(temp_savegame_file, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		log.Printf("G_DoSaveGame: error opening savegame file %s: %v\n", temp_savegame_file, err)
		// Failed to save the game, so we're going to have to abort. But
		// to be nice, save to somewhere else before we call I_Error().
		recovery_savegame_file = M_TempFile(__ccgo_ts_str(13903))
		save_stream, err = os.OpenFile(recovery_savegame_file, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
		if err != nil {
			log.Printf("G_DoSaveGame: error opening recovery savegame file %s: %v\n", recovery_savegame_file, err)
			I_Error(13916, temp_savegame_file, recovery_savegame_file)
		}
	}
	savegame_error = 0
	P_WriteSaveGameHeader(savedescription)
	P_ArchivePlayers()
	P_ArchiveWorld()
	P_ArchiveThinkers()
	P_ArchiveSpecials()
	P_WriteSaveGameEOF()
	// Enforce the same savegame size limit as in Vanilla Doom,
	// except if the vanilla_savegame_limit setting is turned off.
	pos, err := save_stream.Seek(0, io.SeekCurrent)
	if vanilla_savegame_limit != 0 && pos > SAVEGAMESIZE {
		I_Error(13970, 0)
	}
	// Finish up, close the savegame file.
	save_stream.Close()
	if recovery_savegame_file != "" {
		// We failed to save to the normal location, but we wrote a
		// recovery file to the temp directory. Now we can bomb out
		// with an error.
		I_Error(13994, temp_savegame_file, recovery_savegame_file)
	}
	// Now rename the temporary savegame file to the actual savegame
	// file, overwriting the old savegame if there was one there.
	os.Remove(savegame_file) // remove the old savegame file
	os.Rename(temp_savegame_file, savegame_file)
	gameaction = ga_nothing
	M_StringCopy(uintptr(unsafe.Pointer(&savedescription)), __ccgo_ts(14092), 32)
	players[consoleplayer].Fmessage = __ccgo_ts_str(14093)
	// draw the pattern into the back screen
	R_FillBackScreen()
}

func G_DeferedInitNew(skill skill_t, episode int32, map1 int32) {
	d_skill = skill
	d_episode = episode
	d_map = map1
	gameaction = ga_newgame
}

func G_DoNewGame() {
	var v1, v2 boolean
	demoplayback = 0
	netdemo = 0
	netgame = 0
	deathmatch = 0
	v2 = 0
	playeringame[int32(3)] = v2
	v1 = v2
	playeringame[int32(2)] = v1
	playeringame[int32(1)] = v1
	respawnparm = 0
	fastparm = 0
	nomonsters = 0
	consoleplayer = 0
	G_InitNew(d_skill, d_episode, d_map)
	gameaction = ga_nothing
}

func G_InitNew(skill skill_t, episode int32, map1 int32) {
	var i int32
	var skytexturename uintptr
	if paused != 0 {
		paused = 0
		S_ResumeSound()
	}
	/*
		    // Note: This commented-out block of code was added at some point
		    // between the DOS version(s) and the Doom source release. It isn't
		    // found in disassemblies of the DOS version and causes IDCLEV and
		    // the -warp command line parameter to behave differently.
		    // This is left here for posterity.
		    // This was quite messy with SPECIAL and commented parts.
		    // Supposedly hacks to make the latest edition work.
		    // It might not work properly.
		    if (episode < 1)
		      episode = 1;
		    if ( gamemode == retail )
		    {
		      if (episode > 4)
			episode = 4;
		    }
		    else if ( gamemode == shareware )
		    {
		      if (episode > 1)
			   episode = 1;	// only start episode 1 on shareware
		    }
		    else
		    {
		      if (episode > 3)
			episode = 3;
		    }
	*/
	if skill > sk_nightmare {
		skill = sk_nightmare
	}
	if gameversion >= exe_ultimate {
		if episode == 0 {
			episode = 4
		}
	} else {
		if episode < 1 {
			episode = 1
		}
		if episode > 3 {
			episode = 3
		}
	}
	if episode > 1 && gamemode == shareware {
		episode = 1
	}
	if map1 < 1 {
		map1 = 1
	}
	if map1 > 9 && gamemode != commercial {
		map1 = 9
	}
	M_ClearRandom()
	if skill == sk_nightmare || respawnparm != 0 {
		respawnmonsters = 1
	} else {
		respawnmonsters = 0
	}
	if fastparm != 0 || skill == sk_nightmare && gameskill != sk_nightmare {
		i = S_SARG_RUN1
		for {
			if !(i <= S_SARG_PAIN2) {
				break
			}
			states[i].Ftics >>= 1
			goto _1
		_1:
			;
			i++
		}
		mobjinfo[int32(MT_BRUISERSHOT)].Fspeed = 20 * (1 << FRACBITS)
		mobjinfo[int32(MT_HEADSHOT)].Fspeed = 20 * (1 << FRACBITS)
		mobjinfo[int32(MT_TROOPSHOT)].Fspeed = 20 * (1 << FRACBITS)
	} else {
		if skill != sk_nightmare && gameskill == sk_nightmare {
			i = S_SARG_RUN1
			for {
				if !(i <= S_SARG_PAIN2) {
					break
				}
				states[i].Ftics <<= 1
				goto _2
			_2:
				;
				i++
			}
			mobjinfo[int32(MT_BRUISERSHOT)].Fspeed = 15 * (1 << FRACBITS)
			mobjinfo[int32(MT_HEADSHOT)].Fspeed = 10 * (1 << FRACBITS)
			mobjinfo[int32(MT_TROOPSHOT)].Fspeed = 10 * (1 << FRACBITS)
		}
	}
	// force players to be initialized upon first level load
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		players[i].Fplayerstate = int32(PST_REBORN)
		goto _3
	_3:
		;
		i++
	}
	usergame = 1 // will be set false if a demo
	paused = 0
	demoplayback = 0
	automapactive = 0
	viewactive = 1
	gameepisode = episode
	gamemap = map1
	gameskill = skill
	viewactive = 1
	// Set the sky to use.
	//
	// Note: This IS broken, but it is how Vanilla Doom behaves.
	// See http://doomwiki.org/wiki/Sky_never_changes_in_Doom_II.
	//
	// Because we set the sky here at the start of a game, not at the
	// start of a level, the sky texture never changes unless we
	// restore from a saved game.  This was fixed before the Doom
	// source release, but this IS the way Vanilla DOS Doom behaves.
	if gamemode == commercial {
		if gamemap < 12 {
			skytexturename = __ccgo_ts(13686)
		} else {
			if gamemap < 21 {
				skytexturename = __ccgo_ts(13691)
			} else {
				skytexturename = __ccgo_ts(13696)
			}
		}
	} else {
		switch gameepisode {
		default:
			fallthrough
		case 1:
			skytexturename = __ccgo_ts(13686)
		case 2:
			skytexturename = __ccgo_ts(13691)
		case 3:
			skytexturename = __ccgo_ts(13696)
		case 4: // Special Edition sky
			skytexturename = __ccgo_ts(14105)
			break
		}
	}
	skytexturename = skytexturename
	skytexture = R_TextureNumForName(skytexturename)
	G_DoLoadLevel()
}

//
// DEMO RECORDING
//

func G_ReadDemoTiccmd(cmd *ticcmd_t) {
	var v1, v2, v3, v5, v6, v7 uintptr
	if int32(*(*uint8)(unsafe.Pointer(demo_p))) == int32(DEMOMARKER) {
		// end of demo data stream
		G_CheckDemoStatus()
		return
	}
	v1 = demo_p
	demo_p++
	cmd.Fforwardmove = int8(*(*uint8)(unsafe.Pointer(v1)))
	v2 = demo_p
	demo_p++
	cmd.Fsidemove = int8(*(*uint8)(unsafe.Pointer(v2)))
	// If this is a longtics demo, read back in higher resolution
	if longtics != 0 {
		v3 = demo_p
		demo_p++
		cmd.Fangleturn = int16(*(*uint8)(unsafe.Pointer(v3)))
		v5 = demo_p
		demo_p++
		cmd.Fangleturn |= int16(*(*uint8)(unsafe.Pointer(v5))) << 8
	} else {
		v6 = demo_p
		demo_p++
		cmd.Fangleturn = int16(int32(*(*uint8)(unsafe.Pointer(v6))) << 8)
	}
	v7 = demo_p
	demo_p++
	cmd.Fbuttons = *(*uint8)(unsafe.Pointer(v7))
}

// Increase the size of the demo buffer to allow unlimited demos

func IncreaseDemoBuffer() {
	var current_length, new_length int32
	var new_demobuffer, new_demop uintptr
	// Find the current size
	current_length = int32(int64(demoend) - int64(demobuffer))
	// Generate a new buffer twice the size
	new_length = current_length * 2
	new_demobuffer = Z_Malloc(new_length, int32(PU_STATIC), uintptr(0))
	new_demop = new_demobuffer + uintptr(int64(demo_p)-int64(demobuffer))
	// Copy over the old data
	xmemcpy(new_demobuffer, demobuffer, uint64(current_length))
	// Free the old buffer and point the demo pointers at the new buffer.
	Z_Free(demobuffer)
	demobuffer = new_demobuffer
	demo_p = new_demop
	demoend = demobuffer + uintptr(new_length)
}

func G_WriteDemoTiccmd(cmd *ticcmd_t) {
	var demo_start, v1, v2, v3, v4, v5, v6 uintptr
	if gamekeydown[key_demo_quit] != 0 { // press q to end demo recording
		G_CheckDemoStatus()
	}
	demo_start = demo_p
	v1 = demo_p
	demo_p++
	*(*uint8)(unsafe.Pointer(v1)) = uint8(cmd.Fforwardmove)
	v2 = demo_p
	demo_p++
	*(*uint8)(unsafe.Pointer(v2)) = uint8(cmd.Fsidemove)
	// If this is a longtics demo, record in higher resolution
	if longtics != 0 {
		v3 = demo_p
		demo_p++
		*(*uint8)(unsafe.Pointer(v3)) = uint8(int32(cmd.Fangleturn) & 0xff)
		v4 = demo_p
		demo_p++
		*(*uint8)(unsafe.Pointer(v4)) = uint8(int32(cmd.Fangleturn) >> 8 & 0xff)
	} else {
		v5 = demo_p
		demo_p++
		*(*uint8)(unsafe.Pointer(v5)) = uint8(int32(cmd.Fangleturn) >> 8)
	}
	v6 = demo_p
	demo_p++
	*(*uint8)(unsafe.Pointer(v6)) = cmd.Fbuttons
	// reset demo pointer back
	demo_p = demo_start
	if demo_p > demoend-uintptr(16) {
		if vanilla_demo_limit != 0 {
			// no more space
			G_CheckDemoStatus()
			return
		} else {
			// Vanilla demo limit disabled: unlimited
			// demo lengths!
			IncreaseDemoBuffer()
		}
	}
	G_ReadDemoTiccmd(cmd) // make SURE it is exactly the same
}

// C documentation
//
//	//
//	// G_RecordDemo
//	//
func G_RecordDemo(name string) {
	var i, maxsize int32
	usergame = 0
	demoname = fmt.Sprintf(__ccgo_ts_str(4481), name)
	maxsize = 0x20000
	//!
	// @arg <size>
	// @category demo
	// @vanilla
	//
	// Specify the demo buffer size (KiB)
	//
	i = M_CheckParmWithArgs(__ccgo_ts_str(14110), 1)
	if i != 0 {
		v, _ := strconv.Atoi(myargs[i+1])
		maxsize = int32(v) * 1024
	}
	demobuffer = Z_Malloc(maxsize, int32(PU_STATIC), uintptr(0))
	demoend = demobuffer + uintptr(maxsize)
	demorecording = 1
}

// C documentation
//
//	// Get the demo version code appropriate for the version set in gameversion.
func G_VanillaVersionCode() (r int32) {
	switch gameversion {
	case exe_doom_1_2:
		I_Error(14119, 0)
		fallthrough
	case exe_doom_1_666:
		return 106
	case exe_doom_1_7:
		return 107
	case exe_doom_1_8:
		return 108
	case exe_doom_1_9:
		fallthrough
	default: // All other versions are variants on v1.9:
		return 109
	}
	return r
}

func G_BeginRecording() {
	var i int32
	var v1, v10, v12, v2, v3, v4, v5, v6, v7, v8, v9 uintptr
	//!
	// @category demo
	//
	// Record a high resolution "Doom 1.91" demo.
	//
	longtics = booluint32(M_CheckParm(__ccgo_ts_str(5530)) != 0)
	// If not recording a longtics demo, record in low res
	lowres_turn = booluint32(longtics == 0)
	demo_p = demobuffer
	// Save the right version code for this demo
	if longtics != 0 {
		v1 = demo_p
		demo_p++
		*(*uint8)(unsafe.Pointer(v1)) = uint8(DOOM_191_VERSION)
	} else {
		v2 = demo_p
		demo_p++
		*(*uint8)(unsafe.Pointer(v2)) = uint8(G_VanillaVersionCode())
	}
	v3 = demo_p
	demo_p++
	*(*uint8)(unsafe.Pointer(v3)) = uint8(gameskill)
	v4 = demo_p
	demo_p++
	*(*uint8)(unsafe.Pointer(v4)) = uint8(gameepisode)
	v5 = demo_p
	demo_p++
	*(*uint8)(unsafe.Pointer(v5)) = uint8(gamemap)
	v6 = demo_p
	demo_p++
	*(*uint8)(unsafe.Pointer(v6)) = uint8(deathmatch)
	v7 = demo_p
	demo_p++
	*(*uint8)(unsafe.Pointer(v7)) = uint8(respawnparm)
	v8 = demo_p
	demo_p++
	*(*uint8)(unsafe.Pointer(v8)) = uint8(fastparm)
	v9 = demo_p
	demo_p++
	*(*uint8)(unsafe.Pointer(v9)) = uint8(nomonsters)
	v10 = demo_p
	demo_p++
	*(*uint8)(unsafe.Pointer(v10)) = uint8(consoleplayer)
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		v12 = demo_p
		demo_p++
		*(*uint8)(unsafe.Pointer(v12)) = uint8(playeringame[i])
		goto _11
	_11:
		;
		i++
	}
}

func G_DeferedPlayDemo(name string) {
	if dont_run_demo {
		return
	}
	defdemoname = name
	gameaction = ga_playdemo
}

// Generate a string describing a demo version

func DemoVersionDescription(version int32) (r uintptr) {
	switch version {
	case 104:
		return __ccgo_ts(14158)
	case 105:
		return __ccgo_ts(14163)
	case 106:
		return __ccgo_ts(14168)
	case 107:
		return __ccgo_ts(14180)
	case 108:
		return __ccgo_ts(14191)
	case 109:
		return __ccgo_ts(14196)
	default:
		break
	}
	// Unknown version.  Perhaps this is a pre-v1.4 IWAD?  If the version
	// byte is in the range 0-4 then it can be a v1.0-v1.2 demo.
	if version >= 0 && version <= 4 {
		return __ccgo_ts(14201)
	} else {
		M_snprintf(uintptr(unsafe.Pointer(&resultbuf)), 16, __ccgo_ts_str(14216), version/int32(100), version%int32(100))
		return uintptr(unsafe.Pointer(&resultbuf))
	}
	return r
}

var resultbuf [16]int8

func G_DoPlayDemo() {
	var demoversion, episode, i, map1 int32
	var v1, v10, v12, v2, v3, v4, v5, v6, v7, v8, v9 uintptr
	var skill skill_t
	gameaction = ga_nothing
	cName := bytestring(defdemoname)
	v1 = W_CacheLumpName(uintptr(unsafe.Pointer(&cName[0])), int32(PU_STATIC))
	demo_p = v1
	demobuffer = v1
	v2 = demo_p
	demo_p++
	demoversion = int32(*(*uint8)(unsafe.Pointer(v2)))
	if demoversion == G_VanillaVersionCode() {
		longtics = 0
	} else {
		if demoversion == int32(DOOM_191_VERSION) {
			// demo recorded with cph's modified "v1.91" doom exe
			longtics = 1
		} else {
			//I_Error(message, demoversion, G_VanillaVersionCode(),
			fprintf_ccgo(os.Stdout, 14232, demoversion, G_VanillaVersionCode(), gostring(DemoVersionDescription(demoversion)))
		}
	}
	v3 = demo_p
	demo_p++
	skill = skill_t(*(*uint8)(unsafe.Pointer(v3)))
	v4 = demo_p
	demo_p++
	episode = int32(*(*uint8)(unsafe.Pointer(v4)))
	v5 = demo_p
	demo_p++
	map1 = int32(*(*uint8)(unsafe.Pointer(v5)))
	v6 = demo_p
	demo_p++
	deathmatch = int32(*(*uint8)(unsafe.Pointer(v6)))
	v7 = demo_p
	demo_p++
	respawnparm = uint32(*(*uint8)(unsafe.Pointer(v7)))
	v8 = demo_p
	demo_p++
	fastparm = uint32(*(*uint8)(unsafe.Pointer(v8)))
	v9 = demo_p
	demo_p++
	nomonsters = uint32(*(*uint8)(unsafe.Pointer(v9)))
	v10 = demo_p
	demo_p++
	consoleplayer = int32(*(*uint8)(unsafe.Pointer(v10)))
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		v12 = demo_p
		demo_p++
		playeringame[i] = uint32(*(*uint8)(unsafe.Pointer(v12)))
		goto _11
	_11:
		;
		i++
	}
	if playeringame[int32(1)] != 0 || M_CheckParm(__ccgo_ts_str(5553)) > 0 || M_CheckParm(__ccgo_ts_str(14449)) > 0 {
		netgame = 1
		netdemo = 1
	}
	// don't spend a lot of time in loadlevel
	precache = 0
	G_InitNew(skill, episode, map1)
	precache = 1
	starttime = I_GetTime()
	usergame = 0
	demoplayback = 1
}

// C documentation
//
//	//
//	// G_TimeDemo
//	//
func G_TimeDemo(name string) {
	//!
	// @vanilla
	//
	// Disable rendering the screen entirely.
	//
	nodrawers = uint32(M_CheckParm(__ccgo_ts_str(14458)))
	timingdemo = 1
	singletics = 1
	defdemoname = name
	gameaction = ga_playdemo
}

/*
===================
=
= G_CheckDemoStatus
=
= Called after a death or level completion to allow demos to be cleaned up
= Returns true if a new demo loop action will take place
===================
*/
func G_CheckDemoStatus() {
	var endtime, realtics int32
	var fps float32
	var v1, v2 boolean
	var v3 uintptr
	if timingdemo != 0 {
		endtime = I_GetTime()
		realtics = endtime - starttime
		fps = float32(gametic) * float32(TICRATE) / float32(realtics)
		// Prevent recursive calls
		timingdemo = 0
		demoplayback = 0
		I_Error(14466, gametic, realtics, float64(fps))
	}
	if demoplayback != 0 {
		cName := []byte(defdemoname)
		W_ReleaseLumpName(uintptr(unsafe.Pointer(&cName[0])))
		demoplayback = 0
		netdemo = 0
		netgame = 0
		deathmatch = 0
		v2 = 0
		playeringame[int32(3)] = v2
		v1 = v2
		playeringame[int32(2)] = v1
		playeringame[int32(1)] = v1
		respawnparm = 0
		fastparm = 0
		nomonsters = 0
		consoleplayer = 0
		if singledemo != 0 {
			I_Quit()
		} else {
			D_AdvanceDemo()
		}
		return
	}
	if demorecording != 0 {
		v3 = demo_p
		demo_p++
		*(*uint8)(unsafe.Pointer(v3)) = uint8(DEMOMARKER)
		M_WriteFile(demoname, demobuffer, int32(int64(demo_p)-int64(demobuffer)))
		Z_Free(demobuffer)
		demorecording = 0
		I_Error(14508, demoname)
	}
	return
}

const HU_MAXLINELENGTH = 80
const KEY_BACKSPACE1 = 127

type hu_textline_t struct {
	Fx           int32
	Fy           int32
	Ff           []*patch_t
	Fsc          int32
	Fl           [81]byte
	Flen1        int32
	Fneedsupdate int32
}

type hu_stext_t struct {
	Fl      [4]hu_textline_t
	Fh      int32
	Fcl     int32
	Fon     *boolean
	Flaston boolean
}

type hu_itext_t struct {
	Fl      hu_textline_t
	Flm     int32
	Fon     *boolean
	Flaston boolean
}

func HUlib_clearTextLine(t *hu_textline_t) {
	t.Flen1 = 0
	t.Fl[0] = 0
	t.Fneedsupdate = 1
}

func HUlib_initTextLine(t *hu_textline_t, x int32, y int32, f []*patch_t, sc int32) {
	t.Fx = x
	t.Fy = y
	t.Ff = f
	t.Fsc = sc
	HUlib_clearTextLine(t)
}

func HUlib_addCharToTextLine(t *hu_textline_t, ch byte) boolean {
	if t.Flen1 == int32(HU_MAXLINELENGTH) {
		return 0
	} else {
		t.Fl[t.Flen1] = ch
		t.Flen1++
		t.Fl[t.Flen1] = 0
		t.Fneedsupdate = 4
		return 1
	}
}

func HUlib_delCharFromTextLine(t *hu_textline_t) boolean {
	if t.Flen1 == 0 {
		return 0
	} else {
		t.Flen1--
		t.Fl[t.Flen1] = 0
		t.Fneedsupdate = 4
		return 1
	}
}

func HUlib_drawTextLine(l *hu_textline_t, drawcursor boolean) {
	var c uint8
	var i, w, x int32
	// draw the new stuff
	x = l.Fx
	i = 0
	for {
		if i >= l.Flen1 {
			break
		}
		c = uint8(xtoupper(int32(l.Fl[i])))
		if int32(c) != int32(' ') && int32(c) >= l.Fsc && int32(c) <= int32('_') {
			w = int32(l.Ff[int32(c)-l.Fsc].Fwidth)
			if x+w > SCREENWIDTH {
				break
			}
			V_DrawPatchDirect(x, l.Fy, l.Ff[int32(c)-l.Fsc])
			x += w
		} else {
			x += 4
			if x >= SCREENWIDTH {
				break
			}
		}
		goto _1
	_1:
		;
		i++
	}
	// draw the cursor if requested
	if drawcursor != 0 && x+int32(l.Ff[int32('_')-l.Fsc].Fwidth) <= SCREENWIDTH {
		V_DrawPatchDirect(x, l.Fy, l.Ff['_'-l.Fsc])
	}
}

// C documentation
//
//	// sorta called by HU_Erase and just better darn get things straight
func HUlib_eraseTextLine(l *hu_textline_t) {
	var lh, y, yoffset int32
	// Only erases when NOT in automap and the screen is reduced,
	// and the text must either need updating or refreshing
	// (because of a recent change back from the automap)
	if automapactive == 0 && viewwindowx != 0 && l.Fneedsupdate != 0 {
		lh = int32(l.Ff[0].Fheight) + 1
		y = l.Fy
		yoffset = y * SCREENWIDTH
		for {
			if y >= l.Fy+lh {
				break
			}
			if y < viewwindowy || y >= viewwindowy+viewheight {
				R_VideoErase(uint32(yoffset), SCREENWIDTH)
			} else {
				R_VideoErase(uint32(yoffset), viewwindowx) // erase left border
				R_VideoErase(uint32(yoffset+viewwindowx+viewwidth), viewwindowx)
				// erase right border
			}
			goto _1
		_1:
			;
			y++
			yoffset += SCREENWIDTH
		}
	}
	if l.Fneedsupdate != 0 {
		l.Fneedsupdate--
	}
}

func HUlib_initSText(s *hu_stext_t, x int32, y int32, h int32, font []*patch_t, startchar int32, on *boolean) {
	s.Fh = h
	s.Fon = on
	s.Flaston = 1
	s.Fcl = 0
	for i := int32(0); i < h; i++ {
		HUlib_initTextLine(&s.Fl[i], x, y-i*(int32(font[0].Fheight)+int32(1)), font, startchar)
	}
}

func HUlib_addLineToSText(s *hu_stext_t) {
	// add a clear line
	s.Fcl++
	if s.Fcl == s.Fh {
		s.Fcl = 0
	}
	HUlib_clearTextLine(&s.Fl[s.Fcl])
	// everything needs updating
	for i := int32(0); i < s.Fh; i++ {
		s.Fl[i].Fneedsupdate = 4 // needs updating
	}
}

func HUlib_addMessageToSText(s *hu_stext_t, prefix string, msg string) {
	HUlib_addLineToSText(s)
	for _, i := range prefix {
		HUlib_addCharToTextLine(&s.Fl[s.Fcl], byte(i))
	}
	for _, i := range msg {
		HUlib_addCharToTextLine(&s.Fl[s.Fcl], byte(i))
	}
}

func HUlib_drawSText(s *hu_stext_t) {
	var idx int32
	if *s.Fon == 0 {
		return
	} // if not on, don't draw
	// draw everything
	for i := int32(0); i < s.Fh; i++ {
		idx = s.Fcl - i
		if idx < 0 {
			idx += s.Fh
		} // handle queue of lines
		l := &s.Fl[idx]
		// need a decision made here on whether to skip the draw
		HUlib_drawTextLine(l, 0) // no cursor, please
	}
}

func HUlib_eraseSText(s *hu_stext_t) {
	for i := int32(0); i < s.Fh; i++ {
		if s.Flaston != 0 && *s.Fon == 0 {
			s.Fl[i].Fneedsupdate = 4
		}
		HUlib_eraseTextLine(&s.Fl[i])
	}
	s.Flaston = *s.Fon
}

func HUlib_initIText(it *hu_itext_t, x int32, y int32, font []*patch_t, startchar int32, on *boolean) {
	it.Flm = 0 // default left margin is start of text
	it.Fon = on
	it.Flaston = 1
	HUlib_initTextLine(&it.Fl, x, y, font, startchar)
}

// C documentation
//
//	// The following deletion routines adhere to the left margin restriction
func HUlib_delCharFromIText(it *hu_itext_t) {
	if it.Fl.Flen1 != it.Flm {
		HUlib_delCharFromTextLine(&it.Fl)
	}
}

// C documentation
//
//	// Resets left margin as well
func HUlib_resetIText(it *hu_itext_t) {
	it.Flm = 0
	HUlib_clearTextLine(&it.Fl)
}

// C documentation
//
//	// wrapper function for handling general keyed input.
//	// returns true if it ate the key
func HUlib_keyInIText(it *hu_itext_t, ch uint8) (r boolean) {
	ch = uint8(xtoupper(int32(ch)))
	if int32(ch) >= int32(' ') && int32(ch) <= int32('_') {
		HUlib_addCharToTextLine(&it.Fl, ch)
	} else {
		if int32(ch) == int32(KEY_BACKSPACE1) {
			HUlib_delCharFromIText(it)
		} else {
			if int32(ch) != int32(KEY_ENTER) {
				return 0
			}
		}
	} // did not eat key
	return 1 // ate the key
}

func HUlib_drawIText(it *hu_itext_t) {
	if *it.Fon == 0 {
		return
	}
	HUlib_drawTextLine(&it.Fl, 1) // draw the line w/ cursor
}

func HUlib_eraseIText(it *hu_itext_t) {
	if it.Flaston != 0 && *it.Fon == 0 {
		it.Fl.Fneedsupdate = 4
	}
	HUlib_eraseTextLine(&it.Fl)
	it.Flaston = *it.Fon
}

const HU_TITLEX = 0
const QUEUESIZE = 128

func init() {
	chat_macros = [10][]byte{
		0: __ccgo_ts_map[14525],
		1: __ccgo_ts_map[14528],
		2: __ccgo_ts_map[14552],
		3: __ccgo_ts_map[14560],
		4: __ccgo_ts_map[14586],
		5: __ccgo_ts_map[14592],
		6: __ccgo_ts_map[14602],
		7: __ccgo_ts_map[14624],
		8: __ccgo_ts_map[14635],
		9: __ccgo_ts_map[14657],
	}
}

func init() {
	player_names = [4]string{
		0: __ccgo_ts_str(14661),
		1: __ccgo_ts_str(14669),
		2: __ccgo_ts_str(14678),
		3: __ccgo_ts_str(14686),
	}
}

var plr1 *player_t
var w_title hu_textline_t
var w_chat hu_itext_t
var always_off boolean = 0
var chat_dest [4]int8
var w_inputbuffer [4]hu_itext_t

var message_on boolean
var message_nottobefuckedwith boolean

var w_message hu_stext_t
var message_counter int32

var headsupactive = 0

func init() {
	mapnames = [45]string{
		0:  __ccgo_ts_str(14692),
		1:  __ccgo_ts_str(14705),
		2:  __ccgo_ts_str(14725),
		3:  __ccgo_ts_str(14746),
		4:  __ccgo_ts_str(14768),
		5:  __ccgo_ts_str(14785),
		6:  __ccgo_ts_str(14810),
		7:  __ccgo_ts_str(14833),
		8:  __ccgo_ts_str(14854),
		9:  __ccgo_ts_str(14874),
		10: __ccgo_ts_str(14895),
		11: __ccgo_ts_str(14918),
		12: __ccgo_ts_str(14933),
		13: __ccgo_ts_str(14950),
		14: __ccgo_ts_str(14971),
		15: __ccgo_ts_str(14997),
		16: __ccgo_ts_str(15017),
		17: __ccgo_ts_str(15038),
		18: __ccgo_ts_str(15064),
		19: __ccgo_ts_str(15080),
		20: __ccgo_ts_str(15104),
		21: __ccgo_ts_str(15122),
		22: __ccgo_ts_str(15142),
		23: __ccgo_ts_str(15165),
		24: __ccgo_ts_str(15182),
		25: __ccgo_ts_str(15194),
		26: __ccgo_ts_str(15204),
		27: __ccgo_ts_str(15218),
		28: __ccgo_ts_str(15237),
		29: __ccgo_ts_str(15258),
		30: __ccgo_ts_str(15281),
		31: __ccgo_ts_str(15299),
		32: __ccgo_ts_str(15322),
		33: __ccgo_ts_str(15350),
		34: __ccgo_ts_str(15374),
		35: __ccgo_ts_str(15395),
		36: __ccgo_ts_str(15406),
		37: __ccgo_ts_str(15406),
		38: __ccgo_ts_str(15406),
		39: __ccgo_ts_str(15406),
		40: __ccgo_ts_str(15406),
		41: __ccgo_ts_str(15406),
		42: __ccgo_ts_str(15406),
		43: __ccgo_ts_str(15406),
		44: __ccgo_ts_str(15406),
	}
}

func init() {
	mapnames_commercial = [96]string{
		0:  __ccgo_ts_str(15415),
		1:  __ccgo_ts_str(15433),
		2:  __ccgo_ts_str(15453),
		3:  __ccgo_ts_str(15474),
		4:  __ccgo_ts_str(15493),
		5:  __ccgo_ts_str(15520),
		6:  __ccgo_ts_str(15541),
		7:  __ccgo_ts_str(15562),
		8:  __ccgo_ts_str(15588),
		9:  __ccgo_ts_str(15605),
		10: __ccgo_ts_str(15630),
		11: __ccgo_ts_str(15660),
		12: __ccgo_ts_str(15682),
		13: __ccgo_ts_str(15701),
		14: __ccgo_ts_str(15727),
		15: __ccgo_ts_str(15753),
		16: __ccgo_ts_str(15771),
		17: __ccgo_ts_str(15791),
		18: __ccgo_ts_str(15815),
		19: __ccgo_ts_str(15837),
		20: __ccgo_ts_str(15855),
		21: __ccgo_ts_str(15873),
		22: __ccgo_ts_str(15897),
		23: __ccgo_ts_str(15922),
		24: __ccgo_ts_str(15942),
		25: __ccgo_ts_str(15963),
		26: __ccgo_ts_str(15993),
		27: __ccgo_ts_str(16017),
		28: __ccgo_ts_str(16044),
		29: __ccgo_ts_str(16069),
		30: __ccgo_ts_str(16091),
		31: __ccgo_ts_str(16113),
		32: __ccgo_ts_str(16130),
		33: __ccgo_ts_str(16145),
		34: __ccgo_ts_str(16168),
		35: __ccgo_ts_str(16183),
		36: __ccgo_ts_str(16198),
		37: __ccgo_ts_str(16218),
		38: __ccgo_ts_str(16240),
		39: __ccgo_ts_str(16260),
		40: __ccgo_ts_str(16275),
		41: __ccgo_ts_str(16294),
		42: __ccgo_ts_str(16314),
		43: __ccgo_ts_str(16331),
		44: __ccgo_ts_str(16347),
		45: __ccgo_ts_str(16367),
		46: __ccgo_ts_str(16385),
		47: __ccgo_ts_str(16408),
		48: __ccgo_ts_str(16427),
		49: __ccgo_ts_str(16446),
		50: __ccgo_ts_str(16468),
		51: __ccgo_ts_str(16482),
		52: __ccgo_ts_str(16509),
		53: __ccgo_ts_str(16526),
		54: __ccgo_ts_str(16555),
		55: __ccgo_ts_str(16575),
		56: __ccgo_ts_str(16604),
		57: __ccgo_ts_str(16637),
		58: __ccgo_ts_str(16654),
		59: __ccgo_ts_str(16676),
		60: __ccgo_ts_str(16697),
		61: __ccgo_ts_str(16725),
		62: __ccgo_ts_str(16755),
		63: __ccgo_ts_str(16774),
		64: __ccgo_ts_str(16792),
		65: __ccgo_ts_str(16816),
		66: __ccgo_ts_str(16835),
		67: __ccgo_ts_str(16858),
		68: __ccgo_ts_str(16876),
		69: __ccgo_ts_str(16892),
		70: __ccgo_ts_str(16913),
		71: __ccgo_ts_str(16929),
		72: __ccgo_ts_str(16944),
		73: __ccgo_ts_str(16964),
		74: __ccgo_ts_str(16985),
		75: __ccgo_ts_str(17012),
		76: __ccgo_ts_str(17029),
		77: __ccgo_ts_str(17057),
		78: __ccgo_ts_str(17079),
		79: __ccgo_ts_str(17099),
		80: __ccgo_ts_str(17125),
		81: __ccgo_ts_str(17151),
		82: __ccgo_ts_str(17166),
		83: __ccgo_ts_str(17196),
		84: __ccgo_ts_str(17225),
		85: __ccgo_ts_str(17257),
		86: __ccgo_ts_str(17275),
		87: __ccgo_ts_str(17306),
		88: __ccgo_ts_str(17323),
		89: __ccgo_ts_str(17345),
		90: __ccgo_ts_str(17365),
		91: __ccgo_ts_str(17386),
		92: __ccgo_ts_str(17401),
		93: __ccgo_ts_str(17422),
		94: __ccgo_ts_str(17442),
		95: __ccgo_ts_str(17460),
	}
}

func HU_Init() {
	bp := alloc(32)
	var i, j, v2 int32
	// load the heads-up font
	j = int32('!')
	i = 0
	for {
		if i >= int32('_')-int32('!')+1 {
			break
		}
		v2 = j
		j++
		snprintf_ccgo(bp, 9, 17480, v2)
		hu_font[i] = W_CacheLumpNameT(bp, int32(PU_STATIC))
		goto _1
	_1:
		;
		i++
	}
}

func HU_Stop() {
	headsupactive = 0
}

func HU_Start() {
	var i int32
	var v1 GameMission_t
	var s string
	if headsupactive != 0 {
		HU_Stop()
	}
	plr1 = &players[consoleplayer]
	message_on = 0
	message_dontfuckwithme = 0
	message_nottobefuckedwith = 0
	chat_on = 0
	// create the message widget
	HUlib_initSText(&w_message, HU_MSGX, HU_MSGY, int32(HU_MSGHEIGHT), hu_font[:], int32('!'), &message_on)
	// create the map title widget
	HUlib_initTextLine(&w_title, HU_TITLEX, 167-int32((*patch_t)(unsafe.Pointer(hu_font[0])).Fheight), hu_font[:], int32('!'))
	if gamemission == pack_chex {
		v1 = doom
	} else {
		if gamemission == pack_hacx {
			v1 = doom2
		} else {
			v1 = gamemission
		}
	}
	switch v1 {
	case doom:
		s = mapnames[(gameepisode-1)*9+gamemap-1]
	case doom2:
		s = mapnames_commercial[gamemap-1]
	case pack_plut:
		s = mapnames_commercial[gamemap-1+int32(32)]
	case pack_tnt:
		s = mapnames_commercial[gamemap-1+int32(64)]
	default:
		s = __ccgo_ts_str(17490)
		break
	}
	// Chex.exe always uses the episode 1 level title
	// eg. E2M1 gives the title for E1M1
	if gameversion == exe_chex {
		s = mapnames[gamemap-1]
	}
	// dehacked substitution to get modified level name
	for _, i := range s {
		HUlib_addCharToTextLine(&w_title, byte(i))
	}
	// create the chat widget
	HUlib_initIText(&w_chat, HU_MSGX, HU_MSGY+int32(HU_MSGHEIGHT)*(int32((*patch_t)(unsafe.Pointer(hu_font[0])).Fheight)+int32(1)), hu_font[:], int32('!'), &chat_on)
	// create the inputbuffer widgets
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		HUlib_initIText(&w_inputbuffer[i], 0, 0, nil, 0, &always_off)
		goto _4
	_4:
		;
		i++
	}
	headsupactive = 1
}

func HU_Drawer() {
	HUlib_drawSText(&w_message)
	HUlib_drawIText(&w_chat)
	if automapactive != 0 {
		HUlib_drawTextLine(&w_title, 0)
	}
}

func HU_Erase() {
	HUlib_eraseSText(&w_message)
	HUlib_eraseIText(&w_chat)
	HUlib_eraseTextLine(&w_title)
}

func HU_Ticker() {
	var c, v4 int8
	var i, rc, v1 int32
	var v2, v5 bool
	// tick down message counter if message is up
	if v2 = message_counter != 0; v2 {
		message_counter--
		v1 = message_counter
	}
	if v2 && v1 == 0 {
		message_on = 0
		message_nottobefuckedwith = 0
	}
	if showMessages != 0 || message_dontfuckwithme != 0 {
		// display message if necessary
		if plr1.Fmessage != "" && message_nottobefuckedwith == 0 || plr1.Fmessage != "" && message_dontfuckwithme != 0 {
			HUlib_addMessageToSText(&w_message, "", plr1.Fmessage)
			plr1.Fmessage = ""
			message_on = 1
			message_counter = 4 * TICRATE
			message_nottobefuckedwith = message_dontfuckwithme
			message_dontfuckwithme = 0
		}
	} // else message_on = false;
	// check for incoming chat characters
	if netgame != 0 {
		i = 0
		for {
			if i >= int32(MAXPLAYERS) {
				break
			}
			if playeringame[i] == 0 {
				goto _3
			}
			if v5 = i != consoleplayer; v5 {
				v4 = int8(players[i].Fcmd.Fchatchar)
				c = v4
			}
			if v5 && v4 != 0 {
				if int32(c) <= int32(HU_BROADCAST) {
					chat_dest[i] = c
				} else {
					rc = int32(HUlib_keyInIText(&w_inputbuffer[i], uint8(c)))
					if rc != 0 && int32(c) == int32(KEY_ENTER) {
						if w_inputbuffer[i].Fl.Flen1 != 0 && (int32(chat_dest[i]) == consoleplayer+int32(1) || int32(chat_dest[i]) == int32(HU_BROADCAST)) {
							HUlib_addMessageToSText(&w_message, player_names[i], gostring_bytes(w_inputbuffer[i].Fl.Fl[:]))
							message_nottobefuckedwith = 1
							message_on = 1
							message_counter = 4 * TICRATE
							if gamemode == commercial {
								S_StartSound(nil, int32(sfx_radio))
							} else {
								S_StartSound(nil, int32(sfx_tink))
							}
						}
						HUlib_resetIText(&w_inputbuffer[i])
					}
				}
				players[i].Fcmd.Fchatchar = 0
			}
			goto _3
		_3:
			;
			i++
		}
	}
}

var chatchars [128]int8
var head = 0
var tail = 0

func HU_queueChatChar(c int8) {
	if (head+1)&(QUEUESIZE-1) == tail {
		plr1.Fmessage = __ccgo_ts_str(17504)
	} else {
		chatchars[head] = c
		head = (head + 1) & (QUEUESIZE - 1)
	}
}

func HU_dequeueChatChar() (r int8) {
	var c int8
	if head != tail {
		c = chatchars[tail]
		tail = (tail + 1) & (QUEUESIZE - 1)
	} else {
		c = 0
	}
	return c
}

func HU_Responder(ev *event_t) (r boolean) {
	var c uint8
	var eatkey, v2, v4 boolean
	var i, numplayers int32
	var macromessage []byte
	eatkey = 0
	numplayers = 0
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		numplayers = int32(uint32(numplayers) + playeringame[i])
		goto _1
	_1:
		;
		i++
	}
	if ev.Fdata1 == 0x80+0x36 {
		return 0
	} else {
		if ev.Fdata1 == 0x80+0x38 {
			altdown = booluint32(ev.Ftype1 == ev_keydown)
			return 0
		}
	}
	if ev.Ftype1 != ev_keydown {
		return 0
	}
	if chat_on == 0 {
		if ev.Fdata1 == key_message_refresh {
			message_on = 1
			message_counter = 4 * TICRATE
			eatkey = 1
		} else {
			if netgame != 0 && ev.Fdata2 == key_multi_msg {
				v2 = 1
				chat_on = v2
				eatkey = v2
				HUlib_resetIText(&w_chat)
				HU_queueChatChar(int8(HU_BROADCAST))
			} else {
				if netgame != 0 && numplayers > 2 {
					i = 0
					for {
						if i >= int32(MAXPLAYERS) {
							break
						}
						if ev.Fdata2 == key_multi_msgplayer[i] {
							if playeringame[i] != 0 && i != consoleplayer {
								v4 = 1
								chat_on = v4
								eatkey = v4
								HUlib_resetIText(&w_chat)
								HU_queueChatChar(int8(i + 1))
								break
							} else {
								if i == consoleplayer {
									num_nobrainers++
									if num_nobrainers < 3 {
										plr1.Fmessage = __ccgo_ts_str(17521)
									} else {
										if num_nobrainers < 6 {
											plr1.Fmessage = __ccgo_ts_str(17544)
										} else {
											if num_nobrainers < 9 {
												plr1.Fmessage = __ccgo_ts_str(17557)
											} else {
												if num_nobrainers < 32 {
													plr1.Fmessage = __ccgo_ts_str(17576)
												} else {
													plr1.Fmessage = __ccgo_ts_str(17594)
												}
											}
										}
									}
								}
							}
						}
						goto _3
					_3:
						;
						i++
					}
				}
			}
		}
	} else {
		// send a macro
		if altdown != 0 {
			c = uint8(ev.Fdata1 - int32('0'))
			if int32(c) > 9 {
				return 0
			}
			// fprintf(stderr, "got here\n");
			macromessage = chat_macros[c]
			// kill last message with a '\n'
			HU_queueChatChar(int8(KEY_ENTER)) // DEBUG!!!
			// send the macro message
			for i := 0; macromessage[i] != 0; i++ {
				HU_queueChatChar(int8(macromessage[i]))
			}
			HU_queueChatChar(int8(KEY_ENTER))
			// leave chat mode and notify that it was sent
			chat_on = 0
			lastmessage = gostring_bytes(chat_macros[c])
			plr1.Fmessage = lastmessage
			eatkey = 1
		} else {
			c = uint8(ev.Fdata2)
			eatkey = HUlib_keyInIText(&w_chat, c)
			if eatkey != 0 {
				// static unsigned char buf[20]; // DEBUG
				HU_queueChatChar(int8(c))
				// M_snprintf(buf, sizeof(buf), "KEY: %d => %d", ev->data1, c);
				//        plr->message = buf;
			}
			if int32(c) == int32(KEY_ENTER) {
				chat_on = 0
				if w_chat.Fl.Flen1 != 0 {
					lastmessage = gostring(uintptr(unsafe.Pointer(&w_chat.Fl.Fl[0])))
					plr1.Fmessage = lastmessage
				}
			} else {
				if int32(c) == int32(KEY_ESCAPE) {
					chat_on = 0
				}
			}
		}
	}
	return eatkey
}

var lastmessage string

var altdown boolean

var num_nobrainers int32

func init() {
	sprnames = []uintptr{
		0:   __ccgo_ts(17612),
		1:   __ccgo_ts(17617),
		2:   __ccgo_ts(17622),
		3:   __ccgo_ts(17627),
		4:   __ccgo_ts(17632),
		5:   __ccgo_ts(17637),
		6:   __ccgo_ts(17642),
		7:   __ccgo_ts(17647),
		8:   __ccgo_ts(17652),
		9:   __ccgo_ts(17657),
		10:  __ccgo_ts(17662),
		11:  __ccgo_ts(17667),
		12:  __ccgo_ts(17672),
		13:  __ccgo_ts(17677),
		14:  __ccgo_ts(17682),
		15:  __ccgo_ts(17687),
		16:  __ccgo_ts(17692),
		17:  __ccgo_ts(17697),
		18:  __ccgo_ts(17702),
		19:  __ccgo_ts(17707),
		20:  __ccgo_ts(17712),
		21:  __ccgo_ts(17717),
		22:  __ccgo_ts(17722),
		23:  __ccgo_ts(17727),
		24:  __ccgo_ts(17732),
		25:  __ccgo_ts(17737),
		26:  __ccgo_ts(17742),
		27:  __ccgo_ts(17747),
		28:  __ccgo_ts(17752),
		29:  __ccgo_ts(17757),
		30:  __ccgo_ts(17762),
		31:  __ccgo_ts(17767),
		32:  __ccgo_ts(17772),
		33:  __ccgo_ts(17777),
		34:  __ccgo_ts(17782),
		35:  __ccgo_ts(17787),
		36:  __ccgo_ts(17792),
		37:  __ccgo_ts(17797),
		38:  __ccgo_ts(17802),
		39:  __ccgo_ts(17807),
		40:  __ccgo_ts(17812),
		41:  __ccgo_ts(17817),
		42:  __ccgo_ts(17822),
		43:  __ccgo_ts(17827),
		44:  __ccgo_ts(17832),
		45:  __ccgo_ts(17837),
		46:  __ccgo_ts(17842),
		47:  __ccgo_ts(17847),
		48:  __ccgo_ts(17852),
		49:  __ccgo_ts(17857),
		50:  __ccgo_ts(17862),
		51:  __ccgo_ts(17867),
		52:  __ccgo_ts(17872),
		53:  __ccgo_ts(17877),
		54:  __ccgo_ts(17882),
		55:  __ccgo_ts(17887),
		56:  __ccgo_ts(17892),
		57:  __ccgo_ts(17897),
		58:  __ccgo_ts(17902),
		59:  __ccgo_ts(17907),
		60:  __ccgo_ts(17912),
		61:  __ccgo_ts(17917),
		62:  __ccgo_ts(17922),
		63:  __ccgo_ts(17927),
		64:  __ccgo_ts(17932),
		65:  __ccgo_ts(17937),
		66:  __ccgo_ts(17942),
		67:  __ccgo_ts(17947),
		68:  __ccgo_ts(17952),
		69:  __ccgo_ts(17957),
		70:  __ccgo_ts(17962),
		71:  __ccgo_ts(17967),
		72:  __ccgo_ts(17972),
		73:  __ccgo_ts(17977),
		74:  __ccgo_ts(17982),
		75:  __ccgo_ts(17987),
		76:  __ccgo_ts(17992),
		77:  __ccgo_ts(17997),
		78:  __ccgo_ts(18002),
		79:  __ccgo_ts(18007),
		80:  __ccgo_ts(18012),
		81:  __ccgo_ts(18017),
		82:  __ccgo_ts(18022),
		83:  __ccgo_ts(18027),
		84:  __ccgo_ts(18032),
		85:  __ccgo_ts(18037),
		86:  __ccgo_ts(18042),
		87:  __ccgo_ts(18047),
		88:  __ccgo_ts(18052),
		89:  __ccgo_ts(18057),
		90:  __ccgo_ts(18062),
		91:  __ccgo_ts(18067),
		92:  __ccgo_ts(18072),
		93:  __ccgo_ts(18077),
		94:  __ccgo_ts(18082),
		95:  __ccgo_ts(18087),
		96:  __ccgo_ts(18092),
		97:  __ccgo_ts(18097),
		98:  __ccgo_ts(18102),
		99:  __ccgo_ts(18107),
		100: __ccgo_ts(18112),
		101: __ccgo_ts(18117),
		102: __ccgo_ts(18122),
		103: __ccgo_ts(18127),
		104: __ccgo_ts(18132),
		105: __ccgo_ts(18137),
		106: __ccgo_ts(18142),
		107: __ccgo_ts(18147),
		108: __ccgo_ts(18152),
		109: __ccgo_ts(18157),
		110: __ccgo_ts(18162),
		111: __ccgo_ts(18167),
		112: __ccgo_ts(18172),
		113: __ccgo_ts(18177),
		114: __ccgo_ts(18182),
		115: __ccgo_ts(18187),
		116: __ccgo_ts(18192),
		117: __ccgo_ts(18197),
		118: __ccgo_ts(18202),
		119: __ccgo_ts(18207),
		120: __ccgo_ts(18212),
		121: __ccgo_ts(18217),
		122: __ccgo_ts(18222),
		123: __ccgo_ts(18227),
		124: __ccgo_ts(18232),
		125: __ccgo_ts(18237),
		126: __ccgo_ts(18242),
		127: __ccgo_ts(18247),
		128: __ccgo_ts(18252),
		129: __ccgo_ts(18257),
		130: __ccgo_ts(18262),
		131: __ccgo_ts(18267),
		132: __ccgo_ts(18272),
		133: __ccgo_ts(18277),
		134: __ccgo_ts(18282),
		135: __ccgo_ts(18287),
		136: __ccgo_ts(18292),
		137: __ccgo_ts(18297),
	}
}

// Original doom had function pointers relying on the base address of *mobj_t & *player_t being the same.
// Go doesn't like that without a lot of unsafe casting, so we use a wrapper function to convert
// the player function to a mobj function.
// We now relay on mo.Fplayer being set properly, but that is done in the game code
func playerFuncToAction(f func(p *player_t, psp *pspdef_t)) func(*mobj_t, *pspdef_t) {
	return func(mo *mobj_t, psp *pspdef_t) {
		f(mo.Fplayer, psp)
	}
}

func mobjFuncToAction(f func(mo *mobj_t)) func(*mobj_t, *pspdef_t) {
	return func(mo *mobj_t, psp *pspdef_t) {
		f(mo)
	}
}

func init() {
	states = [967]state_t{
		0: {
			Ftics: -1,
		},
		1: {
			Fsprite: SPR_SHTG,
			Fframe:  4,
			Faction: playerFuncToAction(A_Light0),
		},
		2: {
			Fsprite:    SPR_PUNG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_WeaponReady),
			Fnextstate: S_PUNCH,
		},
		3: {
			Fsprite:    SPR_PUNG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_Lower),
			Fnextstate: S_PUNCHDOWN,
		},
		4: {
			Fsprite:    SPR_PUNG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_Raise),
			Fnextstate: S_PUNCHUP,
		},
		5: {
			Fsprite:    SPR_PUNG,
			Fframe:     1,
			Ftics:      4,
			Fnextstate: S_PUNCH2,
		},
		6: {
			Fsprite:    SPR_PUNG,
			Fframe:     2,
			Ftics:      4,
			Faction:    playerFuncToAction(A_Punch),
			Fnextstate: S_PUNCH3,
		},
		7: {
			Fsprite:    SPR_PUNG,
			Fframe:     3,
			Ftics:      5,
			Fnextstate: S_PUNCH4,
		},
		8: {
			Fsprite:    SPR_PUNG,
			Fframe:     2,
			Ftics:      4,
			Fnextstate: S_PUNCH5,
		},
		9: {
			Fsprite:    SPR_PUNG,
			Fframe:     1,
			Ftics:      5,
			Faction:    playerFuncToAction(A_ReFire),
			Fnextstate: S_PUNCH,
		},
		10: {
			Fsprite:    SPR_PISG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_WeaponReady),
			Fnextstate: S_PISTOL,
		},
		11: {
			Fsprite:    SPR_PISG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_Lower),
			Fnextstate: S_PISTOLDOWN,
		},
		12: {
			Fsprite:    SPR_PISG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_Raise),
			Fnextstate: S_PISTOLUP,
		},
		13: {
			Fsprite:    SPR_PISG,
			Ftics:      4,
			Fnextstate: S_PISTOL2,
		},
		14: {
			Fsprite:    SPR_PISG,
			Fframe:     1,
			Ftics:      6,
			Faction:    playerFuncToAction(A_FirePistol),
			Fnextstate: S_PISTOL3,
		},
		15: {
			Fsprite:    SPR_PISG,
			Fframe:     2,
			Ftics:      4,
			Fnextstate: S_PISTOL4,
		},
		16: {
			Fsprite:    SPR_PISG,
			Fframe:     1,
			Ftics:      5,
			Faction:    playerFuncToAction(A_ReFire),
			Fnextstate: S_PISTOL,
		},
		17: {
			Fsprite:    SPR_PISF,
			Fframe:     32768,
			Ftics:      7,
			Faction:    playerFuncToAction(A_Light1),
			Fnextstate: S_LIGHTDONE,
		},
		18: {
			Fsprite:    SPR_SHTG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_WeaponReady),
			Fnextstate: S_SGUN,
		},
		19: {
			Fsprite:    SPR_SHTG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_Lower),
			Fnextstate: S_SGUNDOWN,
		},
		20: {
			Fsprite:    SPR_SHTG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_Raise),
			Fnextstate: S_SGUNUP,
		},
		21: {
			Fsprite:    SPR_SHTG,
			Ftics:      3,
			Fnextstate: S_SGUN2,
		},
		22: {
			Fsprite:    SPR_SHTG,
			Ftics:      7,
			Faction:    playerFuncToAction(A_FireShotgun),
			Fnextstate: S_SGUN3,
		},
		23: {
			Fsprite:    SPR_SHTG,
			Fframe:     1,
			Ftics:      5,
			Fnextstate: S_SGUN4,
		},
		24: {
			Fsprite:    SPR_SHTG,
			Fframe:     2,
			Ftics:      5,
			Fnextstate: S_SGUN5,
		},
		25: {
			Fsprite:    SPR_SHTG,
			Fframe:     3,
			Ftics:      4,
			Fnextstate: S_SGUN6,
		},
		26: {
			Fsprite:    SPR_SHTG,
			Fframe:     2,
			Ftics:      5,
			Fnextstate: S_SGUN7,
		},
		27: {
			Fsprite:    SPR_SHTG,
			Fframe:     1,
			Ftics:      5,
			Fnextstate: S_SGUN8,
		},
		28: {
			Fsprite:    SPR_SHTG,
			Ftics:      3,
			Fnextstate: S_SGUN9,
		},
		29: {
			Fsprite:    SPR_SHTG,
			Ftics:      7,
			Faction:    playerFuncToAction(A_ReFire),
			Fnextstate: S_SGUN,
		},
		30: {
			Fsprite:    SPR_SHTF,
			Fframe:     32768,
			Ftics:      4,
			Faction:    playerFuncToAction(A_Light1),
			Fnextstate: S_SGUNFLASH2,
		},
		31: {
			Fsprite:    SPR_SHTF,
			Fframe:     32769,
			Ftics:      3,
			Faction:    playerFuncToAction(A_Light2),
			Fnextstate: S_LIGHTDONE,
		},
		32: {
			Fsprite:    SPR_SHT2,
			Ftics:      1,
			Faction:    playerFuncToAction(A_WeaponReady),
			Fnextstate: S_DSGUN,
		},
		33: {
			Fsprite:    SPR_SHT2,
			Ftics:      1,
			Faction:    playerFuncToAction(A_Lower),
			Fnextstate: S_DSGUNDOWN,
		},
		34: {
			Fsprite:    SPR_SHT2,
			Ftics:      1,
			Faction:    playerFuncToAction(A_Raise),
			Fnextstate: S_DSGUNUP,
		},
		35: {
			Fsprite:    SPR_SHT2,
			Ftics:      3,
			Fnextstate: S_DSGUN2,
		},
		36: {
			Fsprite:    SPR_SHT2,
			Ftics:      7,
			Faction:    playerFuncToAction(A_FireShotgun2),
			Fnextstate: S_DSGUN3,
		},
		37: {
			Fsprite:    SPR_SHT2,
			Fframe:     1,
			Ftics:      7,
			Fnextstate: S_DSGUN4,
		},
		38: {
			Fsprite:    SPR_SHT2,
			Fframe:     2,
			Ftics:      7,
			Faction:    playerFuncToAction(A_CheckReload),
			Fnextstate: S_DSGUN5,
		},
		39: {
			Fsprite:    SPR_SHT2,
			Fframe:     3,
			Ftics:      7,
			Faction:    playerFuncToAction(A_OpenShotgun2),
			Fnextstate: S_DSGUN6,
		},
		40: {
			Fsprite:    SPR_SHT2,
			Fframe:     4,
			Ftics:      7,
			Fnextstate: S_DSGUN7,
		},
		41: {
			Fsprite:    SPR_SHT2,
			Fframe:     5,
			Ftics:      7,
			Faction:    playerFuncToAction(A_LoadShotgun2),
			Fnextstate: S_DSGUN8,
		},
		42: {
			Fsprite:    SPR_SHT2,
			Fframe:     6,
			Ftics:      6,
			Fnextstate: S_DSGUN9,
		},
		43: {
			Fsprite:    SPR_SHT2,
			Fframe:     7,
			Ftics:      6,
			Faction:    playerFuncToAction(A_CloseShotgun2),
			Fnextstate: S_DSGUN10,
		},
		44: {
			Fsprite:    SPR_SHT2,
			Ftics:      5,
			Faction:    playerFuncToAction(A_ReFire),
			Fnextstate: S_DSGUN,
		},
		45: {
			Fsprite:    SPR_SHT2,
			Fframe:     1,
			Ftics:      7,
			Fnextstate: S_DSNR2,
		},
		46: {
			Fsprite:    SPR_SHT2,
			Ftics:      3,
			Fnextstate: S_DSGUNDOWN,
		},
		47: {
			Fsprite:    SPR_SHT2,
			Fframe:     32776,
			Ftics:      5,
			Faction:    playerFuncToAction(A_Light1),
			Fnextstate: S_DSGUNFLASH2,
		},
		48: {
			Fsprite:    SPR_SHT2,
			Fframe:     32777,
			Ftics:      4,
			Faction:    playerFuncToAction(A_Light2),
			Fnextstate: S_LIGHTDONE,
		},
		49: {
			Fsprite:    SPR_CHGG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_WeaponReady),
			Fnextstate: S_CHAIN,
		},
		50: {
			Fsprite:    SPR_CHGG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_Lower),
			Fnextstate: S_CHAINDOWN,
		},
		51: {
			Fsprite:    SPR_CHGG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_Raise),
			Fnextstate: S_CHAINUP,
		},
		52: {
			Fsprite:    SPR_CHGG,
			Ftics:      4,
			Faction:    playerFuncToAction(A_FireCGun),
			Fnextstate: S_CHAIN2,
		},
		53: {
			Fsprite:    SPR_CHGG,
			Fframe:     1,
			Ftics:      4,
			Faction:    playerFuncToAction(A_FireCGun),
			Fnextstate: S_CHAIN3,
		},
		54: {
			Fsprite:    SPR_CHGG,
			Fframe:     1,
			Faction:    playerFuncToAction(A_ReFire),
			Fnextstate: S_CHAIN,
		},
		55: {
			Fsprite:    SPR_CHGF,
			Fframe:     32768,
			Ftics:      5,
			Faction:    playerFuncToAction(A_Light1),
			Fnextstate: S_LIGHTDONE,
		},
		56: {
			Fsprite:    SPR_CHGF,
			Fframe:     32769,
			Ftics:      5,
			Faction:    playerFuncToAction(A_Light2),
			Fnextstate: S_LIGHTDONE,
		},
		57: {
			Fsprite:    SPR_MISG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_WeaponReady),
			Fnextstate: S_MISSILE,
		},
		58: {
			Fsprite:    SPR_MISG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_Lower),
			Fnextstate: S_MISSILEDOWN,
		},
		59: {
			Fsprite:    SPR_MISG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_Raise),
			Fnextstate: S_MISSILEUP,
		},
		60: {
			Fsprite:    SPR_MISG,
			Fframe:     1,
			Ftics:      8,
			Faction:    playerFuncToAction(A_GunFlash),
			Fnextstate: S_MISSILE2,
		},
		61: {
			Fsprite:    SPR_MISG,
			Fframe:     1,
			Ftics:      12,
			Faction:    playerFuncToAction(A_FireMissile),
			Fnextstate: S_MISSILE3,
		},
		62: {
			Fsprite:    SPR_MISG,
			Fframe:     1,
			Faction:    playerFuncToAction(A_ReFire),
			Fnextstate: S_MISSILE,
		},
		63: {
			Fsprite:    SPR_MISF,
			Fframe:     32768,
			Ftics:      3,
			Faction:    playerFuncToAction(A_Light1),
			Fnextstate: S_MISSILEFLASH2,
		},
		64: {
			Fsprite:    SPR_MISF,
			Fframe:     32769,
			Ftics:      4,
			Fnextstate: S_MISSILEFLASH3,
		},
		65: {
			Fsprite:    SPR_MISF,
			Fframe:     32770,
			Ftics:      4,
			Faction:    playerFuncToAction(A_Light2),
			Fnextstate: S_MISSILEFLASH4,
		},
		66: {
			Fsprite:    SPR_MISF,
			Fframe:     32771,
			Ftics:      4,
			Faction:    playerFuncToAction(A_Light2),
			Fnextstate: S_LIGHTDONE,
		},
		67: {
			Fsprite:    SPR_SAWG,
			Fframe:     2,
			Ftics:      4,
			Faction:    playerFuncToAction(A_WeaponReady),
			Fnextstate: S_SAWB,
		},
		68: {
			Fsprite:    SPR_SAWG,
			Fframe:     3,
			Ftics:      4,
			Faction:    playerFuncToAction(A_WeaponReady),
			Fnextstate: S_SAW,
		},
		69: {
			Fsprite:    SPR_SAWG,
			Fframe:     2,
			Ftics:      1,
			Faction:    playerFuncToAction(A_Lower),
			Fnextstate: S_SAWDOWN,
		},
		70: {
			Fsprite:    SPR_SAWG,
			Fframe:     2,
			Ftics:      1,
			Faction:    playerFuncToAction(A_Raise),
			Fnextstate: S_SAWUP,
		},
		71: {
			Fsprite:    SPR_SAWG,
			Ftics:      4,
			Faction:    playerFuncToAction(A_Saw),
			Fnextstate: S_SAW2,
		},
		72: {
			Fsprite:    SPR_SAWG,
			Fframe:     1,
			Ftics:      4,
			Faction:    playerFuncToAction(A_Saw),
			Fnextstate: S_SAW3,
		},
		73: {
			Fsprite:    SPR_SAWG,
			Fframe:     1,
			Faction:    playerFuncToAction(A_ReFire),
			Fnextstate: S_SAW,
		},
		74: {
			Fsprite:    SPR_PLSG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_WeaponReady),
			Fnextstate: S_PLASMA,
		},
		75: {
			Fsprite:    SPR_PLSG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_Lower),
			Fnextstate: S_PLASMADOWN,
		},
		76: {
			Fsprite:    SPR_PLSG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_Raise),
			Fnextstate: S_PLASMAUP,
		},
		77: {
			Fsprite:    SPR_PLSG,
			Ftics:      3,
			Faction:    playerFuncToAction(A_FirePlasma),
			Fnextstate: S_PLASMA2,
		},
		78: {
			Fsprite:    SPR_PLSG,
			Fframe:     1,
			Ftics:      20,
			Faction:    playerFuncToAction(A_ReFire),
			Fnextstate: S_PLASMA,
		},
		79: {
			Fsprite:    SPR_PLSF,
			Fframe:     32768,
			Ftics:      4,
			Faction:    playerFuncToAction(A_Light1),
			Fnextstate: S_LIGHTDONE,
		},
		80: {
			Fsprite:    SPR_PLSF,
			Fframe:     32769,
			Ftics:      4,
			Faction:    playerFuncToAction(A_Light1),
			Fnextstate: S_LIGHTDONE,
		},
		81: {
			Fsprite:    SPR_BFGG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_WeaponReady),
			Fnextstate: S_BFG,
		},
		82: {
			Fsprite:    SPR_BFGG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_Lower),
			Fnextstate: S_BFGDOWN,
		},
		83: {
			Fsprite:    SPR_BFGG,
			Ftics:      1,
			Faction:    playerFuncToAction(A_Raise),
			Fnextstate: S_BFGUP,
		},
		84: {
			Fsprite:    SPR_BFGG,
			Ftics:      20,
			Faction:    playerFuncToAction(A_BFGsound),
			Fnextstate: S_BFG2,
		},
		85: {
			Fsprite:    SPR_BFGG,
			Fframe:     1,
			Ftics:      10,
			Faction:    playerFuncToAction(A_GunFlash),
			Fnextstate: S_BFG3,
		},
		86: {
			Fsprite:    SPR_BFGG,
			Fframe:     1,
			Ftics:      10,
			Faction:    playerFuncToAction(A_FireBFG),
			Fnextstate: S_BFG4,
		},
		87: {
			Fsprite:    SPR_BFGG,
			Fframe:     1,
			Ftics:      20,
			Faction:    playerFuncToAction(A_ReFire),
			Fnextstate: S_BFG,
		},
		88: {
			Fsprite:    SPR_BFGF,
			Fframe:     32768,
			Ftics:      11,
			Faction:    playerFuncToAction(A_Light1),
			Fnextstate: S_BFGFLASH2,
		},
		89: {
			Fsprite:    SPR_BFGF,
			Fframe:     32769,
			Ftics:      6,
			Faction:    playerFuncToAction(A_Light2),
			Fnextstate: S_LIGHTDONE,
		},
		90: {
			Fsprite:    SPR_BLUD,
			Fframe:     2,
			Ftics:      8,
			Fnextstate: S_BLOOD2,
		},
		91: {
			Fsprite:    SPR_BLUD,
			Fframe:     1,
			Ftics:      8,
			Fnextstate: S_BLOOD3,
		},
		92: {
			Fsprite: SPR_BLUD,
			Ftics:   8,
		},
		93: {
			Fsprite:    SPR_PUFF,
			Fframe:     32768,
			Ftics:      4,
			Fnextstate: S_PUFF2,
		},
		94: {
			Fsprite:    SPR_PUFF,
			Fframe:     1,
			Ftics:      4,
			Fnextstate: S_PUFF3,
		},
		95: {
			Fsprite:    SPR_PUFF,
			Fframe:     2,
			Ftics:      4,
			Fnextstate: S_PUFF4,
		},
		96: {
			Fsprite: SPR_PUFF,
			Fframe:  3,
			Ftics:   4,
		},
		97: {
			Fsprite:    SPR_BAL1,
			Fframe:     32768,
			Ftics:      4,
			Fnextstate: S_TBALL2,
		},
		98: {
			Fsprite:    SPR_BAL1,
			Fframe:     32769,
			Ftics:      4,
			Fnextstate: S_TBALL1,
		},
		99: {
			Fsprite:    SPR_BAL1,
			Fframe:     32770,
			Ftics:      6,
			Fnextstate: S_TBALLX2,
		},
		100: {
			Fsprite:    SPR_BAL1,
			Fframe:     32771,
			Ftics:      6,
			Fnextstate: S_TBALLX3,
		},
		101: {
			Fsprite: SPR_BAL1,
			Fframe:  32772,
			Ftics:   6,
		},
		102: {
			Fsprite:    SPR_BAL2,
			Fframe:     32768,
			Ftics:      4,
			Fnextstate: S_RBALL2,
		},
		103: {
			Fsprite:    SPR_BAL2,
			Fframe:     32769,
			Ftics:      4,
			Fnextstate: S_RBALL1,
		},
		104: {
			Fsprite:    SPR_BAL2,
			Fframe:     32770,
			Ftics:      6,
			Fnextstate: S_RBALLX2,
		},
		105: {
			Fsprite:    SPR_BAL2,
			Fframe:     32771,
			Ftics:      6,
			Fnextstate: S_RBALLX3,
		},
		106: {
			Fsprite: SPR_BAL2,
			Fframe:  32772,
			Ftics:   6,
		},
		107: {
			Fsprite:    SPR_PLSS,
			Fframe:     32768,
			Ftics:      6,
			Fnextstate: S_PLASBALL2,
		},
		108: {
			Fsprite:    SPR_PLSS,
			Fframe:     32769,
			Ftics:      6,
			Fnextstate: S_PLASBALL,
		},
		109: {
			Fsprite:    SPR_PLSE,
			Fframe:     32768,
			Ftics:      4,
			Fnextstate: S_PLASEXP2,
		},
		110: {
			Fsprite:    SPR_PLSE,
			Fframe:     32769,
			Ftics:      4,
			Fnextstate: S_PLASEXP3,
		},
		111: {
			Fsprite:    SPR_PLSE,
			Fframe:     32770,
			Ftics:      4,
			Fnextstate: S_PLASEXP4,
		},
		112: {
			Fsprite:    SPR_PLSE,
			Fframe:     32771,
			Ftics:      4,
			Fnextstate: S_PLASEXP5,
		},
		113: {
			Fsprite: SPR_PLSE,
			Fframe:  32772,
			Ftics:   4,
		},
		114: {
			Fsprite:    SPR_MISL,
			Fframe:     32768,
			Ftics:      1,
			Fnextstate: S_ROCKET,
		},
		115: {
			Fsprite:    SPR_BFS1,
			Fframe:     32768,
			Ftics:      4,
			Fnextstate: S_BFGSHOT2,
		},
		116: {
			Fsprite:    SPR_BFS1,
			Fframe:     32769,
			Ftics:      4,
			Fnextstate: S_BFGSHOT,
		},
		117: {
			Fsprite:    SPR_BFE1,
			Fframe:     32768,
			Ftics:      8,
			Fnextstate: S_BFGLAND2,
		},
		118: {
			Fsprite:    SPR_BFE1,
			Fframe:     32769,
			Ftics:      8,
			Fnextstate: S_BFGLAND3,
		},
		119: {
			Fsprite:    SPR_BFE1,
			Fframe:     32770,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_BFGSpray),
			Fnextstate: S_BFGLAND4,
		},
		120: {
			Fsprite:    SPR_BFE1,
			Fframe:     32771,
			Ftics:      8,
			Fnextstate: S_BFGLAND5,
		},
		121: {
			Fsprite:    SPR_BFE1,
			Fframe:     32772,
			Ftics:      8,
			Fnextstate: S_BFGLAND6,
		},
		122: {
			Fsprite: SPR_BFE1,
			Fframe:  32773,
			Ftics:   8,
		},
		123: {
			Fsprite:    SPR_BFE2,
			Fframe:     32768,
			Ftics:      8,
			Fnextstate: S_BFGEXP2,
		},
		124: {
			Fsprite:    SPR_BFE2,
			Fframe:     32769,
			Ftics:      8,
			Fnextstate: S_BFGEXP3,
		},
		125: {
			Fsprite:    SPR_BFE2,
			Fframe:     32770,
			Ftics:      8,
			Fnextstate: S_BFGEXP4,
		},
		126: {
			Fsprite: SPR_BFE2,
			Fframe:  32771,
			Ftics:   8,
		},
		127: {
			Fsprite:    SPR_MISL,
			Fframe:     32769,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_Explode),
			Fnextstate: S_EXPLODE2,
		},
		128: {
			Fsprite:    SPR_MISL,
			Fframe:     32770,
			Ftics:      6,
			Fnextstate: S_EXPLODE3,
		},
		129: {
			Fsprite: SPR_MISL,
			Fframe:  32771,
			Ftics:   4,
		},
		130: {
			Fsprite:    SPR_TFOG,
			Fframe:     32768,
			Ftics:      6,
			Fnextstate: S_TFOG01,
		},
		131: {
			Fsprite:    SPR_TFOG,
			Fframe:     32769,
			Ftics:      6,
			Fnextstate: S_TFOG02,
		},
		132: {
			Fsprite:    SPR_TFOG,
			Fframe:     32768,
			Ftics:      6,
			Fnextstate: S_TFOG2,
		},
		133: {
			Fsprite:    SPR_TFOG,
			Fframe:     32769,
			Ftics:      6,
			Fnextstate: S_TFOG3,
		},
		134: {
			Fsprite:    SPR_TFOG,
			Fframe:     32770,
			Ftics:      6,
			Fnextstate: S_TFOG4,
		},
		135: {
			Fsprite:    SPR_TFOG,
			Fframe:     32771,
			Ftics:      6,
			Fnextstate: S_TFOG5,
		},
		136: {
			Fsprite:    SPR_TFOG,
			Fframe:     32772,
			Ftics:      6,
			Fnextstate: S_TFOG6,
		},
		137: {
			Fsprite:    SPR_TFOG,
			Fframe:     32773,
			Ftics:      6,
			Fnextstate: S_TFOG7,
		},
		138: {
			Fsprite:    SPR_TFOG,
			Fframe:     32774,
			Ftics:      6,
			Fnextstate: S_TFOG8,
		},
		139: {
			Fsprite:    SPR_TFOG,
			Fframe:     32775,
			Ftics:      6,
			Fnextstate: S_TFOG9,
		},
		140: {
			Fsprite:    SPR_TFOG,
			Fframe:     32776,
			Ftics:      6,
			Fnextstate: S_TFOG10,
		},
		141: {
			Fsprite: SPR_TFOG,
			Fframe:  32777,
			Ftics:   6,
		},
		142: {
			Fsprite:    SPR_IFOG,
			Fframe:     32768,
			Ftics:      6,
			Fnextstate: S_IFOG01,
		},
		143: {
			Fsprite:    SPR_IFOG,
			Fframe:     32769,
			Ftics:      6,
			Fnextstate: S_IFOG02,
		},
		144: {
			Fsprite:    SPR_IFOG,
			Fframe:     32768,
			Ftics:      6,
			Fnextstate: S_IFOG2,
		},
		145: {
			Fsprite:    SPR_IFOG,
			Fframe:     32769,
			Ftics:      6,
			Fnextstate: S_IFOG3,
		},
		146: {
			Fsprite:    SPR_IFOG,
			Fframe:     32770,
			Ftics:      6,
			Fnextstate: S_IFOG4,
		},
		147: {
			Fsprite:    SPR_IFOG,
			Fframe:     32771,
			Ftics:      6,
			Fnextstate: S_IFOG5,
		},
		148: {
			Fsprite: SPR_IFOG,
			Fframe:  32772,
			Ftics:   6,
		},
		149: {
			Fsprite: SPR_PLAY,
			Ftics:   -1,
		},
		150: {
			Fsprite:    SPR_PLAY,
			Ftics:      4,
			Fnextstate: S_PLAY_RUN2,
		},
		151: {
			Fsprite:    SPR_PLAY,
			Fframe:     1,
			Ftics:      4,
			Fnextstate: S_PLAY_RUN3,
		},
		152: {
			Fsprite:    SPR_PLAY,
			Fframe:     2,
			Ftics:      4,
			Fnextstate: S_PLAY_RUN4,
		},
		153: {
			Fsprite:    SPR_PLAY,
			Fframe:     3,
			Ftics:      4,
			Fnextstate: S_PLAY_RUN1,
		},
		154: {
			Fsprite:    SPR_PLAY,
			Fframe:     4,
			Ftics:      12,
			Fnextstate: S_PLAY,
		},
		155: {
			Fsprite:    SPR_PLAY,
			Fframe:     32773,
			Ftics:      6,
			Fnextstate: S_PLAY_ATK1,
		},
		156: {
			Fsprite:    SPR_PLAY,
			Fframe:     6,
			Ftics:      4,
			Fnextstate: S_PLAY_PAIN2,
		},
		157: {
			Fsprite:    SPR_PLAY,
			Fframe:     6,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_PLAY,
		},
		158: {
			Fsprite:    SPR_PLAY,
			Fframe:     7,
			Ftics:      10,
			Fnextstate: S_PLAY_DIE2,
		},
		159: {
			Fsprite:    SPR_PLAY,
			Fframe:     8,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_PlayerScream),
			Fnextstate: S_PLAY_DIE3,
		},
		160: {
			Fsprite:    SPR_PLAY,
			Fframe:     9,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_PLAY_DIE4,
		},
		161: {
			Fsprite:    SPR_PLAY,
			Fframe:     10,
			Ftics:      10,
			Fnextstate: S_PLAY_DIE5,
		},
		162: {
			Fsprite:    SPR_PLAY,
			Fframe:     11,
			Ftics:      10,
			Fnextstate: S_PLAY_DIE6,
		},
		163: {
			Fsprite:    SPR_PLAY,
			Fframe:     12,
			Ftics:      10,
			Fnextstate: S_PLAY_DIE7,
		},
		164: {
			Fsprite: SPR_PLAY,
			Fframe:  13,
			Ftics:   -1,
		},
		165: {
			Fsprite:    SPR_PLAY,
			Fframe:     14,
			Ftics:      5,
			Fnextstate: S_PLAY_XDIE2,
		},
		166: {
			Fsprite:    SPR_PLAY,
			Fframe:     15,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_XScream),
			Fnextstate: S_PLAY_XDIE3,
		},
		167: {
			Fsprite:    SPR_PLAY,
			Fframe:     16,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_PLAY_XDIE4,
		},
		168: {
			Fsprite:    SPR_PLAY,
			Fframe:     17,
			Ftics:      5,
			Fnextstate: S_PLAY_XDIE5,
		},
		169: {
			Fsprite:    SPR_PLAY,
			Fframe:     18,
			Ftics:      5,
			Fnextstate: S_PLAY_XDIE6,
		},
		170: {
			Fsprite:    SPR_PLAY,
			Fframe:     19,
			Ftics:      5,
			Fnextstate: S_PLAY_XDIE7,
		},
		171: {
			Fsprite:    SPR_PLAY,
			Fframe:     20,
			Ftics:      5,
			Fnextstate: S_PLAY_XDIE8,
		},
		172: {
			Fsprite:    SPR_PLAY,
			Fframe:     21,
			Ftics:      5,
			Fnextstate: S_PLAY_XDIE9,
		},
		173: {
			Fsprite: SPR_PLAY,
			Fframe:  22,
			Ftics:   -1,
		},
		174: {
			Fsprite:    SPR_POSS,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_POSS_STND2,
		},
		175: {
			Fsprite:    SPR_POSS,
			Fframe:     1,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_POSS_STND,
		},
		176: {
			Fsprite:    SPR_POSS,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_POSS_RUN2,
		},
		177: {
			Fsprite:    SPR_POSS,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_POSS_RUN3,
		},
		178: {
			Fsprite:    SPR_POSS,
			Fframe:     1,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_POSS_RUN4,
		},
		179: {
			Fsprite:    SPR_POSS,
			Fframe:     1,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_POSS_RUN5,
		},
		180: {
			Fsprite:    SPR_POSS,
			Fframe:     2,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_POSS_RUN6,
		},
		181: {
			Fsprite:    SPR_POSS,
			Fframe:     2,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_POSS_RUN7,
		},
		182: {
			Fsprite:    SPR_POSS,
			Fframe:     3,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_POSS_RUN8,
		},
		183: {
			Fsprite:    SPR_POSS,
			Fframe:     3,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_POSS_RUN1,
		},
		184: {
			Fsprite:    SPR_POSS,
			Fframe:     4,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_POSS_ATK2,
		},
		185: {
			Fsprite:    SPR_POSS,
			Fframe:     5,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_PosAttack),
			Fnextstate: S_POSS_ATK3,
		},
		186: {
			Fsprite:    SPR_POSS,
			Fframe:     4,
			Ftics:      8,
			Fnextstate: S_POSS_RUN1,
		},
		187: {
			Fsprite:    SPR_POSS,
			Fframe:     6,
			Ftics:      3,
			Fnextstate: S_POSS_PAIN2,
		},
		188: {
			Fsprite:    SPR_POSS,
			Fframe:     6,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_POSS_RUN1,
		},
		189: {
			Fsprite:    SPR_POSS,
			Fframe:     7,
			Ftics:      5,
			Fnextstate: S_POSS_DIE2,
		},
		190: {
			Fsprite:    SPR_POSS,
			Fframe:     8,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_POSS_DIE3,
		},
		191: {
			Fsprite:    SPR_POSS,
			Fframe:     9,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_POSS_DIE4,
		},
		192: {
			Fsprite:    SPR_POSS,
			Fframe:     10,
			Ftics:      5,
			Fnextstate: S_POSS_DIE5,
		},
		193: {
			Fsprite: SPR_POSS,
			Fframe:  11,
			Ftics:   -1,
		},
		194: {
			Fsprite:    SPR_POSS,
			Fframe:     12,
			Ftics:      5,
			Fnextstate: S_POSS_XDIE2,
		},
		195: {
			Fsprite:    SPR_POSS,
			Fframe:     13,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_XScream),
			Fnextstate: S_POSS_XDIE3,
		},
		196: {
			Fsprite:    SPR_POSS,
			Fframe:     14,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_POSS_XDIE4,
		},
		197: {
			Fsprite:    SPR_POSS,
			Fframe:     15,
			Ftics:      5,
			Fnextstate: S_POSS_XDIE5,
		},
		198: {
			Fsprite:    SPR_POSS,
			Fframe:     16,
			Ftics:      5,
			Fnextstate: S_POSS_XDIE6,
		},
		199: {
			Fsprite:    SPR_POSS,
			Fframe:     17,
			Ftics:      5,
			Fnextstate: S_POSS_XDIE7,
		},
		200: {
			Fsprite:    SPR_POSS,
			Fframe:     18,
			Ftics:      5,
			Fnextstate: S_POSS_XDIE8,
		},
		201: {
			Fsprite:    SPR_POSS,
			Fframe:     19,
			Ftics:      5,
			Fnextstate: S_POSS_XDIE9,
		},
		202: {
			Fsprite: SPR_POSS,
			Fframe:  20,
			Ftics:   -1,
		},
		203: {
			Fsprite:    SPR_POSS,
			Fframe:     10,
			Ftics:      5,
			Fnextstate: S_POSS_RAISE2,
		},
		204: {
			Fsprite:    SPR_POSS,
			Fframe:     9,
			Ftics:      5,
			Fnextstate: S_POSS_RAISE3,
		},
		205: {
			Fsprite:    SPR_POSS,
			Fframe:     8,
			Ftics:      5,
			Fnextstate: S_POSS_RAISE4,
		},
		206: {
			Fsprite:    SPR_POSS,
			Fframe:     7,
			Ftics:      5,
			Fnextstate: S_POSS_RUN1,
		},
		207: {
			Fsprite:    SPR_SPOS,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_SPOS_STND2,
		},
		208: {
			Fsprite:    SPR_SPOS,
			Fframe:     1,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_SPOS_STND,
		},
		209: {
			Fsprite:    SPR_SPOS,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SPOS_RUN2,
		},
		210: {
			Fsprite:    SPR_SPOS,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SPOS_RUN3,
		},
		211: {
			Fsprite:    SPR_SPOS,
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SPOS_RUN4,
		},
		212: {
			Fsprite:    SPR_SPOS,
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SPOS_RUN5,
		},
		213: {
			Fsprite:    SPR_SPOS,
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SPOS_RUN6,
		},
		214: {
			Fsprite:    SPR_SPOS,
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SPOS_RUN7,
		},
		215: {
			Fsprite:    SPR_SPOS,
			Fframe:     3,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SPOS_RUN8,
		},
		216: {
			Fsprite:    SPR_SPOS,
			Fframe:     3,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SPOS_RUN1,
		},
		217: {
			Fsprite:    SPR_SPOS,
			Fframe:     4,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_SPOS_ATK2,
		},
		218: {
			Fsprite:    SPR_SPOS,
			Fframe:     32773,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_SPosAttack),
			Fnextstate: S_SPOS_ATK3,
		},
		219: {
			Fsprite:    SPR_SPOS,
			Fframe:     4,
			Ftics:      10,
			Fnextstate: S_SPOS_RUN1,
		},
		220: {
			Fsprite:    SPR_SPOS,
			Fframe:     6,
			Ftics:      3,
			Fnextstate: S_SPOS_PAIN2,
		},
		221: {
			Fsprite:    SPR_SPOS,
			Fframe:     6,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_SPOS_RUN1,
		},
		222: {
			Fsprite:    SPR_SPOS,
			Fframe:     7,
			Ftics:      5,
			Fnextstate: S_SPOS_DIE2,
		},
		223: {
			Fsprite:    SPR_SPOS,
			Fframe:     8,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_SPOS_DIE3,
		},
		224: {
			Fsprite:    SPR_SPOS,
			Fframe:     9,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_SPOS_DIE4,
		},
		225: {
			Fsprite:    SPR_SPOS,
			Fframe:     10,
			Ftics:      5,
			Fnextstate: S_SPOS_DIE5,
		},
		226: {
			Fsprite: SPR_SPOS,
			Fframe:  11,
			Ftics:   -1,
		},
		227: {
			Fsprite:    SPR_SPOS,
			Fframe:     12,
			Ftics:      5,
			Fnextstate: S_SPOS_XDIE2,
		},
		228: {
			Fsprite:    SPR_SPOS,
			Fframe:     13,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_XScream),
			Fnextstate: S_SPOS_XDIE3,
		},
		229: {
			Fsprite:    SPR_SPOS,
			Fframe:     14,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_SPOS_XDIE4,
		},
		230: {
			Fsprite:    SPR_SPOS,
			Fframe:     15,
			Ftics:      5,
			Fnextstate: S_SPOS_XDIE5,
		},
		231: {
			Fsprite:    SPR_SPOS,
			Fframe:     16,
			Ftics:      5,
			Fnextstate: S_SPOS_XDIE6,
		},
		232: {
			Fsprite:    SPR_SPOS,
			Fframe:     17,
			Ftics:      5,
			Fnextstate: S_SPOS_XDIE7,
		},
		233: {
			Fsprite:    SPR_SPOS,
			Fframe:     18,
			Ftics:      5,
			Fnextstate: S_SPOS_XDIE8,
		},
		234: {
			Fsprite:    SPR_SPOS,
			Fframe:     19,
			Ftics:      5,
			Fnextstate: S_SPOS_XDIE9,
		},
		235: {
			Fsprite: SPR_SPOS,
			Fframe:  20,
			Ftics:   -1,
		},
		236: {
			Fsprite:    SPR_SPOS,
			Fframe:     11,
			Ftics:      5,
			Fnextstate: S_SPOS_RAISE2,
		},
		237: {
			Fsprite:    SPR_SPOS,
			Fframe:     10,
			Ftics:      5,
			Fnextstate: S_SPOS_RAISE3,
		},
		238: {
			Fsprite:    SPR_SPOS,
			Fframe:     9,
			Ftics:      5,
			Fnextstate: S_SPOS_RAISE4,
		},
		239: {
			Fsprite:    SPR_SPOS,
			Fframe:     8,
			Ftics:      5,
			Fnextstate: S_SPOS_RAISE5,
		},
		240: {
			Fsprite:    SPR_SPOS,
			Fframe:     7,
			Ftics:      5,
			Fnextstate: S_SPOS_RUN1,
		},
		241: {
			Fsprite:    SPR_VILE,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_VILE_STND2,
		},
		242: {
			Fsprite:    SPR_VILE,
			Fframe:     1,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_VILE_STND,
		},
		243: {
			Fsprite:    SPR_VILE,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_VileChase),
			Fnextstate: S_VILE_RUN2,
		},
		244: {
			Fsprite:    SPR_VILE,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_VileChase),
			Fnextstate: S_VILE_RUN3,
		},
		245: {
			Fsprite:    SPR_VILE,
			Fframe:     1,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_VileChase),
			Fnextstate: S_VILE_RUN4,
		},
		246: {
			Fsprite:    SPR_VILE,
			Fframe:     1,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_VileChase),
			Fnextstate: S_VILE_RUN5,
		},
		247: {
			Fsprite:    SPR_VILE,
			Fframe:     2,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_VileChase),
			Fnextstate: S_VILE_RUN6,
		},
		248: {
			Fsprite:    SPR_VILE,
			Fframe:     2,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_VileChase),
			Fnextstate: S_VILE_RUN7,
		},
		249: {
			Fsprite:    SPR_VILE,
			Fframe:     3,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_VileChase),
			Fnextstate: S_VILE_RUN8,
		},
		250: {
			Fsprite:    SPR_VILE,
			Fframe:     3,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_VileChase),
			Fnextstate: S_VILE_RUN9,
		},
		251: {
			Fsprite:    SPR_VILE,
			Fframe:     4,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_VileChase),
			Fnextstate: S_VILE_RUN10,
		},
		252: {
			Fsprite:    SPR_VILE,
			Fframe:     4,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_VileChase),
			Fnextstate: S_VILE_RUN11,
		},
		253: {
			Fsprite:    SPR_VILE,
			Fframe:     5,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_VileChase),
			Fnextstate: S_VILE_RUN12,
		},
		254: {
			Fsprite:    SPR_VILE,
			Fframe:     5,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_VileChase),
			Fnextstate: S_VILE_RUN1,
		},
		255: {
			Fsprite:    SPR_VILE,
			Fframe:     32774,
			Faction:    mobjFuncToAction(A_VileStart),
			Fnextstate: S_VILE_ATK2,
		},
		256: {
			Fsprite:    SPR_VILE,
			Fframe:     32774,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_VILE_ATK3,
		},
		257: {
			Fsprite:    SPR_VILE,
			Fframe:     32775,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_VileTarget),
			Fnextstate: S_VILE_ATK4,
		},
		258: {
			Fsprite:    SPR_VILE,
			Fframe:     32776,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_VILE_ATK5,
		},
		259: {
			Fsprite:    SPR_VILE,
			Fframe:     32777,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_VILE_ATK6,
		},
		260: {
			Fsprite:    SPR_VILE,
			Fframe:     32778,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_VILE_ATK7,
		},
		261: {
			Fsprite:    SPR_VILE,
			Fframe:     32779,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_VILE_ATK8,
		},
		262: {
			Fsprite:    SPR_VILE,
			Fframe:     32780,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_VILE_ATK9,
		},
		263: {
			Fsprite:    SPR_VILE,
			Fframe:     32781,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_VILE_ATK10,
		},
		264: {
			Fsprite:    SPR_VILE,
			Fframe:     32782,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_VileAttack),
			Fnextstate: S_VILE_ATK11,
		},
		265: {
			Fsprite:    SPR_VILE,
			Fframe:     32783,
			Ftics:      20,
			Fnextstate: S_VILE_RUN1,
		},
		266: {
			Fsprite:    SPR_VILE,
			Fframe:     32794,
			Ftics:      10,
			Fnextstate: S_VILE_HEAL2,
		},
		267: {
			Fsprite:    SPR_VILE,
			Fframe:     32795,
			Ftics:      10,
			Fnextstate: S_VILE_HEAL3,
		},
		268: {
			Fsprite:    SPR_VILE,
			Fframe:     32796,
			Ftics:      10,
			Fnextstate: S_VILE_RUN1,
		},
		269: {
			Fsprite:    SPR_VILE,
			Fframe:     16,
			Ftics:      5,
			Fnextstate: S_VILE_PAIN2,
		},
		270: {
			Fsprite:    SPR_VILE,
			Fframe:     16,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_VILE_RUN1,
		},
		271: {
			Fsprite:    SPR_VILE,
			Fframe:     16,
			Ftics:      7,
			Fnextstate: S_VILE_DIE2,
		},
		272: {
			Fsprite:    SPR_VILE,
			Fframe:     17,
			Ftics:      7,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_VILE_DIE3,
		},
		273: {
			Fsprite:    SPR_VILE,
			Fframe:     18,
			Ftics:      7,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_VILE_DIE4,
		},
		274: {
			Fsprite:    SPR_VILE,
			Fframe:     19,
			Ftics:      7,
			Fnextstate: S_VILE_DIE5,
		},
		275: {
			Fsprite:    SPR_VILE,
			Fframe:     20,
			Ftics:      7,
			Fnextstate: S_VILE_DIE6,
		},
		276: {
			Fsprite:    SPR_VILE,
			Fframe:     21,
			Ftics:      7,
			Fnextstate: S_VILE_DIE7,
		},
		277: {
			Fsprite:    SPR_VILE,
			Fframe:     22,
			Ftics:      7,
			Fnextstate: S_VILE_DIE8,
		},
		278: {
			Fsprite:    SPR_VILE,
			Fframe:     23,
			Ftics:      5,
			Fnextstate: S_VILE_DIE9,
		},
		279: {
			Fsprite:    SPR_VILE,
			Fframe:     24,
			Ftics:      5,
			Fnextstate: S_VILE_DIE10,
		},
		280: {
			Fsprite: SPR_VILE,
			Fframe:  25,
			Ftics:   -1,
		},
		281: {
			Fsprite:    SPR_FIRE,
			Fframe:     32768,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_StartFire),
			Fnextstate: S_FIRE2,
		},
		282: {
			Fsprite:    SPR_FIRE,
			Fframe:     32769,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE3,
		},
		283: {
			Fsprite:    SPR_FIRE,
			Fframe:     32768,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE4,
		},
		284: {
			Fsprite:    SPR_FIRE,
			Fframe:     32769,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE5,
		},
		285: {
			Fsprite:    SPR_FIRE,
			Fframe:     32770,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_FireCrackle),
			Fnextstate: S_FIRE6,
		},
		286: {
			Fsprite:    SPR_FIRE,
			Fframe:     32769,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE7,
		},
		287: {
			Fsprite:    SPR_FIRE,
			Fframe:     32770,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE8,
		},
		288: {
			Fsprite:    SPR_FIRE,
			Fframe:     32769,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE9,
		},
		289: {
			Fsprite:    SPR_FIRE,
			Fframe:     32770,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE10,
		},
		290: {
			Fsprite:    SPR_FIRE,
			Fframe:     32771,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE11,
		},
		291: {
			Fsprite:    SPR_FIRE,
			Fframe:     32770,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE12,
		},
		292: {
			Fsprite:    SPR_FIRE,
			Fframe:     32771,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE13,
		},
		293: {
			Fsprite:    SPR_FIRE,
			Fframe:     32770,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE14,
		},
		294: {
			Fsprite:    SPR_FIRE,
			Fframe:     32771,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE15,
		},
		295: {
			Fsprite:    SPR_FIRE,
			Fframe:     32772,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE16,
		},
		296: {
			Fsprite:    SPR_FIRE,
			Fframe:     32771,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE17,
		},
		297: {
			Fsprite:    SPR_FIRE,
			Fframe:     32772,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE18,
		},
		298: {
			Fsprite:    SPR_FIRE,
			Fframe:     32771,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE19,
		},
		299: {
			Fsprite:    SPR_FIRE,
			Fframe:     32772,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_FireCrackle),
			Fnextstate: S_FIRE20,
		},
		300: {
			Fsprite:    SPR_FIRE,
			Fframe:     32773,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE21,
		},
		301: {
			Fsprite:    SPR_FIRE,
			Fframe:     32772,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE22,
		},
		302: {
			Fsprite:    SPR_FIRE,
			Fframe:     32773,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE23,
		},
		303: {
			Fsprite:    SPR_FIRE,
			Fframe:     32772,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE24,
		},
		304: {
			Fsprite:    SPR_FIRE,
			Fframe:     32773,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE25,
		},
		305: {
			Fsprite:    SPR_FIRE,
			Fframe:     32774,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE26,
		},
		306: {
			Fsprite:    SPR_FIRE,
			Fframe:     32775,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE27,
		},
		307: {
			Fsprite:    SPR_FIRE,
			Fframe:     32774,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE28,
		},
		308: {
			Fsprite:    SPR_FIRE,
			Fframe:     32775,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE29,
		},
		309: {
			Fsprite:    SPR_FIRE,
			Fframe:     32774,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_FIRE30,
		},
		310: {
			Fsprite: SPR_FIRE,
			Fframe:  32775,
			Ftics:   2,
			Faction: mobjFuncToAction(A_Fire),
		},
		311: {
			Fsprite:    SPR_PUFF,
			Fframe:     1,
			Ftics:      4,
			Fnextstate: S_SMOKE2,
		},
		312: {
			Fsprite:    SPR_PUFF,
			Fframe:     2,
			Ftics:      4,
			Fnextstate: S_SMOKE3,
		},
		313: {
			Fsprite:    SPR_PUFF,
			Fframe:     1,
			Ftics:      4,
			Fnextstate: S_SMOKE4,
		},
		314: {
			Fsprite:    SPR_PUFF,
			Fframe:     2,
			Ftics:      4,
			Fnextstate: S_SMOKE5,
		},
		315: {
			Fsprite: SPR_PUFF,
			Fframe:  3,
			Ftics:   4,
		},
		316: {
			Fsprite:    SPR_FATB,
			Fframe:     32768,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Tracer),
			Fnextstate: S_TRACER2,
		},
		317: {
			Fsprite:    SPR_FATB,
			Fframe:     32769,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Tracer),
			Fnextstate: S_TRACER,
		},
		318: {
			Fsprite:    SPR_FBXP,
			Fframe:     32768,
			Ftics:      8,
			Fnextstate: S_TRACEEXP2,
		},
		319: {
			Fsprite:    SPR_FBXP,
			Fframe:     32769,
			Ftics:      6,
			Fnextstate: S_TRACEEXP3,
		},
		320: {
			Fsprite: SPR_FBXP,
			Fframe:  32770,
			Ftics:   4,
		},
		321: {
			Fsprite:    SPR_SKEL,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_SKEL_STND2,
		},
		322: {
			Fsprite:    SPR_SKEL,
			Fframe:     1,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_SKEL_STND,
		},
		323: {
			Fsprite:    SPR_SKEL,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SKEL_RUN2,
		},
		324: {
			Fsprite:    SPR_SKEL,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SKEL_RUN3,
		},
		325: {
			Fsprite:    SPR_SKEL,
			Fframe:     1,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SKEL_RUN4,
		},
		326: {
			Fsprite:    SPR_SKEL,
			Fframe:     1,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SKEL_RUN5,
		},
		327: {
			Fsprite:    SPR_SKEL,
			Fframe:     2,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SKEL_RUN6,
		},
		328: {
			Fsprite:    SPR_SKEL,
			Fframe:     2,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SKEL_RUN7,
		},
		329: {
			Fsprite:    SPR_SKEL,
			Fframe:     3,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SKEL_RUN8,
		},
		330: {
			Fsprite:    SPR_SKEL,
			Fframe:     3,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SKEL_RUN9,
		},
		331: {
			Fsprite:    SPR_SKEL,
			Fframe:     4,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SKEL_RUN10,
		},
		332: {
			Fsprite:    SPR_SKEL,
			Fframe:     4,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SKEL_RUN11,
		},
		333: {
			Fsprite:    SPR_SKEL,
			Fframe:     5,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SKEL_RUN12,
		},
		334: {
			Fsprite:    SPR_SKEL,
			Fframe:     5,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SKEL_RUN1,
		},
		335: {
			Fsprite:    SPR_SKEL,
			Fframe:     6,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_SKEL_FIST2,
		},
		336: {
			Fsprite:    SPR_SKEL,
			Fframe:     6,
			Ftics:      6,
			Faction:    mobjFuncToAction(A_SkelWhoosh),
			Fnextstate: S_SKEL_FIST3,
		},
		337: {
			Fsprite:    SPR_SKEL,
			Fframe:     7,
			Ftics:      6,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_SKEL_FIST4,
		},
		338: {
			Fsprite:    SPR_SKEL,
			Fframe:     8,
			Ftics:      6,
			Faction:    mobjFuncToAction(A_SkelFist),
			Fnextstate: S_SKEL_RUN1,
		},
		339: {
			Fsprite:    SPR_SKEL,
			Fframe:     32777,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_SKEL_MISS2,
		},
		340: {
			Fsprite:    SPR_SKEL,
			Fframe:     32777,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_SKEL_MISS3,
		},
		341: {
			Fsprite:    SPR_SKEL,
			Fframe:     10,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_SkelMissile),
			Fnextstate: S_SKEL_MISS4,
		},
		342: {
			Fsprite:    SPR_SKEL,
			Fframe:     10,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_SKEL_RUN1,
		},
		343: {
			Fsprite:    SPR_SKEL,
			Fframe:     11,
			Ftics:      5,
			Fnextstate: S_SKEL_PAIN2,
		},
		344: {
			Fsprite:    SPR_SKEL,
			Fframe:     11,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_SKEL_RUN1,
		},
		345: {
			Fsprite:    SPR_SKEL,
			Fframe:     11,
			Ftics:      7,
			Fnextstate: S_SKEL_DIE2,
		},
		346: {
			Fsprite:    SPR_SKEL,
			Fframe:     12,
			Ftics:      7,
			Fnextstate: S_SKEL_DIE3,
		},
		347: {
			Fsprite:    SPR_SKEL,
			Fframe:     13,
			Ftics:      7,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_SKEL_DIE4,
		},
		348: {
			Fsprite:    SPR_SKEL,
			Fframe:     14,
			Ftics:      7,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_SKEL_DIE5,
		},
		349: {
			Fsprite:    SPR_SKEL,
			Fframe:     15,
			Ftics:      7,
			Fnextstate: S_SKEL_DIE6,
		},
		350: {
			Fsprite: SPR_SKEL,
			Fframe:  16,
			Ftics:   -1,
		},
		351: {
			Fsprite:    SPR_SKEL,
			Fframe:     16,
			Ftics:      5,
			Fnextstate: S_SKEL_RAISE2,
		},
		352: {
			Fsprite:    SPR_SKEL,
			Fframe:     15,
			Ftics:      5,
			Fnextstate: S_SKEL_RAISE3,
		},
		353: {
			Fsprite:    SPR_SKEL,
			Fframe:     14,
			Ftics:      5,
			Fnextstate: S_SKEL_RAISE4,
		},
		354: {
			Fsprite:    SPR_SKEL,
			Fframe:     13,
			Ftics:      5,
			Fnextstate: S_SKEL_RAISE5,
		},
		355: {
			Fsprite:    SPR_SKEL,
			Fframe:     12,
			Ftics:      5,
			Fnextstate: S_SKEL_RAISE6,
		},
		356: {
			Fsprite:    SPR_SKEL,
			Fframe:     11,
			Ftics:      5,
			Fnextstate: S_SKEL_RUN1,
		},
		357: {
			Fsprite:    SPR_MANF,
			Fframe:     32768,
			Ftics:      4,
			Fnextstate: S_FATSHOT2,
		},
		358: {
			Fsprite:    SPR_MANF,
			Fframe:     32769,
			Ftics:      4,
			Fnextstate: S_FATSHOT1,
		},
		359: {
			Fsprite:    SPR_MISL,
			Fframe:     32769,
			Ftics:      8,
			Fnextstate: S_FATSHOTX2,
		},
		360: {
			Fsprite:    SPR_MISL,
			Fframe:     32770,
			Ftics:      6,
			Fnextstate: S_FATSHOTX3,
		},
		361: {
			Fsprite: SPR_MISL,
			Fframe:  32771,
			Ftics:   4,
		},
		362: {
			Fsprite:    SPR_FATT,
			Ftics:      15,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_FATT_STND2,
		},
		363: {
			Fsprite:    SPR_FATT,
			Fframe:     1,
			Ftics:      15,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_FATT_STND,
		},
		364: {
			Fsprite:    SPR_FATT,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_FATT_RUN2,
		},
		365: {
			Fsprite:    SPR_FATT,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_FATT_RUN3,
		},
		366: {
			Fsprite:    SPR_FATT,
			Fframe:     1,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_FATT_RUN4,
		},
		367: {
			Fsprite:    SPR_FATT,
			Fframe:     1,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_FATT_RUN5,
		},
		368: {
			Fsprite:    SPR_FATT,
			Fframe:     2,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_FATT_RUN6,
		},
		369: {
			Fsprite:    SPR_FATT,
			Fframe:     2,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_FATT_RUN7,
		},
		370: {
			Fsprite:    SPR_FATT,
			Fframe:     3,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_FATT_RUN8,
		},
		371: {
			Fsprite:    SPR_FATT,
			Fframe:     3,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_FATT_RUN9,
		},
		372: {
			Fsprite:    SPR_FATT,
			Fframe:     4,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_FATT_RUN10,
		},
		373: {
			Fsprite:    SPR_FATT,
			Fframe:     4,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_FATT_RUN11,
		},
		374: {
			Fsprite:    SPR_FATT,
			Fframe:     5,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_FATT_RUN12,
		},
		375: {
			Fsprite:    SPR_FATT,
			Fframe:     5,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_FATT_RUN1,
		},
		376: {
			Fsprite:    SPR_FATT,
			Fframe:     6,
			Ftics:      20,
			Faction:    mobjFuncToAction(A_FatRaise),
			Fnextstate: S_FATT_ATK2,
		},
		377: {
			Fsprite:    SPR_FATT,
			Fframe:     32775,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_FatAttack1),
			Fnextstate: S_FATT_ATK3,
		},
		378: {
			Fsprite:    SPR_FATT,
			Fframe:     8,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_FATT_ATK4,
		},
		379: {
			Fsprite:    SPR_FATT,
			Fframe:     6,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_FATT_ATK5,
		},
		380: {
			Fsprite:    SPR_FATT,
			Fframe:     32775,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_FatAttack2),
			Fnextstate: S_FATT_ATK6,
		},
		381: {
			Fsprite:    SPR_FATT,
			Fframe:     8,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_FATT_ATK7,
		},
		382: {
			Fsprite:    SPR_FATT,
			Fframe:     6,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_FATT_ATK8,
		},
		383: {
			Fsprite:    SPR_FATT,
			Fframe:     32775,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_FatAttack3),
			Fnextstate: S_FATT_ATK9,
		},
		384: {
			Fsprite:    SPR_FATT,
			Fframe:     8,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_FATT_ATK10,
		},
		385: {
			Fsprite:    SPR_FATT,
			Fframe:     6,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_FATT_RUN1,
		},
		386: {
			Fsprite:    SPR_FATT,
			Fframe:     9,
			Ftics:      3,
			Fnextstate: S_FATT_PAIN2,
		},
		387: {
			Fsprite:    SPR_FATT,
			Fframe:     9,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_FATT_RUN1,
		},
		388: {
			Fsprite:    SPR_FATT,
			Fframe:     10,
			Ftics:      6,
			Fnextstate: S_FATT_DIE2,
		},
		389: {
			Fsprite:    SPR_FATT,
			Fframe:     11,
			Ftics:      6,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_FATT_DIE3,
		},
		390: {
			Fsprite:    SPR_FATT,
			Fframe:     12,
			Ftics:      6,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_FATT_DIE4,
		},
		391: {
			Fsprite:    SPR_FATT,
			Fframe:     13,
			Ftics:      6,
			Fnextstate: S_FATT_DIE5,
		},
		392: {
			Fsprite:    SPR_FATT,
			Fframe:     14,
			Ftics:      6,
			Fnextstate: S_FATT_DIE6,
		},
		393: {
			Fsprite:    SPR_FATT,
			Fframe:     15,
			Ftics:      6,
			Fnextstate: S_FATT_DIE7,
		},
		394: {
			Fsprite:    SPR_FATT,
			Fframe:     16,
			Ftics:      6,
			Fnextstate: S_FATT_DIE8,
		},
		395: {
			Fsprite:    SPR_FATT,
			Fframe:     17,
			Ftics:      6,
			Fnextstate: S_FATT_DIE9,
		},
		396: {
			Fsprite:    SPR_FATT,
			Fframe:     18,
			Ftics:      6,
			Fnextstate: S_FATT_DIE10,
		},
		397: {
			Fsprite: SPR_FATT,
			Fframe:  19,
			Ftics:   -1,
			Faction: mobjFuncToAction(A_BossDeath),
		},
		398: {
			Fsprite:    SPR_FATT,
			Fframe:     17,
			Ftics:      5,
			Fnextstate: S_FATT_RAISE2,
		},
		399: {
			Fsprite:    SPR_FATT,
			Fframe:     16,
			Ftics:      5,
			Fnextstate: S_FATT_RAISE3,
		},
		400: {
			Fsprite:    SPR_FATT,
			Fframe:     15,
			Ftics:      5,
			Fnextstate: S_FATT_RAISE4,
		},
		401: {
			Fsprite:    SPR_FATT,
			Fframe:     14,
			Ftics:      5,
			Fnextstate: S_FATT_RAISE5,
		},
		402: {
			Fsprite:    SPR_FATT,
			Fframe:     13,
			Ftics:      5,
			Fnextstate: S_FATT_RAISE6,
		},
		403: {
			Fsprite:    SPR_FATT,
			Fframe:     12,
			Ftics:      5,
			Fnextstate: S_FATT_RAISE7,
		},
		404: {
			Fsprite:    SPR_FATT,
			Fframe:     11,
			Ftics:      5,
			Fnextstate: S_FATT_RAISE8,
		},
		405: {
			Fsprite:    SPR_FATT,
			Fframe:     10,
			Ftics:      5,
			Fnextstate: S_FATT_RUN1,
		},
		406: {
			Fsprite:    SPR_CPOS,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_CPOS_STND2,
		},
		407: {
			Fsprite:    SPR_CPOS,
			Fframe:     1,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_CPOS_STND,
		},
		408: {
			Fsprite:    SPR_CPOS,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_CPOS_RUN2,
		},
		409: {
			Fsprite:    SPR_CPOS,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_CPOS_RUN3,
		},
		410: {
			Fsprite:    SPR_CPOS,
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_CPOS_RUN4,
		},
		411: {
			Fsprite:    SPR_CPOS,
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_CPOS_RUN5,
		},
		412: {
			Fsprite:    SPR_CPOS,
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_CPOS_RUN6,
		},
		413: {
			Fsprite:    SPR_CPOS,
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_CPOS_RUN7,
		},
		414: {
			Fsprite:    SPR_CPOS,
			Fframe:     3,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_CPOS_RUN8,
		},
		415: {
			Fsprite:    SPR_CPOS,
			Fframe:     3,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_CPOS_RUN1,
		},
		416: {
			Fsprite:    SPR_CPOS,
			Fframe:     4,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_CPOS_ATK2,
		},
		417: {
			Fsprite:    SPR_CPOS,
			Fframe:     32773,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_CPosAttack),
			Fnextstate: S_CPOS_ATK3,
		},
		418: {
			Fsprite:    SPR_CPOS,
			Fframe:     32772,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_CPosAttack),
			Fnextstate: S_CPOS_ATK4,
		},
		419: {
			Fsprite:    SPR_CPOS,
			Fframe:     5,
			Ftics:      1,
			Faction:    mobjFuncToAction(A_CPosRefire),
			Fnextstate: S_CPOS_ATK2,
		},
		420: {
			Fsprite:    SPR_CPOS,
			Fframe:     6,
			Ftics:      3,
			Fnextstate: S_CPOS_PAIN2,
		},
		421: {
			Fsprite:    SPR_CPOS,
			Fframe:     6,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_CPOS_RUN1,
		},
		422: {
			Fsprite:    SPR_CPOS,
			Fframe:     7,
			Ftics:      5,
			Fnextstate: S_CPOS_DIE2,
		},
		423: {
			Fsprite:    SPR_CPOS,
			Fframe:     8,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_CPOS_DIE3,
		},
		424: {
			Fsprite:    SPR_CPOS,
			Fframe:     9,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_CPOS_DIE4,
		},
		425: {
			Fsprite:    SPR_CPOS,
			Fframe:     10,
			Ftics:      5,
			Fnextstate: S_CPOS_DIE5,
		},
		426: {
			Fsprite:    SPR_CPOS,
			Fframe:     11,
			Ftics:      5,
			Fnextstate: S_CPOS_DIE6,
		},
		427: {
			Fsprite:    SPR_CPOS,
			Fframe:     12,
			Ftics:      5,
			Fnextstate: S_CPOS_DIE7,
		},
		428: {
			Fsprite: SPR_CPOS,
			Fframe:  13,
			Ftics:   -1,
		},
		429: {
			Fsprite:    SPR_CPOS,
			Fframe:     14,
			Ftics:      5,
			Fnextstate: S_CPOS_XDIE2,
		},
		430: {
			Fsprite:    SPR_CPOS,
			Fframe:     15,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_XScream),
			Fnextstate: S_CPOS_XDIE3,
		},
		431: {
			Fsprite:    SPR_CPOS,
			Fframe:     16,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_CPOS_XDIE4,
		},
		432: {
			Fsprite:    SPR_CPOS,
			Fframe:     17,
			Ftics:      5,
			Fnextstate: S_CPOS_XDIE5,
		},
		433: {
			Fsprite:    SPR_CPOS,
			Fframe:     18,
			Ftics:      5,
			Fnextstate: S_CPOS_XDIE6,
		},
		434: {
			Fsprite: SPR_CPOS,
			Fframe:  19,
			Ftics:   -1,
		},
		435: {
			Fsprite:    SPR_CPOS,
			Fframe:     13,
			Ftics:      5,
			Fnextstate: S_CPOS_RAISE2,
		},
		436: {
			Fsprite:    SPR_CPOS,
			Fframe:     12,
			Ftics:      5,
			Fnextstate: S_CPOS_RAISE3,
		},
		437: {
			Fsprite:    SPR_CPOS,
			Fframe:     11,
			Ftics:      5,
			Fnextstate: S_CPOS_RAISE4,
		},
		438: {
			Fsprite:    SPR_CPOS,
			Fframe:     10,
			Ftics:      5,
			Fnextstate: S_CPOS_RAISE5,
		},
		439: {
			Fsprite:    SPR_CPOS,
			Fframe:     9,
			Ftics:      5,
			Fnextstate: S_CPOS_RAISE6,
		},
		440: {
			Fsprite:    SPR_CPOS,
			Fframe:     8,
			Ftics:      5,
			Fnextstate: S_CPOS_RAISE7,
		},
		441: {
			Fsprite:    SPR_CPOS,
			Fframe:     7,
			Ftics:      5,
			Fnextstate: S_CPOS_RUN1,
		},
		442: {
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_TROO_STND2,
		},
		443: {
			Fframe:     1,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_TROO_STND,
		},
		444: {
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_TROO_RUN2,
		},
		445: {
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_TROO_RUN3,
		},
		446: {
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_TROO_RUN4,
		},
		447: {
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_TROO_RUN5,
		},
		448: {
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_TROO_RUN6,
		},
		449: {
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_TROO_RUN7,
		},
		450: {
			Fframe:     3,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_TROO_RUN8,
		},
		451: {
			Fframe:     3,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_TROO_RUN1,
		},
		452: {
			Fframe:     4,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_TROO_ATK2,
		},
		453: {
			Fframe:     5,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_TROO_ATK3,
		},
		454: {
			Fframe:     6,
			Ftics:      6,
			Faction:    mobjFuncToAction(A_TroopAttack),
			Fnextstate: S_TROO_RUN1,
		},
		455: {
			Fframe:     7,
			Ftics:      2,
			Fnextstate: S_TROO_PAIN2,
		},
		456: {
			Fframe:     7,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_TROO_RUN1,
		},
		457: {
			Fframe:     8,
			Ftics:      8,
			Fnextstate: S_TROO_DIE2,
		},
		458: {
			Fframe:     9,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_TROO_DIE3,
		},
		459: {
			Fframe:     10,
			Ftics:      6,
			Fnextstate: S_TROO_DIE4,
		},
		460: {
			Fframe:     11,
			Ftics:      6,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_TROO_DIE5,
		},
		461: {
			Fframe: 12,
			Ftics:  -1,
		},
		462: {
			Fframe:     13,
			Ftics:      5,
			Fnextstate: S_TROO_XDIE2,
		},
		463: {
			Fframe:     14,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_XScream),
			Fnextstate: S_TROO_XDIE3,
		},
		464: {
			Fframe:     15,
			Ftics:      5,
			Fnextstate: S_TROO_XDIE4,
		},
		465: {
			Fframe:     16,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_TROO_XDIE5,
		},
		466: {
			Fframe:     17,
			Ftics:      5,
			Fnextstate: S_TROO_XDIE6,
		},
		467: {
			Fframe:     18,
			Ftics:      5,
			Fnextstate: S_TROO_XDIE7,
		},
		468: {
			Fframe:     19,
			Ftics:      5,
			Fnextstate: S_TROO_XDIE8,
		},
		469: {
			Fframe: 20,
			Ftics:  -1,
		},
		470: {
			Fframe:     12,
			Ftics:      8,
			Fnextstate: S_TROO_RAISE2,
		},
		471: {
			Fframe:     11,
			Ftics:      8,
			Fnextstate: S_TROO_RAISE3,
		},
		472: {
			Fframe:     10,
			Ftics:      6,
			Fnextstate: S_TROO_RAISE4,
		},
		473: {
			Fframe:     9,
			Ftics:      6,
			Fnextstate: S_TROO_RAISE5,
		},
		474: {
			Fframe:     8,
			Ftics:      6,
			Fnextstate: S_TROO_RUN1,
		},
		475: {
			Fsprite:    SPR_SARG,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_SARG_STND2,
		},
		476: {
			Fsprite:    SPR_SARG,
			Fframe:     1,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_SARG_STND,
		},
		477: {
			Fsprite:    SPR_SARG,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SARG_RUN2,
		},
		478: {
			Fsprite:    SPR_SARG,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SARG_RUN3,
		},
		479: {
			Fsprite:    SPR_SARG,
			Fframe:     1,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SARG_RUN4,
		},
		480: {
			Fsprite:    SPR_SARG,
			Fframe:     1,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SARG_RUN5,
		},
		481: {
			Fsprite:    SPR_SARG,
			Fframe:     2,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SARG_RUN6,
		},
		482: {
			Fsprite:    SPR_SARG,
			Fframe:     2,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SARG_RUN7,
		},
		483: {
			Fsprite:    SPR_SARG,
			Fframe:     3,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SARG_RUN8,
		},
		484: {
			Fsprite:    SPR_SARG,
			Fframe:     3,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SARG_RUN1,
		},
		485: {
			Fsprite:    SPR_SARG,
			Fframe:     4,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_SARG_ATK2,
		},
		486: {
			Fsprite:    SPR_SARG,
			Fframe:     5,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_SARG_ATK3,
		},
		487: {
			Fsprite:    SPR_SARG,
			Fframe:     6,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_SargAttack),
			Fnextstate: S_SARG_RUN1,
		},
		488: {
			Fsprite:    SPR_SARG,
			Fframe:     7,
			Ftics:      2,
			Fnextstate: S_SARG_PAIN2,
		},
		489: {
			Fsprite:    SPR_SARG,
			Fframe:     7,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_SARG_RUN1,
		},
		490: {
			Fsprite:    SPR_SARG,
			Fframe:     8,
			Ftics:      8,
			Fnextstate: S_SARG_DIE2,
		},
		491: {
			Fsprite:    SPR_SARG,
			Fframe:     9,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_SARG_DIE3,
		},
		492: {
			Fsprite:    SPR_SARG,
			Fframe:     10,
			Ftics:      4,
			Fnextstate: S_SARG_DIE4,
		},
		493: {
			Fsprite:    SPR_SARG,
			Fframe:     11,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_SARG_DIE5,
		},
		494: {
			Fsprite:    SPR_SARG,
			Fframe:     12,
			Ftics:      4,
			Fnextstate: S_SARG_DIE6,
		},
		495: {
			Fsprite: SPR_SARG,
			Fframe:  13,
			Ftics:   -1,
		},
		496: {
			Fsprite:    SPR_SARG,
			Fframe:     13,
			Ftics:      5,
			Fnextstate: S_SARG_RAISE2,
		},
		497: {
			Fsprite:    SPR_SARG,
			Fframe:     12,
			Ftics:      5,
			Fnextstate: S_SARG_RAISE3,
		},
		498: {
			Fsprite:    SPR_SARG,
			Fframe:     11,
			Ftics:      5,
			Fnextstate: S_SARG_RAISE4,
		},
		499: {
			Fsprite:    SPR_SARG,
			Fframe:     10,
			Ftics:      5,
			Fnextstate: S_SARG_RAISE5,
		},
		500: {
			Fsprite:    SPR_SARG,
			Fframe:     9,
			Ftics:      5,
			Fnextstate: S_SARG_RAISE6,
		},
		501: {
			Fsprite:    SPR_SARG,
			Fframe:     8,
			Ftics:      5,
			Fnextstate: S_SARG_RUN1,
		},
		502: {
			Fsprite:    SPR_HEAD,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_HEAD_STND,
		},
		503: {
			Fsprite:    SPR_HEAD,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_HEAD_RUN1,
		},
		504: {
			Fsprite:    SPR_HEAD,
			Fframe:     1,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_HEAD_ATK2,
		},
		505: {
			Fsprite:    SPR_HEAD,
			Fframe:     2,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_HEAD_ATK3,
		},
		506: {
			Fsprite:    SPR_HEAD,
			Fframe:     32771,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_HeadAttack),
			Fnextstate: S_HEAD_RUN1,
		},
		507: {
			Fsprite:    SPR_HEAD,
			Fframe:     4,
			Ftics:      3,
			Fnextstate: S_HEAD_PAIN2,
		},
		508: {
			Fsprite:    SPR_HEAD,
			Fframe:     4,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_HEAD_PAIN3,
		},
		509: {
			Fsprite:    SPR_HEAD,
			Fframe:     5,
			Ftics:      6,
			Fnextstate: S_HEAD_RUN1,
		},
		510: {
			Fsprite:    SPR_HEAD,
			Fframe:     6,
			Ftics:      8,
			Fnextstate: S_HEAD_DIE2,
		},
		511: {
			Fsprite:    SPR_HEAD,
			Fframe:     7,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_HEAD_DIE3,
		},
		512: {
			Fsprite:    SPR_HEAD,
			Fframe:     8,
			Ftics:      8,
			Fnextstate: S_HEAD_DIE4,
		},
		513: {
			Fsprite:    SPR_HEAD,
			Fframe:     9,
			Ftics:      8,
			Fnextstate: S_HEAD_DIE5,
		},
		514: {
			Fsprite:    SPR_HEAD,
			Fframe:     10,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_HEAD_DIE6,
		},
		515: {
			Fsprite: SPR_HEAD,
			Fframe:  11,
			Ftics:   -1,
		},
		516: {
			Fsprite:    SPR_HEAD,
			Fframe:     11,
			Ftics:      8,
			Fnextstate: S_HEAD_RAISE2,
		},
		517: {
			Fsprite:    SPR_HEAD,
			Fframe:     10,
			Ftics:      8,
			Fnextstate: S_HEAD_RAISE3,
		},
		518: {
			Fsprite:    SPR_HEAD,
			Fframe:     9,
			Ftics:      8,
			Fnextstate: S_HEAD_RAISE4,
		},
		519: {
			Fsprite:    SPR_HEAD,
			Fframe:     8,
			Ftics:      8,
			Fnextstate: S_HEAD_RAISE5,
		},
		520: {
			Fsprite:    SPR_HEAD,
			Fframe:     7,
			Ftics:      8,
			Fnextstate: S_HEAD_RAISE6,
		},
		521: {
			Fsprite:    SPR_HEAD,
			Fframe:     6,
			Ftics:      8,
			Fnextstate: S_HEAD_RUN1,
		},
		522: {
			Fsprite:    SPR_BAL7,
			Fframe:     32768,
			Ftics:      4,
			Fnextstate: S_BRBALL2,
		},
		523: {
			Fsprite:    SPR_BAL7,
			Fframe:     32769,
			Ftics:      4,
			Fnextstate: S_BRBALL1,
		},
		524: {
			Fsprite:    SPR_BAL7,
			Fframe:     32770,
			Ftics:      6,
			Fnextstate: S_BRBALLX2,
		},
		525: {
			Fsprite:    SPR_BAL7,
			Fframe:     32771,
			Ftics:      6,
			Fnextstate: S_BRBALLX3,
		},
		526: {
			Fsprite: SPR_BAL7,
			Fframe:  32772,
			Ftics:   6,
		},
		527: {
			Fsprite:    SPR_BOSS,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_BOSS_STND2,
		},
		528: {
			Fsprite:    SPR_BOSS,
			Fframe:     1,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_BOSS_STND,
		},
		529: {
			Fsprite:    SPR_BOSS,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BOSS_RUN2,
		},
		530: {
			Fsprite:    SPR_BOSS,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BOSS_RUN3,
		},
		531: {
			Fsprite:    SPR_BOSS,
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BOSS_RUN4,
		},
		532: {
			Fsprite:    SPR_BOSS,
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BOSS_RUN5,
		},
		533: {
			Fsprite:    SPR_BOSS,
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BOSS_RUN6,
		},
		534: {
			Fsprite:    SPR_BOSS,
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BOSS_RUN7,
		},
		535: {
			Fsprite:    SPR_BOSS,
			Fframe:     3,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BOSS_RUN8,
		},
		536: {
			Fsprite:    SPR_BOSS,
			Fframe:     3,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BOSS_RUN1,
		},
		537: {
			Fsprite:    SPR_BOSS,
			Fframe:     4,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_BOSS_ATK2,
		},
		538: {
			Fsprite:    SPR_BOSS,
			Fframe:     5,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_BOSS_ATK3,
		},
		539: {
			Fsprite:    SPR_BOSS,
			Fframe:     6,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_BruisAttack),
			Fnextstate: S_BOSS_RUN1,
		},
		540: {
			Fsprite:    SPR_BOSS,
			Fframe:     7,
			Ftics:      2,
			Fnextstate: S_BOSS_PAIN2,
		},
		541: {
			Fsprite:    SPR_BOSS,
			Fframe:     7,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_BOSS_RUN1,
		},
		542: {
			Fsprite:    SPR_BOSS,
			Fframe:     8,
			Ftics:      8,
			Fnextstate: S_BOSS_DIE2,
		},
		543: {
			Fsprite:    SPR_BOSS,
			Fframe:     9,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_BOSS_DIE3,
		},
		544: {
			Fsprite:    SPR_BOSS,
			Fframe:     10,
			Ftics:      8,
			Fnextstate: S_BOSS_DIE4,
		},
		545: {
			Fsprite:    SPR_BOSS,
			Fframe:     11,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_BOSS_DIE5,
		},
		546: {
			Fsprite:    SPR_BOSS,
			Fframe:     12,
			Ftics:      8,
			Fnextstate: S_BOSS_DIE6,
		},
		547: {
			Fsprite:    SPR_BOSS,
			Fframe:     13,
			Ftics:      8,
			Fnextstate: S_BOSS_DIE7,
		},
		548: {
			Fsprite: SPR_BOSS,
			Fframe:  14,
			Ftics:   -1,
			Faction: mobjFuncToAction(A_BossDeath),
		},
		549: {
			Fsprite:    SPR_BOSS,
			Fframe:     14,
			Ftics:      8,
			Fnextstate: S_BOSS_RAISE2,
		},
		550: {
			Fsprite:    SPR_BOSS,
			Fframe:     13,
			Ftics:      8,
			Fnextstate: S_BOSS_RAISE3,
		},
		551: {
			Fsprite:    SPR_BOSS,
			Fframe:     12,
			Ftics:      8,
			Fnextstate: S_BOSS_RAISE4,
		},
		552: {
			Fsprite:    SPR_BOSS,
			Fframe:     11,
			Ftics:      8,
			Fnextstate: S_BOSS_RAISE5,
		},
		553: {
			Fsprite:    SPR_BOSS,
			Fframe:     10,
			Ftics:      8,
			Fnextstate: S_BOSS_RAISE6,
		},
		554: {
			Fsprite:    SPR_BOSS,
			Fframe:     9,
			Ftics:      8,
			Fnextstate: S_BOSS_RAISE7,
		},
		555: {
			Fsprite:    SPR_BOSS,
			Fframe:     8,
			Ftics:      8,
			Fnextstate: S_BOSS_RUN1,
		},
		556: {
			Fsprite:    SPR_BOS2,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_BOS2_STND2,
		},
		557: {
			Fsprite:    SPR_BOS2,
			Fframe:     1,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_BOS2_STND,
		},
		558: {
			Fsprite:    SPR_BOS2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BOS2_RUN2,
		},
		559: {
			Fsprite:    SPR_BOS2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BOS2_RUN3,
		},
		560: {
			Fsprite:    SPR_BOS2,
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BOS2_RUN4,
		},
		561: {
			Fsprite:    SPR_BOS2,
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BOS2_RUN5,
		},
		562: {
			Fsprite:    SPR_BOS2,
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BOS2_RUN6,
		},
		563: {
			Fsprite:    SPR_BOS2,
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BOS2_RUN7,
		},
		564: {
			Fsprite:    SPR_BOS2,
			Fframe:     3,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BOS2_RUN8,
		},
		565: {
			Fsprite:    SPR_BOS2,
			Fframe:     3,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BOS2_RUN1,
		},
		566: {
			Fsprite:    SPR_BOS2,
			Fframe:     4,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_BOS2_ATK2,
		},
		567: {
			Fsprite:    SPR_BOS2,
			Fframe:     5,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_BOS2_ATK3,
		},
		568: {
			Fsprite:    SPR_BOS2,
			Fframe:     6,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_BruisAttack),
			Fnextstate: S_BOS2_RUN1,
		},
		569: {
			Fsprite:    SPR_BOS2,
			Fframe:     7,
			Ftics:      2,
			Fnextstate: S_BOS2_PAIN2,
		},
		570: {
			Fsprite:    SPR_BOS2,
			Fframe:     7,
			Ftics:      2,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_BOS2_RUN1,
		},
		571: {
			Fsprite:    SPR_BOS2,
			Fframe:     8,
			Ftics:      8,
			Fnextstate: S_BOS2_DIE2,
		},
		572: {
			Fsprite:    SPR_BOS2,
			Fframe:     9,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_BOS2_DIE3,
		},
		573: {
			Fsprite:    SPR_BOS2,
			Fframe:     10,
			Ftics:      8,
			Fnextstate: S_BOS2_DIE4,
		},
		574: {
			Fsprite:    SPR_BOS2,
			Fframe:     11,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_BOS2_DIE5,
		},
		575: {
			Fsprite:    SPR_BOS2,
			Fframe:     12,
			Ftics:      8,
			Fnextstate: S_BOS2_DIE6,
		},
		576: {
			Fsprite:    SPR_BOS2,
			Fframe:     13,
			Ftics:      8,
			Fnextstate: S_BOS2_DIE7,
		},
		577: {
			Fsprite: SPR_BOS2,
			Fframe:  14,
			Ftics:   -1,
		},
		578: {
			Fsprite:    SPR_BOS2,
			Fframe:     14,
			Ftics:      8,
			Fnextstate: S_BOS2_RAISE2,
		},
		579: {
			Fsprite:    SPR_BOS2,
			Fframe:     13,
			Ftics:      8,
			Fnextstate: S_BOS2_RAISE3,
		},
		580: {
			Fsprite:    SPR_BOS2,
			Fframe:     12,
			Ftics:      8,
			Fnextstate: S_BOS2_RAISE4,
		},
		581: {
			Fsprite:    SPR_BOS2,
			Fframe:     11,
			Ftics:      8,
			Fnextstate: S_BOS2_RAISE5,
		},
		582: {
			Fsprite:    SPR_BOS2,
			Fframe:     10,
			Ftics:      8,
			Fnextstate: S_BOS2_RAISE6,
		},
		583: {
			Fsprite:    SPR_BOS2,
			Fframe:     9,
			Ftics:      8,
			Fnextstate: S_BOS2_RAISE7,
		},
		584: {
			Fsprite:    SPR_BOS2,
			Fframe:     8,
			Ftics:      8,
			Fnextstate: S_BOS2_RUN1,
		},
		585: {
			Fsprite:    SPR_SKUL,
			Fframe:     32768,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_SKULL_STND2,
		},
		586: {
			Fsprite:    SPR_SKUL,
			Fframe:     32769,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_SKULL_STND,
		},
		587: {
			Fsprite:    SPR_SKUL,
			Fframe:     32768,
			Ftics:      6,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SKULL_RUN2,
		},
		588: {
			Fsprite:    SPR_SKUL,
			Fframe:     32769,
			Ftics:      6,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SKULL_RUN1,
		},
		589: {
			Fsprite:    SPR_SKUL,
			Fframe:     32770,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_SKULL_ATK2,
		},
		590: {
			Fsprite:    SPR_SKUL,
			Fframe:     32771,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_SkullAttack),
			Fnextstate: S_SKULL_ATK3,
		},
		591: {
			Fsprite:    SPR_SKUL,
			Fframe:     32770,
			Ftics:      4,
			Fnextstate: S_SKULL_ATK4,
		},
		592: {
			Fsprite:    SPR_SKUL,
			Fframe:     32771,
			Ftics:      4,
			Fnextstate: S_SKULL_ATK3,
		},
		593: {
			Fsprite:    SPR_SKUL,
			Fframe:     32772,
			Ftics:      3,
			Fnextstate: S_SKULL_PAIN2,
		},
		594: {
			Fsprite:    SPR_SKUL,
			Fframe:     32772,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_SKULL_RUN1,
		},
		595: {
			Fsprite:    SPR_SKUL,
			Fframe:     32773,
			Ftics:      6,
			Fnextstate: S_SKULL_DIE2,
		},
		596: {
			Fsprite:    SPR_SKUL,
			Fframe:     32774,
			Ftics:      6,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_SKULL_DIE3,
		},
		597: {
			Fsprite:    SPR_SKUL,
			Fframe:     32775,
			Ftics:      6,
			Fnextstate: S_SKULL_DIE4,
		},
		598: {
			Fsprite:    SPR_SKUL,
			Fframe:     32776,
			Ftics:      6,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_SKULL_DIE5,
		},
		599: {
			Fsprite:    SPR_SKUL,
			Fframe:     9,
			Ftics:      6,
			Fnextstate: S_SKULL_DIE6,
		},
		600: {
			Fsprite: SPR_SKUL,
			Fframe:  10,
			Ftics:   6,
		},
		601: {
			Fsprite:    SPR_SPID,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_SPID_STND2,
		},
		602: {
			Fsprite:    SPR_SPID,
			Fframe:     1,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_SPID_STND,
		},
		603: {
			Fsprite:    SPR_SPID,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Metal),
			Fnextstate: S_SPID_RUN2,
		},
		604: {
			Fsprite:    SPR_SPID,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SPID_RUN3,
		},
		605: {
			Fsprite:    SPR_SPID,
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SPID_RUN4,
		},
		606: {
			Fsprite:    SPR_SPID,
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SPID_RUN5,
		},
		607: {
			Fsprite:    SPR_SPID,
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Metal),
			Fnextstate: S_SPID_RUN6,
		},
		608: {
			Fsprite:    SPR_SPID,
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SPID_RUN7,
		},
		609: {
			Fsprite:    SPR_SPID,
			Fframe:     3,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SPID_RUN8,
		},
		610: {
			Fsprite:    SPR_SPID,
			Fframe:     3,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SPID_RUN9,
		},
		611: {
			Fsprite:    SPR_SPID,
			Fframe:     4,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Metal),
			Fnextstate: S_SPID_RUN10,
		},
		612: {
			Fsprite:    SPR_SPID,
			Fframe:     4,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SPID_RUN11,
		},
		613: {
			Fsprite:    SPR_SPID,
			Fframe:     5,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SPID_RUN12,
		},
		614: {
			Fsprite:    SPR_SPID,
			Fframe:     5,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SPID_RUN1,
		},
		615: {
			Fsprite:    SPR_SPID,
			Fframe:     32768,
			Ftics:      20,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_SPID_ATK2,
		},
		616: {
			Fsprite:    SPR_SPID,
			Fframe:     32774,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_SPosAttack),
			Fnextstate: S_SPID_ATK3,
		},
		617: {
			Fsprite:    SPR_SPID,
			Fframe:     32775,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_SPosAttack),
			Fnextstate: S_SPID_ATK4,
		},
		618: {
			Fsprite:    SPR_SPID,
			Fframe:     32775,
			Ftics:      1,
			Faction:    mobjFuncToAction(A_SpidRefire),
			Fnextstate: S_SPID_ATK2,
		},
		619: {
			Fsprite:    SPR_SPID,
			Fframe:     8,
			Ftics:      3,
			Fnextstate: S_SPID_PAIN2,
		},
		620: {
			Fsprite:    SPR_SPID,
			Fframe:     8,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_SPID_RUN1,
		},
		621: {
			Fsprite:    SPR_SPID,
			Fframe:     9,
			Ftics:      20,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_SPID_DIE2,
		},
		622: {
			Fsprite:    SPR_SPID,
			Fframe:     10,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_SPID_DIE3,
		},
		623: {
			Fsprite:    SPR_SPID,
			Fframe:     11,
			Ftics:      10,
			Fnextstate: S_SPID_DIE4,
		},
		624: {
			Fsprite:    SPR_SPID,
			Fframe:     12,
			Ftics:      10,
			Fnextstate: S_SPID_DIE5,
		},
		625: {
			Fsprite:    SPR_SPID,
			Fframe:     13,
			Ftics:      10,
			Fnextstate: S_SPID_DIE6,
		},
		626: {
			Fsprite:    SPR_SPID,
			Fframe:     14,
			Ftics:      10,
			Fnextstate: S_SPID_DIE7,
		},
		627: {
			Fsprite:    SPR_SPID,
			Fframe:     15,
			Ftics:      10,
			Fnextstate: S_SPID_DIE8,
		},
		628: {
			Fsprite:    SPR_SPID,
			Fframe:     16,
			Ftics:      10,
			Fnextstate: S_SPID_DIE9,
		},
		629: {
			Fsprite:    SPR_SPID,
			Fframe:     17,
			Ftics:      10,
			Fnextstate: S_SPID_DIE10,
		},
		630: {
			Fsprite:    SPR_SPID,
			Fframe:     18,
			Ftics:      30,
			Fnextstate: S_SPID_DIE11,
		},
		631: {
			Fsprite: SPR_SPID,
			Fframe:  18,
			Ftics:   -1,
			Faction: mobjFuncToAction(A_BossDeath),
		},
		632: {
			Fsprite:    SPR_BSPI,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_BSPI_STND2,
		},
		633: {
			Fsprite:    SPR_BSPI,
			Fframe:     1,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_BSPI_STND,
		},
		634: {
			Fsprite:    SPR_BSPI,
			Ftics:      20,
			Fnextstate: S_BSPI_RUN1,
		},
		635: {
			Fsprite:    SPR_BSPI,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_BabyMetal),
			Fnextstate: S_BSPI_RUN2,
		},
		636: {
			Fsprite:    SPR_BSPI,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BSPI_RUN3,
		},
		637: {
			Fsprite:    SPR_BSPI,
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BSPI_RUN4,
		},
		638: {
			Fsprite:    SPR_BSPI,
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BSPI_RUN5,
		},
		639: {
			Fsprite:    SPR_BSPI,
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BSPI_RUN6,
		},
		640: {
			Fsprite:    SPR_BSPI,
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BSPI_RUN7,
		},
		641: {
			Fsprite:    SPR_BSPI,
			Fframe:     3,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_BabyMetal),
			Fnextstate: S_BSPI_RUN8,
		},
		642: {
			Fsprite:    SPR_BSPI,
			Fframe:     3,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BSPI_RUN9,
		},
		643: {
			Fsprite:    SPR_BSPI,
			Fframe:     4,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BSPI_RUN10,
		},
		644: {
			Fsprite:    SPR_BSPI,
			Fframe:     4,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BSPI_RUN11,
		},
		645: {
			Fsprite:    SPR_BSPI,
			Fframe:     5,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BSPI_RUN12,
		},
		646: {
			Fsprite:    SPR_BSPI,
			Fframe:     5,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_BSPI_RUN1,
		},
		647: {
			Fsprite:    SPR_BSPI,
			Fframe:     32768,
			Ftics:      20,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_BSPI_ATK2,
		},
		648: {
			Fsprite:    SPR_BSPI,
			Fframe:     32774,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_BspiAttack),
			Fnextstate: S_BSPI_ATK3,
		},
		649: {
			Fsprite:    SPR_BSPI,
			Fframe:     32775,
			Ftics:      4,
			Fnextstate: S_BSPI_ATK4,
		},
		650: {
			Fsprite:    SPR_BSPI,
			Fframe:     32775,
			Ftics:      1,
			Faction:    mobjFuncToAction(A_SpidRefire),
			Fnextstate: S_BSPI_ATK2,
		},
		651: {
			Fsprite:    SPR_BSPI,
			Fframe:     8,
			Ftics:      3,
			Fnextstate: S_BSPI_PAIN2,
		},
		652: {
			Fsprite:    SPR_BSPI,
			Fframe:     8,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_BSPI_RUN1,
		},
		653: {
			Fsprite:    SPR_BSPI,
			Fframe:     9,
			Ftics:      20,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_BSPI_DIE2,
		},
		654: {
			Fsprite:    SPR_BSPI,
			Fframe:     10,
			Ftics:      7,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_BSPI_DIE3,
		},
		655: {
			Fsprite:    SPR_BSPI,
			Fframe:     11,
			Ftics:      7,
			Fnextstate: S_BSPI_DIE4,
		},
		656: {
			Fsprite:    SPR_BSPI,
			Fframe:     12,
			Ftics:      7,
			Fnextstate: S_BSPI_DIE5,
		},
		657: {
			Fsprite:    SPR_BSPI,
			Fframe:     13,
			Ftics:      7,
			Fnextstate: S_BSPI_DIE6,
		},
		658: {
			Fsprite:    SPR_BSPI,
			Fframe:     14,
			Ftics:      7,
			Fnextstate: S_BSPI_DIE7,
		},
		659: {
			Fsprite: SPR_BSPI,
			Fframe:  15,
			Ftics:   -1,
			Faction: mobjFuncToAction(A_BossDeath),
		},
		660: {
			Fsprite:    SPR_BSPI,
			Fframe:     15,
			Ftics:      5,
			Fnextstate: S_BSPI_RAISE2,
		},
		661: {
			Fsprite:    SPR_BSPI,
			Fframe:     14,
			Ftics:      5,
			Fnextstate: S_BSPI_RAISE3,
		},
		662: {
			Fsprite:    SPR_BSPI,
			Fframe:     13,
			Ftics:      5,
			Fnextstate: S_BSPI_RAISE4,
		},
		663: {
			Fsprite:    SPR_BSPI,
			Fframe:     12,
			Ftics:      5,
			Fnextstate: S_BSPI_RAISE5,
		},
		664: {
			Fsprite:    SPR_BSPI,
			Fframe:     11,
			Ftics:      5,
			Fnextstate: S_BSPI_RAISE6,
		},
		665: {
			Fsprite:    SPR_BSPI,
			Fframe:     10,
			Ftics:      5,
			Fnextstate: S_BSPI_RAISE7,
		},
		666: {
			Fsprite:    SPR_BSPI,
			Fframe:     9,
			Ftics:      5,
			Fnextstate: S_BSPI_RUN1,
		},
		667: {
			Fsprite:    SPR_APLS,
			Fframe:     32768,
			Ftics:      5,
			Fnextstate: S_ARACH_PLAZ2,
		},
		668: {
			Fsprite:    SPR_APLS,
			Fframe:     32769,
			Ftics:      5,
			Fnextstate: S_ARACH_PLAZ,
		},
		669: {
			Fsprite:    SPR_APBX,
			Fframe:     32768,
			Ftics:      5,
			Fnextstate: S_ARACH_PLEX2,
		},
		670: {
			Fsprite:    SPR_APBX,
			Fframe:     32769,
			Ftics:      5,
			Fnextstate: S_ARACH_PLEX3,
		},
		671: {
			Fsprite:    SPR_APBX,
			Fframe:     32770,
			Ftics:      5,
			Fnextstate: S_ARACH_PLEX4,
		},
		672: {
			Fsprite:    SPR_APBX,
			Fframe:     32771,
			Ftics:      5,
			Fnextstate: S_ARACH_PLEX5,
		},
		673: {
			Fsprite: SPR_APBX,
			Fframe:  32772,
			Ftics:   5,
		},
		674: {
			Fsprite:    SPR_CYBR,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_CYBER_STND2,
		},
		675: {
			Fsprite:    SPR_CYBR,
			Fframe:     1,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_CYBER_STND,
		},
		676: {
			Fsprite:    SPR_CYBR,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Hoof),
			Fnextstate: S_CYBER_RUN2,
		},
		677: {
			Fsprite:    SPR_CYBR,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_CYBER_RUN3,
		},
		678: {
			Fsprite:    SPR_CYBR,
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_CYBER_RUN4,
		},
		679: {
			Fsprite:    SPR_CYBR,
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_CYBER_RUN5,
		},
		680: {
			Fsprite:    SPR_CYBR,
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_CYBER_RUN6,
		},
		681: {
			Fsprite:    SPR_CYBR,
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_CYBER_RUN7,
		},
		682: {
			Fsprite:    SPR_CYBR,
			Fframe:     3,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Metal),
			Fnextstate: S_CYBER_RUN8,
		},
		683: {
			Fsprite:    SPR_CYBR,
			Fframe:     3,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_CYBER_RUN1,
		},
		684: {
			Fsprite:    SPR_CYBR,
			Fframe:     4,
			Ftics:      6,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_CYBER_ATK2,
		},
		685: {
			Fsprite:    SPR_CYBR,
			Fframe:     5,
			Ftics:      12,
			Faction:    mobjFuncToAction(A_CyberAttack),
			Fnextstate: S_CYBER_ATK3,
		},
		686: {
			Fsprite:    SPR_CYBR,
			Fframe:     4,
			Ftics:      12,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_CYBER_ATK4,
		},
		687: {
			Fsprite:    SPR_CYBR,
			Fframe:     5,
			Ftics:      12,
			Faction:    mobjFuncToAction(A_CyberAttack),
			Fnextstate: S_CYBER_ATK5,
		},
		688: {
			Fsprite:    SPR_CYBR,
			Fframe:     4,
			Ftics:      12,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_CYBER_ATK6,
		},
		689: {
			Fsprite:    SPR_CYBR,
			Fframe:     5,
			Ftics:      12,
			Faction:    mobjFuncToAction(A_CyberAttack),
			Fnextstate: S_CYBER_RUN1,
		},
		690: {
			Fsprite:    SPR_CYBR,
			Fframe:     6,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_CYBER_RUN1,
		},
		691: {
			Fsprite:    SPR_CYBR,
			Fframe:     7,
			Ftics:      10,
			Fnextstate: S_CYBER_DIE2,
		},
		692: {
			Fsprite:    SPR_CYBR,
			Fframe:     8,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_CYBER_DIE3,
		},
		693: {
			Fsprite:    SPR_CYBR,
			Fframe:     9,
			Ftics:      10,
			Fnextstate: S_CYBER_DIE4,
		},
		694: {
			Fsprite:    SPR_CYBR,
			Fframe:     10,
			Ftics:      10,
			Fnextstate: S_CYBER_DIE5,
		},
		695: {
			Fsprite:    SPR_CYBR,
			Fframe:     11,
			Ftics:      10,
			Fnextstate: S_CYBER_DIE6,
		},
		696: {
			Fsprite:    SPR_CYBR,
			Fframe:     12,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_CYBER_DIE7,
		},
		697: {
			Fsprite:    SPR_CYBR,
			Fframe:     13,
			Ftics:      10,
			Fnextstate: S_CYBER_DIE8,
		},
		698: {
			Fsprite:    SPR_CYBR,
			Fframe:     14,
			Ftics:      10,
			Fnextstate: S_CYBER_DIE9,
		},
		699: {
			Fsprite:    SPR_CYBR,
			Fframe:     15,
			Ftics:      30,
			Fnextstate: S_CYBER_DIE10,
		},
		700: {
			Fsprite: SPR_CYBR,
			Fframe:  15,
			Ftics:   -1,
			Faction: mobjFuncToAction(A_BossDeath),
		},
		701: {
			Fsprite:    SPR_PAIN,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_PAIN_STND,
		},
		702: {
			Fsprite:    SPR_PAIN,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_PAIN_RUN2,
		},
		703: {
			Fsprite:    SPR_PAIN,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_PAIN_RUN3,
		},
		704: {
			Fsprite:    SPR_PAIN,
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_PAIN_RUN4,
		},
		705: {
			Fsprite:    SPR_PAIN,
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_PAIN_RUN5,
		},
		706: {
			Fsprite:    SPR_PAIN,
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_PAIN_RUN6,
		},
		707: {
			Fsprite:    SPR_PAIN,
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_PAIN_RUN1,
		},
		708: {
			Fsprite:    SPR_PAIN,
			Fframe:     3,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_PAIN_ATK2,
		},
		709: {
			Fsprite:    SPR_PAIN,
			Fframe:     4,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_PAIN_ATK3,
		},
		710: {
			Fsprite:    SPR_PAIN,
			Fframe:     32773,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_PAIN_ATK4,
		},
		711: {
			Fsprite:    SPR_PAIN,
			Fframe:     32773,
			Faction:    mobjFuncToAction(A_PainAttack),
			Fnextstate: S_PAIN_RUN1,
		},
		712: {
			Fsprite:    SPR_PAIN,
			Fframe:     6,
			Ftics:      6,
			Fnextstate: S_PAIN_PAIN2,
		},
		713: {
			Fsprite:    SPR_PAIN,
			Fframe:     6,
			Ftics:      6,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_PAIN_RUN1,
		},
		714: {
			Fsprite:    SPR_PAIN,
			Fframe:     32775,
			Ftics:      8,
			Fnextstate: S_PAIN_DIE2,
		},
		715: {
			Fsprite:    SPR_PAIN,
			Fframe:     32776,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_PAIN_DIE3,
		},
		716: {
			Fsprite:    SPR_PAIN,
			Fframe:     32777,
			Ftics:      8,
			Fnextstate: S_PAIN_DIE4,
		},
		717: {
			Fsprite:    SPR_PAIN,
			Fframe:     32778,
			Ftics:      8,
			Fnextstate: S_PAIN_DIE5,
		},
		718: {
			Fsprite:    SPR_PAIN,
			Fframe:     32779,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_PainDie),
			Fnextstate: S_PAIN_DIE6,
		},
		719: {
			Fsprite: SPR_PAIN,
			Fframe:  32780,
			Ftics:   8,
		},
		720: {
			Fsprite:    SPR_PAIN,
			Fframe:     12,
			Ftics:      8,
			Fnextstate: S_PAIN_RAISE2,
		},
		721: {
			Fsprite:    SPR_PAIN,
			Fframe:     11,
			Ftics:      8,
			Fnextstate: S_PAIN_RAISE3,
		},
		722: {
			Fsprite:    SPR_PAIN,
			Fframe:     10,
			Ftics:      8,
			Fnextstate: S_PAIN_RAISE4,
		},
		723: {
			Fsprite:    SPR_PAIN,
			Fframe:     9,
			Ftics:      8,
			Fnextstate: S_PAIN_RAISE5,
		},
		724: {
			Fsprite:    SPR_PAIN,
			Fframe:     8,
			Ftics:      8,
			Fnextstate: S_PAIN_RAISE6,
		},
		725: {
			Fsprite:    SPR_PAIN,
			Fframe:     7,
			Ftics:      8,
			Fnextstate: S_PAIN_RUN1,
		},
		726: {
			Fsprite:    SPR_SSWV,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_SSWV_STND2,
		},
		727: {
			Fsprite:    SPR_SSWV,
			Fframe:     1,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_SSWV_STND,
		},
		728: {
			Fsprite:    SPR_SSWV,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SSWV_RUN2,
		},
		729: {
			Fsprite:    SPR_SSWV,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SSWV_RUN3,
		},
		730: {
			Fsprite:    SPR_SSWV,
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SSWV_RUN4,
		},
		731: {
			Fsprite:    SPR_SSWV,
			Fframe:     1,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SSWV_RUN5,
		},
		732: {
			Fsprite:    SPR_SSWV,
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SSWV_RUN6,
		},
		733: {
			Fsprite:    SPR_SSWV,
			Fframe:     2,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SSWV_RUN7,
		},
		734: {
			Fsprite:    SPR_SSWV,
			Fframe:     3,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SSWV_RUN8,
		},
		735: {
			Fsprite:    SPR_SSWV,
			Fframe:     3,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Chase),
			Fnextstate: S_SSWV_RUN1,
		},
		736: {
			Fsprite:    SPR_SSWV,
			Fframe:     4,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_SSWV_ATK2,
		},
		737: {
			Fsprite:    SPR_SSWV,
			Fframe:     5,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_SSWV_ATK3,
		},
		738: {
			Fsprite:    SPR_SSWV,
			Fframe:     32774,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_CPosAttack),
			Fnextstate: S_SSWV_ATK4,
		},
		739: {
			Fsprite:    SPR_SSWV,
			Fframe:     5,
			Ftics:      6,
			Faction:    mobjFuncToAction(A_FaceTarget),
			Fnextstate: S_SSWV_ATK5,
		},
		740: {
			Fsprite:    SPR_SSWV,
			Fframe:     32774,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_CPosAttack),
			Fnextstate: S_SSWV_ATK6,
		},
		741: {
			Fsprite:    SPR_SSWV,
			Fframe:     5,
			Ftics:      1,
			Faction:    mobjFuncToAction(A_CPosRefire),
			Fnextstate: S_SSWV_ATK2,
		},
		742: {
			Fsprite:    SPR_SSWV,
			Fframe:     7,
			Ftics:      3,
			Fnextstate: S_SSWV_PAIN2,
		},
		743: {
			Fsprite:    SPR_SSWV,
			Fframe:     7,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_SSWV_RUN1,
		},
		744: {
			Fsprite:    SPR_SSWV,
			Fframe:     8,
			Ftics:      5,
			Fnextstate: S_SSWV_DIE2,
		},
		745: {
			Fsprite:    SPR_SSWV,
			Fframe:     9,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_SSWV_DIE3,
		},
		746: {
			Fsprite:    SPR_SSWV,
			Fframe:     10,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_SSWV_DIE4,
		},
		747: {
			Fsprite:    SPR_SSWV,
			Fframe:     11,
			Ftics:      5,
			Fnextstate: S_SSWV_DIE5,
		},
		748: {
			Fsprite: SPR_SSWV,
			Fframe:  12,
			Ftics:   -1,
		},
		749: {
			Fsprite:    SPR_SSWV,
			Fframe:     13,
			Ftics:      5,
			Fnextstate: S_SSWV_XDIE2,
		},
		750: {
			Fsprite:    SPR_SSWV,
			Fframe:     14,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_XScream),
			Fnextstate: S_SSWV_XDIE3,
		},
		751: {
			Fsprite:    SPR_SSWV,
			Fframe:     15,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_Fall),
			Fnextstate: S_SSWV_XDIE4,
		},
		752: {
			Fsprite:    SPR_SSWV,
			Fframe:     16,
			Ftics:      5,
			Fnextstate: S_SSWV_XDIE5,
		},
		753: {
			Fsprite:    SPR_SSWV,
			Fframe:     17,
			Ftics:      5,
			Fnextstate: S_SSWV_XDIE6,
		},
		754: {
			Fsprite:    SPR_SSWV,
			Fframe:     18,
			Ftics:      5,
			Fnextstate: S_SSWV_XDIE7,
		},
		755: {
			Fsprite:    SPR_SSWV,
			Fframe:     19,
			Ftics:      5,
			Fnextstate: S_SSWV_XDIE8,
		},
		756: {
			Fsprite:    SPR_SSWV,
			Fframe:     20,
			Ftics:      5,
			Fnextstate: S_SSWV_XDIE9,
		},
		757: {
			Fsprite: SPR_SSWV,
			Fframe:  21,
			Ftics:   -1,
		},
		758: {
			Fsprite:    SPR_SSWV,
			Fframe:     12,
			Ftics:      5,
			Fnextstate: S_SSWV_RAISE2,
		},
		759: {
			Fsprite:    SPR_SSWV,
			Fframe:     11,
			Ftics:      5,
			Fnextstate: S_SSWV_RAISE3,
		},
		760: {
			Fsprite:    SPR_SSWV,
			Fframe:     10,
			Ftics:      5,
			Fnextstate: S_SSWV_RAISE4,
		},
		761: {
			Fsprite:    SPR_SSWV,
			Fframe:     9,
			Ftics:      5,
			Fnextstate: S_SSWV_RAISE5,
		},
		762: {
			Fsprite:    SPR_SSWV,
			Fframe:     8,
			Ftics:      5,
			Fnextstate: S_SSWV_RUN1,
		},
		763: {
			Fsprite:    SPR_KEEN,
			Ftics:      -1,
			Fnextstate: S_KEENSTND,
		},
		764: {
			Fsprite:    SPR_KEEN,
			Ftics:      6,
			Fnextstate: S_COMMKEEN2,
		},
		765: {
			Fsprite:    SPR_KEEN,
			Fframe:     1,
			Ftics:      6,
			Fnextstate: S_COMMKEEN3,
		},
		766: {
			Fsprite:    SPR_KEEN,
			Fframe:     2,
			Ftics:      6,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_COMMKEEN4,
		},
		767: {
			Fsprite:    SPR_KEEN,
			Fframe:     3,
			Ftics:      6,
			Fnextstate: S_COMMKEEN5,
		},
		768: {
			Fsprite:    SPR_KEEN,
			Fframe:     4,
			Ftics:      6,
			Fnextstate: S_COMMKEEN6,
		},
		769: {
			Fsprite:    SPR_KEEN,
			Fframe:     5,
			Ftics:      6,
			Fnextstate: S_COMMKEEN7,
		},
		770: {
			Fsprite:    SPR_KEEN,
			Fframe:     6,
			Ftics:      6,
			Fnextstate: S_COMMKEEN8,
		},
		771: {
			Fsprite:    SPR_KEEN,
			Fframe:     7,
			Ftics:      6,
			Fnextstate: S_COMMKEEN9,
		},
		772: {
			Fsprite:    SPR_KEEN,
			Fframe:     8,
			Ftics:      6,
			Fnextstate: S_COMMKEEN10,
		},
		773: {
			Fsprite:    SPR_KEEN,
			Fframe:     9,
			Ftics:      6,
			Fnextstate: S_COMMKEEN11,
		},
		774: {
			Fsprite:    SPR_KEEN,
			Fframe:     10,
			Ftics:      6,
			Faction:    mobjFuncToAction(A_KeenDie),
			Fnextstate: S_COMMKEEN12,
		},
		775: {
			Fsprite: SPR_KEEN,
			Fframe:  11,
			Ftics:   -1,
		},
		776: {
			Fsprite:    SPR_KEEN,
			Fframe:     12,
			Ftics:      4,
			Fnextstate: S_KEENPAIN2,
		},
		777: {
			Fsprite:    SPR_KEEN,
			Fframe:     12,
			Ftics:      8,
			Faction:    mobjFuncToAction(A_Pain),
			Fnextstate: S_KEENSTND,
		},
		778: {
			Fsprite: SPR_BBRN,
			Ftics:   -1,
		},
		779: {
			Fsprite:    SPR_BBRN,
			Fframe:     1,
			Ftics:      36,
			Faction:    mobjFuncToAction(A_BrainPain),
			Fnextstate: S_BRAIN,
		},
		780: {
			Fsprite:    SPR_BBRN,
			Ftics:      100,
			Faction:    mobjFuncToAction(A_BrainScream),
			Fnextstate: S_BRAIN_DIE2,
		},
		781: {
			Fsprite:    SPR_BBRN,
			Ftics:      10,
			Fnextstate: S_BRAIN_DIE3,
		},
		782: {
			Fsprite:    SPR_BBRN,
			Ftics:      10,
			Fnextstate: S_BRAIN_DIE4,
		},
		783: {
			Fsprite: SPR_BBRN,
			Ftics:   -1,
			Faction: mobjFuncToAction(A_BrainDie),
		},
		784: {
			Fsprite:    SPR_SSWV,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Look),
			Fnextstate: S_BRAINEYE,
		},
		785: {
			Fsprite:    SPR_SSWV,
			Ftics:      181,
			Faction:    mobjFuncToAction(A_BrainAwake),
			Fnextstate: S_BRAINEYE1,
		},
		786: {
			Fsprite:    SPR_SSWV,
			Ftics:      150,
			Faction:    mobjFuncToAction(A_BrainSpit),
			Fnextstate: S_BRAINEYE1,
		},
		787: {
			Fsprite:    SPR_BOSF,
			Fframe:     32768,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_SpawnSound),
			Fnextstate: S_SPAWN2,
		},
		788: {
			Fsprite:    SPR_BOSF,
			Fframe:     32769,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_SpawnFly),
			Fnextstate: S_SPAWN3,
		},
		789: {
			Fsprite:    SPR_BOSF,
			Fframe:     32770,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_SpawnFly),
			Fnextstate: S_SPAWN4,
		},
		790: {
			Fsprite:    SPR_BOSF,
			Fframe:     32771,
			Ftics:      3,
			Faction:    mobjFuncToAction(A_SpawnFly),
			Fnextstate: S_SPAWN1,
		},
		791: {
			Fsprite:    SPR_FIRE,
			Fframe:     32768,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_SPAWNFIRE2,
		},
		792: {
			Fsprite:    SPR_FIRE,
			Fframe:     32769,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_SPAWNFIRE3,
		},
		793: {
			Fsprite:    SPR_FIRE,
			Fframe:     32770,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_SPAWNFIRE4,
		},
		794: {
			Fsprite:    SPR_FIRE,
			Fframe:     32771,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_SPAWNFIRE5,
		},
		795: {
			Fsprite:    SPR_FIRE,
			Fframe:     32772,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_SPAWNFIRE6,
		},
		796: {
			Fsprite:    SPR_FIRE,
			Fframe:     32773,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_SPAWNFIRE7,
		},
		797: {
			Fsprite:    SPR_FIRE,
			Fframe:     32774,
			Ftics:      4,
			Faction:    mobjFuncToAction(A_Fire),
			Fnextstate: S_SPAWNFIRE8,
		},
		798: {
			Fsprite: SPR_FIRE,
			Fframe:  32775,
			Ftics:   4,
			Faction: mobjFuncToAction(A_Fire),
		},
		799: {
			Fsprite:    SPR_MISL,
			Fframe:     32769,
			Ftics:      10,
			Fnextstate: S_BRAINEXPLODE2,
		},
		800: {
			Fsprite:    SPR_MISL,
			Fframe:     32770,
			Ftics:      10,
			Fnextstate: S_BRAINEXPLODE3,
		},
		801: {
			Fsprite: SPR_MISL,
			Fframe:  32771,
			Ftics:   10,
			Faction: mobjFuncToAction(A_BrainExplode),
		},
		802: {
			Fsprite:    SPR_ARM1,
			Ftics:      6,
			Fnextstate: S_ARM1A,
		},
		803: {
			Fsprite:    SPR_ARM1,
			Fframe:     32769,
			Ftics:      7,
			Fnextstate: S_ARM1,
		},
		804: {
			Fsprite:    SPR_ARM2,
			Ftics:      6,
			Fnextstate: S_ARM2A,
		},
		805: {
			Fsprite:    SPR_ARM2,
			Fframe:     32769,
			Ftics:      6,
			Fnextstate: S_ARM2,
		},
		806: {
			Fsprite:    SPR_BAR1,
			Ftics:      6,
			Fnextstate: S_BAR2,
		},
		807: {
			Fsprite:    SPR_BAR1,
			Fframe:     1,
			Ftics:      6,
			Fnextstate: S_BAR1,
		},
		808: {
			Fsprite:    SPR_BEXP,
			Fframe:     32768,
			Ftics:      5,
			Fnextstate: S_BEXP2,
		},
		809: {
			Fsprite:    SPR_BEXP,
			Fframe:     32769,
			Ftics:      5,
			Faction:    mobjFuncToAction(A_Scream),
			Fnextstate: S_BEXP3,
		},
		810: {
			Fsprite:    SPR_BEXP,
			Fframe:     32770,
			Ftics:      5,
			Fnextstate: S_BEXP4,
		},
		811: {
			Fsprite:    SPR_BEXP,
			Fframe:     32771,
			Ftics:      10,
			Faction:    mobjFuncToAction(A_Explode),
			Fnextstate: S_BEXP5,
		},
		812: {
			Fsprite: SPR_BEXP,
			Fframe:  32772,
			Ftics:   10,
		},
		813: {
			Fsprite:    SPR_FCAN,
			Fframe:     32768,
			Ftics:      4,
			Fnextstate: S_BBAR2,
		},
		814: {
			Fsprite:    SPR_FCAN,
			Fframe:     32769,
			Ftics:      4,
			Fnextstate: S_BBAR3,
		},
		815: {
			Fsprite:    SPR_FCAN,
			Fframe:     32770,
			Ftics:      4,
			Fnextstate: S_BBAR1,
		},
		816: {
			Fsprite:    SPR_BON1,
			Ftics:      6,
			Fnextstate: S_BON1A,
		},
		817: {
			Fsprite:    SPR_BON1,
			Fframe:     1,
			Ftics:      6,
			Fnextstate: S_BON1B,
		},
		818: {
			Fsprite:    SPR_BON1,
			Fframe:     2,
			Ftics:      6,
			Fnextstate: S_BON1C,
		},
		819: {
			Fsprite:    SPR_BON1,
			Fframe:     3,
			Ftics:      6,
			Fnextstate: S_BON1D,
		},
		820: {
			Fsprite:    SPR_BON1,
			Fframe:     2,
			Ftics:      6,
			Fnextstate: S_BON1E,
		},
		821: {
			Fsprite:    SPR_BON1,
			Fframe:     1,
			Ftics:      6,
			Fnextstate: S_BON1,
		},
		822: {
			Fsprite:    SPR_BON2,
			Ftics:      6,
			Fnextstate: S_BON2A,
		},
		823: {
			Fsprite:    SPR_BON2,
			Fframe:     1,
			Ftics:      6,
			Fnextstate: S_BON2B,
		},
		824: {
			Fsprite:    SPR_BON2,
			Fframe:     2,
			Ftics:      6,
			Fnextstate: S_BON2C,
		},
		825: {
			Fsprite:    SPR_BON2,
			Fframe:     3,
			Ftics:      6,
			Fnextstate: S_BON2D,
		},
		826: {
			Fsprite:    SPR_BON2,
			Fframe:     2,
			Ftics:      6,
			Fnextstate: S_BON2E,
		},
		827: {
			Fsprite:    SPR_BON2,
			Fframe:     1,
			Ftics:      6,
			Fnextstate: S_BON2,
		},
		828: {
			Fsprite:    SPR_BKEY,
			Ftics:      10,
			Fnextstate: S_BKEY2,
		},
		829: {
			Fsprite:    SPR_BKEY,
			Fframe:     32769,
			Ftics:      10,
			Fnextstate: S_BKEY,
		},
		830: {
			Fsprite:    SPR_RKEY,
			Ftics:      10,
			Fnextstate: S_RKEY2,
		},
		831: {
			Fsprite:    SPR_RKEY,
			Fframe:     32769,
			Ftics:      10,
			Fnextstate: S_RKEY,
		},
		832: {
			Fsprite:    SPR_YKEY,
			Ftics:      10,
			Fnextstate: S_YKEY2,
		},
		833: {
			Fsprite:    SPR_YKEY,
			Fframe:     32769,
			Ftics:      10,
			Fnextstate: S_YKEY,
		},
		834: {
			Fsprite:    SPR_BSKU,
			Ftics:      10,
			Fnextstate: S_BSKULL2,
		},
		835: {
			Fsprite:    SPR_BSKU,
			Fframe:     32769,
			Ftics:      10,
			Fnextstate: S_BSKULL,
		},
		836: {
			Fsprite:    SPR_RSKU,
			Ftics:      10,
			Fnextstate: S_RSKULL2,
		},
		837: {
			Fsprite:    SPR_RSKU,
			Fframe:     32769,
			Ftics:      10,
			Fnextstate: S_RSKULL,
		},
		838: {
			Fsprite:    SPR_YSKU,
			Ftics:      10,
			Fnextstate: S_YSKULL2,
		},
		839: {
			Fsprite:    SPR_YSKU,
			Fframe:     32769,
			Ftics:      10,
			Fnextstate: S_YSKULL,
		},
		840: {
			Fsprite: SPR_STIM,
			Ftics:   -1,
		},
		841: {
			Fsprite: SPR_MEDI,
			Ftics:   -1,
		},
		842: {
			Fsprite:    SPR_SOUL,
			Fframe:     32768,
			Ftics:      6,
			Fnextstate: S_SOUL2,
		},
		843: {
			Fsprite:    SPR_SOUL,
			Fframe:     32769,
			Ftics:      6,
			Fnextstate: S_SOUL3,
		},
		844: {
			Fsprite:    SPR_SOUL,
			Fframe:     32770,
			Ftics:      6,
			Fnextstate: S_SOUL4,
		},
		845: {
			Fsprite:    SPR_SOUL,
			Fframe:     32771,
			Ftics:      6,
			Fnextstate: S_SOUL5,
		},
		846: {
			Fsprite:    SPR_SOUL,
			Fframe:     32770,
			Ftics:      6,
			Fnextstate: S_SOUL6,
		},
		847: {
			Fsprite:    SPR_SOUL,
			Fframe:     32769,
			Ftics:      6,
			Fnextstate: S_SOUL,
		},
		848: {
			Fsprite:    SPR_PINV,
			Fframe:     32768,
			Ftics:      6,
			Fnextstate: S_PINV2,
		},
		849: {
			Fsprite:    SPR_PINV,
			Fframe:     32769,
			Ftics:      6,
			Fnextstate: S_PINV3,
		},
		850: {
			Fsprite:    SPR_PINV,
			Fframe:     32770,
			Ftics:      6,
			Fnextstate: S_PINV4,
		},
		851: {
			Fsprite:    SPR_PINV,
			Fframe:     32771,
			Ftics:      6,
			Fnextstate: S_PINV,
		},
		852: {
			Fsprite: SPR_PSTR,
			Fframe:  32768,
			Ftics:   -1,
		},
		853: {
			Fsprite:    SPR_PINS,
			Fframe:     32768,
			Ftics:      6,
			Fnextstate: S_PINS2,
		},
		854: {
			Fsprite:    SPR_PINS,
			Fframe:     32769,
			Ftics:      6,
			Fnextstate: S_PINS3,
		},
		855: {
			Fsprite:    SPR_PINS,
			Fframe:     32770,
			Ftics:      6,
			Fnextstate: S_PINS4,
		},
		856: {
			Fsprite:    SPR_PINS,
			Fframe:     32771,
			Ftics:      6,
			Fnextstate: S_PINS,
		},
		857: {
			Fsprite:    SPR_MEGA,
			Fframe:     32768,
			Ftics:      6,
			Fnextstate: S_MEGA2,
		},
		858: {
			Fsprite:    SPR_MEGA,
			Fframe:     32769,
			Ftics:      6,
			Fnextstate: S_MEGA3,
		},
		859: {
			Fsprite:    SPR_MEGA,
			Fframe:     32770,
			Ftics:      6,
			Fnextstate: S_MEGA4,
		},
		860: {
			Fsprite:    SPR_MEGA,
			Fframe:     32771,
			Ftics:      6,
			Fnextstate: S_MEGA,
		},
		861: {
			Fsprite: SPR_SUIT,
			Fframe:  32768,
			Ftics:   -1,
		},
		862: {
			Fsprite:    SPR_PMAP,
			Fframe:     32768,
			Ftics:      6,
			Fnextstate: S_PMAP2,
		},
		863: {
			Fsprite:    SPR_PMAP,
			Fframe:     32769,
			Ftics:      6,
			Fnextstate: S_PMAP3,
		},
		864: {
			Fsprite:    SPR_PMAP,
			Fframe:     32770,
			Ftics:      6,
			Fnextstate: S_PMAP4,
		},
		865: {
			Fsprite:    SPR_PMAP,
			Fframe:     32771,
			Ftics:      6,
			Fnextstate: S_PMAP5,
		},
		866: {
			Fsprite:    SPR_PMAP,
			Fframe:     32770,
			Ftics:      6,
			Fnextstate: S_PMAP6,
		},
		867: {
			Fsprite:    SPR_PMAP,
			Fframe:     32769,
			Ftics:      6,
			Fnextstate: S_PMAP,
		},
		868: {
			Fsprite:    SPR_PVIS,
			Fframe:     32768,
			Ftics:      6,
			Fnextstate: S_PVIS2,
		},
		869: {
			Fsprite:    SPR_PVIS,
			Fframe:     1,
			Ftics:      6,
			Fnextstate: S_PVIS,
		},
		870: {
			Fsprite: SPR_CLIP,
			Ftics:   -1,
		},
		871: {
			Fsprite: SPR_AMMO,
			Ftics:   -1,
		},
		872: {
			Fsprite: SPR_ROCK,
			Ftics:   -1,
		},
		873: {
			Fsprite: SPR_BROK,
			Ftics:   -1,
		},
		874: {
			Fsprite: SPR_CELL,
			Ftics:   -1,
		},
		875: {
			Fsprite: SPR_CELP,
			Ftics:   -1,
		},
		876: {
			Fsprite: SPR_SHEL,
			Ftics:   -1,
		},
		877: {
			Fsprite: SPR_SBOX,
			Ftics:   -1,
		},
		878: {
			Fsprite: SPR_BPAK,
			Ftics:   -1,
		},
		879: {
			Fsprite: SPR_BFUG,
			Ftics:   -1,
		},
		880: {
			Fsprite: SPR_MGUN,
			Ftics:   -1,
		},
		881: {
			Fsprite: SPR_CSAW,
			Ftics:   -1,
		},
		882: {
			Fsprite: SPR_LAUN,
			Ftics:   -1,
		},
		883: {
			Fsprite: SPR_PLAS,
			Ftics:   -1,
		},
		884: {
			Fsprite: SPR_SHOT,
			Ftics:   -1,
		},
		885: {
			Fsprite: SPR_SGN2,
			Ftics:   -1,
		},
		886: {
			Fsprite: SPR_COLU,
			Fframe:  32768,
			Ftics:   -1,
		},
		887: {
			Fsprite: SPR_SMT2,
			Ftics:   -1,
		},
		888: {
			Fsprite:    SPR_GOR1,
			Ftics:      10,
			Fnextstate: S_BLOODYTWITCH2,
		},
		889: {
			Fsprite:    SPR_GOR1,
			Fframe:     1,
			Ftics:      15,
			Fnextstate: S_BLOODYTWITCH3,
		},
		890: {
			Fsprite:    SPR_GOR1,
			Fframe:     2,
			Ftics:      8,
			Fnextstate: S_BLOODYTWITCH4,
		},
		891: {
			Fsprite:    SPR_GOR1,
			Fframe:     1,
			Ftics:      6,
			Fnextstate: S_BLOODYTWITCH,
		},
		892: {
			Fsprite: SPR_PLAY,
			Fframe:  13,
			Ftics:   -1,
		},
		893: {
			Fsprite: SPR_PLAY,
			Fframe:  18,
			Ftics:   -1,
		},
		894: {
			Fsprite: SPR_POL2,
			Ftics:   -1,
		},
		895: {
			Fsprite: SPR_POL5,
			Ftics:   -1,
		},
		896: {
			Fsprite: SPR_POL4,
			Ftics:   -1,
		},
		897: {
			Fsprite:    SPR_POL3,
			Fframe:     32768,
			Ftics:      6,
			Fnextstate: S_HEADCANDLES2,
		},
		898: {
			Fsprite:    SPR_POL3,
			Fframe:     32769,
			Ftics:      6,
			Fnextstate: S_HEADCANDLES,
		},
		899: {
			Fsprite: SPR_POL1,
			Ftics:   -1,
		},
		900: {
			Fsprite:    SPR_POL6,
			Ftics:      6,
			Fnextstate: S_LIVESTICK2,
		},
		901: {
			Fsprite:    SPR_POL6,
			Fframe:     1,
			Ftics:      8,
			Fnextstate: S_LIVESTICK,
		},
		902: {
			Fsprite: SPR_GOR2,
			Ftics:   -1,
		},
		903: {
			Fsprite: SPR_GOR3,
			Ftics:   -1,
		},
		904: {
			Fsprite: SPR_GOR4,
			Ftics:   -1,
		},
		905: {
			Fsprite: SPR_GOR5,
			Ftics:   -1,
		},
		906: {
			Fsprite: SPR_SMIT,
			Ftics:   -1,
		},
		907: {
			Fsprite: SPR_COL1,
			Ftics:   -1,
		},
		908: {
			Fsprite: SPR_COL2,
			Ftics:   -1,
		},
		909: {
			Fsprite: SPR_COL3,
			Ftics:   -1,
		},
		910: {
			Fsprite: SPR_COL4,
			Ftics:   -1,
		},
		911: {
			Fsprite: SPR_CAND,
			Fframe:  32768,
			Ftics:   -1,
		},
		912: {
			Fsprite: SPR_CBRA,
			Fframe:  32768,
			Ftics:   -1,
		},
		913: {
			Fsprite: SPR_COL6,
			Ftics:   -1,
		},
		914: {
			Fsprite: SPR_TRE1,
			Ftics:   -1,
		},
		915: {
			Fsprite: SPR_TRE2,
			Ftics:   -1,
		},
		916: {
			Fsprite: SPR_ELEC,
			Ftics:   -1,
		},
		917: {
			Fsprite:    SPR_CEYE,
			Fframe:     32768,
			Ftics:      6,
			Fnextstate: S_EVILEYE2,
		},
		918: {
			Fsprite:    SPR_CEYE,
			Fframe:     32769,
			Ftics:      6,
			Fnextstate: S_EVILEYE3,
		},
		919: {
			Fsprite:    SPR_CEYE,
			Fframe:     32770,
			Ftics:      6,
			Fnextstate: S_EVILEYE4,
		},
		920: {
			Fsprite:    SPR_CEYE,
			Fframe:     32769,
			Ftics:      6,
			Fnextstate: S_EVILEYE,
		},
		921: {
			Fsprite:    SPR_FSKU,
			Fframe:     32768,
			Ftics:      6,
			Fnextstate: S_FLOATSKULL2,
		},
		922: {
			Fsprite:    SPR_FSKU,
			Fframe:     32769,
			Ftics:      6,
			Fnextstate: S_FLOATSKULL3,
		},
		923: {
			Fsprite:    SPR_FSKU,
			Fframe:     32770,
			Ftics:      6,
			Fnextstate: S_FLOATSKULL,
		},
		924: {
			Fsprite:    SPR_COL5,
			Ftics:      14,
			Fnextstate: S_HEARTCOL2,
		},
		925: {
			Fsprite:    SPR_COL5,
			Fframe:     1,
			Ftics:      14,
			Fnextstate: S_HEARTCOL,
		},
		926: {
			Fsprite:    SPR_TBLU,
			Fframe:     32768,
			Ftics:      4,
			Fnextstate: S_BLUETORCH2,
		},
		927: {
			Fsprite:    SPR_TBLU,
			Fframe:     32769,
			Ftics:      4,
			Fnextstate: S_BLUETORCH3,
		},
		928: {
			Fsprite:    SPR_TBLU,
			Fframe:     32770,
			Ftics:      4,
			Fnextstate: S_BLUETORCH4,
		},
		929: {
			Fsprite:    SPR_TBLU,
			Fframe:     32771,
			Ftics:      4,
			Fnextstate: S_BLUETORCH,
		},
		930: {
			Fsprite:    SPR_TGRN,
			Fframe:     32768,
			Ftics:      4,
			Fnextstate: S_GREENTORCH2,
		},
		931: {
			Fsprite:    SPR_TGRN,
			Fframe:     32769,
			Ftics:      4,
			Fnextstate: S_GREENTORCH3,
		},
		932: {
			Fsprite:    SPR_TGRN,
			Fframe:     32770,
			Ftics:      4,
			Fnextstate: S_GREENTORCH4,
		},
		933: {
			Fsprite:    SPR_TGRN,
			Fframe:     32771,
			Ftics:      4,
			Fnextstate: S_GREENTORCH,
		},
		934: {
			Fsprite:    SPR_TRED,
			Fframe:     32768,
			Ftics:      4,
			Fnextstate: S_REDTORCH2,
		},
		935: {
			Fsprite:    SPR_TRED,
			Fframe:     32769,
			Ftics:      4,
			Fnextstate: S_REDTORCH3,
		},
		936: {
			Fsprite:    SPR_TRED,
			Fframe:     32770,
			Ftics:      4,
			Fnextstate: S_REDTORCH4,
		},
		937: {
			Fsprite:    SPR_TRED,
			Fframe:     32771,
			Ftics:      4,
			Fnextstate: S_REDTORCH,
		},
		938: {
			Fsprite:    SPR_SMBT,
			Fframe:     32768,
			Ftics:      4,
			Fnextstate: S_BTORCHSHRT2,
		},
		939: {
			Fsprite:    SPR_SMBT,
			Fframe:     32769,
			Ftics:      4,
			Fnextstate: S_BTORCHSHRT3,
		},
		940: {
			Fsprite:    SPR_SMBT,
			Fframe:     32770,
			Ftics:      4,
			Fnextstate: S_BTORCHSHRT4,
		},
		941: {
			Fsprite:    SPR_SMBT,
			Fframe:     32771,
			Ftics:      4,
			Fnextstate: S_BTORCHSHRT,
		},
		942: {
			Fsprite:    SPR_SMGT,
			Fframe:     32768,
			Ftics:      4,
			Fnextstate: S_GTORCHSHRT2,
		},
		943: {
			Fsprite:    SPR_SMGT,
			Fframe:     32769,
			Ftics:      4,
			Fnextstate: S_GTORCHSHRT3,
		},
		944: {
			Fsprite:    SPR_SMGT,
			Fframe:     32770,
			Ftics:      4,
			Fnextstate: S_GTORCHSHRT4,
		},
		945: {
			Fsprite:    SPR_SMGT,
			Fframe:     32771,
			Ftics:      4,
			Fnextstate: S_GTORCHSHRT,
		},
		946: {
			Fsprite:    SPR_SMRT,
			Fframe:     32768,
			Ftics:      4,
			Fnextstate: S_RTORCHSHRT2,
		},
		947: {
			Fsprite:    SPR_SMRT,
			Fframe:     32769,
			Ftics:      4,
			Fnextstate: S_RTORCHSHRT3,
		},
		948: {
			Fsprite:    SPR_SMRT,
			Fframe:     32770,
			Ftics:      4,
			Fnextstate: S_RTORCHSHRT4,
		},
		949: {
			Fsprite:    SPR_SMRT,
			Fframe:     32771,
			Ftics:      4,
			Fnextstate: S_RTORCHSHRT,
		},
		950: {
			Fsprite: SPR_HDB1,
			Ftics:   -1,
		},
		951: {
			Fsprite: SPR_HDB2,
			Ftics:   -1,
		},
		952: {
			Fsprite: SPR_HDB3,
			Ftics:   -1,
		},
		953: {
			Fsprite: SPR_HDB4,
			Ftics:   -1,
		},
		954: {
			Fsprite: SPR_HDB5,
			Ftics:   -1,
		},
		955: {
			Fsprite: SPR_HDB6,
			Ftics:   -1,
		},
		956: {
			Fsprite: SPR_POB1,
			Ftics:   -1,
		},
		957: {
			Fsprite: SPR_POB2,
			Ftics:   -1,
		},
		958: {
			Fsprite: SPR_BRS1,
			Ftics:   -1,
		},
		959: {
			Fsprite:    SPR_TLMP,
			Fframe:     32768,
			Ftics:      4,
			Fnextstate: S_TECHLAMP2,
		},
		960: {
			Fsprite:    SPR_TLMP,
			Fframe:     32769,
			Ftics:      4,
			Fnextstate: S_TECHLAMP3,
		},
		961: {
			Fsprite:    SPR_TLMP,
			Fframe:     32770,
			Ftics:      4,
			Fnextstate: S_TECHLAMP4,
		},
		962: {
			Fsprite:    SPR_TLMP,
			Fframe:     32771,
			Ftics:      4,
			Fnextstate: S_TECHLAMP,
		},
		963: {
			Fsprite:    SPR_TLP2,
			Fframe:     32768,
			Ftics:      4,
			Fnextstate: S_TECH2LAMP2,
		},
		964: {
			Fsprite:    SPR_TLP2,
			Fframe:     32769,
			Ftics:      4,
			Fnextstate: S_TECH2LAMP3,
		},
		965: {
			Fsprite:    SPR_TLP2,
			Fframe:     32770,
			Ftics:      4,
			Fnextstate: S_TECH2LAMP4,
		},
		966: {
			Fsprite:    SPR_TLP2,
			Fframe:     32771,
			Ftics:      4,
			Fnextstate: S_TECH2LAMP,
		},
	}
}

func init() {
	mobjinfo = [137]mobjinfo_t{
		0: {
			Fdoomednum:    -1,
			Fspawnstate:   S_PLAY,
			Fspawnhealth:  100,
			Fseestate:     S_PLAY_RUN1,
			Fpainstate:    S_PLAY_PAIN,
			Fpainchance:   255,
			Fpainsound:    int32(sfx_plpain),
			Fmissilestate: S_PLAY_ATK1,
			Fdeathstate:   S_PLAY_DIE1,
			Fxdeathstate:  S_PLAY_XDIE1,
			Fdeathsound:   int32(sfx_pldeth),
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       56 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_DROPOFF | MF_PICKUP | MF_NOTDMATCH,
		},
		1: {
			Fdoomednum:    3004,
			Fspawnstate:   S_POSS_STND,
			Fspawnhealth:  20,
			Fseestate:     S_POSS_RUN1,
			Fseesound:     int32(sfx_posit1),
			Freactiontime: 8,
			Fattacksound:  int32(sfx_pistol),
			Fpainstate:    S_POSS_PAIN,
			Fpainchance:   200,
			Fpainsound:    int32(sfx_popain),
			Fmissilestate: S_POSS_ATK1,
			Fdeathstate:   S_POSS_DIE1,
			Fxdeathstate:  S_POSS_XDIE1,
			Fdeathsound:   int32(sfx_podth1),
			Fspeed:        8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       56 * (1 << FRACBITS),
			Fmass:         100,
			Factivesound:  int32(sfx_posact),
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_COUNTKILL,
			Fraisestate:   S_POSS_RAISE1,
		},
		2: {
			Fdoomednum:    9,
			Fspawnstate:   S_SPOS_STND,
			Fspawnhealth:  30,
			Fseestate:     S_SPOS_RUN1,
			Fseesound:     int32(sfx_posit2),
			Freactiontime: 8,
			Fpainstate:    S_SPOS_PAIN,
			Fpainchance:   170,
			Fpainsound:    int32(sfx_popain),
			Fmissilestate: S_SPOS_ATK1,
			Fdeathstate:   S_SPOS_DIE1,
			Fxdeathstate:  S_SPOS_XDIE1,
			Fdeathsound:   int32(sfx_podth2),
			Fspeed:        8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       56 * (1 << FRACBITS),
			Fmass:         100,
			Factivesound:  int32(sfx_posact),
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_COUNTKILL,
			Fraisestate:   S_SPOS_RAISE1,
		},
		3: {
			Fdoomednum:    64,
			Fspawnstate:   S_VILE_STND,
			Fspawnhealth:  700,
			Fseestate:     S_VILE_RUN1,
			Fseesound:     int32(sfx_vilsit),
			Freactiontime: 8,
			Fpainstate:    S_VILE_PAIN,
			Fpainchance:   10,
			Fpainsound:    int32(sfx_vipain),
			Fmissilestate: S_VILE_ATK1,
			Fdeathstate:   S_VILE_DIE1,
			Fdeathsound:   int32(sfx_vildth),
			Fspeed:        15,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       56 * (1 << FRACBITS),
			Fmass:         500,
			Factivesound:  int32(sfx_vilact),
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_COUNTKILL,
		},
		4: {
			Fdoomednum:    -1,
			Fspawnstate:   S_FIRE1,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_NOBLOCKMAP | MF_NOGRAVITY,
		},
		5: {
			Fdoomednum:    66,
			Fspawnstate:   S_SKEL_STND,
			Fspawnhealth:  300,
			Fseestate:     S_SKEL_RUN1,
			Fseesound:     int32(sfx_skesit),
			Freactiontime: 8,
			Fpainstate:    S_SKEL_PAIN,
			Fpainchance:   100,
			Fpainsound:    int32(sfx_popain),
			Fmeleestate:   S_SKEL_FIST1,
			Fmissilestate: S_SKEL_MISS1,
			Fdeathstate:   S_SKEL_DIE1,
			Fdeathsound:   int32(sfx_skedth),
			Fspeed:        10,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       56 * (1 << FRACBITS),
			Fmass:         500,
			Factivesound:  int32(sfx_skeact),
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_COUNTKILL,
			Fraisestate:   S_SKEL_RAISE1,
		},
		6: {
			Fdoomednum:    -1,
			Fspawnstate:   S_TRACER,
			Fspawnhealth:  1000,
			Fseesound:     int32(sfx_skeatk),
			Freactiontime: 8,
			Fdeathstate:   S_TRACEEXP1,
			Fdeathsound:   int32(sfx_barexp),
			Fspeed:        10 * (1 << FRACBITS),
			Fradius:       11 * (1 << FRACBITS),
			Fheight:       8 * (1 << FRACBITS),
			Fmass:         100,
			Fdamage:       10,
			Fflags:        MF_NOBLOCKMAP | MF_MISSILE | MF_DROPOFF | MF_NOGRAVITY,
		},
		7: {
			Fdoomednum:    -1,
			Fspawnstate:   S_SMOKE1,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_NOBLOCKMAP | MF_NOGRAVITY,
		},
		8: {
			Fdoomednum:    67,
			Fspawnstate:   S_FATT_STND,
			Fspawnhealth:  600,
			Fseestate:     S_FATT_RUN1,
			Fseesound:     int32(sfx_mansit),
			Freactiontime: 8,
			Fpainstate:    S_FATT_PAIN,
			Fpainchance:   80,
			Fpainsound:    int32(sfx_mnpain),
			Fmissilestate: S_FATT_ATK1,
			Fdeathstate:   S_FATT_DIE1,
			Fdeathsound:   int32(sfx_mandth),
			Fspeed:        8,
			Fradius:       48 * (1 << FRACBITS),
			Fheight:       64 * (1 << FRACBITS),
			Fmass:         1000,
			Factivesound:  int32(sfx_posact),
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_COUNTKILL,
			Fraisestate:   S_FATT_RAISE1,
		},
		9: {
			Fdoomednum:    -1,
			Fspawnstate:   S_FATSHOT1,
			Fspawnhealth:  1000,
			Fseesound:     int32(sfx_firsht),
			Freactiontime: 8,
			Fdeathstate:   S_FATSHOTX1,
			Fdeathsound:   int32(sfx_firxpl),
			Fspeed:        20 * (1 << FRACBITS),
			Fradius:       6 * (1 << FRACBITS),
			Fheight:       8 * (1 << FRACBITS),
			Fmass:         100,
			Fdamage:       8,
			Fflags:        MF_NOBLOCKMAP | MF_MISSILE | MF_DROPOFF | MF_NOGRAVITY,
		},
		10: {
			Fdoomednum:    65,
			Fspawnstate:   S_CPOS_STND,
			Fspawnhealth:  70,
			Fseestate:     S_CPOS_RUN1,
			Fseesound:     int32(sfx_posit2),
			Freactiontime: 8,
			Fpainstate:    S_CPOS_PAIN,
			Fpainchance:   170,
			Fpainsound:    int32(sfx_popain),
			Fmissilestate: S_CPOS_ATK1,
			Fdeathstate:   S_CPOS_DIE1,
			Fxdeathstate:  S_CPOS_XDIE1,
			Fdeathsound:   int32(sfx_podth2),
			Fspeed:        8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       56 * (1 << FRACBITS),
			Fmass:         100,
			Factivesound:  int32(sfx_posact),
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_COUNTKILL,
			Fraisestate:   S_CPOS_RAISE1,
		},
		11: {
			Fdoomednum:    3001,
			Fspawnstate:   S_TROO_STND,
			Fspawnhealth:  60,
			Fseestate:     S_TROO_RUN1,
			Fseesound:     int32(sfx_bgsit1),
			Freactiontime: 8,
			Fpainstate:    S_TROO_PAIN,
			Fpainchance:   200,
			Fpainsound:    int32(sfx_popain),
			Fmeleestate:   S_TROO_ATK1,
			Fmissilestate: S_TROO_ATK1,
			Fdeathstate:   S_TROO_DIE1,
			Fxdeathstate:  S_TROO_XDIE1,
			Fdeathsound:   int32(sfx_bgdth1),
			Fspeed:        8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       56 * (1 << FRACBITS),
			Fmass:         100,
			Factivesound:  int32(sfx_bgact),
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_COUNTKILL,
			Fraisestate:   S_TROO_RAISE1,
		},
		12: {
			Fdoomednum:    3002,
			Fspawnstate:   S_SARG_STND,
			Fspawnhealth:  150,
			Fseestate:     S_SARG_RUN1,
			Fseesound:     int32(sfx_sgtsit),
			Freactiontime: 8,
			Fattacksound:  int32(sfx_sgtatk),
			Fpainstate:    S_SARG_PAIN,
			Fpainchance:   180,
			Fpainsound:    int32(sfx_dmpain),
			Fmeleestate:   S_SARG_ATK1,
			Fdeathstate:   S_SARG_DIE1,
			Fdeathsound:   int32(sfx_sgtdth),
			Fspeed:        10,
			Fradius:       30 * (1 << FRACBITS),
			Fheight:       56 * (1 << FRACBITS),
			Fmass:         400,
			Factivesound:  int32(sfx_dmact),
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_COUNTKILL,
			Fraisestate:   S_SARG_RAISE1,
		},
		13: {
			Fdoomednum:    58,
			Fspawnstate:   S_SARG_STND,
			Fspawnhealth:  150,
			Fseestate:     S_SARG_RUN1,
			Fseesound:     int32(sfx_sgtsit),
			Freactiontime: 8,
			Fattacksound:  int32(sfx_sgtatk),
			Fpainstate:    S_SARG_PAIN,
			Fpainchance:   180,
			Fpainsound:    int32(sfx_dmpain),
			Fmeleestate:   S_SARG_ATK1,
			Fdeathstate:   S_SARG_DIE1,
			Fdeathsound:   int32(sfx_sgtdth),
			Fspeed:        10,
			Fradius:       30 * (1 << FRACBITS),
			Fheight:       56 * (1 << FRACBITS),
			Fmass:         400,
			Factivesound:  int32(sfx_dmact),
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_SHADOW | MF_COUNTKILL,
			Fraisestate:   S_SARG_RAISE1,
		},
		14: {
			Fdoomednum:    3005,
			Fspawnstate:   S_HEAD_STND,
			Fspawnhealth:  400,
			Fseestate:     S_HEAD_RUN1,
			Fseesound:     int32(sfx_cacsit),
			Freactiontime: 8,
			Fpainstate:    S_HEAD_PAIN,
			Fpainchance:   128,
			Fpainsound:    int32(sfx_dmpain),
			Fmissilestate: S_HEAD_ATK1,
			Fdeathstate:   S_HEAD_DIE1,
			Fdeathsound:   int32(sfx_cacdth),
			Fspeed:        8,
			Fradius:       31 * (1 << FRACBITS),
			Fheight:       56 * (1 << FRACBITS),
			Fmass:         400,
			Factivesound:  int32(sfx_dmact),
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_FLOAT | MF_NOGRAVITY | MF_COUNTKILL,
			Fraisestate:   S_HEAD_RAISE1,
		},
		15: {
			Fdoomednum:    3003,
			Fspawnstate:   S_BOSS_STND,
			Fspawnhealth:  1000,
			Fseestate:     S_BOSS_RUN1,
			Fseesound:     int32(sfx_brssit),
			Freactiontime: 8,
			Fpainstate:    S_BOSS_PAIN,
			Fpainchance:   50,
			Fpainsound:    int32(sfx_dmpain),
			Fmeleestate:   S_BOSS_ATK1,
			Fmissilestate: S_BOSS_ATK1,
			Fdeathstate:   S_BOSS_DIE1,
			Fdeathsound:   int32(sfx_brsdth),
			Fspeed:        8,
			Fradius:       24 * (1 << FRACBITS),
			Fheight:       64 * (1 << FRACBITS),
			Fmass:         1000,
			Factivesound:  int32(sfx_dmact),
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_COUNTKILL,
			Fraisestate:   S_BOSS_RAISE1,
		},
		16: {
			Fdoomednum:    -1,
			Fspawnstate:   S_BRBALL1,
			Fspawnhealth:  1000,
			Fseesound:     int32(sfx_firsht),
			Freactiontime: 8,
			Fdeathstate:   S_BRBALLX1,
			Fdeathsound:   int32(sfx_firxpl),
			Fspeed:        15 * (1 << FRACBITS),
			Fradius:       6 * (1 << FRACBITS),
			Fheight:       8 * (1 << FRACBITS),
			Fmass:         100,
			Fdamage:       8,
			Fflags:        MF_NOBLOCKMAP | MF_MISSILE | MF_DROPOFF | MF_NOGRAVITY,
		},
		17: {
			Fdoomednum:    69,
			Fspawnstate:   S_BOS2_STND,
			Fspawnhealth:  500,
			Fseestate:     S_BOS2_RUN1,
			Fseesound:     int32(sfx_kntsit),
			Freactiontime: 8,
			Fpainstate:    S_BOS2_PAIN,
			Fpainchance:   50,
			Fpainsound:    int32(sfx_dmpain),
			Fmeleestate:   S_BOS2_ATK1,
			Fmissilestate: S_BOS2_ATK1,
			Fdeathstate:   S_BOS2_DIE1,
			Fdeathsound:   int32(sfx_kntdth),
			Fspeed:        8,
			Fradius:       24 * (1 << FRACBITS),
			Fheight:       64 * (1 << FRACBITS),
			Fmass:         1000,
			Factivesound:  int32(sfx_dmact),
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_COUNTKILL,
			Fraisestate:   S_BOS2_RAISE1,
		},
		18: {
			Fdoomednum:    3006,
			Fspawnstate:   S_SKULL_STND,
			Fspawnhealth:  100,
			Fseestate:     S_SKULL_RUN1,
			Freactiontime: 8,
			Fattacksound:  int32(sfx_sklatk),
			Fpainstate:    S_SKULL_PAIN,
			Fpainchance:   256,
			Fpainsound:    int32(sfx_dmpain),
			Fmissilestate: S_SKULL_ATK1,
			Fdeathstate:   S_SKULL_DIE1,
			Fdeathsound:   int32(sfx_firxpl),
			Fspeed:        8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       56 * (1 << FRACBITS),
			Fmass:         50,
			Fdamage:       3,
			Factivesound:  int32(sfx_dmact),
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_FLOAT | MF_NOGRAVITY,
		},
		19: {
			Fdoomednum:    7,
			Fspawnstate:   S_SPID_STND,
			Fspawnhealth:  3000,
			Fseestate:     S_SPID_RUN1,
			Fseesound:     int32(sfx_spisit),
			Freactiontime: 8,
			Fattacksound:  int32(sfx_shotgn),
			Fpainstate:    S_SPID_PAIN,
			Fpainchance:   40,
			Fpainsound:    int32(sfx_dmpain),
			Fmissilestate: S_SPID_ATK1,
			Fdeathstate:   S_SPID_DIE1,
			Fdeathsound:   int32(sfx_spidth),
			Fspeed:        12,
			Fradius:       128 * (1 << FRACBITS),
			Fheight:       100 * (1 << FRACBITS),
			Fmass:         1000,
			Factivesound:  int32(sfx_dmact),
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_COUNTKILL,
		},
		20: {
			Fdoomednum:    68,
			Fspawnstate:   S_BSPI_STND,
			Fspawnhealth:  500,
			Fseestate:     S_BSPI_SIGHT,
			Fseesound:     int32(sfx_bspsit),
			Freactiontime: 8,
			Fpainstate:    S_BSPI_PAIN,
			Fpainchance:   128,
			Fpainsound:    int32(sfx_dmpain),
			Fmissilestate: S_BSPI_ATK1,
			Fdeathstate:   S_BSPI_DIE1,
			Fdeathsound:   int32(sfx_bspdth),
			Fspeed:        12,
			Fradius:       64 * (1 << FRACBITS),
			Fheight:       64 * (1 << FRACBITS),
			Fmass:         600,
			Factivesound:  int32(sfx_bspact),
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_COUNTKILL,
			Fraisestate:   S_BSPI_RAISE1,
		},
		21: {
			Fdoomednum:    16,
			Fspawnstate:   S_CYBER_STND,
			Fspawnhealth:  4000,
			Fseestate:     S_CYBER_RUN1,
			Fseesound:     int32(sfx_cybsit),
			Freactiontime: 8,
			Fpainstate:    S_CYBER_PAIN,
			Fpainchance:   20,
			Fpainsound:    int32(sfx_dmpain),
			Fmissilestate: S_CYBER_ATK1,
			Fdeathstate:   S_CYBER_DIE1,
			Fdeathsound:   int32(sfx_cybdth),
			Fspeed:        16,
			Fradius:       40 * (1 << FRACBITS),
			Fheight:       110 * (1 << FRACBITS),
			Fmass:         1000,
			Factivesound:  int32(sfx_dmact),
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_COUNTKILL,
		},
		22: {
			Fdoomednum:    71,
			Fspawnstate:   S_PAIN_STND,
			Fspawnhealth:  400,
			Fseestate:     S_PAIN_RUN1,
			Fseesound:     int32(sfx_pesit),
			Freactiontime: 8,
			Fpainstate:    S_PAIN_PAIN,
			Fpainchance:   128,
			Fpainsound:    int32(sfx_pepain),
			Fmissilestate: S_PAIN_ATK1,
			Fdeathstate:   S_PAIN_DIE1,
			Fdeathsound:   int32(sfx_pedth),
			Fspeed:        8,
			Fradius:       31 * (1 << FRACBITS),
			Fheight:       56 * (1 << FRACBITS),
			Fmass:         400,
			Factivesound:  int32(sfx_dmact),
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_FLOAT | MF_NOGRAVITY | MF_COUNTKILL,
			Fraisestate:   S_PAIN_RAISE1,
		},
		23: {
			Fdoomednum:    84,
			Fspawnstate:   S_SSWV_STND,
			Fspawnhealth:  50,
			Fseestate:     S_SSWV_RUN1,
			Fseesound:     int32(sfx_sssit),
			Freactiontime: 8,
			Fpainstate:    S_SSWV_PAIN,
			Fpainchance:   170,
			Fpainsound:    int32(sfx_popain),
			Fmissilestate: S_SSWV_ATK1,
			Fdeathstate:   S_SSWV_DIE1,
			Fxdeathstate:  S_SSWV_XDIE1,
			Fdeathsound:   int32(sfx_ssdth),
			Fspeed:        8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       56 * (1 << FRACBITS),
			Fmass:         100,
			Factivesound:  int32(sfx_posact),
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_COUNTKILL,
			Fraisestate:   S_SSWV_RAISE1,
		},
		24: {
			Fdoomednum:    72,
			Fspawnstate:   S_KEENSTND,
			Fspawnhealth:  100,
			Freactiontime: 8,
			Fpainstate:    S_KEENPAIN,
			Fpainchance:   256,
			Fpainsound:    int32(sfx_keenpn),
			Fdeathstate:   S_COMMKEEN,
			Fdeathsound:   int32(sfx_keendt),
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       72 * (1 << FRACBITS),
			Fmass:         10000000,
			Fflags:        MF_SOLID | MF_SPAWNCEILING | MF_NOGRAVITY | MF_SHOOTABLE | MF_COUNTKILL,
		},
		25: {
			Fdoomednum:    88,
			Fspawnstate:   S_BRAIN,
			Fspawnhealth:  250,
			Freactiontime: 8,
			Fpainstate:    S_BRAIN_PAIN,
			Fpainchance:   255,
			Fpainsound:    int32(sfx_bospn),
			Fdeathstate:   S_BRAIN_DIE1,
			Fdeathsound:   int32(sfx_bosdth),
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         10000000,
			Fflags:        MF_SOLID | MF_SHOOTABLE,
		},
		26: {
			Fdoomednum:    89,
			Fspawnstate:   S_BRAINEYE,
			Fspawnhealth:  1000,
			Fseestate:     S_BRAINEYESEE,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       32 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_NOBLOCKMAP | MF_NOSECTOR,
		},
		27: {
			Fdoomednum:    87,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       32 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_NOBLOCKMAP | MF_NOSECTOR,
		},
		28: {
			Fdoomednum:    -1,
			Fspawnstate:   S_SPAWN1,
			Fspawnhealth:  1000,
			Fseesound:     int32(sfx_bospit),
			Freactiontime: 8,
			Fdeathsound:   int32(sfx_firxpl),
			Fspeed:        10 * (1 << FRACBITS),
			Fradius:       6 * (1 << FRACBITS),
			Fheight:       32 * (1 << FRACBITS),
			Fmass:         100,
			Fdamage:       3,
			Fflags:        MF_NOBLOCKMAP | MF_MISSILE | MF_DROPOFF | MF_NOGRAVITY | MF_NOCLIP,
		},
		29: {
			Fdoomednum:    -1,
			Fspawnstate:   S_SPAWNFIRE1,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_NOBLOCKMAP | MF_NOGRAVITY,
		},
		30: {
			Fdoomednum:    2035,
			Fspawnstate:   S_BAR1,
			Fspawnhealth:  20,
			Freactiontime: 8,
			Fdeathstate:   S_BEXP,
			Fdeathsound:   int32(sfx_barexp),
			Fradius:       10 * (1 << FRACBITS),
			Fheight:       42 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID | MF_SHOOTABLE | MF_NOBLOOD,
		},
		31: {
			Fdoomednum:    -1,
			Fspawnstate:   S_TBALL1,
			Fspawnhealth:  1000,
			Fseesound:     int32(sfx_firsht),
			Freactiontime: 8,
			Fdeathstate:   S_TBALLX1,
			Fdeathsound:   int32(sfx_firxpl),
			Fspeed:        10 * (1 << FRACBITS),
			Fradius:       6 * (1 << FRACBITS),
			Fheight:       8 * (1 << FRACBITS),
			Fmass:         100,
			Fdamage:       3,
			Fflags:        MF_NOBLOCKMAP | MF_MISSILE | MF_DROPOFF | MF_NOGRAVITY,
		},
		32: {
			Fdoomednum:    -1,
			Fspawnstate:   S_RBALL1,
			Fspawnhealth:  1000,
			Fseesound:     int32(sfx_firsht),
			Freactiontime: 8,
			Fdeathstate:   S_RBALLX1,
			Fdeathsound:   int32(sfx_firxpl),
			Fspeed:        10 * (1 << FRACBITS),
			Fradius:       6 * (1 << FRACBITS),
			Fheight:       8 * (1 << FRACBITS),
			Fmass:         100,
			Fdamage:       5,
			Fflags:        MF_NOBLOCKMAP | MF_MISSILE | MF_DROPOFF | MF_NOGRAVITY,
		},
		33: {
			Fdoomednum:    -1,
			Fspawnstate:   S_ROCKET,
			Fspawnhealth:  1000,
			Fseesound:     int32(sfx_rlaunc),
			Freactiontime: 8,
			Fdeathstate:   S_EXPLODE1,
			Fdeathsound:   int32(sfx_barexp),
			Fspeed:        20 * (1 << FRACBITS),
			Fradius:       11 * (1 << FRACBITS),
			Fheight:       8 * (1 << FRACBITS),
			Fmass:         100,
			Fdamage:       20,
			Fflags:        MF_NOBLOCKMAP | MF_MISSILE | MF_DROPOFF | MF_NOGRAVITY,
		},
		34: {
			Fdoomednum:    -1,
			Fspawnstate:   S_PLASBALL,
			Fspawnhealth:  1000,
			Fseesound:     int32(sfx_plasma),
			Freactiontime: 8,
			Fdeathstate:   S_PLASEXP,
			Fdeathsound:   int32(sfx_firxpl),
			Fspeed:        25 * (1 << FRACBITS),
			Fradius:       13 * (1 << FRACBITS),
			Fheight:       8 * (1 << FRACBITS),
			Fmass:         100,
			Fdamage:       5,
			Fflags:        MF_NOBLOCKMAP | MF_MISSILE | MF_DROPOFF | MF_NOGRAVITY,
		},
		35: {
			Fdoomednum:    -1,
			Fspawnstate:   S_BFGSHOT,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fdeathstate:   S_BFGLAND,
			Fdeathsound:   int32(sfx_rxplod),
			Fspeed:        25 * (1 << FRACBITS),
			Fradius:       13 * (1 << FRACBITS),
			Fheight:       8 * (1 << FRACBITS),
			Fmass:         100,
			Fdamage:       100,
			Fflags:        MF_NOBLOCKMAP | MF_MISSILE | MF_DROPOFF | MF_NOGRAVITY,
		},
		36: {
			Fdoomednum:    -1,
			Fspawnstate:   S_ARACH_PLAZ,
			Fspawnhealth:  1000,
			Fseesound:     int32(sfx_plasma),
			Freactiontime: 8,
			Fdeathstate:   S_ARACH_PLEX,
			Fdeathsound:   int32(sfx_firxpl),
			Fspeed:        25 * (1 << FRACBITS),
			Fradius:       13 * (1 << FRACBITS),
			Fheight:       8 * (1 << FRACBITS),
			Fmass:         100,
			Fdamage:       5,
			Fflags:        MF_NOBLOCKMAP | MF_MISSILE | MF_DROPOFF | MF_NOGRAVITY,
		},
		37: {
			Fdoomednum:    -1,
			Fspawnstate:   S_PUFF1,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_NOBLOCKMAP | MF_NOGRAVITY,
		},
		38: {
			Fdoomednum:    -1,
			Fspawnstate:   S_BLOOD1,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_NOBLOCKMAP,
		},
		39: {
			Fdoomednum:    -1,
			Fspawnstate:   S_TFOG,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_NOBLOCKMAP | MF_NOGRAVITY,
		},
		40: {
			Fdoomednum:    -1,
			Fspawnstate:   S_IFOG,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_NOBLOCKMAP | MF_NOGRAVITY,
		},
		41: {
			Fdoomednum:    14,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_NOBLOCKMAP | MF_NOSECTOR,
		},
		42: {
			Fdoomednum:    -1,
			Fspawnstate:   S_BFGEXP,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_NOBLOCKMAP | MF_NOGRAVITY,
		},
		43: {
			Fdoomednum:    2018,
			Fspawnstate:   S_ARM1,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		44: {
			Fdoomednum:    2019,
			Fspawnstate:   S_ARM2,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		45: {
			Fdoomednum:    2014,
			Fspawnstate:   S_BON1,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL | MF_COUNTITEM,
		},
		46: {
			Fdoomednum:    2015,
			Fspawnstate:   S_BON2,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL | MF_COUNTITEM,
		},
		47: {
			Fdoomednum:    5,
			Fspawnstate:   S_BKEY,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL | MF_NOTDMATCH,
		},
		48: {
			Fdoomednum:    13,
			Fspawnstate:   S_RKEY,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL | MF_NOTDMATCH,
		},
		49: {
			Fdoomednum:    6,
			Fspawnstate:   S_YKEY,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL | MF_NOTDMATCH,
		},
		50: {
			Fdoomednum:    39,
			Fspawnstate:   S_YSKULL,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL | MF_NOTDMATCH,
		},
		51: {
			Fdoomednum:    38,
			Fspawnstate:   S_RSKULL,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL | MF_NOTDMATCH,
		},
		52: {
			Fdoomednum:    40,
			Fspawnstate:   S_BSKULL,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL | MF_NOTDMATCH,
		},
		53: {
			Fdoomednum:    2011,
			Fspawnstate:   S_STIM,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		54: {
			Fdoomednum:    2012,
			Fspawnstate:   S_MEDI,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		55: {
			Fdoomednum:    2013,
			Fspawnstate:   S_SOUL,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL | MF_COUNTITEM,
		},
		56: {
			Fdoomednum:    2022,
			Fspawnstate:   S_PINV,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL | MF_COUNTITEM,
		},
		57: {
			Fdoomednum:    2023,
			Fspawnstate:   S_PSTR,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL | MF_COUNTITEM,
		},
		58: {
			Fdoomednum:    2024,
			Fspawnstate:   S_PINS,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL | MF_COUNTITEM,
		},
		59: {
			Fdoomednum:    2025,
			Fspawnstate:   S_SUIT,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		60: {
			Fdoomednum:    2026,
			Fspawnstate:   S_PMAP,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL | MF_COUNTITEM,
		},
		61: {
			Fdoomednum:    2045,
			Fspawnstate:   S_PVIS,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL | MF_COUNTITEM,
		},
		62: {
			Fdoomednum:    83,
			Fspawnstate:   S_MEGA,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL | MF_COUNTITEM,
		},
		63: {
			Fdoomednum:    2007,
			Fspawnstate:   S_CLIP,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		64: {
			Fdoomednum:    2048,
			Fspawnstate:   S_AMMO,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		65: {
			Fdoomednum:    2010,
			Fspawnstate:   S_ROCK,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		66: {
			Fdoomednum:    2046,
			Fspawnstate:   S_BROK,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		67: {
			Fdoomednum:    2047,
			Fspawnstate:   S_CELL,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		68: {
			Fdoomednum:    17,
			Fspawnstate:   S_CELP,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		69: {
			Fdoomednum:    2008,
			Fspawnstate:   S_SHEL,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		70: {
			Fdoomednum:    2049,
			Fspawnstate:   S_SBOX,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		71: {
			Fdoomednum:    8,
			Fspawnstate:   S_BPAK,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		72: {
			Fdoomednum:    2006,
			Fspawnstate:   S_BFUG,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		73: {
			Fdoomednum:    2002,
			Fspawnstate:   S_MGUN,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		74: {
			Fdoomednum:    2005,
			Fspawnstate:   S_CSAW,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		75: {
			Fdoomednum:    2003,
			Fspawnstate:   S_LAUN,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		76: {
			Fdoomednum:    2004,
			Fspawnstate:   S_PLAS,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		77: {
			Fdoomednum:    2001,
			Fspawnstate:   S_SHOT,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		78: {
			Fdoomednum:    82,
			Fspawnstate:   S_SHOT2,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPECIAL,
		},
		79: {
			Fdoomednum:    85,
			Fspawnstate:   S_TECHLAMP,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		80: {
			Fdoomednum:    86,
			Fspawnstate:   S_TECH2LAMP,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		81: {
			Fdoomednum:    2028,
			Fspawnstate:   S_COLU,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		82: {
			Fdoomednum:    30,
			Fspawnstate:   S_TALLGRNCOL,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		83: {
			Fdoomednum:    31,
			Fspawnstate:   S_SHRTGRNCOL,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		84: {
			Fdoomednum:    32,
			Fspawnstate:   S_TALLREDCOL,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		85: {
			Fdoomednum:    33,
			Fspawnstate:   S_SHRTREDCOL,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		86: {
			Fdoomednum:    37,
			Fspawnstate:   S_SKULLCOL,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		87: {
			Fdoomednum:    36,
			Fspawnstate:   S_HEARTCOL,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		88: {
			Fdoomednum:    41,
			Fspawnstate:   S_EVILEYE,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		89: {
			Fdoomednum:    42,
			Fspawnstate:   S_FLOATSKULL,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		90: {
			Fdoomednum:    43,
			Fspawnstate:   S_TORCHTREE,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		91: {
			Fdoomednum:    44,
			Fspawnstate:   S_BLUETORCH,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		92: {
			Fdoomednum:    45,
			Fspawnstate:   S_GREENTORCH,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		93: {
			Fdoomednum:    46,
			Fspawnstate:   S_REDTORCH,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		94: {
			Fdoomednum:    55,
			Fspawnstate:   S_BTORCHSHRT,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		95: {
			Fdoomednum:    56,
			Fspawnstate:   S_GTORCHSHRT,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		96: {
			Fdoomednum:    57,
			Fspawnstate:   S_RTORCHSHRT,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		97: {
			Fdoomednum:    47,
			Fspawnstate:   S_STALAGTITE,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		98: {
			Fdoomednum:    48,
			Fspawnstate:   S_TECHPILLAR,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		99: {
			Fdoomednum:    34,
			Fspawnstate:   S_CANDLESTIK,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
		},
		100: {
			Fdoomednum:    35,
			Fspawnstate:   S_CANDELABRA,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		101: {
			Fdoomednum:    49,
			Fspawnstate:   S_BLOODYTWITCH,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       68 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID | MF_SPAWNCEILING | MF_NOGRAVITY,
		},
		102: {
			Fdoomednum:    50,
			Fspawnstate:   S_MEAT2,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       84 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID | MF_SPAWNCEILING | MF_NOGRAVITY,
		},
		103: {
			Fdoomednum:    51,
			Fspawnstate:   S_MEAT3,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       84 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID | MF_SPAWNCEILING | MF_NOGRAVITY,
		},
		104: {
			Fdoomednum:    52,
			Fspawnstate:   S_MEAT4,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       68 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID | MF_SPAWNCEILING | MF_NOGRAVITY,
		},
		105: {
			Fdoomednum:    53,
			Fspawnstate:   S_MEAT5,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       52 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID | MF_SPAWNCEILING | MF_NOGRAVITY,
		},
		106: {
			Fdoomednum:    59,
			Fspawnstate:   S_MEAT2,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       84 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPAWNCEILING | MF_NOGRAVITY,
		},
		107: {
			Fdoomednum:    60,
			Fspawnstate:   S_MEAT4,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       68 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPAWNCEILING | MF_NOGRAVITY,
		},
		108: {
			Fdoomednum:    61,
			Fspawnstate:   S_MEAT3,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       52 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPAWNCEILING | MF_NOGRAVITY,
		},
		109: {
			Fdoomednum:    62,
			Fspawnstate:   S_MEAT5,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       52 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPAWNCEILING | MF_NOGRAVITY,
		},
		110: {
			Fdoomednum:    63,
			Fspawnstate:   S_BLOODYTWITCH,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       68 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SPAWNCEILING | MF_NOGRAVITY,
		},
		111: {
			Fdoomednum:    22,
			Fspawnstate:   S_HEAD_DIE6,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
		},
		112: {
			Fdoomednum:    15,
			Fspawnstate:   S_PLAY_DIE7,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
		},
		113: {
			Fdoomednum:    18,
			Fspawnstate:   S_POSS_DIE5,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
		},
		114: {
			Fdoomednum:    21,
			Fspawnstate:   S_SARG_DIE6,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
		},
		115: {
			Fdoomednum:    23,
			Fspawnstate:   S_SKULL_DIE6,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
		},
		116: {
			Fdoomednum:    20,
			Fspawnstate:   S_TROO_DIE5,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
		},
		117: {
			Fdoomednum:    19,
			Fspawnstate:   S_SPOS_DIE5,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
		},
		118: {
			Fdoomednum:    10,
			Fspawnstate:   S_PLAY_XDIE9,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
		},
		119: {
			Fdoomednum:    12,
			Fspawnstate:   S_PLAY_XDIE9,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
		},
		120: {
			Fdoomednum:    28,
			Fspawnstate:   S_HEADSONSTICK,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		121: {
			Fdoomednum:    24,
			Fspawnstate:   S_GIBS,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
		},
		122: {
			Fdoomednum:    27,
			Fspawnstate:   S_HEADONASTICK,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		123: {
			Fdoomednum:    29,
			Fspawnstate:   S_HEADCANDLES,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		124: {
			Fdoomednum:    25,
			Fspawnstate:   S_DEADSTICK,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		125: {
			Fdoomednum:    26,
			Fspawnstate:   S_LIVESTICK,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		126: {
			Fdoomednum:    54,
			Fspawnstate:   S_BIGTREE,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       32 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		127: {
			Fdoomednum:    70,
			Fspawnstate:   S_BBAR1,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID,
		},
		128: {
			Fdoomednum:    73,
			Fspawnstate:   S_HANGNOGUTS,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       88 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID | MF_SPAWNCEILING | MF_NOGRAVITY,
		},
		129: {
			Fdoomednum:    74,
			Fspawnstate:   S_HANGBNOBRAIN,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       88 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID | MF_SPAWNCEILING | MF_NOGRAVITY,
		},
		130: {
			Fdoomednum:    75,
			Fspawnstate:   S_HANGTLOOKDN,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       64 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID | MF_SPAWNCEILING | MF_NOGRAVITY,
		},
		131: {
			Fdoomednum:    76,
			Fspawnstate:   S_HANGTSKULL,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       64 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID | MF_SPAWNCEILING | MF_NOGRAVITY,
		},
		132: {
			Fdoomednum:    77,
			Fspawnstate:   S_HANGTLOOKUP,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       64 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID | MF_SPAWNCEILING | MF_NOGRAVITY,
		},
		133: {
			Fdoomednum:    78,
			Fspawnstate:   S_HANGTNOBRAIN,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       16 * (1 << FRACBITS),
			Fheight:       64 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_SOLID | MF_SPAWNCEILING | MF_NOGRAVITY,
		},
		134: {
			Fdoomednum:    79,
			Fspawnstate:   S_COLONGIBS,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_NOBLOCKMAP,
		},
		135: {
			Fdoomednum:    80,
			Fspawnstate:   S_SMALLPOOL,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_NOBLOCKMAP,
		},
		136: {
			Fdoomednum:    81,
			Fspawnstate:   S_BRAINSTEM,
			Fspawnhealth:  1000,
			Freactiontime: 8,
			Fradius:       20 * (1 << FRACBITS),
			Fheight:       16 * (1 << FRACBITS),
			Fmass:         100,
			Fflags:        MF_NOBLOCKMAP,
		},
	}
}

//
// Displays the text mode ending screen after the game quits
//

func I_Endoom(endoom_data uintptr) {
}

// When an axis is within the dead zone, it is set to zero.
// This is 5% of the full range:

// Configuration variables:

// Standard default.cfg Joystick enable/disable

var usejoystick = 0

// Joystick to use, as an SDL joystick index:

var joystick_index = -1

// Which joystick axis to use for horizontal movement, and whether to
// invert the direction:

var joystick_x_axis = 0
var joystick_x_invert = 0

// Which joystick axis to use for vertical movement, and whether to
// invert the direction:

var joystick_y_axis int32 = 1
var joystick_y_invert int32 = 0

// Which joystick axis to use for strafing?

var joystick_strafe_axis = -1
var joystick_strafe_invert = 0

// C documentation
//
//	// Virtual to physical button joystick button mapping. By default this
//	// is a straight mapping.
var joystick_physical_buttons = [10]int32{
	1: 1,
	2: 2,
	3: 3,
	4: 4,
	5: 5,
	6: 6,
	7: 7,
	8: 8,
	9: 9,
}

func I_BindJoystickVariables() {
	bp := alloc(48)
	var i int32
	M_BindVariable(__ccgo_ts(18302), uintptr(unsafe.Pointer(&usejoystick)))
	M_BindVariable(__ccgo_ts(18315), uintptr(unsafe.Pointer(&joystick_index)))
	M_BindVariable(__ccgo_ts(18330), uintptr(unsafe.Pointer(&joystick_x_axis)))
	M_BindVariable(__ccgo_ts(18346), uintptr(unsafe.Pointer(&joystick_y_axis)))
	M_BindVariable(__ccgo_ts(18362), uintptr(unsafe.Pointer(&joystick_strafe_axis)))
	M_BindVariable(__ccgo_ts(18383), uintptr(unsafe.Pointer(&joystick_x_invert)))
	M_BindVariable(__ccgo_ts(18401), uintptr(unsafe.Pointer(&joystick_y_invert)))
	M_BindVariable(__ccgo_ts(18419), uintptr(unsafe.Pointer(&joystick_strafe_invert)))
	i = 0
	for {
		if i >= int32(NUM_VIRTUAL_BUTTONS) {
			break
		}
		M_snprintf(bp, 32, __ccgo_ts_str(18442), i)
		M_BindVariable(bp, uintptr(unsafe.Pointer(&joystick_physical_buttons))+uintptr(i)*4)
		goto _1
	_1:
		;
		i++
	}
}

// 1x scale doesn't really do any scaling: it just copies the buffer
// a line at a time for when pitch != SCREENWIDTH (!native_surface)

func init() {
	snd_samplerate = 44100
}

func init() {
	snd_cachesize = 64 * 1024 * 1024
}

func init() {
	snd_maxslicetime_ms = 28
}

func init() {
	snd_musiccmd = __ccgo_ts(14092)
}

// Low-level sound and music modules we are using

var sound_module *sound_module_t
var music_module *music_module_t

func init() {
	snd_musicdevice = int32(SNDDEVICE_SB)
}

func init() {
	snd_sfxdevice = int32(SNDDEVICE_SB)
}

// DOS-specific options: These are unused but should be maintained
// so that the config file can be shared between chocolate
// doom and doom.exe

var snd_sbport = 0
var snd_sbirq = 0
var snd_sbdma = 0
var snd_mport = 0

// Compiled-in sound modules:

var sound_modules = []sound_module_t{}

// Check if a sound device is in the given list of devices

func SndDeviceInList(device snddevice_t, list []snddevice_t, len1 int32) (r boolean) {
	var i int32
	i = 0
	for {
		if i >= len1 {
			break
		}
		if device == list[i] {
			return 1
		}
		goto _1
	_1:
		;
		i++
	}
	return 0
}

// Find and initialize a sound_module_t appropriate for the setting
// in snd_sfxdevice.

func InitSfxModule(use_sfx_prefix boolean) {
	for i := range sound_modules {
		s := &sound_modules[i]
		// Is the sfx device in the list of devices supported by
		// this module?
		if SndDeviceInList(snd_sfxdevice, s.Fsound_devices, s.Fnum_sound_devices) != 0 {
			// Initialize the module
			if s.FInit(use_sfx_prefix) != 0 {
				sound_module = s
				return
			}
		}
	}
}

// Initialize music according to snd_musicdevice.

func InitMusicModule() {
}

//
// Initializes sound stuff, including volume
// Sets channels, SFX and music volume,
//  allocates channel buffer, sets S_sfx lookup.
//

func I_InitSound(use_sfx_prefix boolean) {
	var nomusic, nosfx, nosound boolean
	//!
	// @vanilla
	//
	// Disable all sound output.
	//
	nosound = booluint32(M_CheckParm(__ccgo_ts_str(18674)) > 0)
	//!
	// @vanilla
	//
	// Disable sound effects.
	//
	nosfx = booluint32(M_CheckParm(__ccgo_ts_str(18683)) > 0)
	//!
	// @vanilla
	//
	// Disable music.
	//
	nomusic = booluint32(M_CheckParm(__ccgo_ts_str(18690)) > 0)
	// Initialize the sound and music subsystems.
	if nosound == 0 && screensaver_mode == 0 {
		// This is kind of a hack. If native MIDI is enabled, set up
		// the TIMIDITY_CFG environment variable here before SDL_mixer
		// is opened.
		if nomusic == 0 && (snd_musicdevice == int32(SNDDEVICE_GENMIDI) || snd_musicdevice == int32(SNDDEVICE_GUS)) {
			//I_InitTimidityConfig();
		}
		if nosfx == 0 {
			InitSfxModule(use_sfx_prefix)
		}
		if nomusic == 0 {
			InitMusicModule()
		}
	}
}

func I_ShutdownSound() {
	if sound_module != nil {
		sound_module.FShutdown()
	}
	if music_module != nil {
		music_module.FShutdown()
	}
}

func I_GetSfxLumpNum(sfxinfo *sfxinfo_t) (r int32) {
	if sound_module != nil {
		return sound_module.FGetSfxLumpNum(sfxinfo)
	} else {
		return 0
	}
}

func I_UpdateSound() {
	if sound_module != nil {
		sound_module.FUpdate()
	}
	if music_module != nil && music_module.FPoll != nil {
		music_module.FPoll()
	}
}

func CheckVolumeSeparation(vol *int32, sep *int32) {
	if *sep < 0 {
		*sep = 0
	} else {
		if *sep > 254 {
			*sep = 254
		}
	}
	if *vol < 0 {
		*vol = 0
	} else {
		if *vol > 127 {
			*vol = 127
		}
	}
}

func I_UpdateSoundParams(channel int32, vol int32, sep int32) {
	if sound_module != nil {
		CheckVolumeSeparation(&vol, &sep)
		sound_module.FUpdateSoundParams(channel, vol, sep)
	}
}

func I_StartSound(sfxinfo *sfxinfo_t, channel int32, vol int32, sep int32) (r int32) {
	if sound_module != nil {
		CheckVolumeSeparation(&vol, &sep)
		return sound_module.FStartSound(sfxinfo, channel, vol, sep)
	}
	return 0
}

func I_StopSound(channel int32) {
	if sound_module != nil {
		sound_module.FStopSound(channel)
	}
}

func I_SoundIsPlaying(channel int32) (r boolean) {
	if sound_module != nil {
		return sound_module.FSoundIsPlaying(channel)
	}
	return 0
}

func I_PrecacheSounds(sounds []sfxinfo_t) {
	if sound_module != nil && sound_module.FCacheSounds != nil {
		sound_module.FCacheSounds(sounds)
	}
}

func I_InitMusic() {
	if music_module != nil {
		music_module.FInit()
	}
}

func I_ShutdownMusic() {
}

func I_SetMusicVolume(volume int32) {
	if music_module != nil {
		music_module.FSetMusicVolume(volume)
	}
}

func I_PauseSong() {
	if music_module != nil {
		music_module.FPauseMusic()
	}
}

func I_ResumeSong() {
	if music_module != nil {
		music_module.FResumeMusic()
	}
}

func I_RegisterSong(data uintptr, len1 int32) (r uintptr) {
	if music_module != nil {
		music_module.FRegisterSong(data, len1)
	} else {
		return uintptr(0)
	}
	return r
}

func I_UnRegisterSong(handle uintptr) {
	if music_module != nil {
		music_module.FUnRegisterSong(handle)
	}
}

func I_PlaySong(handle uintptr, looping boolean) {
	if music_module != nil {
		music_module.FPlaySong(handle, looping)
	}
}

func I_StopSong() {
	if music_module != nil {
		music_module.FStopSong()
	}
}

func I_BindSoundVariables() {
	M_BindVariable(__ccgo_ts(18699), uintptr(unsafe.Pointer(&snd_musicdevice)))
	M_BindVariable(__ccgo_ts(18715), uintptr(unsafe.Pointer(&snd_sfxdevice)))
	M_BindVariable(__ccgo_ts(18729), uintptr(unsafe.Pointer(&snd_sbport)))
	M_BindVariable(__ccgo_ts(18740), uintptr(unsafe.Pointer(&snd_sbirq)))
	M_BindVariable(__ccgo_ts(18750), uintptr(unsafe.Pointer(&snd_sbdma)))
	M_BindVariable(__ccgo_ts(18760), uintptr(unsafe.Pointer(&snd_mport)))
	M_BindVariable(__ccgo_ts(18770), uintptr(unsafe.Pointer(&snd_maxslicetime_ms)))
	M_BindVariable(__ccgo_ts(18790), uintptr(unsafe.Pointer(&snd_musiccmd)))
	M_BindVariable(__ccgo_ts(18803), uintptr(unsafe.Pointer(&snd_samplerate)))
	M_BindVariable(__ccgo_ts(18818), uintptr(unsafe.Pointer(&snd_cachesize)))
	// Before SDL_mixer version 1.2.11, MIDI music caused the game
	// to crash when it looped.  If this is an old SDL_mixer version,
	// disable MIDI.
}

const DEFAULT_RAM = 16
const DOS_MEM_DUMP_SIZE = 10
const MIN_RAM = 16

//
// This is used to get the local FILE:LINE info from CPP
// prior to really call the function in question.
//

type atexit_listentry_t struct {
	Ffunc         func()
	Frun_on_error boolean
}

var exit_funcs []atexit_listentry_t

func I_AtExit(func1 func(), run_on_error boolean) {
	exit_funcs = append(exit_funcs, atexit_listentry_t{
		Ffunc:         func1,
		Frun_on_error: run_on_error,
	})
}

// Tactile feedback function, probably used for the Logitech Cyberman

func I_Tactile(on int32, off int32, total int32) {
}

// Zone memory auto-allocation function that allocates the zone size
// by trying progressively smaller zone sizes until one is found that
// works.

func AutoAllocMemory(size *int32, default_ram int32, min_ram int32) (r uintptr) {
	var zonemem uintptr
	// Allocate the zone memory.  This loop tries progressively smaller
	// zone sizes until a size is found that can be allocated.
	// If we used the -mb command line parameter, only the parameter
	// provided is accepted.
	zonemem = uintptr(0)
	for zonemem == uintptr(0) {
		// We need a reasonable minimum amount of RAM to start.
		if default_ram < min_ram {
			I_Error(18832, default_ram)
		}
		// Try to allocate the zone memory.
		*size = default_ram * 1024 * 1024
		zonemem = xmalloc(uint64(*size))
		// Failed to allocate?  Reduce zone size until we reach a size
		// that is acceptable.
		if zonemem == uintptr(0) {
			default_ram -= 1
		}
	}
	return zonemem
}

func I_ZoneBase(size *int32) (r uintptr) {
	var default_ram, min_ram, p int32
	var zonemem uintptr
	//!
	// @arg <mb>
	//
	// Specify the heap size, in MiB (default 16).
	//
	p = M_CheckParmWithArgs(__ccgo_ts_str(18874), 1)
	if p > 0 {
		v, _ := strconv.Atoi(myargs[p+1])
		default_ram = int32(v)
		min_ram = default_ram
	} else {
		default_ram = int32(DEFAULT_RAM)
		min_ram = int32(MIN_RAM)
	}
	zonemem = AutoAllocMemory(size, default_ram, min_ram)
	fprintf_ccgo(os.Stdout, 18878, zonemem, size)
	return zonemem
}

func I_PrintBanner(msg string) {
	spaces := 35 - len(msg)/2
	for i := 0; i < spaces; i++ {
		fmt.Print(" ")
	}
	fmt.Printf("%s\n", msg)
}

func I_PrintDivider() {
	var i int32
	i = 0
	for {
		if i >= 75 {
			break
		}
		fmt.Print("=")
		goto _1
	_1:
		;
		i++
	}
	fmt.Print("\n")
}

func I_PrintStartupBanner(gamedescription string) {
	I_PrintDivider()
	I_PrintBanner(gamedescription)
	I_PrintDivider()
	fprintf_ccgo(os.Stdout, 18918)
	I_PrintDivider()
}

//
// I_ConsoleStdout
//
// Returns true if stdout is a real console, false if it is a file
//

func I_ConsoleStdout() (r boolean) {
	return 0
}

//
// I_Quit
//

func I_Quit() {
	// Run through all exit functions, from last to first
	for i := len(exit_funcs) - 1; i >= 0; i-- {
		// Call the exit function.
		exit_funcs[i].Ffunc()
	}
}

//
// I_Error
//

var already_quitting = 0

func I_Error(strIndex int, args ...any) {
	errStr := __ccgo_ts_str(strIndex)
	var exit_gui_popup boolean
	if already_quitting != 0 {
		fprintf_ccgo(os.Stderr, 19278)
	} else {
		already_quitting = 1
	}
	fmt.Fprintf(os.Stderr, errStr, args...)
	fprintf_ccgo(os.Stderr, 19324)

	debug.PrintStack()

	// Shutdown. Here might be other errors.
	for i := len(exit_funcs) - 1; i >= 0; i-- {
		// Call the exit function.

		if exit_funcs[i].Frun_on_error != 0 {
			exit_funcs[i].Ffunc()
		}
	}
	exit_gui_popup = booluint32(M_ParmExists(__ccgo_ts_str(19327)) == 0)
	// Pop up a GUI dialog box to show the error message, if the
	// game was not run from the console (and the user will
	// therefore be unable to otherwise see the message).
	if exit_gui_popup != 0 && I_ConsoleStdout() == 0 {
		// TODO: Expose error message somehow?
	}
	// abort();
	for 1 != 0 {
	}
}

//
// Read Access Violation emulation.
//
// From PrBoom+, by entryway.
//

// C:\>debug
// -d 0:0
//
// DOS 6.22:
// 0000:0000  (57 92 19 00) F4 06 70 00-(16 00)
// DOS 7.1:
// 0000:0000  (9E 0F C9 00) 65 04 70 00-(16 00)
// Win98:
// 0000:0000  (9E 0F C9 00) 65 04 70 00-(16 00)
// DOSBox under XP:
// 0000:0000  (00 00 00 F1) ?? ?? ?? 00-(07 00)

var mem_dump_dos622 = [DOS_MEM_DUMP_SIZE]uint8{0x57, 0x92, 0x19, 0x00, 0xF4, 0x06, 0x70, 0x00, 0x16, 0x00}
var mem_dump_win98 = [DOS_MEM_DUMP_SIZE]uint8{0x9e, 0x0f, 0xc9, 0x00, 0x65, 0x04, 0x70, 0x00, 0x16, 0x00}
var mem_dump_dosbox = [DOS_MEM_DUMP_SIZE]uint8{0x00, 0x00, 0x00, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00}
var mem_dump_custom [DOS_MEM_DUMP_SIZE]uint8

var dos_mem_dump []byte = mem_dump_dos622[:]

func I_GetMemoryValue(offset uint32, value uintptr, size int32) (r boolean) {
	var i, p, v2 int32
	if firsttime != 0 {
		firsttime = 0
		i = 0
		//!
		// @category compat
		// @arg <version>
		//
		// Specify DOS version to emulate for NULL pointer dereference
		// emulation.  Supported versions are: dos622, dos71, dosbox.
		// The default is to emulate DOS 7.1 (Windows 98).
		//
		p = M_CheckParmWithArgs(__ccgo_ts_str(19334), 1)
		if p > 0 {
			if strings.EqualFold(myargs[p+1], __ccgo_ts_str(19342)) {
				dos_mem_dump = mem_dump_dos622[:]
			}
			if strings.EqualFold(myargs[p+1], __ccgo_ts_str(19349)) {
				dos_mem_dump = mem_dump_win98[:]
			} else {
				if strings.EqualFold(myargs[p+1], __ccgo_ts_str(19355)) {
					dos_mem_dump = mem_dump_dosbox[:]
				} else {
					i = 0
					for {
						if i >= int32(DOS_MEM_DUMP_SIZE) {
							break
						}
						p++
						if p >= int32(len(myargs)) || myargs[p][0] == '-' {
							break
						}
						f, _ := strconv.Atoi(myargs[p])
						v2 = i
						i++
						mem_dump_custom[v2] = uint8(f)
						goto _1
					_1:
						;
						i++
					}
					dos_mem_dump = mem_dump_custom[:]
				}
			}
		}
	}
	switch size {
	case 1:
		*(*uint8)(unsafe.Pointer(value)) = dos_mem_dump[offset]
		return 1
	case 2:
		*(*uint16)(unsafe.Pointer(value)) = uint16(int32(dos_mem_dump[offset]) | int32(dos_mem_dump[offset+1])<<int32(8))
		return 1
	case 4:
		*(*uint32)(unsafe.Pointer(value)) = uint32(int32(dos_mem_dump[offset]) | int32(dos_mem_dump[offset+1])<<8 | int32(dos_mem_dump[offset+2])<<16 | int32(dos_mem_dump[offset+3])<<24)
		return 1
	}
	return 0
}

var firsttime = 1

var basetime uint32 = 0

func I_GetTicks() (r int32) {
	return int32(float64(time.Since(start_time).Milliseconds()) * dg_speed_ratio)
	//return int32(DG_GetTicksMs())
}

func I_GetTime() (r int32) {
	var ticks uint32
	ticks = uint32(I_GetTicks())
	if basetime == 0 {
		basetime = ticks
	}
	ticks -= basetime
	return int32(ticks * uint32(TICRATE) / 1000)
}

//
// Same as I_GetTime, but returns time in milliseconds
//

func I_GetTimeMS() (r int32) {
	var ticks uint32
	ticks = uint32(I_GetTicks())
	if basetime == 0 {
		basetime = ticks
	}
	return int32(ticks - basetime)
}

// Sleep for a specified number of ms

func I_Sleep(ms uint32) {
	time.Sleep(time.Duration(float64(ms)/dg_speed_ratio) * time.Millisecond)
}

//
// M_CheckParm
// Checks for the given parameter
// in the program's command line arguments.
// Returns the argument number (1 to argc-1)
// or 0 if not present
//

func M_CheckParmWithArgs(check string, num_args int32) (r int32) {
	for i := int32(1); i < int32(len(myargs))-num_args; i++ {
		if strings.EqualFold(myargs[i], check) {
			return i
		}
	}
	return 0
}

//
// M_ParmExists
//
// Returns true if the given parameter exists in the program's command
// line arguments, false if not.
//

func M_ParmExists(check string) (r boolean) {
	return booluint32(M_CheckParm(check) != 0)
}

func M_CheckParm(check string) (r int32) {
	return M_CheckParmWithArgs(check, 0)
}

func LoadResponseFile(argv_index int32) {
}

//
// Find a Response File
//

func M_FindResponseFile() {
	var i int32
	i = 1
	for {
		if i >= int32(len(myargs)) {
			break
		}
		if myargs[i][0] == '@' {
			LoadResponseFile(i)
		}
		goto _1
	_1:
		;
		i++
	}
}

const INT_MAX5 = 2147483647

const BOXTOP = 0
const BOXBOTTOM = 1
const BOXLEFT = 2
const BOXRIGHT = 3

func M_ClearBox(box *box_t) {
	box[BOXRIGHT] = -1 - 0x7fffffff
	box[BOXRIGHT] = -1 - 0x7fffffff
	box[BOXLEFT] = INT_MAX5
	box[BOXBOTTOM] = INT_MAX5
}

func M_AddToBox(box *box_t, x fixed_t, y fixed_t) {
	if x < box[BOXLEFT] {
		box[BOXLEFT] = x
	} else {
		if x > box[BOXRIGHT] {
			box[BOXRIGHT] = x
		}
	}
	if y < box[BOXBOTTOM] {
		box[BOXBOTTOM] = y
	} else {
		if y > box[BOXTOP] {
			box[BOXTOP] = y
		}
	}
}

//
// CHEAT SEQUENCE PACKAGE
//

// C documentation
//
//	//
//	// Called in st_stuff module, which handles the input.
//	// Returns a 1 if the cheat was successful, 0 if failed.
//	//
func cht_CheckCheat(cht *cheatseq_t, key int8) (r int32) {
	var v1 int32
	// if we make a short sequence on a cheat with parameters, this
	// will not work in vanilla doom.  behave the same.
	if cht.Fparameter_chars > 0 && xstrlen(uintptr(unsafe.Pointer(&cht.Fsequence[0]))) < cht.Fsequence_len {
		return 0
	}
	if cht.Fchars_read < xstrlen(uintptr(unsafe.Pointer(&cht.Fsequence[0]))) {
		// still reading characters from the cheat code
		// and verifying.  reset back to the beginning
		// if a key is wrong
		if int32(key) == int32(*(*int8)(unsafe.Pointer(&cht.Fsequence[cht.Fchars_read]))) {
			cht.Fchars_read++
		} else {
			cht.Fchars_read = 0
		}
		cht.Fparam_chars_read = 0
	} else {
		if cht.Fparam_chars_read < cht.Fparameter_chars {
			// we have passed the end of the cheat sequence and are
			// entering parameters now
			cht.Fparameter_buf[cht.Fparam_chars_read] = byte(key)
			cht.Fparam_chars_read++
		}
	}
	if cht.Fchars_read >= xstrlen(uintptr(unsafe.Pointer(&cht.Fsequence[0]))) && cht.Fparam_chars_read >= cht.Fparameter_chars {
		v1 = 0
		cht.Fparam_chars_read = v1
		cht.Fchars_read = uint64(v1)
		return 1
	}
	// cheat not matched yet
	return 0
}

func cht_GetParam(cht *cheatseq_t, buffer []byte) {
	copy(buffer, cht.Fparameter_buf[:cht.Fparameter_chars])
}

const EISDIR = 21
const KEY_BACKSPACE3 = 127
const KEY_DOWNARROW1 = 175
const KEY_LEFTARROW1 = 172
const KEY_MINUS1 = 45
const KEY_PAUSE1 = 255
const KEY_RIGHTARROW1 = 174
const KEY_UPARROW1 = 173

// Default filenames for configuration files.

var default_main_config string
var default_extra_config string

type default_type_t = int32

const DEFAULT_INT_HEX = 1
const DEFAULT_STRING = 2
const DEFAULT_FLOAT = 3
const DEFAULT_KEY = 4

type default_t struct {
	Fname                uintptr
	Flocation            uintptr
	Ftype1               default_type_t
	Funtranslated        int32
	Foriginal_translated int32
	Fbound               boolean
}

type default_collection_t struct {
	Fdefaults    []default_t
	Fnumdefaults int32
	Ffilename    string
}

//! @begin_config_file default

var doom_defaults_list = [76]default_t{
	0: {
		Fname: __ccgo_ts(1506),
	},
	1: {
		Fname: __ccgo_ts(1524),
	},
	2: {
		Fname: __ccgo_ts(1535),
	},
	3: {
		Fname: __ccgo_ts(19402),
	},
	4: {
		Fname: __ccgo_ts(19412),
	},
	5: {
		Fname: __ccgo_ts(1548),
	},
	6: {
		Fname:  __ccgo_ts(19425),
		Ftype1: int32(DEFAULT_KEY),
	},
	7: {
		Fname:  __ccgo_ts(19435),
		Ftype1: int32(DEFAULT_KEY),
	},
	8: {
		Fname:  __ccgo_ts(19444),
		Ftype1: int32(DEFAULT_KEY),
	},
	9: {
		Fname:  __ccgo_ts(19451),
		Ftype1: int32(DEFAULT_KEY),
	},
	10: {
		Fname:  __ccgo_ts(19460),
		Ftype1: int32(DEFAULT_KEY),
	},
	11: {
		Fname:  __ccgo_ts(19475),
		Ftype1: int32(DEFAULT_KEY),
	},
	12: {
		Fname:  __ccgo_ts(19491),
		Ftype1: int32(DEFAULT_KEY),
	},
	13: {
		Fname:  __ccgo_ts(19505),
		Ftype1: int32(DEFAULT_KEY),
	},
	14: {
		Fname:  __ccgo_ts(19514),
		Ftype1: int32(DEFAULT_KEY),
	},
	15: {
		Fname:  __ccgo_ts(19524),
		Ftype1: int32(DEFAULT_KEY),
	},
	16: {
		Fname:  __ccgo_ts(19536),
		Ftype1: int32(DEFAULT_KEY),
	},
	17: {
		Fname:  __ccgo_ts(19550),
		Ftype1: int32(DEFAULT_KEY),
	},
	18: {
		Fname:  __ccgo_ts(19561),
		Ftype1: int32(DEFAULT_KEY),
	},
	19: {
		Fname:  __ccgo_ts(19574),
		Ftype1: int32(DEFAULT_KEY),
	},
	20: {
		Fname:  __ccgo_ts(19589),
		Ftype1: int32(DEFAULT_KEY),
	},
	21: {
		Fname:  __ccgo_ts(19602),
		Ftype1: int32(DEFAULT_KEY),
	},
	22: {
		Fname:  __ccgo_ts(19614),
		Ftype1: int32(DEFAULT_KEY),
	},
	23: {
		Fname:  __ccgo_ts(19625),
		Ftype1: int32(DEFAULT_KEY),
	},
	24: {
		Fname:  __ccgo_ts(19636),
		Ftype1: int32(DEFAULT_KEY),
	},
	25: {
		Fname:  __ccgo_ts(19648),
		Ftype1: int32(DEFAULT_KEY),
	},
	26: {
		Fname:  __ccgo_ts(19659),
		Ftype1: int32(DEFAULT_KEY),
	},
	27: {
		Fname:  __ccgo_ts(19671),
		Ftype1: int32(DEFAULT_KEY),
	},
	28: {
		Fname:  __ccgo_ts(19684),
		Ftype1: int32(DEFAULT_KEY),
	},
	29: {
		Fname:  __ccgo_ts(19696),
		Ftype1: int32(DEFAULT_KEY),
	},
	30: {
		Fname:  __ccgo_ts(19709),
		Ftype1: int32(DEFAULT_KEY),
	},
	31: {
		Fname:  __ccgo_ts(19725),
		Ftype1: int32(DEFAULT_KEY),
	},
	32: {
		Fname:  __ccgo_ts(19736),
		Ftype1: int32(DEFAULT_KEY),
	},
	33: {
		Fname:  __ccgo_ts(19748),
		Ftype1: int32(DEFAULT_KEY),
	},
	34: {
		Fname:  __ccgo_ts(19759),
		Ftype1: int32(DEFAULT_KEY),
	},
	35: {
		Fname:  __ccgo_ts(19772),
		Ftype1: int32(DEFAULT_KEY),
	},
	36: {
		Fname:  __ccgo_ts(19781),
		Ftype1: int32(DEFAULT_KEY),
	},
	37: {
		Fname:  __ccgo_ts(19789),
		Ftype1: int32(DEFAULT_KEY),
	},
	38: {
		Fname:  __ccgo_ts(19800),
		Ftype1: int32(DEFAULT_KEY),
	},
	39: {
		Fname: __ccgo_ts(19810),
	},
	40: {
		Fname: __ccgo_ts(19820),
	},
	41: {
		Fname: __ccgo_ts(19832),
	},
	42: {
		Fname: __ccgo_ts(19846),
	},
	43: {
		Fname: __ccgo_ts(19861),
	},
	44: {
		Fname: __ccgo_ts(18302),
	},
	45: {
		Fname: __ccgo_ts(19873),
	},
	46: {
		Fname: __ccgo_ts(19883),
	},
	47: {
		Fname: __ccgo_ts(19895),
	},
	48: {
		Fname: __ccgo_ts(19904),
	},
	49: {
		Fname: __ccgo_ts(19915),
	},
	50: {
		Fname: __ccgo_ts(1562),
	},
	51: {
		Fname: __ccgo_ts(19925),
	},
	52: {
		Fname: __ccgo_ts(1575),
	},
	53: {
		Fname: __ccgo_ts(1587),
	},
	54: {
		Fname: __ccgo_ts(18699),
	},
	55: {
		Fname: __ccgo_ts(18715),
	},
	56: {
		Fname: __ccgo_ts(18729),
	},
	57: {
		Fname: __ccgo_ts(18740),
	},
	58: {
		Fname: __ccgo_ts(18750),
	},
	59: {
		Fname: __ccgo_ts(18760),
	},
	60: {
		Fname: __ccgo_ts(19936),
	},
	61: {
		Fname:  __ccgo_ts(19945),
		Ftype1: int32(DEFAULT_STRING),
	},
	62: {
		Fname: __ccgo_ts(19953),
	},
	63: {
		Fname:  __ccgo_ts(19964),
		Ftype1: int32(DEFAULT_STRING),
	},
	64: {
		Fname:  __ccgo_ts(19974),
		Ftype1: int32(DEFAULT_STRING),
	},
	65: {
		Fname:  __ccgo_ts(19983),
		Ftype1: int32(DEFAULT_STRING),
	},
	66: {
		Fname:  __ccgo_ts(19994),
		Ftype1: int32(DEFAULT_STRING),
	},
	67: {
		Fname:  __ccgo_ts(20005),
		Ftype1: int32(DEFAULT_STRING),
	},
	68: {
		Fname:  __ccgo_ts(20016),
		Ftype1: int32(DEFAULT_STRING),
	},
	69: {
		Fname:  __ccgo_ts(20027),
		Ftype1: int32(DEFAULT_STRING),
	},
	70: {
		Fname:  __ccgo_ts(20038),
		Ftype1: int32(DEFAULT_STRING),
	},
	71: {
		Fname:  __ccgo_ts(20049),
		Ftype1: int32(DEFAULT_STRING),
	},
	72: {
		Fname:  __ccgo_ts(20060),
		Ftype1: int32(DEFAULT_STRING),
	},
	73: {
		Fname:  __ccgo_ts(20071),
		Ftype1: int32(DEFAULT_STRING),
	},
	74: {
		Fname:  __ccgo_ts(20082),
		Ftype1: int32(DEFAULT_STRING),
	},
	75: {
		Fname: __ccgo_ts(20093),
	},
}

var doom_defaults = default_collection_t{
	Fdefaults:    doom_defaults_list[:],
	Fnumdefaults: int32(len(doom_defaults_list)),
}

//! @begin_config_file extended

var extra_defaults_list = [119]default_t{
	0: {
		Fname: __ccgo_ts(20101),
	},
	1: {
		Fname: __ccgo_ts(20119),
	},
	2: {
		Fname: __ccgo_ts(20145),
	},
	3: {
		Fname: __ccgo_ts(20156),
	},
	4: {
		Fname: __ccgo_ts(20177),
	},
	5: {
		Fname: __ccgo_ts(20191),
	},
	6: {
		Fname: __ccgo_ts(20204),
	},
	7: {
		Fname: __ccgo_ts(20218),
	},
	8: {
		Fname: __ccgo_ts(20229),
	},
	9: {
		Fname: __ccgo_ts(20239),
	},
	10: {
		Fname:  __ccgo_ts(20246),
		Ftype1: int32(DEFAULT_FLOAT),
	},
	11: {
		Fname: __ccgo_ts(20265),
	},
	12: {
		Fname: __ccgo_ts(18803),
	},
	13: {
		Fname: __ccgo_ts(18818),
	},
	14: {
		Fname: __ccgo_ts(18770),
	},
	15: {
		Fname:  __ccgo_ts(18790),
		Ftype1: int32(DEFAULT_STRING),
	},
	16: {
		Fname:  __ccgo_ts(20281),
		Ftype1: int32(DEFAULT_INT_HEX),
	},
	17: {
		Fname: __ccgo_ts(1642),
	},
	18: {
		Fname: __ccgo_ts(20293),
	},
	19: {
		Fname: __ccgo_ts(1600),
	},
	20: {
		Fname: __ccgo_ts(1623),
	},
	21: {
		Fname: __ccgo_ts(20309),
	},
	22: {
		Fname:  __ccgo_ts(20334),
		Ftype1: int32(DEFAULT_STRING),
	},
	23: {
		Fname:  __ccgo_ts(20347),
		Ftype1: int32(DEFAULT_STRING),
	},
	24: {
		Fname: __ccgo_ts(18315),
	},
	25: {
		Fname: __ccgo_ts(18330),
	},
	26: {
		Fname: __ccgo_ts(18383),
	},
	27: {
		Fname: __ccgo_ts(18346),
	},
	28: {
		Fname: __ccgo_ts(18401),
	},
	29: {
		Fname: __ccgo_ts(18362),
	},
	30: {
		Fname: __ccgo_ts(18419),
	},
	31: {
		Fname: __ccgo_ts(20363),
	},
	32: {
		Fname: __ccgo_ts(20389),
	},
	33: {
		Fname: __ccgo_ts(20415),
	},
	34: {
		Fname: __ccgo_ts(20441),
	},
	35: {
		Fname: __ccgo_ts(20467),
	},
	36: {
		Fname: __ccgo_ts(20493),
	},
	37: {
		Fname: __ccgo_ts(20519),
	},
	38: {
		Fname: __ccgo_ts(20545),
	},
	39: {
		Fname: __ccgo_ts(20571),
	},
	40: {
		Fname: __ccgo_ts(20597),
	},
	41: {
		Fname: __ccgo_ts(20623),
	},
	42: {
		Fname: __ccgo_ts(20639),
	},
	43: {
		Fname: __ccgo_ts(20656),
	},
	44: {
		Fname: __ccgo_ts(20675),
	},
	45: {
		Fname: __ccgo_ts(20691),
	},
	46: {
		Fname: __ccgo_ts(20707),
	},
	47: {
		Fname: __ccgo_ts(20725),
	},
	48: {
		Fname: __ccgo_ts(20744),
	},
	49: {
		Fname: __ccgo_ts(20755),
	},
	50: {
		Fname: __ccgo_ts(20771),
	},
	51: {
		Fname: __ccgo_ts(20789),
	},
	52: {
		Fname: __ccgo_ts(20807),
	},
	53: {
		Fname:  __ccgo_ts(20818),
		Ftype1: int32(DEFAULT_KEY),
	},
	54: {
		Fname:  __ccgo_ts(20828),
		Ftype1: int32(DEFAULT_KEY),
	},
	55: {
		Fname:  __ccgo_ts(20846),
		Ftype1: int32(DEFAULT_KEY),
	},
	56: {
		Fname:  __ccgo_ts(20858),
		Ftype1: int32(DEFAULT_KEY),
	},
	57: {
		Fname:  __ccgo_ts(20872),
		Ftype1: int32(DEFAULT_KEY),
	},
	58: {
		Fname:  __ccgo_ts(20886),
		Ftype1: int32(DEFAULT_KEY),
	},
	59: {
		Fname:  __ccgo_ts(20901),
		Ftype1: int32(DEFAULT_KEY),
	},
	60: {
		Fname:  __ccgo_ts(20915),
		Ftype1: int32(DEFAULT_KEY),
	},
	61: {
		Fname:  __ccgo_ts(20932),
		Ftype1: int32(DEFAULT_KEY),
	},
	62: {
		Fname:  __ccgo_ts(20949),
		Ftype1: int32(DEFAULT_KEY),
	},
	63: {
		Fname:  __ccgo_ts(20964),
		Ftype1: int32(DEFAULT_KEY),
	},
	64: {
		Fname:  __ccgo_ts(20978),
		Ftype1: int32(DEFAULT_KEY),
	},
	65: {
		Fname:  __ccgo_ts(20992),
		Ftype1: int32(DEFAULT_KEY),
	},
	66: {
		Fname:  __ccgo_ts(21006),
		Ftype1: int32(DEFAULT_KEY),
	},
	67: {
		Fname:  __ccgo_ts(21022),
		Ftype1: int32(DEFAULT_KEY),
	},
	68: {
		Fname:  __ccgo_ts(21038),
		Ftype1: int32(DEFAULT_KEY),
	},
	69: {
		Fname:  __ccgo_ts(21053),
		Ftype1: int32(DEFAULT_KEY),
	},
	70: {
		Fname:  __ccgo_ts(21070),
		Ftype1: int32(DEFAULT_KEY),
	},
	71: {
		Fname:  __ccgo_ts(21088),
		Ftype1: int32(DEFAULT_KEY),
	},
	72: {
		Fname:  __ccgo_ts(21103),
		Ftype1: int32(DEFAULT_KEY),
	},
	73: {
		Fname:  __ccgo_ts(21117),
		Ftype1: int32(DEFAULT_KEY),
	},
	74: {
		Fname:  __ccgo_ts(21132),
		Ftype1: int32(DEFAULT_KEY),
	},
	75: {
		Fname:  __ccgo_ts(21140),
		Ftype1: int32(DEFAULT_KEY),
	},
	76: {
		Fname:  __ccgo_ts(21159),
		Ftype1: int32(DEFAULT_KEY),
	},
	77: {
		Fname:  __ccgo_ts(21178),
		Ftype1: int32(DEFAULT_KEY),
	},
	78: {
		Fname:  __ccgo_ts(21198),
		Ftype1: int32(DEFAULT_KEY),
	},
	79: {
		Fname:  __ccgo_ts(21213),
		Ftype1: int32(DEFAULT_KEY),
	},
	80: {
		Fname:  __ccgo_ts(21227),
		Ftype1: int32(DEFAULT_KEY),
	},
	81: {
		Fname:  __ccgo_ts(21241),
		Ftype1: int32(DEFAULT_KEY),
	},
	82: {
		Fname:  __ccgo_ts(21254),
		Ftype1: int32(DEFAULT_KEY),
	},
	83: {
		Fname:  __ccgo_ts(21267),
		Ftype1: int32(DEFAULT_KEY),
	},
	84: {
		Fname:  __ccgo_ts(21282),
		Ftype1: int32(DEFAULT_KEY),
	},
	85: {
		Fname:  __ccgo_ts(21298),
		Ftype1: int32(DEFAULT_KEY),
	},
	86: {
		Fname:  __ccgo_ts(21314),
		Ftype1: int32(DEFAULT_KEY),
	},
	87: {
		Fname:  __ccgo_ts(21329),
		Ftype1: int32(DEFAULT_KEY),
	},
	88: {
		Fname:  __ccgo_ts(21342),
		Ftype1: int32(DEFAULT_KEY),
	},
	89: {
		Fname:  __ccgo_ts(21355),
		Ftype1: int32(DEFAULT_KEY),
	},
	90: {
		Fname:  __ccgo_ts(21373),
		Ftype1: int32(DEFAULT_KEY),
	},
	91: {
		Fname:  __ccgo_ts(21385),
		Ftype1: int32(DEFAULT_KEY),
	},
	92: {
		Fname:  __ccgo_ts(21397),
		Ftype1: int32(DEFAULT_KEY),
	},
	93: {
		Fname:  __ccgo_ts(21409),
		Ftype1: int32(DEFAULT_KEY),
	},
	94: {
		Fname:  __ccgo_ts(21421),
		Ftype1: int32(DEFAULT_KEY),
	},
	95: {
		Fname:  __ccgo_ts(21433),
		Ftype1: int32(DEFAULT_KEY),
	},
	96: {
		Fname:  __ccgo_ts(21445),
		Ftype1: int32(DEFAULT_KEY),
	},
	97: {
		Fname:  __ccgo_ts(21457),
		Ftype1: int32(DEFAULT_KEY),
	},
	98: {
		Fname:  __ccgo_ts(21469),
		Ftype1: int32(DEFAULT_KEY),
	},
	99: {
		Fname:  __ccgo_ts(21484),
		Ftype1: int32(DEFAULT_KEY),
	},
	100: {
		Fname:  __ccgo_ts(21499),
		Ftype1: int32(DEFAULT_KEY),
	},
	101: {
		Fname:  __ccgo_ts(21512),
		Ftype1: int32(DEFAULT_KEY),
	},
	102: {
		Fname:  __ccgo_ts(21528),
		Ftype1: int32(DEFAULT_KEY),
	},
	103: {
		Fname:  __ccgo_ts(21547),
		Ftype1: int32(DEFAULT_KEY),
	},
	104: {
		Fname:  __ccgo_ts(21568),
		Ftype1: int32(DEFAULT_KEY),
	},
	105: {
		Fname:  __ccgo_ts(21586),
		Ftype1: int32(DEFAULT_KEY),
	},
	106: {
		Fname:  __ccgo_ts(21609),
		Ftype1: int32(DEFAULT_KEY),
	},
	107: {
		Fname:  __ccgo_ts(21622),
		Ftype1: int32(DEFAULT_KEY),
	},
	108: {
		Fname:  __ccgo_ts(21647),
		Ftype1: int32(DEFAULT_KEY),
	},
	109: {
		Fname:  __ccgo_ts(21667),
		Ftype1: int32(DEFAULT_KEY),
	},
	110: {
		Fname:  __ccgo_ts(21681),
		Ftype1: int32(DEFAULT_KEY),
	},
	111: {
		Fname:  __ccgo_ts(21695),
		Ftype1: int32(DEFAULT_KEY),
	},
	112: {
		Fname:  __ccgo_ts(21716),
		Ftype1: int32(DEFAULT_KEY),
	},
	113: {
		Fname:  __ccgo_ts(21737),
		Ftype1: int32(DEFAULT_KEY),
	},
	114: {
		Fname:  __ccgo_ts(21758),
		Ftype1: int32(DEFAULT_KEY),
	},
	115: {
		Fname:  __ccgo_ts(21779),
		Ftype1: int32(DEFAULT_KEY),
	},
	116: {
		Fname:  __ccgo_ts(21800),
		Ftype1: int32(DEFAULT_KEY),
	},
	117: {
		Fname:  __ccgo_ts(21821),
		Ftype1: int32(DEFAULT_KEY),
	},
	118: {
		Fname:  __ccgo_ts(21842),
		Ftype1: int32(DEFAULT_KEY),
	},
}

var extra_defaults = default_collection_t{
	Fdefaults:    extra_defaults_list[:],
	Fnumdefaults: int32(len(extra_defaults_list)),
}

// Search a collection for a variable

func SearchCollection(collection *default_collection_t, name uintptr) *default_t {
	var i int32
	i = 0
	for {
		if i >= collection.Fnumdefaults {
			break
		}
		if xstrcmp(name, collection.Fdefaults[i].Fname) == 0 {
			return &collection.Fdefaults[i]
		}
		goto _1
	_1:
		;
		i++
	}
	return nil
}

func SaveDefaultCollection(collection *default_collection_t) {
}

func LoadDefaultCollection(collection *default_collection_t) {
}

// Set the default filenames to use for configuration files.

func M_SetConfigFilenames(main_config string, extra_config string) {
	default_main_config = main_config
	default_extra_config = extra_config
}

//
// M_SaveDefaults
//

func M_SaveDefaults() {
	SaveDefaultCollection(&doom_defaults)
	SaveDefaultCollection(&extra_defaults)
}

//
// M_LoadDefaults
//

func M_LoadDefaults() {
	var i int32
	// check for a custom default file
	//!
	// @arg <file>
	// @vanilla
	//
	// Load main configuration from the specified file, instead of the
	// default.
	//
	i = M_CheckParmWithArgs(__ccgo_ts_str(21869), 1)
	if i != 0 {
		doom_defaults.Ffilename = myargs[i+1]
		fprintf_ccgo(os.Stdout, 21877, doom_defaults.Ffilename)
	} else {
		doom_defaults.Ffilename = configdir + default_main_config
	}
	fprintf_ccgo(os.Stdout, 21896, doom_defaults.Ffilename)
	//!
	// @arg <file>
	//
	// Load additional configuration from the specified file, instead of
	// the default.
	//
	i = M_CheckParmWithArgs(__ccgo_ts_str(21917), 1)
	if i != 0 {
		extra_defaults.Ffilename = myargs[i+1]
		fprintf_ccgo(os.Stdout, 21930, extra_defaults.Ffilename)
	} else {
		extra_defaults.Ffilename = configdir + default_extra_config
	}
	LoadDefaultCollection(&doom_defaults)
	LoadDefaultCollection(&extra_defaults)
}

// Get a configuration file variable by its name

func GetDefaultForName(name uintptr) *default_t {
	var result *default_t
	// Try the main list and the extras
	result = SearchCollection(&doom_defaults, name)
	if result == nil {
		result = SearchCollection(&extra_defaults, name)
	}
	// Not found? Internal error.
	if result == nil {
		I_Error(21968, name)
	}
	return result
}

//
// Bind a variable to a given configuration file variable, by name.
//

func M_BindVariable(name uintptr, location uintptr) {
	var variable *default_t
	variable = GetDefaultForName(name)
	variable.Flocation = location
	variable.Fbound = 1
}

// Get the path to the default configuration dir to use, if NULL
// is passed to M_SetConfigDir.

func GetDefaultConfigDir() string {
	return "."
}

//
// SetConfigDir:
//
// Sets the location of the configuration directory, where configuration
// files are stored - default.cfg, chocolate-doom.cfg, savegames, etc.
//

func M_SetConfigDir(dir string) {
	// Use the directory that was passed, or find the default.
	if dir != "" {
		configdir = dir
	} else {
		configdir = GetDefaultConfigDir()

		if configdir == "" {
			fprintf_ccgo(os.Stdout, 22005, configdir)
		}
	}
	// Make the directory if it doesn't already exist:
	M_MakeDirectory(configdir)
}

//
// Calculate the path to the directory to use to store save games.
// Creates the directory as necessary.
//

func M_GetSaveGameDir(iwadname string) string {
	var savegamedir string
	// If not "doing" a configuration directory (Windows), don't "do"
	// a savegame directory, either.
	if configdir == "" {
		savegamedir = ""
	} else {
		savegamedir = configdir + __ccgo_ts_str(1252) + __ccgo_ts_str(22043)
		M_MakeDirectory(savegamedir)
		fprintf_ccgo(os.Stdout, 22054, savegamedir)
	}
	return savegamedir
}

const KEY_EQUALS1 = 61
const KEY_FIRE1 = 163
const KEY_STRAFE_L1 = 160
const KEY_STRAFE_R1 = 161
const KEY_USE1 = 162

func init() {
	key_right = int32(KEY_RIGHTARROW1)
	key_left = int32(KEY_LEFTARROW1)
	key_up = int32(KEY_UPARROW1)
	key_down = int32(KEY_DOWNARROW1)
	key_strafeleft = int32(KEY_STRAFE_L1)
	key_straferight = int32(KEY_STRAFE_R1)
	key_fire = int32(KEY_FIRE1)
	key_use = int32(KEY_USE1)
	key_strafe = 0x80 + 0x38
	key_speed = 0x80 + 0x36
	key_flyup = 0x80 + 0x49
	key_flydown = 0x80 + 0x52
	key_flycenter = 0x80 + 0x47
	key_lookup = 0x80 + 0x51
	key_lookdown = 0x80 + 0x53
	key_lookcenter = 0x80 + 0x4f
	key_invleft = int32('[')
	key_invright = int32(']')
	key_useartifact = int32(KEY_ENTER)
	key_jump = int32('/')
	key_arti_all = int32(KEY_BACKSPACE3)
	key_arti_health = int32('\\')
	key_arti_poisonbag = int32('0')
	key_arti_blastradius = int32('9')
	key_arti_teleport = int32('8')
	key_arti_teleportother = int32('7')
	key_arti_egg = int32('6')
	key_arti_invulnerability = int32('5')
	key_usehealth = int32('h')
	key_invquery = int32('q')
	key_mission = int32('w')
	key_invpop = int32('z')
	key_invkey = int32('k')
	key_invhome = 0x80 + 0x47
	key_invend = 0x80 + 0x4f
	key_invuse = int32(KEY_ENTER)
	key_invdrop = int32(KEY_BACKSPACE3)
	mousebstrafe = 1
	mousebforward = 2
	mousebjump = -1
	mousebstrafeleft = -1
	mousebstraferight = -1
	mousebbackward = -1
	mousebuse = -1
	mousebprevweapon = -1
	mousebnextweapon = -1
	key_message_refresh = int32(KEY_ENTER)
	key_pause = int32(KEY_PAUSE1)
	key_demo_quit = int32('q')
	key_spy = 0x80 + 0x58
	key_multi_msg = int32('t')
	key_weapon1 = int32('1')
	key_weapon2 = int32('2')
	key_weapon3 = int32('3')
	key_weapon4 = int32('4')
	key_weapon5 = int32('5')
	key_weapon6 = int32('6')
	key_weapon7 = int32('7')
	key_weapon8 = int32('8')
	key_map_north = int32(KEY_UPARROW1)
	key_map_south = int32(KEY_DOWNARROW1)
	key_map_east = int32(KEY_RIGHTARROW1)
	key_map_west = int32(KEY_LEFTARROW1)
	key_map_zoomin = int32('=')
	key_map_zoomout = int32('-')
	key_map_toggle = int32(KEY_TAB)
	key_map_maxzoom = int32('0')
	key_map_follow = int32('f')
	key_map_grid = int32('g')
	key_map_mark = int32('m')
	key_map_clearmark = int32('c')
	key_menu_activate = int32(KEY_ESCAPE)
	key_menu_up = int32(KEY_UPARROW1)
	key_menu_down = int32(KEY_DOWNARROW1)
	key_menu_left = int32(KEY_LEFTARROW1)
	key_menu_right = int32(KEY_RIGHTARROW1)
	key_menu_back = int32(KEY_BACKSPACE3)
	key_menu_forward = int32(KEY_ENTER)
	key_menu_confirm = int32('y')
	key_menu_abort = int32('n')
	key_menu_help = 0x80 + 0x3b
	key_menu_save = 0x80 + 0x3c
	key_menu_load = 0x80 + 0x3d
	key_menu_volume = 0x80 + 0x3e
	key_menu_detail = 0x80 + 0x3f
	key_menu_qsave = 0x80 + 0x40
	key_menu_endgame = 0x80 + 0x41
	key_menu_messages = 0x80 + 0x42
	key_menu_qload = 0x80 + 0x43
	key_menu_quit = 0x80 + 0x44
	key_menu_gamma = 0x80 + 0x57
	key_menu_incscreen = int32(KEY_EQUALS1)
	key_menu_decscreen = int32(KEY_MINUS1)
	joybstrafe = 1
	joybuse = 3
	joybspeed = 2
	joybstrafeleft = -1
	joybstraferight = -1
	joybjump = -1
	joybprevweapon = -1
	joybnextweapon = -1
	joybmenu = -1
	dclick_use = 1
}

//
// Bind all of the common controls used by Doom and all other games.
//

func M_BindBaseControls() {
	M_BindVariable(__ccgo_ts(19425), uintptr(unsafe.Pointer(&key_right)))
	M_BindVariable(__ccgo_ts(19435), uintptr(unsafe.Pointer(&key_left)))
	M_BindVariable(__ccgo_ts(19444), uintptr(unsafe.Pointer(&key_up)))
	M_BindVariable(__ccgo_ts(19451), uintptr(unsafe.Pointer(&key_down)))
	M_BindVariable(__ccgo_ts(19460), uintptr(unsafe.Pointer(&key_strafeleft)))
	M_BindVariable(__ccgo_ts(19475), uintptr(unsafe.Pointer(&key_straferight)))
	M_BindVariable(__ccgo_ts(19772), uintptr(unsafe.Pointer(&key_fire)))
	M_BindVariable(__ccgo_ts(19781), uintptr(unsafe.Pointer(&key_use)))
	M_BindVariable(__ccgo_ts(19789), uintptr(unsafe.Pointer(&key_strafe)))
	M_BindVariable(__ccgo_ts(19800), uintptr(unsafe.Pointer(&key_speed)))
	M_BindVariable(__ccgo_ts(19820), uintptr(unsafe.Pointer(&mousebfire)))
	M_BindVariable(__ccgo_ts(19832), uintptr(unsafe.Pointer(&mousebstrafe)))
	M_BindVariable(__ccgo_ts(19846), uintptr(unsafe.Pointer(&mousebforward)))
	M_BindVariable(__ccgo_ts(19873), uintptr(unsafe.Pointer(&joybfire)))
	M_BindVariable(__ccgo_ts(19883), uintptr(unsafe.Pointer(&joybstrafe)))
	M_BindVariable(__ccgo_ts(19895), uintptr(unsafe.Pointer(&joybuse)))
	M_BindVariable(__ccgo_ts(19904), uintptr(unsafe.Pointer(&joybspeed)))
	M_BindVariable(__ccgo_ts(20656), uintptr(unsafe.Pointer(&joybmenu)))
	// Extra controls that are not in the Vanilla versions:
	M_BindVariable(__ccgo_ts(20623), uintptr(unsafe.Pointer(&joybstrafeleft)))
	M_BindVariable(__ccgo_ts(20639), uintptr(unsafe.Pointer(&joybstraferight)))
	M_BindVariable(__ccgo_ts(20707), uintptr(unsafe.Pointer(&mousebstrafeleft)))
	M_BindVariable(__ccgo_ts(20725), uintptr(unsafe.Pointer(&mousebstraferight)))
	M_BindVariable(__ccgo_ts(20744), uintptr(unsafe.Pointer(&mousebuse)))
	M_BindVariable(__ccgo_ts(20755), uintptr(unsafe.Pointer(&mousebbackward)))
	M_BindVariable(__ccgo_ts(20807), uintptr(unsafe.Pointer(&dclick_use)))
	M_BindVariable(__ccgo_ts(20818), uintptr(unsafe.Pointer(&key_pause)))
	M_BindVariable(__ccgo_ts(21647), uintptr(unsafe.Pointer(&key_message_refresh)))
}

func M_BindWeaponControls() {
	M_BindVariable(__ccgo_ts(21373), uintptr(unsafe.Pointer(&key_weapon1)))
	M_BindVariable(__ccgo_ts(21385), uintptr(unsafe.Pointer(&key_weapon2)))
	M_BindVariable(__ccgo_ts(21397), uintptr(unsafe.Pointer(&key_weapon3)))
	M_BindVariable(__ccgo_ts(21409), uintptr(unsafe.Pointer(&key_weapon4)))
	M_BindVariable(__ccgo_ts(21421), uintptr(unsafe.Pointer(&key_weapon5)))
	M_BindVariable(__ccgo_ts(21433), uintptr(unsafe.Pointer(&key_weapon6)))
	M_BindVariable(__ccgo_ts(21445), uintptr(unsafe.Pointer(&key_weapon7)))
	M_BindVariable(__ccgo_ts(21457), uintptr(unsafe.Pointer(&key_weapon8)))
	M_BindVariable(__ccgo_ts(21469), uintptr(unsafe.Pointer(&key_prevweapon)))
	M_BindVariable(__ccgo_ts(21484), uintptr(unsafe.Pointer(&key_nextweapon)))
	M_BindVariable(__ccgo_ts(20675), uintptr(unsafe.Pointer(&joybprevweapon)))
	M_BindVariable(__ccgo_ts(20691), uintptr(unsafe.Pointer(&joybnextweapon)))
	M_BindVariable(__ccgo_ts(20771), uintptr(unsafe.Pointer(&mousebprevweapon)))
	M_BindVariable(__ccgo_ts(20789), uintptr(unsafe.Pointer(&mousebnextweapon)))
}

func M_BindMapControls() {
	M_BindVariable(__ccgo_ts(21213), uintptr(unsafe.Pointer(&key_map_north)))
	M_BindVariable(__ccgo_ts(21227), uintptr(unsafe.Pointer(&key_map_south)))
	M_BindVariable(__ccgo_ts(21241), uintptr(unsafe.Pointer(&key_map_east)))
	M_BindVariable(__ccgo_ts(21254), uintptr(unsafe.Pointer(&key_map_west)))
	M_BindVariable(__ccgo_ts(21267), uintptr(unsafe.Pointer(&key_map_zoomin)))
	M_BindVariable(__ccgo_ts(21282), uintptr(unsafe.Pointer(&key_map_zoomout)))
	M_BindVariable(__ccgo_ts(21198), uintptr(unsafe.Pointer(&key_map_toggle)))
	M_BindVariable(__ccgo_ts(21298), uintptr(unsafe.Pointer(&key_map_maxzoom)))
	M_BindVariable(__ccgo_ts(21314), uintptr(unsafe.Pointer(&key_map_follow)))
	M_BindVariable(__ccgo_ts(21329), uintptr(unsafe.Pointer(&key_map_grid)))
	M_BindVariable(__ccgo_ts(21342), uintptr(unsafe.Pointer(&key_map_mark)))
	M_BindVariable(__ccgo_ts(21355), uintptr(unsafe.Pointer(&key_map_clearmark)))
}

func M_BindMenuControls() {
	M_BindVariable(__ccgo_ts(20828), uintptr(unsafe.Pointer(&key_menu_activate)))
	M_BindVariable(__ccgo_ts(20846), uintptr(unsafe.Pointer(&key_menu_up)))
	M_BindVariable(__ccgo_ts(20858), uintptr(unsafe.Pointer(&key_menu_down)))
	M_BindVariable(__ccgo_ts(20872), uintptr(unsafe.Pointer(&key_menu_left)))
	M_BindVariable(__ccgo_ts(20886), uintptr(unsafe.Pointer(&key_menu_right)))
	M_BindVariable(__ccgo_ts(20901), uintptr(unsafe.Pointer(&key_menu_back)))
	M_BindVariable(__ccgo_ts(20915), uintptr(unsafe.Pointer(&key_menu_forward)))
	M_BindVariable(__ccgo_ts(20932), uintptr(unsafe.Pointer(&key_menu_confirm)))
	M_BindVariable(__ccgo_ts(20949), uintptr(unsafe.Pointer(&key_menu_abort)))
	M_BindVariable(__ccgo_ts(20964), uintptr(unsafe.Pointer(&key_menu_help)))
	M_BindVariable(__ccgo_ts(20978), uintptr(unsafe.Pointer(&key_menu_save)))
	M_BindVariable(__ccgo_ts(20992), uintptr(unsafe.Pointer(&key_menu_load)))
	M_BindVariable(__ccgo_ts(21006), uintptr(unsafe.Pointer(&key_menu_volume)))
	M_BindVariable(__ccgo_ts(21022), uintptr(unsafe.Pointer(&key_menu_detail)))
	M_BindVariable(__ccgo_ts(21038), uintptr(unsafe.Pointer(&key_menu_qsave)))
	M_BindVariable(__ccgo_ts(21053), uintptr(unsafe.Pointer(&key_menu_endgame)))
	M_BindVariable(__ccgo_ts(21070), uintptr(unsafe.Pointer(&key_menu_messages)))
	M_BindVariable(__ccgo_ts(21088), uintptr(unsafe.Pointer(&key_menu_qload)))
	M_BindVariable(__ccgo_ts(21103), uintptr(unsafe.Pointer(&key_menu_quit)))
	M_BindVariable(__ccgo_ts(21117), uintptr(unsafe.Pointer(&key_menu_gamma)))
	M_BindVariable(__ccgo_ts(21140), uintptr(unsafe.Pointer(&key_menu_incscreen)))
	M_BindVariable(__ccgo_ts(21159), uintptr(unsafe.Pointer(&key_menu_decscreen)))
	M_BindVariable(__ccgo_ts(21178), uintptr(unsafe.Pointer(&key_menu_screenshot)))
	M_BindVariable(__ccgo_ts(21667), uintptr(unsafe.Pointer(&key_demo_quit)))
	M_BindVariable(__ccgo_ts(21132), uintptr(unsafe.Pointer(&key_spy)))
}

func M_BindChatControls(num_players uint32) {
	bp := alloc(48)
	var i uint32
	M_BindVariable(__ccgo_ts(21681), uintptr(unsafe.Pointer(&key_multi_msg)))
	i = 0
	for {
		if i >= num_players {
			break
		}
		M_snprintf(bp, 32, __ccgo_ts_str(22078), i+1)
		M_BindVariable(bp, uintptr(unsafe.Pointer(&key_multi_msgplayer))+uintptr(i)*4)
		goto _1
	_1:
		;
		i++
	}
}

//
// Apply custom patches to the default values depending on the
// platform we are running on.
//

func M_ApplyPlatformDefaults() {
	// no-op. Add your platform-specific patches here.
}

const INT_MAX7 = 2147483647

// Fixme. __USE_C_FIXED__ or something.

func FixedMul(a fixed_t, b fixed_t) (r fixed_t) {
	return int32(int64(a) * int64(b) >> int32(FRACBITS))
}

//
// FixedDiv, C version.
//

func FixedDiv(a fixed_t, b fixed_t) (r fixed_t) {
	var result int64
	var v1 int32
	if xabs(a)>>int32(14) >= xabs(b) {
		if a^b < 0 {
			v1 = -1 - 0x7fffffff
		} else {
			v1 = int32(INT_MAX7)
		}
		return v1
	} else {
		result = int64(a) << 16 / int64(b)
		return int32(result)
	}
	return r
}

const LINEHEIGHT = 16

func init() {
	mouseSensitivity = 5
	showMessages = 1
	screenblocks = 10
	gammamsg = [5]string{
		"Gamma correction OFF",
		"Gamma correction level 1",
		"Gamma correction level 2",
		"Gamma correction level 3",
		"Gamma correction level 4",
	}
}

//static boolean opldev;

// C documentation
//
//	//
//	// MENU TYPEDEFS
//	//
type menuitem_t struct {
	Fstatus   int16
	Fname     [10]int8
	Froutine  func(choice int32)
	FalphaKey int8
}

type menu_t struct {
	Fnumitems  int16
	FprevMenu  *menu_t
	Fmenuitems []menuitem_t
	Froutine   func()
	Fx         int16
	Fy         int16
	FlastOn    int16
}

func init() {
	skullName = [2]uintptr{
		0: __ccgo_ts(22100),
		1: __ccgo_ts(22109),
	}
}

const readthis = 4
const quitdoom = 5
const main_end = 6

func init() {
	MainMenu = [6]menuitem_t{
		0: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'N', 'G', 'A', 'M', 'E'},
			FalphaKey: int8('n'),
			Froutine:  M_NewGame,
		},
		1: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'O', 'P', 'T', 'I', 'O', 'N'},
			FalphaKey: int8('o'),
			Froutine:  M_Options,
		},
		2: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'L', 'O', 'A', 'D', 'G'},
			FalphaKey: int8('l'),
			Froutine:  M_LoadGame,
		},
		3: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'S', 'A', 'V', 'E', 'G'},
			FalphaKey: int8('s'),
			Froutine:  M_SaveGame,
		},
		4: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'R', 'D', 'T', 'H', 'I', 'S'},
			FalphaKey: int8('r'),
			Froutine:  M_ReadThis,
		},
		5: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'Q', 'U', 'I', 'T', 'G'},
			FalphaKey: int8('q'),
			Froutine:  M_QuitDOOM,
		},
	}
}

func init() {
	MainDef = menu_t{
		Fnumitems:  int16(main_end),
		Fmenuitems: MainMenu[:],
		Froutine:   M_DrawMainMenu,
		Fx:         97,
		Fy:         64,
	}
}

const ep_end = 4

func init() {
	EpisodeMenu = [4]menuitem_t{
		0: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'E', 'P', 'I', '1'},
			FalphaKey: int8('k'),
			Froutine:  M_Episode,
		},
		1: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'E', 'P', 'I', '2'},
			FalphaKey: int8('t'),
			Froutine:  M_Episode,
		},
		2: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'E', 'P', 'I', '3'},
			FalphaKey: int8('i'),
			Froutine:  M_Episode,
		},
		3: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'E', 'P', 'I', '4'},
			FalphaKey: int8('t'),
			Froutine:  M_Episode,
		},
	}
}

func init() {
	EpiDef = menu_t{
		Fnumitems:  int16(ep_end),
		FprevMenu:  &MainDef,
		Fmenuitems: EpisodeMenu[:],
		Froutine:   M_DrawEpisode,
		Fx:         48,
		Fy:         63,
	}
}

const hurtme = 2

// const nightmare = 4
const newg_end = 5

func init() {
	NewGameMenu = [5]menuitem_t{
		0: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'J', 'K', 'I', 'L', 'L'},
			FalphaKey: int8('i'),
			Froutine:  M_ChooseSkill,
		},
		1: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'R', 'O', 'U', 'G', 'H'},
			FalphaKey: int8('h'),
			Froutine:  M_ChooseSkill,
		},
		2: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'H', 'U', 'R', 'T'},
			FalphaKey: int8('h'),
			Froutine:  M_ChooseSkill,
		},
		3: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'U', 'L', 'T', 'R', 'A'},
			FalphaKey: int8('u'),
			Froutine:  M_ChooseSkill,
		},
		4: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'N', 'M', 'A', 'R', 'E'},
			FalphaKey: int8('n'),
			Froutine:  M_ChooseSkill,
		},
	}
}

func init() {
	NewDef = menu_t{
		Fnumitems:  int16(newg_end),
		FprevMenu:  &EpiDef,
		Fmenuitems: NewGameMenu[:],
		Froutine:   M_DrawNewGame,
		Fx:         48,
		Fy:         63,
		FlastOn:    int16(hurtme),
	}
}

const messages = 1
const detail = 2
const scrnsize = 3
const mousesens = 5
const opt_end = 8

func init() {
	OptionsMenu = [8]menuitem_t{
		0: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'E', 'N', 'D', 'G', 'A', 'M'},
			FalphaKey: int8('e'),
			Froutine:  M_EndGame,
		},
		1: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'M', 'E', 'S', 'S', 'G'},
			FalphaKey: int8('m'),
			Froutine:  M_ChangeMessages,
		},
		2: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'D', 'E', 'T', 'A', 'I', 'L'},
			FalphaKey: int8('g'),
			Froutine:  M_ChangeDetail,
		},
		3: {
			Fstatus:   2,
			Fname:     [10]int8{'M', '_', 'S', 'C', 'R', 'N', 'S', 'Z'},
			FalphaKey: int8('s'),
			Froutine:  M_SizeDisplay,
		},
		4: {
			Fstatus: int16(-1),
			Fname:   [10]int8{},
		},
		5: {
			Fstatus:   2,
			Fname:     [10]int8{'M', '_', 'M', 'S', 'E', 'N', 'S'},
			FalphaKey: int8('m'),
			Froutine:  M_ChangeSensitivity,
		},
		6: {
			Fstatus: int16(-1),
			Fname:   [10]int8{},
		},
		7: {
			Fstatus:   1,
			Fname:     [10]int8{'M', '_', 'S', 'V', 'O', 'L'},
			FalphaKey: int8('s'),
			Froutine:  M_Sound,
		},
	}
}

func init() {
	OptionsDef = menu_t{
		Fnumitems:  int16(opt_end),
		FprevMenu:  &MainDef,
		Fmenuitems: OptionsMenu[:],
		Froutine:   M_DrawOptions,
		Fx:         60,
		Fy:         37,
	}
}

const read1_end = 1

func init() {
	ReadMenu1 = [1]menuitem_t{
		0: {
			Fstatus:  1,
			Fname:    [10]int8{},
			Froutine: M_ReadThis2,
		},
	}
}

func init() {
	ReadDef1 = menu_t{
		Fnumitems:  int16(read1_end),
		FprevMenu:  &MainDef,
		Fmenuitems: ReadMenu1[:],
		Froutine:   M_DrawReadThis1,
		Fx:         280,
		Fy:         185,
	}
}

const read2_end = 1

func init() {
	ReadMenu2 = [1]menuitem_t{
		0: {
			Fstatus:  1,
			Fname:    [10]int8{},
			Froutine: M_FinishReadThis,
		},
	}
}

func init() {
	ReadDef2 = menu_t{
		Fnumitems:  int16(read2_end),
		FprevMenu:  &ReadDef1,
		Fmenuitems: ReadMenu2[:],
		Froutine:   M_DrawReadThis2,
		Fx:         330,
		Fy:         175,
	}
}

const sfx_vol = 0
const music_vol = 2
const sound_end = 4

func init() {
	SoundMenu = [4]menuitem_t{
		0: {
			Fstatus:   2,
			Fname:     [10]int8{'M', '_', 'S', 'F', 'X', 'V', 'O', 'L'},
			FalphaKey: int8('s'),
			Froutine:  M_SfxVol,
		},
		1: {
			Fstatus: int16(-1),
			Fname:   [10]int8{},
		},
		2: {
			Fstatus:   2,
			Fname:     [10]int8{'M', '_', 'M', 'U', 'S', 'V', 'O', 'L'},
			FalphaKey: int8('m'),
			Froutine:  M_MusicVol,
		},
		3: {
			Fstatus: int16(-1),
			Fname:   [10]int8{},
		},
	}
}

func init() {
	SoundDef = menu_t{
		Fnumitems:  int16(sound_end),
		FprevMenu:  &OptionsDef,
		Fmenuitems: SoundMenu[:],
		Froutine:   M_DrawSound,
		Fx:         80,
		Fy:         64,
	}
}

const load_end = 6

func init() {
	LoadMenu = [6]menuitem_t{
		0: {
			Fstatus:   1,
			Fname:     [10]int8{},
			FalphaKey: int8('1'),
			Froutine:  M_LoadSelect,
		},
		1: {
			Fstatus:   1,
			Fname:     [10]int8{},
			FalphaKey: int8('2'),
			Froutine:  M_LoadSelect,
		},
		2: {
			Fstatus:   1,
			Fname:     [10]int8{},
			FalphaKey: int8('3'),
			Froutine:  M_LoadSelect,
		},
		3: {
			Fstatus:   1,
			Fname:     [10]int8{},
			FalphaKey: int8('4'),
			Froutine:  M_LoadSelect,
		},
		4: {
			Fstatus:   1,
			Fname:     [10]int8{},
			FalphaKey: int8('5'),
			Froutine:  M_LoadSelect,
		},
		5: {
			Fstatus:   1,
			Fname:     [10]int8{},
			FalphaKey: int8('6'),
			Froutine:  M_LoadSelect,
		},
	}
}

func init() {
	LoadDef = menu_t{
		Fnumitems:  int16(load_end),
		FprevMenu:  &MainDef,
		Fmenuitems: LoadMenu[:],
		Froutine:   M_DrawLoad,
		Fx:         80,
		Fy:         54,
	}
}

func init() {
	SaveMenu = [6]menuitem_t{
		0: {
			Fstatus:   1,
			Fname:     [10]int8{},
			FalphaKey: int8('1'),
			Froutine:  M_SaveSelect,
		},
		1: {
			Fstatus:   1,
			Fname:     [10]int8{},
			FalphaKey: int8('2'),
			Froutine:  M_SaveSelect,
		},
		2: {
			Fstatus:   1,
			Fname:     [10]int8{},
			FalphaKey: int8('3'),
			Froutine:  M_SaveSelect,
		},
		3: {
			Fstatus:   1,
			Fname:     [10]int8{},
			FalphaKey: int8('4'),
			Froutine:  M_SaveSelect,
		},
		4: {
			Fstatus:   1,
			Fname:     [10]int8{},
			FalphaKey: int8('5'),
			Froutine:  M_SaveSelect,
		},
		5: {
			Fstatus:   1,
			Fname:     [10]int8{},
			FalphaKey: int8('6'),
			Froutine:  M_SaveSelect,
		},
	}
}

func init() {
	SaveDef = menu_t{
		Fnumitems:  int16(load_end),
		FprevMenu:  &MainDef,
		Fmenuitems: SaveMenu[:],
		Froutine:   M_DrawSave,
		Fx:         80,
		Fy:         54,
	}
}

// C documentation
//
//	//
//	// M_ReadSaveStrings
//	//  read the strings from the savegame files
//	//
func M_ReadSaveStrings() {
	var i int32
	i = 0
	for {
		var thisString [SAVESTRINGSIZE]byte
		if i >= int32(load_end) {
			break
		}
		var err error
		handle, err := os.Open(P_SaveGameFile(i))
		if err != nil {
			savegamestrings[i] = __ccgo_ts_str(22118)
			LoadMenu[i].Fstatus = 0
			goto _1
		}

		handle.Read(thisString[:])
		savegamestrings[i] = gostring_bytes(thisString[:])
		handle.Close()
		LoadMenu[i].Fstatus = 1
		goto _1
	_1:
		;
		i++
	}
}

// C documentation
//
//	//
//	// M_LoadGame & Cie.
//	//
func M_DrawLoad() {
	var i int32
	V_DrawPatchDirect(72, 28, W_CacheLumpNameT(__ccgo_ts(22129), int32(PU_CACHE)))
	i = 0
	for {
		if i >= int32(load_end) {
			break
		}
		M_DrawSaveLoadBorder(int32(LoadDef.Fx), int32(LoadDef.Fy)+int32(LINEHEIGHT)*i)
		M_WriteText(int32(LoadDef.Fx), int32(LoadDef.Fy)+int32(LINEHEIGHT)*i, savegamestrings[i])
		goto _1
	_1:
		;
		i++
	}
}

// C documentation
//
//	//
//	// Draw border for the savegame description
//	//
func M_DrawSaveLoadBorder(x int32, y int32) {
	var i int32
	V_DrawPatchDirect(x-int32(8), y+int32(7), W_CacheLumpNameT(__ccgo_ts(22137), int32(PU_CACHE)))
	i = 0
	for {
		if i >= 24 {
			break
		}
		V_DrawPatchDirect(x, y+int32(7), W_CacheLumpNameT(__ccgo_ts(22146), int32(PU_CACHE)))
		x += 8
		goto _1
	_1:
		;
		i++
	}
	V_DrawPatchDirect(x, y+int32(7), W_CacheLumpNameT(__ccgo_ts(22155), int32(PU_CACHE)))
}

// C documentation
//
//	//
//	// User wants to load this game
//	//
func M_LoadSelect(choice int32) {
	G_LoadGame(P_SaveGameFile(choice))
	M_ClearMenus()
}

// C documentation
//
//	//
//	// Selected from DOOM menu
//	//
func M_LoadGame(choice int32) {
	if netgame != 0 {
		M_StartMessage(__ccgo_ts_str(22164), nil, 0)
		return
	}
	M_SetupNextMenu(&LoadDef)
	M_ReadSaveStrings()
}

// C documentation
//
//	//
//	//  M_SaveGame & Cie.
//	//
func M_DrawSave() {
	var i int32
	V_DrawPatchDirect(72, 28, W_CacheLumpNameT(__ccgo_ts(22217), int32(PU_CACHE)))
	i = 0
	for {
		if i >= int32(load_end) {
			break
		}
		M_DrawSaveLoadBorder(int32(LoadDef.Fx), int32(LoadDef.Fy)+int32(LINEHEIGHT)*i)
		M_WriteText(int32(LoadDef.Fx), int32(LoadDef.Fy)+int32(LINEHEIGHT)*i, savegamestrings[i])
		goto _1
	_1:
		;
		i++
	}
	if saveStringEnter != 0 {
		i = M_StringWidth(savegamestrings[saveSlot])
		M_WriteText(int32(LoadDef.Fx)+i, int32(LoadDef.Fy)+int32(LINEHEIGHT)*saveSlot, __ccgo_ts_str(22225))
	}
}

// C documentation
//
//	//
//	// M_Responder calls this when user is finished
//	//
func M_DoSave(slot int32) {
	G_SaveGame(slot, savegamestrings[slot])
	M_ClearMenus()
	// PICK QUICKSAVE SLOT YET?
	if quickSaveSlot == -int32(2) {
		quickSaveSlot = slot
	}
}

// C documentation
//
//	//
//	// User wants to save. Start string input for M_Responder
//	//
func M_SaveSelect(choice int32) {
	// we are going to be intercepting all chars
	saveStringEnter = 1
	saveSlot = choice
	saveOldString = savegamestrings[choice]
	if strings.EqualFold(savegamestrings[choice], __ccgo_ts_str(22118)) {
		savegamestrings[choice] = ""
	}
	saveCharIndex = len(savegamestrings[choice])
}

// C documentation
//
//	//
//	// Selected from DOOM menu
//	//
func M_SaveGame(choice int32) {
	if usergame == 0 {
		M_StartMessage(__ccgo_ts_str(22227), nil, 0)
		return
	}
	if gamestate != GS_LEVEL {
		return
	}
	M_SetupNextMenu(&SaveDef)
	M_ReadSaveStrings()
}

func M_QuickSaveResponse(key int32) {
	if key == key_menu_confirm {
		M_DoSave(quickSaveSlot)
		S_StartSound(nil, int32(sfx_swtchx))
	}
}

func M_QuickSave() {
	if usergame == 0 {
		S_StartSound(nil, int32(sfx_oof))
		return
	}
	if gamestate != GS_LEVEL {
		return
	}
	if quickSaveSlot < 0 {
		M_StartControlPanel()
		M_ReadSaveStrings()
		M_SetupNextMenu(&SaveDef)
		quickSaveSlot = -int32(2) // means to pick a slot now
		return
	}
	tempstring := fmt.Sprintf(__ccgo_ts_str(22279), savegamestrings[quickSaveSlot])
	M_StartMessage(tempstring, M_QuickSaveResponse, 1)
}

// C documentation
//
//	//
//	// M_QuickLoad
//	//
func M_QuickLoadResponse(key int32) {
	if key == key_menu_confirm {
		M_LoadSelect(quickSaveSlot)
		S_StartSound(nil, int32(sfx_swtchx))
	}
}

func M_QuickLoad() {
	if netgame != 0 {
		M_StartMessage(__ccgo_ts_str(22332), nil, 0)
		return
	}
	if quickSaveSlot < 0 {
		M_StartMessage(__ccgo_ts_str(22384), nil, 0)
		return
	}
	tempstring := fmt.Sprintf(__ccgo_ts_str(22439), savegamestrings[quickSaveSlot])
	M_StartMessage(tempstring, M_QuickLoadResponse, 1)
}

// C documentation
//
//	//
//	// Read This Menus
//	// Had a "quick hack to fix romero bug"
//	//
func M_DrawReadThis1() {
	var lumpname uintptr
	var skullx, skully int32
	lumpname = __ccgo_ts(1911)
	skullx = 330
	skully = 175
	inhelpscreens = 1
	// Different versions of Doom 1.9 work differently
	switch gameversion {
	case exe_doom_1_666:
		fallthrough
	case exe_doom_1_7:
		fallthrough
	case exe_doom_1_8:
		fallthrough
	case exe_doom_1_9:
		fallthrough
	case exe_hacx:
		if gamemode == commercial {
			// Doom 2
			lumpname = __ccgo_ts(22501)
			skullx = 330
			skully = 165
		} else {
			// Doom 1
			// HELP2 is the first screen shown in Doom 1
			lumpname = __ccgo_ts(1924)
			skullx = 280
			skully = 185
		}
	case exe_ultimate:
		fallthrough
	case exe_chex:
		// Ultimate Doom always displays "HELP1".
		// Chex Quest version also uses "HELP1", even though it is based
		// on Final Doom.
		lumpname = __ccgo_ts(22506)
	case exe_final:
		fallthrough
	case exe_final2:
		// Final Doom always displays "HELP".
		lumpname = __ccgo_ts(22501)
	default:
		I_Error(22512, 0)
		break
	}
	lumpname = lumpname
	V_DrawPatchDirect(0, 0, W_CacheLumpNameT(lumpname, int32(PU_CACHE)))
	ReadDef1.Fx = int16(skullx)
	ReadDef1.Fy = int16(skully)
}

// C documentation
//
//	//
//	// Read This Menus - optional second page.
//	//
func M_DrawReadThis2() {
	inhelpscreens = 1
	// We only ever draw the second page if this is
	// gameversion == exe_doom_1_9 and gamemode == registered
	V_DrawPatchDirect(0, 0, W_CacheLumpNameT(__ccgo_ts(22506), int32(PU_CACHE)))
}

// C documentation
//
//	//
//	// Change Sfx & Music volumes
//	//
func M_DrawSound() {
	V_DrawPatchDirect(60, 38, W_CacheLumpNameT(__ccgo_ts(22535), int32(PU_CACHE)))
	M_DrawThermo(int32(SoundDef.Fx), int32(SoundDef.Fy)+LINEHEIGHT*(int32(sfx_vol)+1), 16, sfxVolume)
	M_DrawThermo(int32(SoundDef.Fx), int32(SoundDef.Fy)+LINEHEIGHT*(int32(music_vol)+1), 16, musicVolume)
}

func M_Sound(choice int32) {
	M_SetupNextMenu(&SoundDef)
}

func M_SfxVol(choice int32) {
	switch choice {
	case 0:
		if sfxVolume != 0 {
			sfxVolume--
		}
	case 1:
		if sfxVolume < 15 {
			sfxVolume++
		}
		break
	}
	S_SetSfxVolume(sfxVolume * int32(8))
}

func M_MusicVol(choice int32) {
	switch choice {
	case 0:
		if musicVolume != 0 {
			musicVolume--
		}
	case 1:
		if musicVolume < 15 {
			musicVolume++
		}
		break
	}
	S_SetMusicVolume(musicVolume * int32(8))
}

// C documentation
//
//	//
//	// M_DrawMainMenu
//	//
func M_DrawMainMenu() {
	V_DrawPatchDirect(94, 2, W_CacheLumpNameT(__ccgo_ts(22542), int32(PU_CACHE)))
}

// C documentation
//
//	//
//	// M_NewGame
//	//
func M_DrawNewGame() {
	V_DrawPatchDirect(96, 14, W_CacheLumpNameT(__ccgo_ts(22549), int32(PU_CACHE)))
	V_DrawPatchDirect(54, 38, W_CacheLumpNameT(__ccgo_ts(22556), int32(PU_CACHE)))
}

func M_NewGame(choice int32) {
	if netgame != 0 && demoplayback == 0 {
		M_StartMessage(__ccgo_ts_str(22564), nil, 0)
		return
	}
	// Chex Quest disabled the episode select screen, as did Doom II.
	if gamemode == commercial || gameversion == exe_chex {
		M_SetupNextMenu(&NewDef)
	} else {
		M_SetupNextMenu(&EpiDef)
	}
}

func M_DrawEpisode() {
	V_DrawPatchDirect(54, 38, W_CacheLumpNameT(__ccgo_ts(22630), int32(PU_CACHE)))
}

func M_VerifyNightmare(key int32) {
	if key != key_menu_confirm {
		return
	}
	G_DeferedInitNew(sk_nightmare, epi+int32(1), 1)
	M_ClearMenus()
}

func M_ChooseSkill(choice int32) {
	if skill_t(choice) == sk_nightmare {
		M_StartMessage(__ccgo_ts_str(22639), M_VerifyNightmare, 1)
		return
	}
	G_DeferedInitNew(skill_t(choice), epi+int32(1), 1)
	M_ClearMenus()
}

func M_Episode(choice int32) {
	if gamemode == shareware && choice != 0 {
		M_StartMessage(__ccgo_ts_str(22711), nil, 0)
		M_SetupNextMenu(&ReadDef1)
		return
	}
	// Yet another hack...
	if gamemode == registered && choice > 2 {
		fprintf_ccgo(os.Stderr, 22803)
		choice = 0
	}
	epi = choice
	M_SetupNextMenu(&NewDef)
}

// C documentation
//
//	//
//	// M_Options
//	//
var detailNames = [2]uintptr{
	0: __ccgo_ts(22849),
	1: __ccgo_ts(22858),
}
var msgNames = [2]uintptr{
	0: __ccgo_ts(22866),
	1: __ccgo_ts(22875),
}

func M_DrawOptions() {
	V_DrawPatchDirect(108, 15, W_CacheLumpNameT(__ccgo_ts(22883), int32(PU_CACHE)))
	V_DrawPatchDirect(int32(OptionsDef.Fx)+int32(175), int32(OptionsDef.Fy)+LINEHEIGHT*int32(detail), W_CacheLumpNameT(detailNames[detailLevel], int32(PU_CACHE)))
	V_DrawPatchDirect(int32(OptionsDef.Fx)+int32(120), int32(OptionsDef.Fy)+LINEHEIGHT*int32(messages), W_CacheLumpNameT(msgNames[showMessages], int32(PU_CACHE)))
	M_DrawThermo(int32(OptionsDef.Fx), int32(OptionsDef.Fy)+LINEHEIGHT*(int32(mousesens)+1), 10, mouseSensitivity)
	M_DrawThermo(int32(OptionsDef.Fx), int32(OptionsDef.Fy)+LINEHEIGHT*(int32(scrnsize)+1), 9, screenSize)
}

func M_Options(choice int32) {
	M_SetupNextMenu(&OptionsDef)
}

// C documentation
//
//	//
//	//      Toggle messages on/off
//	//
func M_ChangeMessages(choice int32) {
	showMessages = 1 - showMessages
	if showMessages == 0 {
		players[consoleplayer].Fmessage = __ccgo_ts_str(22892)
	} else {
		players[consoleplayer].Fmessage = __ccgo_ts_str(22905)
	}
	message_dontfuckwithme = 1
}

// C documentation
//
//	//
//	// M_EndGame
//	//
func M_EndGameResponse(key int32) {
	if key != key_menu_confirm {
		return
	}
	currentMenu.FlastOn = itemOn
	M_ClearMenus()
	D_StartTitle()
}

func M_EndGame(choice int32) {
	if usergame == 0 {
		S_StartSound(nil, int32(sfx_oof))
		return
	}
	if netgame != 0 {
		M_StartMessage(__ccgo_ts_str(22917), nil, 0)
		return
	}
	M_StartMessage(__ccgo_ts_str(22956), M_EndGameResponse, 1)
}

// C documentation
//
//	//
//	// M_ReadThis
//	//
func M_ReadThis(choice int32) {
	M_SetupNextMenu(&ReadDef1)
}

func M_ReadThis2(choice int32) {
	// Doom 1.9 had two menus when playing Doom 1
	// All others had only one
	if gameversion <= exe_doom_1_9 && gamemode != commercial {
		M_SetupNextMenu(&ReadDef2)
	} else {
		// Close the menu
		M_FinishReadThis(0)
	}
}

func M_FinishReadThis(choice int32) {
	M_SetupNextMenu(&MainDef)
}

func init() {
	quitsounds = [8]int32{
		0: int32(sfx_pldeth),
		1: int32(sfx_dmpain),
		2: int32(sfx_popain),
		3: int32(sfx_slop),
		4: int32(sfx_telept),
		5: int32(sfx_posit1),
		6: int32(sfx_posit3),
		7: int32(sfx_sgtatk),
	}
}

func init() {
	quitsounds2 = [8]int32{
		0: int32(sfx_vilact),
		1: int32(sfx_getpow),
		2: int32(sfx_boscub),
		3: int32(sfx_slop),
		4: int32(sfx_skeswg),
		5: int32(sfx_kntdth),
		6: int32(sfx_bspact),
		7: int32(sfx_sgtatk),
	}
}

var M_QuitResponse = func(key int32) {
	if key != key_menu_confirm {
		return
	}
	if netgame == 0 {
		if gamemode == commercial {
			S_StartSound(nil, quitsounds2[gametic>>int32(2)&int32(7)])
		} else {
			S_StartSound(nil, quitsounds[gametic>>int32(2)&int32(7)])
		}
	}
	I_Quit()
}

func M_SelectEndMessage() string {
	var endmsg []string
	var v1 GameMission_t
	if gamemission == pack_chex {
		v1 = doom
	} else {
		if gamemission == pack_hacx {
			v1 = doom2
		} else {
			v1 = gamemission
		}
	}
	if v1 == doom {
		// Doom 1
		endmsg = doom1_endmsg[:]
	} else {
		// Doom 2
		endmsg = doom2_endmsg[:]
	}
	return endmsg[gametic%int32(NUM_QUITMESSAGES)]
}

func M_QuitDOOM(choice int32) {
	endstring = fmt.Sprintf(__ccgo_ts_str(23010), M_SelectEndMessage())
	M_StartMessage(endstring, M_QuitResponse, 1)
}

func M_ChangeSensitivity(choice int32) {
	switch choice {
	case 0:
		if mouseSensitivity != 0 {
			mouseSensitivity--
		}
	case 1:
		if mouseSensitivity < 9 {
			mouseSensitivity++
		}
		break
	}
}

func M_ChangeDetail(choice int32) {
	choice = 0
	detailLevel = 1 - detailLevel
	R_SetViewSize(screenblocks, detailLevel)
	if detailLevel == 0 {
		players[consoleplayer].Fmessage = __ccgo_ts_str(23040)
	} else {
		players[consoleplayer].Fmessage = __ccgo_ts_str(23052)
	}
}

func M_SizeDisplay(choice int32) {
	switch choice {
	case 0:
		if screenSize > 0 {
			screenblocks--
			screenSize--
		}
	case 1:
		if screenSize < 8 {
			screenblocks++
			screenSize++
		}
		break
	}
	R_SetViewSize(screenblocks, detailLevel)
}

// C documentation
//
//	//
//	//      Menu Functions
//	//
func M_DrawThermo(x int32, y int32, thermWidth int32, thermDot int32) {
	var i, xx int32
	xx = x
	V_DrawPatchDirect(xx, y, W_CacheLumpNameT(__ccgo_ts(23063), int32(PU_CACHE)))
	xx += 8
	i = 0
	for {
		if i >= thermWidth {
			break
		}
		V_DrawPatchDirect(xx, y, W_CacheLumpNameT(__ccgo_ts(23072), int32(PU_CACHE)))
		xx += 8
		goto _1
	_1:
		;
		i++
	}
	V_DrawPatchDirect(xx, y, W_CacheLumpNameT(__ccgo_ts(23081), int32(PU_CACHE)))
	V_DrawPatchDirect(x+int32(8)+thermDot*int32(8), y, W_CacheLumpNameT(__ccgo_ts(23090), int32(PU_CACHE)))
}

func M_StartMessage(string1 string, routine func(int32), input boolean) {
	messageLastMenuActive = int32(menuactive)
	messageToPrint = 1
	messageString = string1
	messageRoutine = &routine
	messageNeedsInput = input
	menuactive = 1
}

// C documentation
//
//	//
//	// Find string width from hu_font chars
//	//
func M_StringWidth(string1 string) (r int32) {
	var c, w int32
	w = 0
	for i := 0; i < len(string1); i++ {
		c = xtoupper(int32(string1[i])) - int32('!')
		if c < 0 || c >= int32('_')-int32('!')+1 {
			w += 4
		} else {
			w += int32((*patch_t)(unsafe.Pointer(hu_font[c])).Fwidth)
		}
	}
	return w
}

// C documentation
//
//	//
//	//      Find string height from hu_font chars
//	//
func M_StringHeight(string1 string) (r int32) {
	var h, height int32
	height = int32((*patch_t)(unsafe.Pointer(hu_font[0])).Fheight)
	h = height
	for i := 0; i < len(string1); i++ {
		if string1[i] == '\n' {
			h += height
		}
	}
	return h
}

// C documentation
//
//	//
//	//      Write a string using the hu_font
//	//
func M_WriteText(x int32, y int32, string1 string) {
	var c, cx, cy, w int32
	cx = x
	cy = y
	for i := 0; i < len(string1); i++ {
		c = int32(string1[i])
		if c == 0 {
			break
		}
		if c == int32('\n') {
			cx = x
			cy += 12
			continue
		}
		c = xtoupper(c) - int32('!')
		if c < 0 || c >= int32('_')-int32('!')+1 {
			cx += 4
			continue
		}
		w = int32((*patch_t)(unsafe.Pointer(hu_font[c])).Fwidth)
		if cx+w > SCREENWIDTH {
			break
		}
		V_DrawPatchDirect(cx, cy, hu_font[c])
		cx += w
	}
}

// These keys evaluate to a "null" key in Vanilla Doom that allows weird
// jumping in the menus. Preserve this behavior for accuracy.

func IsNullKey(key int32) (r boolean) {
	return booluint32(key == int32(KEY_PAUSE1) || key == 0x80+0x3a || key == 0x80+0x46 || key == 0x80+0x45)
}

//
// CONTROL PANEL
//

// C documentation
//
//	//
//	// M_Responder
//	//
func M_Responder(ev *event_t) (r boolean) {
	var ch, i, key int32
	// In testcontrols mode, none of the function keys should do anything
	// - the only key is escape to quit.
	if testcontrols != 0 {
		if ev.Ftype1 == ev_quit || ev.Ftype1 == ev_keydown && (ev.Fdata1 == key_menu_activate || ev.Fdata1 == key_menu_quit) {
			I_Quit()
			return 1
		}
		return 0
	}
	// "close" button pressed on window?
	if ev.Ftype1 == ev_quit {
		// First click on close button = bring up quit confirm message.
		// Second click on close button = confirm quit

		if menuactive != 0 && messageToPrint != 0 && messageRoutine == &M_QuitResponse {
			M_QuitResponse(key_menu_confirm)
		} else {
			S_StartSound(nil, int32(sfx_swtchn))
			M_QuitDOOM(0)
		}
		return 1
	}
	// key is the key pressed, ch is the actual character typed
	ch = 0
	key = -1
	if ev.Ftype1 == ev_joystick && joywait < I_GetTime() {
		if ev.Fdata3 < 0 {
			key = key_menu_up
			joywait = I_GetTime() + 5
		} else {
			if ev.Fdata3 > 0 {
				key = key_menu_down
				joywait = I_GetTime() + 5
			}
		}
		if ev.Fdata2 < 0 {
			key = key_menu_left
			joywait = I_GetTime() + 2
		} else {
			if ev.Fdata2 > 0 {
				key = key_menu_right
				joywait = I_GetTime() + 2
			}
		}
		if ev.Fdata1&int32(1) != 0 {
			key = key_menu_forward
			joywait = I_GetTime() + 5
		}
		if ev.Fdata1&int32(2) != 0 {
			key = key_menu_back
			joywait = I_GetTime() + 5
		}
		if joybmenu >= 0 && ev.Fdata1&(int32(1)<<joybmenu) != 0 {
			key = key_menu_activate
			joywait = I_GetTime() + 5
		}
	} else {
		if ev.Ftype1 == ev_mouse && mousewait < I_GetTime() {
			mousey1 += ev.Fdata3
			if mousey1 < lasty-int32(30) {
				key = key_menu_down
				mousewait = I_GetTime() + 5
				lasty -= 30
				mousey1 = lasty
			} else {
				if mousey1 > lasty+int32(30) {
					key = key_menu_up
					mousewait = I_GetTime() + 5
					lasty += 30
					mousey1 = lasty
				}
			}
			mousex1 += ev.Fdata2
			if mousex1 < lastx-int32(30) {
				key = key_menu_left
				mousewait = I_GetTime() + 5
				lastx -= 30
				mousex1 = lastx
			} else {
				if mousex1 > lastx+int32(30) {
					key = key_menu_right
					mousewait = I_GetTime() + 5
					lastx += 30
					mousex1 = lastx
				}
			}
			if ev.Fdata1&int32(1) != 0 {
				key = key_menu_forward
				mousewait = I_GetTime() + 15
			}
			if ev.Fdata1&int32(2) != 0 {
				key = key_menu_back
				mousewait = I_GetTime() + 15
			}
		} else {
			if ev.Ftype1 == ev_keydown {
				key = ev.Fdata1
				ch = ev.Fdata2
			}
		}
	}
	if key == -1 {
		return 0
	}
	// Save Game string input
	if saveStringEnter != 0 {
		switch key {
		case int32(KEY_BACKSPACE3):
			if saveCharIndex > 0 {
				saveCharIndex--
				savegamestrings[saveSlot] = savegamestrings[saveSlot][:saveCharIndex]
			}
		case int32(KEY_ESCAPE):
			saveStringEnter = 0
			bString := bytestring(savegamestrings[saveSlot])
			if len(bString) == 0 {
				bString = []byte{0}
			}
			oldString := bytestring(saveOldString)
			if len(oldString) == 0 {
				oldString = []byte{0}
			}
			M_StringCopy(uintptr(unsafe.Pointer(&bString[0])), uintptr(unsafe.Pointer(&oldString[0])), uint64(SAVESTRINGSIZE))
		case int32(KEY_ENTER):
			saveStringEnter = 0
			if len(savegamestrings[saveSlot]) > 0 {
				M_DoSave(saveSlot)
			}
		default:
			// This is complicated.
			// Vanilla has a bug where the shift key is ignored when entering
			// a savegame name. If vanilla_keyboard_mapping is on, we want
			// to emulate this bug by using 'data1'. But if it's turned off,
			// it implies the user doesn't care about Vanilla emulation: just
			// use the correct 'data2'.
			if vanilla_keyboard_mapping != 0 {
				ch = key
			}
			ch = xtoupper(ch)
			if ch != int32(' ') && (ch-int32('!') < 0 || ch-int32('!') >= int32('_')-int32('!')+1) {
				break
			}
			if ch >= 32 && ch <= 127 && saveCharIndex < SAVESTRINGSIZE-1 && M_StringWidth(gostring(uintptr(unsafe.Pointer(&savegamestrings[saveSlot])))) < (SAVESTRINGSIZE-2)*8 {
				savegamestrings[saveSlot] += string(ch)
				saveCharIndex++
			}
			break
		}
		return 1
	}
	// Take care of any messages that need input
	if messageToPrint != 0 {
		if messageNeedsInput != 0 {
			if key != int32(' ') && key != int32(KEY_ESCAPE) && key != key_menu_confirm && key != key_menu_abort {
				return 0
			}
		}
		menuactive = uint32(messageLastMenuActive)
		messageToPrint = 0
		if messageRoutine != nil {
			(*messageRoutine)(key)
		}
		menuactive = 0
		S_StartSound(nil, int32(sfx_swtchx))
		return 1
	}
	// F-Keys
	if menuactive == 0 {
		if key == key_menu_decscreen { // Screen size down
			if automapactive != 0 || chat_on != 0 {
				return 0
			}
			M_SizeDisplay(0)
			S_StartSound(nil, int32(sfx_stnmov))
			return 1
		} else {
			if key == key_menu_incscreen { // Screen size up
				if automapactive != 0 || chat_on != 0 {
					return 0
				}
				M_SizeDisplay(int32(1))
				S_StartSound(nil, int32(sfx_stnmov))
				return 1
			} else {
				if key == key_menu_help { // Help key
					M_StartControlPanel()
					if gamemode == retail {
						currentMenu = &ReadDef2
					} else {
						currentMenu = &ReadDef1
					}
					itemOn = 0
					S_StartSound(nil, int32(sfx_swtchn))
					return 1
				} else {
					if key == key_menu_save { // Save
						M_StartControlPanel()
						S_StartSound(nil, int32(sfx_swtchn))
						M_SaveGame(0)
						return 1
					} else {
						if key == key_menu_load { // Load
							M_StartControlPanel()
							S_StartSound(nil, int32(sfx_swtchn))
							M_LoadGame(0)
							return 1
						} else {
							if key == key_menu_volume { // Sound Volume
								M_StartControlPanel()
								currentMenu = &SoundDef
								itemOn = int16(sfx_vol)
								S_StartSound(nil, int32(sfx_swtchn))
								return 1
							} else {
								if key == key_menu_detail { // Detail toggle
									M_ChangeDetail(0)
									S_StartSound(nil, int32(sfx_swtchn))
									return 1
								} else {
									if key == key_menu_qsave { // Quicksave
										S_StartSound(nil, int32(sfx_swtchn))
										M_QuickSave()
										return 1
									} else {
										if key == key_menu_endgame { // End game
											S_StartSound(nil, int32(sfx_swtchn))
											M_EndGame(0)
											return 1
										} else {
											if key == key_menu_messages { // Toggle messages
												M_ChangeMessages(0)
												S_StartSound(nil, int32(sfx_swtchn))
												return 1
											} else {
												if key == key_menu_qload { // Quickload
													S_StartSound(nil, int32(sfx_swtchn))
													M_QuickLoad()
													return 1
												} else {
													if key == key_menu_quit { // Quit DOOM
														S_StartSound(nil, int32(sfx_swtchn))
														M_QuitDOOM(0)
														return 1
													} else {
														if key == key_menu_gamma { // gamma toggle
															usegamma++
															if usegamma > 4 {
																usegamma = 0
															}
															players[consoleplayer].Fmessage = gammamsg[usegamma]
															I_SetPalette(W_CacheLumpName(__ccgo_ts(1490), int32(PU_CACHE)))
															return 1
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	// Pop-up menu?
	if menuactive == 0 {
		if key == key_menu_activate {
			M_StartControlPanel()
			S_StartSound(nil, int32(sfx_swtchn))
			return 1
		}
		return 0
	}
	// Keys usable within menu
	if key == key_menu_down {
		// Move down to next item
		for cond := true; cond; cond = int32(currentMenu.Fmenuitems[itemOn].Fstatus) == -1 {
			if int32(itemOn)+int32(1) > int32(currentMenu.Fnumitems)-1 {
				itemOn = 0
			} else {
				itemOn++
			}
			S_StartSound(nil, int32(sfx_pstop))
		}
		return 1
	} else {
		if key == key_menu_up {
			// Move back up to previous item
			for cond := true; cond; cond = int32(currentMenu.Fmenuitems[itemOn].Fstatus) == -1 {
				if itemOn == 0 {
					itemOn = int16(int32(currentMenu.Fnumitems) - 1)
				} else {
					itemOn--
				}
				S_StartSound(nil, int32(sfx_pstop))
			}
			return 1
		} else {
			if key == key_menu_left {
				// Slide slider left
				if currentMenu.Fmenuitems[itemOn].Froutine != nil && int32(currentMenu.Fmenuitems[itemOn].Fstatus) == 2 {
					S_StartSound(nil, int32(sfx_stnmov))
					currentMenu.Fmenuitems[itemOn].Froutine(0)
				}
				return 1
			} else {
				if key == key_menu_right {
					// Slide slider right
					if currentMenu.Fmenuitems[itemOn].Froutine != nil && int32(currentMenu.Fmenuitems[itemOn].Fstatus) == 2 {
						S_StartSound(nil, int32(sfx_stnmov))
						currentMenu.Fmenuitems[itemOn].Froutine(1)
					}
					return 1
				} else {
					if key == key_menu_forward {
						// Activate menu item
						if currentMenu.Fmenuitems[itemOn].Froutine != nil && currentMenu.Fmenuitems[itemOn].Fstatus != 0 {
							currentMenu.FlastOn = itemOn
							if int32(currentMenu.Fmenuitems[itemOn].Fstatus) == 2 {
								currentMenu.Fmenuitems[itemOn].Froutine(1) // right arrow
								S_StartSound(nil, int32(sfx_stnmov))
							} else {
								currentMenu.Fmenuitems[itemOn].Froutine(int32(itemOn))
								S_StartSound(nil, int32(sfx_pistol))
							}
						}
						return 1
					} else {
						if key == key_menu_activate {
							// Deactivate menu
							currentMenu.FlastOn = itemOn
							M_ClearMenus()
							S_StartSound(nil, int32(sfx_swtchx))
							return 1
						} else {
							if key == key_menu_back {
								// Go back to previous menu
								currentMenu.FlastOn = itemOn
								if currentMenu.FprevMenu != nil {
									currentMenu = currentMenu.FprevMenu
									itemOn = currentMenu.FlastOn
									S_StartSound(nil, int32(sfx_swtchn))
								}
								return 1
							} else {
								if ch != 0 || IsNullKey(key) != 0 {
									i = int32(itemOn) + 1
									for {
										if i >= int32(currentMenu.Fnumitems) {
											break
										}
										if int32(currentMenu.Fmenuitems[i].FalphaKey) == ch {
											itemOn = int16(i)
											S_StartSound(nil, int32(sfx_pstop))
											return 1
										}
										goto _2
									_2:
										;
										i++
									}
									i = 0
									for {
										if !(i <= int32(itemOn)) {
											break
										}
										if int32(currentMenu.Fmenuitems[i].FalphaKey) == ch {
											itemOn = int16(i)
											S_StartSound(nil, int32(sfx_pstop))
											return 1
										}
										goto _3
									_3:
										;
										i++
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return 0
}

var joywait int32

var mousewait int32

var mousey1 int32

var lasty int32

var mousex1 int32

var lastx int32

// C documentation
//
//	//
//	// M_StartControlPanel
//	//
func M_StartControlPanel() {
	// intro might call this repeatedly
	if menuactive != 0 {
		return
	}
	menuactive = 1
	currentMenu = &MainDef       // JDC
	itemOn = currentMenu.FlastOn // JDC
}

// Display OPL debug messages - hack for GENMIDI development.

// C documentation
//
//	//
//	// M_Drawer
//	// Called after the view has been rendered,
//	// but before it has been blitted.
//	//
func M_Drawer() {
	var bp string
	var foundnewline, start int32
	var i, max uint32
	var name uintptr
	inhelpscreens = 0
	// Horiz. & Vertically center string and print it.
	if messageToPrint != 0 {
		start = 0
		y2 = int16(SCREENHEIGHT/2 - M_StringHeight(messageString)/int32(2))
		for start < int32(len(messageString)) {
			foundnewline = 0
			i = 0
			for {
				if uint64(i) >= uint64(len(messageString[start:])) {
					break
				}
				if messageString[start+int32(i)] == '\n' {
					bp = messageString[start : start+int32(i)]
					foundnewline = 1
					start = int32(uint32(start) + (i + 1))
					break
				}
				goto _1
			_1:
				;
				i++
			}
			if foundnewline == 0 {
				bp = messageString[start:]
				start = int32(uint64(start) + uint64(len(bp)))
			}
			x = int16(SCREENWIDTH/2 - M_StringWidth(bp)/int32(2))
			M_WriteText(int32(x), int32(y2), bp)
			y2 = int16(int32(y2) + int32((*patch_t)(unsafe.Pointer(hu_font[0])).Fheight))
		}
		return
	}
	//if (opldev)
	//{
	//    M_DrawOPLDev();
	//}
	if menuactive == 0 {
		return
	}
	if currentMenu.Froutine != nil {
		currentMenu.Froutine()
	} // call Draw routine
	// DRAW MENU
	x = currentMenu.Fx
	y2 = currentMenu.Fy
	max = uint32(currentMenu.Fnumitems)
	i = 0
	for {
		if i >= max {
			break
		}
		name = uintptr(unsafe.Pointer(&currentMenu.Fmenuitems[i].Fname[0]))
		if *(*int8)(unsafe.Pointer(name)) != 0 {
			V_DrawPatchDirect(int32(x), int32(y2), W_CacheLumpNameT(name, int32(PU_CACHE)))
		}
		y2 = int16(int32(y2) + LINEHEIGHT)
		goto _2
	_2:
		;
		i++
	}
	// DRAW SKULL
	V_DrawPatchDirect(int32(x)+-int32(32), int32(currentMenu.Fy)-int32(5)+int32(itemOn)*int32(LINEHEIGHT), W_CacheLumpNameT(skullName[whichSkull], int32(PU_CACHE)))
}

var x int16

var y2 int16

// C documentation
//
//	//
//	// M_ClearMenus
//	//
func M_ClearMenus() {
	menuactive = 0
	// if (!netgame && usergame && paused)
	//       sendpause = true;
}

// C documentation
//
//	//
//	// M_SetupNextMenu
//	//
func M_SetupNextMenu(menudef *menu_t) {
	currentMenu = menudef
	itemOn = currentMenu.FlastOn
}

// C documentation
//
//	//
//	// M_Ticker
//	//
func M_Ticker() {
	var v1 int16
	skullAnimCounter--
	v1 = skullAnimCounter
	if int32(v1) <= 0 {
		whichSkull = int16(int32(whichSkull) ^ 1)
		skullAnimCounter = 8
	}
}

// C documentation
//
//	//
//	// M_Init
//	//
func M_Init() {
	currentMenu = &MainDef
	menuactive = 0
	itemOn = currentMenu.FlastOn
	whichSkull = 0
	skullAnimCounter = 10
	screenSize = screenblocks - 3
	messageToPrint = 0
	messageString = ""
	messageLastMenuActive = int32(menuactive)
	quickSaveSlot = -1
	// Here we could catch other version dependencies,
	//  like HELP1/2, and four episodes.
	switch gamemode {
	case commercial:
		// Commercial has no "read this" entry.
		MainMenu[int32(readthis)] = MainMenu[int32(quitdoom)]
		MainDef.Fnumitems--
		MainDef.Fmenuitems = append([]menuitem_t{}, MainMenu[:int32(readthis)]...)
		MainDef.Fmenuitems = append(MainDef.Fmenuitems, MainMenu[int32(readthis)+1:]...)
		NewDef.FprevMenu = &MainDef
	case shareware:
		// Episode 2 and 3 are handled,
		//  branching to an ad screen.
		fallthrough
	case registered:
	case retail:
		// We are fine.
		fallthrough
	default:
		break
	}
	// Versions of doom.exe before the Ultimate Doom release only had
	// three episodes; if we're emulating one of those then don't try
	// to show episode four. If we are, then do show episode four
	// (should crash if missing).
	if gameversion < exe_ultimate {
		EpiDef.Fnumitems--
	}
	//opldev = M_CheckParm("-opldev") > 0;
}

//
// This is used to get the local FILE:LINE info from CPP
// prior to really call the function in question.
//

//
// Create a directory
//

func M_MakeDirectory(path string) {
	os.MkdirAll(path, 0755)
}

// Check if a file exists

func M_FileExists(filename string) (r boolean) {
	if _, err := os.Stat(filename); err == nil {
		return 1
	}
	return 0
}

//
// M_WriteFile
//

func M_WriteFile(name string, source uintptr, length int32) (r boolean) {
	sourceBytes := unsafe.Slice((*byte)(unsafe.Pointer(source)), int(length))
	if err := os.WriteFile(name, sourceBytes, 0644); err != nil {
		return 0
	}
	return 1
}

// Returns the path to a temporary file of the given name, stored
// inside the system temporary directory.
//
// The returned value must be freed with Z_Free after use.

func M_TempFile(s string) string {
	return __ccgo_ts_str(23139) + __ccgo_ts_str(1252) + s
}

func M_ExtractFileBase(path string, dest uintptr) {
	src := filepath.Base(path)
	// Copy up to eight characters
	// Note: Vanilla Doom exits with an error if a filename is specified
	// with a base of more than eight characters.  To remove the 8.3
	// filename limit, instead we simply truncate the name.
	xmemset(dest, 0, 8)
	maxLen := uint64(min(len(src), 8))
	xmemcpy(dest, uintptr(unsafe.Pointer(&[]byte(src)[0])), maxLen)
}

// Safe string copy function that works like OpenBSD's strlcpy().
// Returns true if the string was not truncated.

func M_StringCopy(dest uintptr, src uintptr, dest_size uint64) (r boolean) {
	var len1 uint64
	if dest_size >= 1 {
		*(*int8)(unsafe.Pointer(dest + uintptr(dest_size-1))) = int8('\000')
		xstrncpy(dest, src, dest_size-1)
	} else {
		return 0
	}
	len1 = xstrlen(dest)
	return booluint32(int32(*(*int8)(unsafe.Pointer(src + uintptr(len1)))) == int32('\000'))
}

// C documentation
//
//	// Safe, portable snprintf().
func M_snprintf(buf uintptr, buf_len uint64, s string, args ...any) (r int32) {
	val := fmt.Sprintf(s, args...)
	i := 0
	bufBytes := unsafe.Slice((*byte)(unsafe.Pointer(buf)), int(buf_len))
	for ; i < len(val) && i < int(buf_len-1); i++ {
		bufBytes[i] = val[i]
	}
	bufBytes[i] = 0 // Null-terminate the string
	return int32(i)
}

//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Random number LUT.
//

//
// M_Random
// Returns a 0-255 number
//

var rndtable = [256]uint8{
	1:   8,
	2:   109,
	3:   220,
	4:   222,
	5:   241,
	6:   149,
	7:   107,
	8:   75,
	9:   248,
	10:  254,
	11:  140,
	12:  16,
	13:  66,
	14:  74,
	15:  21,
	16:  211,
	17:  47,
	18:  80,
	19:  242,
	20:  154,
	21:  27,
	22:  205,
	23:  128,
	24:  161,
	25:  89,
	26:  77,
	27:  36,
	28:  95,
	29:  110,
	30:  85,
	31:  48,
	32:  212,
	33:  140,
	34:  211,
	35:  249,
	36:  22,
	37:  79,
	38:  200,
	39:  50,
	40:  28,
	41:  188,
	42:  52,
	43:  140,
	44:  202,
	45:  120,
	46:  68,
	47:  145,
	48:  62,
	49:  70,
	50:  184,
	51:  190,
	52:  91,
	53:  197,
	54:  152,
	55:  224,
	56:  149,
	57:  104,
	58:  25,
	59:  178,
	60:  252,
	61:  182,
	62:  202,
	63:  182,
	64:  141,
	65:  197,
	66:  4,
	67:  81,
	68:  181,
	69:  242,
	70:  145,
	71:  42,
	72:  39,
	73:  227,
	74:  156,
	75:  198,
	76:  225,
	77:  193,
	78:  219,
	79:  93,
	80:  122,
	81:  175,
	82:  249,
	84:  175,
	85:  143,
	86:  70,
	87:  239,
	88:  46,
	89:  246,
	90:  163,
	91:  53,
	92:  163,
	93:  109,
	94:  168,
	95:  135,
	96:  2,
	97:  235,
	98:  25,
	99:  92,
	100: 20,
	101: 145,
	102: 138,
	103: 77,
	104: 69,
	105: 166,
	106: 78,
	107: 176,
	108: 173,
	109: 212,
	110: 166,
	111: 113,
	112: 94,
	113: 161,
	114: 41,
	115: 50,
	116: 239,
	117: 49,
	118: 111,
	119: 164,
	120: 70,
	121: 60,
	122: 2,
	123: 37,
	124: 171,
	125: 75,
	126: 136,
	127: 156,
	128: 11,
	129: 56,
	130: 42,
	131: 146,
	132: 138,
	133: 229,
	134: 73,
	135: 146,
	136: 77,
	137: 61,
	138: 98,
	139: 196,
	140: 135,
	141: 106,
	142: 63,
	143: 197,
	144: 195,
	145: 86,
	146: 96,
	147: 203,
	148: 113,
	149: 101,
	150: 170,
	151: 247,
	152: 181,
	153: 113,
	154: 80,
	155: 250,
	156: 108,
	157: 7,
	158: 255,
	159: 237,
	160: 129,
	161: 226,
	162: 79,
	163: 107,
	164: 112,
	165: 166,
	166: 103,
	167: 241,
	168: 24,
	169: 223,
	170: 239,
	171: 120,
	172: 198,
	173: 58,
	174: 60,
	175: 82,
	176: 128,
	177: 3,
	178: 184,
	179: 66,
	180: 143,
	181: 224,
	182: 145,
	183: 224,
	184: 81,
	185: 206,
	186: 163,
	187: 45,
	188: 63,
	189: 90,
	190: 168,
	191: 114,
	192: 59,
	193: 33,
	194: 159,
	195: 95,
	196: 28,
	197: 139,
	198: 123,
	199: 98,
	200: 125,
	201: 196,
	202: 15,
	203: 70,
	204: 194,
	205: 253,
	206: 54,
	207: 14,
	208: 109,
	209: 226,
	210: 71,
	211: 17,
	212: 161,
	213: 93,
	214: 186,
	215: 87,
	216: 244,
	217: 138,
	218: 20,
	219: 52,
	220: 123,
	221: 251,
	222: 26,
	223: 36,
	224: 17,
	225: 46,
	226: 52,
	227: 231,
	228: 232,
	229: 76,
	230: 31,
	231: 221,
	232: 84,
	233: 37,
	234: 216,
	235: 165,
	236: 212,
	237: 106,
	238: 197,
	239: 242,
	240: 98,
	241: 43,
	242: 39,
	243: 175,
	244: 254,
	245: 145,
	246: 190,
	247: 84,
	248: 118,
	249: 222,
	250: 187,
	251: 136,
	252: 120,
	253: 163,
	254: 236,
	255: 249,
}

// C documentation
//
//	// Which one is deterministic?
func P_Random() (r int32) {
	prndindex = (prndindex + 1) & 0xff
	return int32(rndtable[prndindex])
}

func M_Random() (r int32) {
	rndindex = (rndindex + 1) & 0xff
	return int32(rndtable[rndindex])
}

func M_ClearRandom() {
	var v1 int32
	v1 = 0
	prndindex = v1
	rndindex = v1
}

//
// T_MoveCeiling
//

func T_MoveCeiling(ceiling *ceiling_t) {
	var res result_e
	switch ceiling.Fdirection {
	case 0:
		// IN STASIS
	case 1:
		// UP
		res = T_MovePlane(ceiling.Fsector, ceiling.Fspeed, ceiling.Ftopheight, 0, 1, ceiling.Fdirection)
		if leveltime&7 == 0 {
			switch ceiling.Ftype1 {
			case int32(silentCrushAndRaise):
			default:
				S_StartSound(&ceiling.Fsector.Fsoundorg, int32(sfx_stnmov))
				// ?
				break
			}
		}
		if res == int32(pastdest) {
			switch ceiling.Ftype1 {
			case int32(raiseToHighest):
				P_RemoveActiveCeiling(ceiling)
			case int32(silentCrushAndRaise):
				S_StartSound(&ceiling.Fsector.Fsoundorg, int32(sfx_pstop))
				fallthrough
			case int32(fastCrushAndRaise):
				fallthrough
			case int32(crushAndRaise):
				ceiling.Fdirection = -1
			default:
				break
			}
		}
	case -1:
		// DOWN
		res = T_MovePlane(ceiling.Fsector, ceiling.Fspeed, ceiling.Fbottomheight, ceiling.Fcrush, 1, ceiling.Fdirection)
		if leveltime&7 == 0 {
			switch ceiling.Ftype1 {
			case int32(silentCrushAndRaise):
			default:
				S_StartSound(&ceiling.Fsector.Fsoundorg, int32(sfx_stnmov))
			}
		}
		if res == int32(pastdest) {
			switch ceiling.Ftype1 {
			case int32(silentCrushAndRaise):
				S_StartSound(&ceiling.Fsector.Fsoundorg, int32(sfx_pstop))
				fallthrough
			case int32(crushAndRaise):
				ceiling.Fspeed = 1 << FRACBITS
				fallthrough
			case int32(fastCrushAndRaise):
				ceiling.Fdirection = 1
			case int32(lowerAndCrush):
				fallthrough
			case int32(lowerToFloor):
				P_RemoveActiveCeiling(ceiling)
			default:
				break
			}
		} else { // ( res != pastdest )
			if res == int32(crushed) {
				switch ceiling.Ftype1 {
				case int32(silentCrushAndRaise):
					fallthrough
				case int32(crushAndRaise):
					fallthrough
				case int32(lowerAndCrush):
					ceiling.Fspeed = 1 << FRACBITS / 8
				default:
					break
				}
			}
		}
		break
	}
}

// C documentation
//
//	//
//	// EV_DoCeiling
//	// Move a ceiling up/down and all around!
//	//
func EV_DoCeiling(line *line_t, type1 ceiling_e) (r int32) {
	var rtn, secnum, v1 int32
	secnum = -1
	rtn = 0
	//	Reactivate in-stasis ceilings...for certain types.
	switch type1 {
	case int32(fastCrushAndRaise):
		fallthrough
	case int32(silentCrushAndRaise):
		fallthrough
	case int32(crushAndRaise):
		P_ActivateInStasisCeiling(line)
		fallthrough
	default:
		break
	}
	for {
		v1 = P_FindSectorFromLineTag(line, secnum)
		secnum = v1
		if !(v1 >= 0) {
			break
		}
		sec := &sectors[secnum]
		if sec.Fspecialdata != 0 {
			continue
		}
		// new door thinker
		rtn = 1
		ceiling := &ceiling_t{}
		P_AddThinker(&ceiling.Fthinker)
		sec.Fspecialdata = uintptr(unsafe.Pointer(ceiling))
		ceiling.Fthinker.Ffunction.Facv = __ccgo_fp(T_MoveCeiling)
		ceiling.Fsector = sec
		ceiling.Fcrush = 0
		switch type1 {
		case int32(fastCrushAndRaise):
			ceiling.Fcrush = 1
			ceiling.Ftopheight = sec.Fceilingheight
			ceiling.Fbottomheight = sec.Ffloorheight + 8*(1<<FRACBITS)
			ceiling.Fdirection = -1
			ceiling.Fspeed = 1 << FRACBITS * 2
		case int32(silentCrushAndRaise):
			fallthrough
		case int32(crushAndRaise):
			ceiling.Fcrush = 1
			ceiling.Ftopheight = sec.Fceilingheight
			fallthrough
		case int32(lowerAndCrush):
			fallthrough
		case int32(lowerToFloor):
			ceiling.Fbottomheight = sec.Ffloorheight
			if type1 != int32(lowerToFloor) {
				ceiling.Fbottomheight += 8 * (1 << FRACBITS)
			}
			ceiling.Fdirection = -1
			ceiling.Fspeed = 1 << FRACBITS
		case int32(raiseToHighest):
			ceiling.Ftopheight = P_FindHighestCeilingSurrounding(sec)
			ceiling.Fdirection = 1
			ceiling.Fspeed = 1 << FRACBITS
			break
		}
		ceiling.Ftag = int32(sec.Ftag)
		ceiling.Ftype1 = type1
		P_AddActiveCeiling(ceiling)
	}
	return rtn
}

// C documentation
//
//	//
//	// Add an active ceiling
//	//
func P_AddActiveCeiling(c *ceiling_t) {
	var i int32
	i = 0
	for {
		if i >= int32(MAXCEILINGS) {
			break
		}
		if activeceilings[i] == nil {
			activeceilings[i] = c
			return
		}
		goto _1
	_1:
		;
		i++
	}
}

// C documentation
//
//	//
//	// Remove a ceiling's thinker
//	//
func P_RemoveActiveCeiling(c *ceiling_t) {
	for i := 0; i < MAXCEILINGS; i++ {
		if activeceilings[i] == c {
			activeceilings[i].Fsector.Fspecialdata = uintptr(0)
			P_RemoveThinker(&activeceilings[i].Fthinker)
			activeceilings[i] = nil
			break
		}
	}
}

// C documentation
//
//	//
//	// Restart a ceiling that's in-stasis
//	//
func P_ActivateInStasisCeiling(line *line_t) {
	var i int32
	i = 0
	for {
		if i >= int32(MAXCEILINGS) {
			break
		}
		if activeceilings[i] != nil && activeceilings[i].Ftag == int32(line.Ftag) && activeceilings[i].Fdirection == 0 {
			activeceilings[i].Fdirection = activeceilings[i].Folddirection
			activeceilings[i].Fthinker.Ffunction.Facv = __ccgo_fp(T_MoveCeiling)
			//*(*actionf_p1)(unsafe.Pointer(activeceilings[i] + 16)) = __ccgo_fp(T_MoveCeiling)
		}
		goto _1
	_1:
		;
		i++
	}
}

// C documentation
//
//	//
//	// EV_CeilingCrushStop
//	// Stop a ceiling from crushing!
//	//
func EV_CeilingCrushStop(line *line_t) (r int32) {
	var i, rtn int32
	rtn = 0
	i = 0
	for {
		if i >= int32(MAXCEILINGS) {
			break
		}
		if activeceilings[i] != nil && activeceilings[i].Ftag == int32(line.Ftag) && activeceilings[i].Fdirection != 0 {
			activeceilings[i].Folddirection = activeceilings[i].Fdirection
			activeceilings[i].Fthinker.Ffunction.Facv = 0
			activeceilings[i].Fdirection = 0 // in-stasis
			rtn = 1
		}
		goto _1
	_1:
		;
		i++
	}
	return rtn
}

//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Created by the sound utility written by Dave Taylor.
//	Kept as a sample, DOOM2  sounds. Frozen.
//

//
// VERTICAL DOORS
//

// C documentation
//
//	//
//	// T_VerticalDoor
//	//
func T_VerticalDoor(door *vldoor_t) {
	var res result_e
	switch door.Fdirection {
	case 0:
		// WAITING
		door.Ftopcountdown--
		if door.Ftopcountdown == 0 {
			switch door.Ftype1 {
			case int32(vld_blazeRaise):
				door.Fdirection = -1 // time to go back down
				S_StartSound(&door.Fsector.Fsoundorg, int32(sfx_bdcls))
			case int32(vld_normal):
				door.Fdirection = -1 // time to go back down
				S_StartSound(&door.Fsector.Fsoundorg, int32(sfx_dorcls))
			case int32(vld_close30ThenOpen):
				door.Fdirection = 1
				S_StartSound(&door.Fsector.Fsoundorg, int32(sfx_doropn))
			default:
				break
			}
		}
	case 2:
		//  INITIAL WAIT
		door.Ftopcountdown--
		if door.Ftopcountdown == 0 {
			switch door.Ftype1 {
			case int32(vld_raiseIn5Mins):
				door.Fdirection = 1
				door.Ftype1 = int32(vld_normal)
				S_StartSound(&door.Fsector.Fsoundorg, int32(sfx_doropn))
			default:
				break
			}
		}
	case -1:
		// DOWN
		res = T_MovePlane(door.Fsector, door.Fspeed, door.Fsector.Ffloorheight, 0, 1, door.Fdirection)
		if res == int32(pastdest) {
			switch (*vldoor_t)(unsafe.Pointer(door)).Ftype1 {
			case int32(vld_blazeRaise):
				fallthrough
			case int32(vld_blazeClose):
				door.Fsector.Fspecialdata = uintptr(0)
				P_RemoveThinker(&door.Fthinker) // unlink and free
				S_StartSound(&door.Fsector.Fsoundorg, int32(sfx_bdcls))
			case int32(vld_normal):
				fallthrough
			case int32(vld_close):
				door.Fsector.Fspecialdata = uintptr(0)
				P_RemoveThinker(&door.Fthinker) // unlink and free
			case int32(vld_close30ThenOpen):
				door.Fdirection = 0
				door.Ftopcountdown = TICRATE * 30
			default:
				break
			}
		} else {
			if res == int32(crushed) {
				switch door.Ftype1 {
				case int32(vld_blazeClose):
					fallthrough
				case int32(vld_close): // DO NOT GO BACK UP!
				default:
					door.Fdirection = 1
					S_StartSound(&door.Fsector.Fsoundorg, int32(sfx_doropn))
					break
				}
			}
		}
	case 1:
		// UP
		res = T_MovePlane(door.Fsector, door.Fspeed, door.Ftopheight, 0, 1, door.Fdirection)
		if res == int32(pastdest) {
			switch door.Ftype1 {
			case int32(vld_blazeRaise):
				fallthrough
			case int32(vld_normal):
				door.Fdirection = 0 // wait at top
				door.Ftopcountdown = door.Ftopwait
			case int32(vld_close30ThenOpen):
				fallthrough
			case int32(vld_blazeOpen):
				fallthrough
			case int32(vld_open):
				door.Fsector.Fspecialdata = uintptr(0)
				P_RemoveThinker(&door.Fthinker) // unlink and free
			default:
				break
			}
		}
		break
	}
}

//
// EV_DoLockedDoor
// Move a locked door up/down
//

func EV_DoLockedDoor(line *line_t, type1 vldoor_e, thing *mobj_t) (r int32) {
	var p *player_t
	p = thing.Fplayer
	if p == nil {
		return 0
	}
	switch int32(line.Fspecial) {
	case 99: // Blue Lock
		fallthrough
	case 133:
		if p == nil {
			return 0
		}
		if p.Fcards[it_bluecard] == 0 && p.Fcards[it_blueskull] == 0 {
			p.Fmessage = __ccgo_ts_str(23343)
			S_StartSound(nil, int32(sfx_oof))
			return 0
		}
	case 134: // Red Lock
		fallthrough
	case 135:
		if p == nil {
			return 0
		}
		if p.Fcards[it_redcard] == 0 && p.Fcards[it_redskull] == 0 {
			p.Fmessage = __ccgo_ts_str(23387)
			S_StartSound(nil, int32(sfx_oof))
			return 0
		}
	case 136: // Yellow Lock
		fallthrough
	case 137:
		if p == nil {
			return 0
		}
		if p.Fcards[it_yellowcard] == 0 && p.Fcards[it_yellowskull] == 0 {
			p.Fmessage = __ccgo_ts_str(23430)
			S_StartSound(nil, int32(sfx_oof))
			return 0
		}
		break
	}
	return EV_DoDoor(line, type1)
}

func EV_DoDoor(line *line_t, type1 vldoor_e) (r int32) {
	var door uintptr
	var rtn, secnum, v1 int32
	secnum = -1
	rtn = 0
	for {
		v1 = P_FindSectorFromLineTag(line, secnum)
		secnum = v1
		if !(v1 >= 0) {
			break
		}
		sec := &sectors[secnum]
		if sec.Fspecialdata != 0 {
			continue
		}
		// new door thinker
		rtn = 1
		door = Z_Malloc(64, int32(PU_LEVSPEC), uintptr(0))
		doorP := (*vldoor_t)(unsafe.Pointer(door))
		P_AddThinker(&doorP.Fthinker)
		sec.Fspecialdata = door
		doorP.Fthinker.Ffunction.Facv = __ccgo_fp(T_VerticalDoor)
		doorP.Fsector = sec
		doorP.Ftype1 = type1
		doorP.Ftopwait = int32(VDOORWAIT)
		doorP.Fspeed = 1 << FRACBITS * 2
		switch type1 {
		case int32(vld_blazeClose):
			doorP.Ftopheight = P_FindLowestCeilingSurrounding(sec)
			doorP.Ftopheight -= 4 * (1 << FRACBITS)
			doorP.Fdirection = -1
			doorP.Fspeed = 1 << FRACBITS * 2 * 4
			S_StartSound(&doorP.Fsector.Fsoundorg, int32(sfx_bdcls))
		case int32(vld_close):
			doorP.Ftopheight = P_FindLowestCeilingSurrounding(sec)
			doorP.Ftopheight -= 4 * (1 << FRACBITS)
			doorP.Fdirection = -1
			S_StartSound(&doorP.Fsector.Fsoundorg, int32(sfx_dorcls))
		case int32(vld_close30ThenOpen):
			doorP.Ftopheight = sec.Fceilingheight
			doorP.Fdirection = -1
			S_StartSound(&doorP.Fsector.Fsoundorg, int32(sfx_dorcls))
		case int32(vld_blazeRaise):
			fallthrough
		case int32(vld_blazeOpen):
			doorP.Fdirection = 1
			doorP.Ftopheight = P_FindLowestCeilingSurrounding(sec)
			doorP.Ftopheight -= 4 * (1 << FRACBITS)
			doorP.Fspeed = 1 << FRACBITS * 2 * 4
			if doorP.Ftopheight != sec.Fceilingheight {
				S_StartSound(&doorP.Fsector.Fsoundorg, int32(sfx_bdopn))
			}
		case int32(vld_normal):
			fallthrough
		case int32(vld_open):
			doorP.Fdirection = 1
			doorP.Ftopheight = P_FindLowestCeilingSurrounding(sec)
			doorP.Ftopheight -= 4 * (1 << FRACBITS)
			if doorP.Ftopheight != sec.Fceilingheight {
				S_StartSound(&doorP.Fsector.Fsoundorg, int32(sfx_doropn))
			}
		default:
			break
		}
	}
	return rtn
}

// C documentation
//
//	//
//	// EV_VerticalDoor : open a door manually, no tag value
//	//
func EV_VerticalDoor(line *line_t, thing *mobj_t) {
	var door, plat uintptr
	var player *player_t
	var sec *sector_t
	var side int32
	side = 0 // only front sides can be used
	//	Check for locks
	player = thing.Fplayer
	switch int32(line.Fspecial) {
	case 26: // Blue Lock
		fallthrough
	case 32:
		if player == nil {
			return
		}
		if player.Fcards[it_bluecard] == 0 && player.Fcards[it_blueskull] == 0 {
			player.Fmessage = __ccgo_ts_str(23476)
			S_StartSound(nil, int32(sfx_oof))
			return
		}
	case 27: // Yellow Lock
		fallthrough
	case 34:
		if player == nil {
			return
		}
		if player.Fcards[it_yellowcard] == 0 && player.Fcards[it_yellowskull] == 0 {
			player.Fmessage = __ccgo_ts_str(23514)
			S_StartSound(nil, int32(sfx_oof))
			return
		}
	case 28: // Red Lock
		fallthrough
	case 33:
		if player == nil {
			return
		}
		if player.Fcards[it_redcard] == 0 && player.Fcards[it_redskull] == 0 {
			player.Fmessage = __ccgo_ts_str(23554)
			S_StartSound(nil, int32(sfx_oof))
			return
		}
		break
	}
	// if the sector has an active thinker, use it
	sec = sides[line.Fsidenum[side^int32(1)]].Fsector
	if sec.Fspecialdata != 0 {
		door = sec.Fspecialdata
		switch int32(line.Fspecial) {
		case 1: // ONLY FOR "RAISE" DOORS, NOT "OPEN"s
			fallthrough
		case 26:
			fallthrough
		case 27:
			fallthrough
		case 28:
			fallthrough
		case 117:
			if (*vldoor_t)(unsafe.Pointer(door)).Fdirection == -1 {
				(*vldoor_t)(unsafe.Pointer(door)).Fdirection = 1
			} else {
				if thing.Fplayer == nil {
					return
				} // JDC: bad guys never close doors
				// When is a door not a door?
				// In Vanilla, door->direction is set, even though
				// "specialdata" might not actually point at a door.
				if *(*actionf_p1)(unsafe.Pointer(door + 16)) == __ccgo_fp(T_VerticalDoor) {
					(*vldoor_t)(unsafe.Pointer(door)).Fdirection = -1 // start going down immediately
				} else {
					if *(*actionf_p1)(unsafe.Pointer(door + 16)) == __ccgo_fp(T_PlatRaise) {
						plat = door
						(*plat_t)(unsafe.Pointer(plat)).Fwait = -1
					} else {
						// This isn't a door OR a plat.  Now we're in trouble.
						fprintf_ccgo(os.Stderr, 23591)
						// Try closing it anyway. At least it will work on 32-bit
						// machines.
						(*vldoor_t)(unsafe.Pointer(door)).Fdirection = -1
					}
				}
			}
			return
		}
	}
	// for proper sound
	switch int32(line.Fspecial) {
	case 117: // BLAZING DOOR RAISE
		fallthrough
	case 118: // BLAZING DOOR OPN
		S_StartSound(&sec.Fsoundorg, int32(sfx_bdopn))
	case 1: // NORMAL DOOR SOUND
		fallthrough
	case 31:
		S_StartSound(&sec.Fsoundorg, int32(sfx_doropn))
	default: // LOCKED DOOR SOUND
		S_StartSound(&sec.Fsoundorg, int32(sfx_doropn))
		break
	}
	// new door thinker
	door = Z_Malloc(64, int32(PU_LEVSPEC), uintptr(0))
	doorP := (*vldoor_t)(unsafe.Pointer(door))
	P_AddThinker(&doorP.Fthinker)
	sec.Fspecialdata = door
	doorP.Fthinker.Ffunction.Facv = __ccgo_fp(T_VerticalDoor)
	doorP.Fsector = sec
	doorP.Fdirection = 1
	doorP.Fspeed = 1 << FRACBITS * 2
	doorP.Ftopwait = int32(VDOORWAIT)
	switch int32(line.Fspecial) {
	case 1:
		fallthrough
	case 26:
		fallthrough
	case 27:
		fallthrough
	case 28:
		doorP.Ftype1 = int32(vld_normal)
	case 31:
		fallthrough
	case 32:
		fallthrough
	case 33:
		fallthrough
	case 34:
		doorP.Ftype1 = int32(vld_open)
		line.Fspecial = 0
	case 117: // blazing door raise
		doorP.Ftype1 = int32(vld_blazeRaise)
		doorP.Fspeed = 1 << FRACBITS * 2 * 4
	case 118: // blazing door open
		doorP.Ftype1 = int32(vld_blazeOpen)
		line.Fspecial = 0
		doorP.Fspeed = 1 << FRACBITS * 2 * 4
		break
	}
	// find the top and bottom of the movement range
	doorP.Ftopheight = P_FindLowestCeilingSurrounding(sec)
	doorP.Ftopheight -= 4 * (1 << FRACBITS)
}

// C documentation
//
//	//
//	// Spawn a door that closes after 30 seconds
//	//
func P_SpawnDoorCloseIn30(sec *sector_t) {
	var door uintptr
	door = Z_Malloc(64, int32(PU_LEVSPEC), uintptr(0))
	doorP := (*vldoor_t)(unsafe.Pointer(door))
	P_AddThinker(&doorP.Fthinker)
	sec.Fspecialdata = door
	sec.Fspecial = 0
	doorP.Fthinker.Ffunction.Facv = __ccgo_fp(T_VerticalDoor)
	doorP.Fsector = sec
	doorP.Fdirection = 0
	doorP.Ftype1 = int32(vld_normal)
	doorP.Fspeed = 1 << FRACBITS * 2
	doorP.Ftopcountdown = 30 * TICRATE
}

// C documentation
//
//	//
//	// Spawn a door that opens after 5 minutes
//	//
func P_SpawnDoorRaiseIn5Mins(sec *sector_t, secnum int32) {
	var door uintptr
	door = Z_Malloc(64, int32(PU_LEVSPEC), uintptr(0))
	doorP := (*vldoor_t)(unsafe.Pointer(door))
	P_AddThinker(&doorP.Fthinker)
	sec.Fspecialdata = door
	sec.Fspecial = 0
	doorP.Fthinker.Ffunction.Facv = __ccgo_fp(T_VerticalDoor)
	doorP.Fsector = sec
	doorP.Fdirection = 2
	doorP.Ftype1 = int32(vld_raiseIn5Mins)
	doorP.Fspeed = 1 << FRACBITS * 2
	doorP.Ftopheight = P_FindLowestCeilingSurrounding(sec)
	doorP.Ftopheight -= 4 * (1 << FRACBITS)
	doorP.Ftopwait = int32(VDOORWAIT)
	doorP.Ftopcountdown = 5 * 60 * TICRATE
}

const ANG1801 = 2147483648
const ANG2703 = 3221225472
const ANG903 = 1073741824

//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Refresh/render internal state variables (global).
//

// Data.
//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Created by the sound utility written by Dave Taylor.
//	Kept as a sample, DOOM2  sounds. Frozen.
//

type dirtype_t = int32

const DI_EAST = 0
const DI_NORTHEAST = 1
const DI_NORTH = 2
const DI_NORTHWEST = 3
const DI_WEST = 4
const DI_SOUTHWEST = 5
const DI_SOUTH = 6
const DI_SOUTHEAST = 7
const DI_NODIR = 8

func init() {
	opposite = [9]dirtype_t{
		0: DI_WEST,
		1: DI_SOUTHWEST,
		2: DI_SOUTH,
		3: DI_SOUTHEAST,
		5: DI_NORTHEAST,
		6: DI_NORTH,
		7: DI_NORTHWEST,
		8: DI_NODIR,
	}
}

func init() {
	diags = [4]dirtype_t{
		0: DI_NORTHWEST,
		1: DI_NORTHEAST,
		2: DI_SOUTHWEST,
		3: DI_SOUTHEAST,
	}
}

func P_RecursiveSound(sec *sector_t, soundblocks int32) {
	var check *line_t
	var other *sector_t
	var i int32
	// wake up all monsters in this sector
	if sec.Fvalidcount == validcount && sec.Fsoundtraversed <= soundblocks+int32(1) {
		return // already flooded
	}
	sec.Fvalidcount = validcount
	sec.Fsoundtraversed = soundblocks + 1
	sec.Fsoundtarget = soundtarget
	i = 0
	for {
		if i >= sec.Flinecount {
			break
		}
		check = sec.Flines[i]
		if int32(check.Fflags)&ML_TWOSIDED == 0 {
			goto _1
		}
		P_LineOpening(check)
		if openrange <= 0 {
			goto _1
		} // closed door
		if sides[check.Fsidenum[0]].Fsector == sec {
			other = sides[check.Fsidenum[1]].Fsector
		} else {
			other = sides[check.Fsidenum[0]].Fsector
		}
		if int32(check.Fflags)&ML_SOUNDBLOCK != 0 {
			if soundblocks == 0 {
				P_RecursiveSound(other, 1)
			}
		} else {
			P_RecursiveSound(other, soundblocks)
		}
		goto _1
	_1:
		;
		i++
	}
}

// C documentation
//
//	//
//	// P_NoiseAlert
//	// If a monster yells at a player,
//	// it will alert other monsters to the player.
//	//
func P_NoiseAlert(target *mobj_t, emmiter *mobj_t) {
	soundtarget = target
	validcount++
	P_RecursiveSound(emmiter.Fsubsector.Fsector, 0)
}

// C documentation
//
//	//
//	// P_CheckMeleeRange
//	//
func P_CheckMeleeRange(actor *mobj_t) (r boolean) {
	var dist fixed_t
	var pl *mobj_t
	if actor.Ftarget == nil {
		return 0
	}
	pl = actor.Ftarget
	dist = P_AproxDistance(pl.Fx-actor.Fx, pl.Fy-actor.Fy)
	if dist >= 64*(1<<FRACBITS)-20*(1<<FRACBITS)+(*mobjinfo_t)(unsafe.Pointer(pl.Finfo)).Fradius {
		return 0
	}
	if P_CheckSight(actor, actor.Ftarget) == 0 {
		return 0
	}
	return 1
}

// C documentation
//
//	//
//	// P_CheckMissileRange
//	//
func P_CheckMissileRange(actor *mobj_t) (r boolean) {
	var dist fixed_t
	if P_CheckSight(actor, actor.Ftarget) == 0 {
		return 0
	}
	if actor.Fflags&MF_JUSTHIT != 0 {
		// the target just hit the enemy,
		// so fight back!
		actor.Fflags &^= MF_JUSTHIT
		return 1
	}
	if actor.Freactiontime != 0 {
		return 0
	} // do not attack yet
	// OPTIMIZE: get this from a global checksight
	dist = P_AproxDistance(actor.Fx-(*mobj_t)(unsafe.Pointer(actor.Ftarget)).Fx, actor.Fy-(*mobj_t)(unsafe.Pointer(actor.Ftarget)).Fy) - 64*(1<<FRACBITS)
	if (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fmeleestate == 0 {
		dist -= 128 * (1 << FRACBITS)
	} // no melee attack, so fire more
	dist >>= 16
	if actor.Ftype1 == int32(MT_VILE) {
		if dist > 14*64 {
			return 0
		} // too far away
	}
	if actor.Ftype1 == int32(MT_UNDEAD) {
		if dist < 196 {
			return 0
		} // close for fist attack
		dist >>= 1
	}
	if actor.Ftype1 == int32(MT_CYBORG) || actor.Ftype1 == int32(MT_SPIDER) || actor.Ftype1 == int32(MT_SKULL) {
		dist >>= 1
	}
	if dist > 200 {
		dist = 200
	}
	if actor.Ftype1 == int32(MT_CYBORG) && dist > 160 {
		dist = 160
	}
	if P_Random() < dist {
		return 0
	}
	return 1
}

func init() {
	xspeed = [8]fixed_t{
		0: 1 << FRACBITS,
		1: 47000,
		3: -int32(47000),
		4: -(1 << FRACBITS),
		5: -int32(47000),
		7: 47000,
	}
}

func init() {
	yspeed = [8]fixed_t{
		1: 47000,
		2: 1 << FRACBITS,
		3: 47000,
		5: -int32(47000),
		6: -(1 << FRACBITS),
		7: -int32(47000),
	}
}

func P_Move(actor *mobj_t) (r boolean) {
	var good, try_ok boolean
	var tryx, tryy fixed_t
	var v1 int32
	if actor.Fmovedir == DI_NODIR {
		return 0
	}
	if uint32(actor.Fmovedir) >= 8 {
		I_Error(23654, 0)
	}
	tryx = actor.Fx + (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fspeed*xspeed[actor.Fmovedir]
	tryy = actor.Fy + (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fspeed*yspeed[actor.Fmovedir]
	try_ok = P_TryMove(actor, tryx, tryy)
	if try_ok == 0 {
		// open any specials
		if actor.Fflags&MF_FLOAT != 0 && floatok != 0 {
			// must adjust height
			if actor.Fz < tmfloorz {
				actor.Fz += 1 << FRACBITS * 4
			} else {
				actor.Fz -= 1 << FRACBITS * 4
			}
			actor.Fflags |= MF_INFLOAT
			return 1
		}
		if numspechit == 0 {
			return 0
		}
		actor.Fmovedir = DI_NODIR
		good = 0
		for {
			v1 = numspechit
			numspechit--
			if v1 == 0 {
				break
			}
			ld := spechit[numspechit]
			// if the special is not a door
			// that can be opened,
			// return false
			if P_UseSpecialLine(actor, ld, 0) != 0 {
				good = 1
			}
		}
		return good
	} else {
		actor.Fflags &^= MF_INFLOAT
	}
	if actor.Fflags&MF_FLOAT == 0 {
		actor.Fz = actor.Ffloorz
	}
	return 1
}

// C documentation
//
//	//
//	// TryWalk
//	// Attempts to move actor on
//	// in its current (ob->moveangle) direction.
//	// If blocked by either a wall or an actor
//	// returns FALSE
//	// If move is either clear or blocked only by a door,
//	// returns TRUE and sets...
//	// If a door is in the way,
//	// an OpenDoor call is made to start it opening.
//	//
func P_TryWalk(actor *mobj_t) (r boolean) {
	if P_Move(actor) == 0 {
		return 0
	}
	actor.Fmovecount = P_Random() & 15
	return 1
}

func P_NewChaseDir(actor *mobj_t) {
	var d [3]dirtype_t
	var deltax, deltay fixed_t
	var olddir, turnaround dirtype_t
	var tdir int32
	if actor.Ftarget == nil {
		I_Error(23676, 0)
	}
	olddir = actor.Fmovedir
	turnaround = opposite[olddir]
	deltax = (*mobj_t)(unsafe.Pointer(actor.Ftarget)).Fx - actor.Fx
	deltay = (*mobj_t)(unsafe.Pointer(actor.Ftarget)).Fy - actor.Fy
	if deltax > 10*(1<<FRACBITS) {
		d[int32(1)] = DI_EAST
	} else {
		if deltax < -10*(1<<FRACBITS) {
			d[int32(1)] = DI_WEST
		} else {
			d[int32(1)] = DI_NODIR
		}
	}
	if deltay < -10*(1<<FRACBITS) {
		d[int32(2)] = DI_SOUTH
	} else {
		if deltay > 10*(1<<FRACBITS) {
			d[int32(2)] = DI_NORTH
		} else {
			d[int32(2)] = DI_NODIR
		}
	}
	// try direct route
	if d[int32(1)] != DI_NODIR && d[int32(2)] != DI_NODIR {
		actor.Fmovedir = diags[boolint32(deltay < 0)<<int32(1)+boolint32(deltax > 0)]
		if actor.Fmovedir != turnaround && P_TryWalk(actor) != 0 {
			return
		}
	}
	// try other directions
	if P_Random() > 200 || xabs(deltay) > xabs(deltax) {
		tdir = d[int32(1)]
		d[int32(1)] = d[int32(2)]
		d[int32(2)] = tdir
	}
	if d[int32(1)] == turnaround {
		d[int32(1)] = DI_NODIR
	}
	if d[int32(2)] == turnaround {
		d[int32(2)] = DI_NODIR
	}
	if d[int32(1)] != DI_NODIR {
		actor.Fmovedir = d[int32(1)]
		if P_TryWalk(actor) != 0 {
			// either moved forward or attacked
			return
		}
	}
	if d[int32(2)] != DI_NODIR {
		actor.Fmovedir = d[int32(2)]
		if P_TryWalk(actor) != 0 {
			return
		}
	}
	// there is no direct path to the player,
	// so pick another direction.
	if olddir != DI_NODIR {
		actor.Fmovedir = olddir
		if P_TryWalk(actor) != 0 {
			return
		}
	}
	// randomly determine direction of search
	if P_Random()&int32(1) != 0 {
		tdir = DI_EAST
		for {
			if !(tdir <= DI_SOUTHEAST) {
				break
			}
			if tdir != turnaround {
				actor.Fmovedir = tdir
				if P_TryWalk(actor) != 0 {
					return
				}
			}
			goto _1
		_1:
			;
			tdir++
		}
	} else {
		tdir = DI_SOUTHEAST
		for {
			if tdir == DI_EAST-1 {
				break
			}
			if tdir != turnaround {
				actor.Fmovedir = tdir
				if P_TryWalk(actor) != 0 {
					return
				}
			}
			goto _2
		_2:
			;
			tdir--
		}
	}
	if turnaround != DI_NODIR {
		actor.Fmovedir = turnaround
		if P_TryWalk(actor) != 0 {
			return
		}
	}
	actor.Fmovedir = DI_NODIR // can not move
}

// C documentation
//
//	//
//	// P_LookForPlayers
//	// If allaround is false, only look 180 degrees in front.
//	// Returns true if a player is targeted.
//	//
func P_LookForPlayers(actor *mobj_t, allaround boolean) (r boolean) {
	var an angle_t
	var c, stop, v2 int32
	var dist fixed_t
	var player *player_t
	c = 0
	stop = (actor.Flastlook - 1) & 3
	for {
		if playeringame[actor.Flastlook] == 0 {
			goto _1
		}
		v2 = c
		c++
		if v2 == 2 || actor.Flastlook == stop {
			// done looking
			return 0
		}
		player = &players[actor.Flastlook]
		if player.Fhealth <= 0 {
			goto _1
		} // dead
		if P_CheckSight(actor, player.Fmo) == 0 {
			goto _1
		} // out of sight
		if allaround == 0 {
			an = R_PointToAngle2(actor.Fx, actor.Fy, player.Fmo.Fx, player.Fmo.Fy) - actor.Fangle
			if an > ANG903 && an < ANG2703 {
				dist = P_AproxDistance(player.Fmo.Fx-actor.Fx, player.Fmo.Fy-actor.Fy)
				// if real close, react anyway
				if dist > 64*(1<<FRACBITS) {
					goto _1
				} // behind back
			}
		}
		actor.Ftarget = player.Fmo
		return 1
		goto _1
	_1:
		;
		actor.Flastlook = (actor.Flastlook + 1) & 3
	}
	return 0
}

// C documentation
//
//	//
//	// A_KeenDie
//	// DOOM II special, map 32.
//	// Uses special tag 666.
//	//
func A_KeenDie(mo *mobj_t) {
	var mo2 *mobj_t
	var th *thinker_t
	A_Fall(mo)
	// scan the remaining thinkers
	// to see if all Keens are dead
	th = thinkercap.Fnext
	for {
		if th == &thinkercap {
			break
		}
		if th.Ffunction.Facv != __ccgo_fp(P_MobjThinker) {
			goto _1
		}
		mo2 = (*mobj_t)(unsafe.Pointer(th)) // cast to mobj_t
		if mo2 != mo && mo2.Ftype1 == mo.Ftype1 && mo2.Fhealth > 0 {
			// other Keen not dead
			return
		}
		goto _1
	_1:
		;
		th = th.Fnext
	}
	line := &line_t{Ftag: 666}
	EV_DoDoor(line, int32(vld_open))
}

//
// ACTION ROUTINES
//

// C documentation
//
//	//
//	// A_Look
//	// Stay in state until a player is sighted.
//	//
func A_Look(actor *mobj_t) {
	var sound int32
	var targ *mobj_t
	actor.Fthreshold = 0 // any shot will wake up
	targ = actor.Fsubsector.Fsector.Fsoundtarget
	if targ != nil && targ.Fflags&MF_SHOOTABLE != 0 {
		actor.Ftarget = targ
		if actor.Fflags&MF_AMBUSH != 0 {
			if P_CheckSight(actor, actor.Ftarget) != 0 {
				goto seeyou
			}
		} else {
			goto seeyou
		}
	}
	if P_LookForPlayers(actor, 0) == 0 {
		return
	}
	// go into chase state
	goto seeyou
seeyou:
	;
	if (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fseesound != 0 {
		switch (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fseesound {
		case int32(sfx_posit1):
			fallthrough
		case int32(sfx_posit2):
			fallthrough
		case int32(sfx_posit3):
			sound = int32(sfx_posit1) + P_Random()%int32(3)
		case int32(sfx_bgsit1):
			fallthrough
		case int32(sfx_bgsit2):
			sound = int32(sfx_bgsit1) + P_Random()%int32(2)
		default:
			sound = (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fseesound
			break
		}
		if actor.Ftype1 == int32(MT_SPIDER) || actor.Ftype1 == int32(MT_CYBORG) {
			// full volume
			S_StartSound(nil, sound)
		} else {
			S_StartSound(&actor.degenmobj_t, sound)
		}
	}
	P_SetMobjState(actor, (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fseestate)
}

// C documentation
//
//	//
//	// A_Chase
//	// Actor has a melee attack,
//	// so it tries to close as fast as possible
//	//
func A_Chase(actor *mobj_t) {
	var delta int32
	if actor.Freactiontime != 0 {
		actor.Freactiontime--
	}
	// modify target threshold
	if actor.Fthreshold != 0 {
		if actor.Ftarget == nil || (*mobj_t)(unsafe.Pointer(actor.Ftarget)).Fhealth <= 0 {
			actor.Fthreshold = 0
		} else {
			actor.Fthreshold--
		}
	}
	// turn towards movement direction if not there yet
	if actor.Fmovedir < 8 {
		actor.Fangle &= 7 << 29
		delta = int32(actor.Fangle - uint32(actor.Fmovedir<<29))
		if delta > 0 {
			actor.Fangle -= uint32(ANG903 / 2)
		} else {
			if delta < 0 {
				actor.Fangle += uint32(ANG903 / 2)
			}
		}
	}
	if actor.Ftarget == nil || (*mobj_t)(unsafe.Pointer(actor.Ftarget)).Fflags&MF_SHOOTABLE == 0 {
		// look for a new target
		if P_LookForPlayers(actor, 1) != 0 {
			return
		} // got a new target
		P_SetMobjState(actor, (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fspawnstate)
		return
	}
	// do not attack twice in a row
	if actor.Fflags&MF_JUSTATTACKED != 0 {
		actor.Fflags &= ^MF_JUSTATTACKED
		if gameskill != sk_nightmare && fastparm == 0 {
			P_NewChaseDir(actor)
		}
		return
	}
	// check for melee attack
	if (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fmeleestate != 0 && P_CheckMeleeRange(actor) != 0 {
		if (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fattacksound != 0 {
			S_StartSound(&actor.degenmobj_t, (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fattacksound)
		}
		P_SetMobjState(actor, (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fmeleestate)
		return
	}
	// check for missile attack
	if (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fmissilestate != 0 {
		if gameskill < sk_nightmare && fastparm == 0 && actor.Fmovecount != 0 {
			goto nomissile
		}
		if P_CheckMissileRange(actor) == 0 {
			goto nomissile
		}
		P_SetMobjState(actor, (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fmissilestate)
		actor.Fflags |= MF_JUSTATTACKED
		return
	}
	// ?
	goto nomissile
nomissile:
	;
	// possibly choose another target
	if netgame != 0 && actor.Fthreshold == 0 && P_CheckSight(actor, actor.Ftarget) == 0 {
		if P_LookForPlayers(actor, 1) != 0 {
			return
		} // got a new target
	}
	// chase towards player
	actor.Fmovecount--
	if actor.Fmovecount < 0 || P_Move(actor) == 0 {
		P_NewChaseDir(actor)
	}
	// make active sound
	if (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Factivesound != 0 && P_Random() < 3 {
		S_StartSound(&actor.degenmobj_t, (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Factivesound)
	}
}

// C documentation
//
//	//
//	// A_FaceTarget
//	//
func A_FaceTarget(actor *mobj_t) {
	if actor.Ftarget == nil {
		return
	}
	actor.Fflags |= MF_AMBUSH
	actor.Fangle = R_PointToAngle2(actor.Fx, actor.Fy, (*mobj_t)(unsafe.Pointer(actor.Ftarget)).Fx, (*mobj_t)(unsafe.Pointer(actor.Ftarget)).Fy)
	if (*mobj_t)(unsafe.Pointer(actor.Ftarget)).Fflags&MF_SHADOW != 0 {
		actor.Fangle += uint32((P_Random() - P_Random()) << 21)
	}
}

// C documentation
//
//	//
//	// A_PosAttack
//	//
func A_PosAttack(actor *mobj_t) {
	var angle, damage, slope int32
	if actor.Ftarget == nil {
		return
	}
	A_FaceTarget(actor)
	angle = int32(actor.Fangle)
	slope = P_AimLineAttack(actor, uint32(angle), 32*64*(1<<FRACBITS))
	S_StartSound(&actor.degenmobj_t, int32(sfx_pistol))
	angle += (P_Random() - P_Random()) << 20
	damage = (P_Random()%int32(5) + 1) * 3
	P_LineAttack(actor, uint32(angle), 32*64*(1<<FRACBITS), slope, damage)
}

func A_SPosAttack(actor *mobj_t) {
	var angle, bangle, damage, i, slope int32
	if actor.Ftarget == nil {
		return
	}
	S_StartSound(&actor.degenmobj_t, int32(sfx_shotgn))
	A_FaceTarget(actor)
	bangle = int32(actor.Fangle)
	slope = P_AimLineAttack(actor, uint32(bangle), 32*64*(1<<FRACBITS))
	i = 0
	for {
		if i >= 3 {
			break
		}
		angle = bangle + (P_Random()-P_Random())<<int32(20)
		damage = (P_Random()%int32(5) + 1) * 3
		P_LineAttack(actor, uint32(angle), 32*64*(1<<FRACBITS), slope, damage)
		goto _1
	_1:
		;
		i++
	}
}

func A_CPosAttack(actor *mobj_t) {
	var angle, bangle, damage, slope int32
	if actor.Ftarget == nil {
		return
	}
	S_StartSound(&actor.degenmobj_t, int32(sfx_shotgn))
	A_FaceTarget(actor)
	bangle = int32(actor.Fangle)
	slope = P_AimLineAttack(actor, uint32(bangle), 32*64*(1<<FRACBITS))
	angle = bangle + (P_Random()-P_Random())<<int32(20)
	damage = (P_Random()%int32(5) + 1) * 3
	P_LineAttack(actor, uint32(angle), 32*64*(1<<FRACBITS), slope, damage)
}

func A_CPosRefire(actor *mobj_t) {
	// keep firing unless target got out of sight
	A_FaceTarget(actor)
	if P_Random() < 40 {
		return
	}
	if actor.Ftarget == nil || (*mobj_t)(unsafe.Pointer(actor.Ftarget)).Fhealth <= 0 || P_CheckSight(actor, actor.Ftarget) == 0 {
		P_SetMobjState(actor, (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fseestate)
	}
}

func A_SpidRefire(actor *mobj_t) {
	// keep firing unless target got out of sight
	A_FaceTarget(actor)
	if P_Random() < 10 {
		return
	}
	if actor.Ftarget == nil || (*mobj_t)(unsafe.Pointer(actor.Ftarget)).Fhealth <= 0 || P_CheckSight(actor, actor.Ftarget) == 0 {
		P_SetMobjState(actor, (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fseestate)
	}
}

func A_BspiAttack(actor *mobj_t) {
	if actor.Ftarget == nil {
		return
	}
	A_FaceTarget(actor)
	// launch a missile
	P_SpawnMissile(actor, actor.Ftarget, int32(MT_ARACHPLAZ))
}

// C documentation
//
//	//
//	// A_TroopAttack
//	//
func A_TroopAttack(actor *mobj_t) {
	var damage int32
	if actor.Ftarget == nil {
		return
	}
	A_FaceTarget(actor)
	if P_CheckMeleeRange(actor) != 0 {
		S_StartSound(&actor.degenmobj_t, int32(sfx_claw))
		damage = (P_Random()%int32(8) + 1) * 3
		P_DamageMobj(actor.Ftarget, actor, actor, damage)
		return
	}
	// launch a missile
	P_SpawnMissile(actor, actor.Ftarget, int32(MT_TROOPSHOT))
}

func A_SargAttack(actor *mobj_t) {
	var damage int32
	if actor.Ftarget == nil {
		return
	}
	A_FaceTarget(actor)
	if P_CheckMeleeRange(actor) != 0 {
		damage = (P_Random()%int32(10) + 1) * 4
		P_DamageMobj(actor.Ftarget, actor, actor, damage)
	}
}

func A_HeadAttack(actor *mobj_t) {
	var damage int32
	if actor.Ftarget == nil {
		return
	}
	A_FaceTarget(actor)
	if P_CheckMeleeRange(actor) != 0 {
		damage = (P_Random()%int32(6) + 1) * 10
		P_DamageMobj(actor.Ftarget, actor, actor, damage)
		return
	}
	// launch a missile
	P_SpawnMissile(actor, actor.Ftarget, int32(MT_HEADSHOT))
}

func A_CyberAttack(actor *mobj_t) {
	if actor.Ftarget == nil {
		return
	}
	A_FaceTarget(actor)
	P_SpawnMissile(actor, actor.Ftarget, int32(MT_ROCKET))
}

func A_BruisAttack(actor *mobj_t) {
	var damage int32
	if actor.Ftarget == nil {
		return
	}
	if P_CheckMeleeRange(actor) != 0 {
		S_StartSound(&actor.degenmobj_t, int32(sfx_claw))
		damage = (P_Random()%int32(8) + 1) * 10
		P_DamageMobj(actor.Ftarget, actor, actor, damage)
		return
	}
	// launch a missile
	P_SpawnMissile(actor, actor.Ftarget, int32(MT_BRUISERSHOT))
}

// C documentation
//
//	//
//	// A_SkelMissile
//	//
func A_SkelMissile(actor *mobj_t) {
	var mo *mobj_t
	if actor.Ftarget == nil {
		return
	}
	A_FaceTarget(actor)
	actor.Fz += 16 * (1 << FRACBITS) // so missile spawns higher
	mo = P_SpawnMissile(actor, actor.Ftarget, int32(MT_TRACER))
	actor.Fz -= 16 * (1 << FRACBITS) // back to normal
	actor.Fx += mo.Fmomx
	actor.Fy += mo.Fmomy
	mo.Ftracer = actor.Ftarget
}

func init() {
	TRACEANGLE = 0xc000000
}

func A_Tracer(actor *mobj_t) {
	var dest *mobj_t
	var th *mobj_t
	var dist, slope fixed_t
	var exact angle_t
	if gametic&int32(3) != 0 {
		return
	}
	// spawn a puff of smoke behind the rocket
	P_SpawnPuff(actor.Fx, actor.Fy, actor.Fz)
	th = P_SpawnMobj(actor.Fx-actor.Fmomx, actor.Fy-actor.Fmomy, actor.Fz, int32(MT_SMOKE))
	th.Fmomz = 1 << FRACBITS
	th.Ftics -= P_Random() & 3
	if th.Ftics < 1 {
		th.Ftics = 1
	}
	// adjust direction
	dest = actor.Ftracer
	if dest == nil || dest.Fhealth <= 0 {
		return
	}
	// change angle
	exact = R_PointToAngle2(actor.Fx, actor.Fy, dest.Fx, dest.Fy)
	if exact != actor.Fangle {
		if exact-actor.Fangle > 0x80000000 {
			actor.Fangle -= uint32(TRACEANGLE)
			if exact-actor.Fangle < 0x80000000 {
				actor.Fangle = exact
			}
		} else {
			actor.Fangle += uint32(TRACEANGLE)
			if exact-actor.Fangle > 0x80000000 {
				actor.Fangle = exact
			}
		}
	}
	exact = actor.Fangle >> int32(ANGLETOFINESHIFT)
	actor.Fmomx = FixedMul((*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fspeed, finecosine[exact])
	actor.Fmomy = FixedMul((*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fspeed, finesine[exact])
	// change slope
	dist = P_AproxDistance(dest.Fx-actor.Fx, dest.Fy-actor.Fy)
	dist = dist / (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fspeed
	if dist < 1 {
		dist = 1
	}
	slope = (dest.Fz + 40*(1<<FRACBITS) - actor.Fz) / dist
	if slope < actor.Fmomz {
		actor.Fmomz -= 1 << FRACBITS / 8
	} else {
		actor.Fmomz += 1 << FRACBITS / 8
	}
}

func A_SkelWhoosh(actor *mobj_t) {
	if actor.Ftarget == nil {
		return
	}
	A_FaceTarget(actor)
	S_StartSound(&actor.degenmobj_t, int32(sfx_skeswg))
}

func A_SkelFist(actor *mobj_t) {
	var damage int32
	if actor.Ftarget == nil {
		return
	}
	A_FaceTarget(actor)
	if P_CheckMeleeRange(actor) != 0 {
		damage = (P_Random()%int32(10) + 1) * 6
		S_StartSound(&actor.degenmobj_t, int32(sfx_skepch))
		P_DamageMobj(actor.Ftarget, actor, actor, damage)
	}
}

func PIT_VileCheck(thing *mobj_t) (r boolean) {
	var check boolean
	var maxdist int32
	var v1 fixed_t
	if thing.Fflags&MF_CORPSE == 0 {
		return 1
	} // not a monster
	if thing.Ftics != -1 {
		return 1
	} // not lying still yet
	if (*mobjinfo_t)(unsafe.Pointer(thing.Finfo)).Fraisestate == S_NULL {
		return 1
	} // monster doesn't have a raise state
	maxdist = (*mobjinfo_t)(unsafe.Pointer(thing.Finfo)).Fradius + mobjinfo[int32(MT_VILE)].Fradius
	if xabs(thing.Fx-viletryx) > maxdist || xabs(thing.Fy-viletryy) > maxdist {
		return 1
	} // not actually touching
	corpsehit = thing
	v1 = 0
	corpsehit.Fmomy = v1
	corpsehit.Fmomx = v1
	corpsehit.Fheight <<= 2
	check = P_CheckPosition(corpsehit, corpsehit.Fx, corpsehit.Fy)
	corpsehit.Fheight >>= 2
	if check == 0 {
		return 1
	} // doesn't fit here
	return 0 // got one, so stop checking
}

// C documentation
//
//	//
//	// A_VileChase
//	// Check for ressurecting a body
//	//
func A_VileChase(actor *mobj_t) {
	var bx, by, xh, xl, yh, yl int32
	var temp *mobj_t
	var info *mobjinfo_t
	if actor.Fmovedir != DI_NODIR {
		// check for corpses to raise
		viletryx = actor.Fx + (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fspeed*xspeed[actor.Fmovedir]
		viletryy = actor.Fy + (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fspeed*yspeed[actor.Fmovedir]
		xl = (viletryx - bmaporgx - 32*(1<<FRACBITS)*2) >> (FRACBITS + 7)
		xh = (viletryx - bmaporgx + 32*(1<<FRACBITS)*2) >> (FRACBITS + 7)
		yl = (viletryy - bmaporgy - 32*(1<<FRACBITS)*2) >> (FRACBITS + 7)
		yh = (viletryy - bmaporgy + 32*(1<<FRACBITS)*2) >> (FRACBITS + 7)
		bx = xl
		for {
			if !(bx <= xh) {
				break
			}
			by = yl
			for {
				if !(by <= yh) {
					break
				}
				// Call PIT_VileCheck to check
				// whether object is a corpse
				// that canbe raised.
				if P_BlockThingsIterator(bx, by, PIT_VileCheck) == 0 {
					// got one!
					temp = actor.Ftarget
					actor.Ftarget = corpsehit
					A_FaceTarget(actor)
					actor.Ftarget = temp
					P_SetMobjState(actor, S_VILE_HEAL1)
					S_StartSound(&corpsehit.degenmobj_t, int32(sfx_slop))
					info = corpsehit.Finfo
					P_SetMobjState(corpsehit, (*mobjinfo_t)(unsafe.Pointer(info)).Fraisestate)
					corpsehit.Fheight <<= 2
					corpsehit.Fflags = (*mobjinfo_t)(unsafe.Pointer(info)).Fflags
					corpsehit.Fhealth = (*mobjinfo_t)(unsafe.Pointer(info)).Fspawnhealth
					corpsehit.Ftarget = nil
					return
				}
				goto _2
			_2:
				;
				by++
			}
			goto _1
		_1:
			;
			bx++
		}
	}
	// Return to normal attack.
	A_Chase(actor)
}

// C documentation
//
//	//
//	// A_VileStart
//	//
func A_VileStart(actor *mobj_t) {
	S_StartSound(&actor.degenmobj_t, int32(sfx_vilatk))
}

func A_StartFire(actor *mobj_t) {
	S_StartSound(&actor.degenmobj_t, int32(sfx_flamst))
	A_Fire(actor)
}

func A_FireCrackle(actor *mobj_t) {
	S_StartSound(&actor.degenmobj_t, int32(sfx_flame))
	A_Fire(actor)
}

func A_Fire(actor *mobj_t) {
	var an uint32
	var dest, target *mobj_t
	dest = actor.Ftracer
	if dest == nil {
		return
	}
	target = P_SubstNullMobj(actor.Ftarget)
	// don't move it if the vile lost sight
	if P_CheckSight(target, dest) == 0 {
		return
	}
	an = dest.Fangle >> int32(ANGLETOFINESHIFT)
	P_UnsetThingPosition(actor)
	actor.Fx = dest.Fx + FixedMul(24*(1<<FRACBITS), finecosine[an])
	actor.Fy = dest.Fy + FixedMul(24*(1<<FRACBITS), finesine[an])
	actor.Fz = dest.Fz
	P_SetThingPosition(actor)
}

// C documentation
//
//	//
//	// A_VileTarget
//	// Spawn the hellfire
//	//
func A_VileTarget(actor *mobj_t) {
	var fog *mobj_t
	if actor.Ftarget == nil {
		return
	}
	A_FaceTarget(actor)
	fog = P_SpawnMobj((*mobj_t)(unsafe.Pointer(actor.Ftarget)).Fx, (*mobj_t)(unsafe.Pointer(actor.Ftarget)).Fx, (*mobj_t)(unsafe.Pointer(actor.Ftarget)).Fz, int32(MT_FIRE))
	actor.Ftracer = fog
	fog.Ftarget = actor
	fog.Ftracer = actor.Ftarget
	A_Fire(fog)
}

// C documentation
//
//	//
//	// A_VileAttack
//	//
func A_VileAttack(actor *mobj_t) {
	var an int32
	var fire *mobj_t
	if actor.Ftarget == nil {
		return
	}
	A_FaceTarget(actor)
	if P_CheckSight(actor, actor.Ftarget) == 0 {
		return
	}
	S_StartSound(&actor.degenmobj_t, int32(sfx_barexp))
	P_DamageMobj(actor.Ftarget, actor, actor, 20)
	(*mobj_t)(unsafe.Pointer(actor.Ftarget)).Fmomz = 1000 * (1 << FRACBITS) / (*mobjinfo_t)(unsafe.Pointer((*mobj_t)(unsafe.Pointer(actor.Ftarget)).Finfo)).Fmass
	an = int32(actor.Fangle >> int32(ANGLETOFINESHIFT))
	fire = actor.Ftracer
	if fire == nil {
		return
	}
	// move the fire between the vile and the player
	fire.Fx = (*mobj_t)(unsafe.Pointer(actor.Ftarget)).Fx - FixedMul(24*(1<<FRACBITS), finecosine[an])
	fire.Fy = (*mobj_t)(unsafe.Pointer(actor.Ftarget)).Fy - FixedMul(24*(1<<FRACBITS), finesine[an])
	P_RadiusAttack(fire, actor, 70)
}

//
// Mancubus attack,
// firing three missiles (bruisers)
// in three different directions?
// Doesn't look like it.
//

func A_FatRaise(actor *mobj_t) {
	A_FaceTarget(actor)
	S_StartSound(&actor.degenmobj_t, int32(sfx_manatk))
}

func A_FatAttack1(actor *mobj_t) {
	var an int32
	var mo, target *mobj_t
	A_FaceTarget(actor)
	// Change direction  to ...
	actor.Fangle += uint32(ANG903 / 8)
	target = P_SubstNullMobj(actor.Ftarget)
	P_SpawnMissile(actor, target, int32(MT_FATSHOT))
	mo = P_SpawnMissile(actor, target, int32(MT_FATSHOT))
	mo.Fangle += uint32(ANG903 / 8 * 2)
	an = int32(mo.Fangle >> int32(ANGLETOFINESHIFT))
	mo.Fmomx = FixedMul((*mobjinfo_t)(unsafe.Pointer(mo.Finfo)).Fspeed, finecosine[an])
	mo.Fmomy = FixedMul((*mobjinfo_t)(unsafe.Pointer(mo.Finfo)).Fspeed, finesine[an])
}

func A_FatAttack2(actor *mobj_t) {
	var an int32
	var mo, target *mobj_t
	A_FaceTarget(actor)
	// Now here choose opposite deviation.
	actor.Fangle -= uint32(ANG903 / 8)
	target = P_SubstNullMobj(actor.Ftarget)
	P_SpawnMissile(actor, target, int32(MT_FATSHOT))
	mo = P_SpawnMissile(actor, target, int32(MT_FATSHOT))
	mo.Fangle -= uint32(ANG903 / 8 * 2)
	an = int32(mo.Fangle >> int32(ANGLETOFINESHIFT))
	mo.Fmomx = FixedMul((*mobjinfo_t)(unsafe.Pointer(mo.Finfo)).Fspeed, finecosine[an])
	mo.Fmomy = FixedMul((*mobjinfo_t)(unsafe.Pointer(mo.Finfo)).Fspeed, finesine[an])
}

func A_FatAttack3(actor *mobj_t) {
	var an int32
	var mo, target *mobj_t
	A_FaceTarget(actor)
	target = P_SubstNullMobj(actor.Ftarget)
	mo = P_SpawnMissile(actor, target, int32(MT_FATSHOT))
	mo.Fangle -= uint32(ANG903 / 8 / 2)
	an = int32(mo.Fangle >> int32(ANGLETOFINESHIFT))
	mo.Fmomx = FixedMul((*mobjinfo_t)(unsafe.Pointer(mo.Finfo)).Fspeed, finecosine[an])
	mo.Fmomy = FixedMul((*mobjinfo_t)(unsafe.Pointer(mo.Finfo)).Fspeed, finesine[an])
	mo = P_SpawnMissile(actor, target, int32(MT_FATSHOT))
	mo.Fangle += uint32(ANG903 / 8 / 2)
	an = int32(mo.Fangle >> int32(ANGLETOFINESHIFT))
	mo.Fmomx = FixedMul((*mobjinfo_t)(unsafe.Pointer(mo.Finfo)).Fspeed, finecosine[an])
	mo.Fmomy = FixedMul((*mobjinfo_t)(unsafe.Pointer(mo.Finfo)).Fspeed, finesine[an])
}

//
// SkullAttack
// Fly at the player like a missile.
//

func A_SkullAttack(actor *mobj_t) {
	var an angle_t
	var dest *mobj_t
	var dist int32
	if actor.Ftarget == nil {
		return
	}
	dest = actor.Ftarget
	actor.Fflags |= MF_SKULLFLY
	S_StartSound(&actor.degenmobj_t, (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fattacksound)
	A_FaceTarget(actor)
	an = actor.Fangle >> int32(ANGLETOFINESHIFT)
	actor.Fmomx = FixedMul(20*(1<<FRACBITS), finecosine[an])
	actor.Fmomy = FixedMul(20*(1<<FRACBITS), finesine[an])
	dist = P_AproxDistance(dest.Fx-actor.Fx, dest.Fy-actor.Fy)
	dist = dist / (20 * (1 << FRACBITS))
	if dist < 1 {
		dist = 1
	}
	actor.Fmomz = (dest.Fz + dest.Fheight>>1 - actor.Fz) / dist
}

// C documentation
//
//	//
//	// A_PainShootSkull
//	// Spawn a lost soul and launch it at the target
//	//
func A_PainShootSkull(actor *mobj_t, angle angle_t) {
	var an angle_t
	var count, prestep int32
	var currentthinker *thinker_t
	var newmobj *mobj_t
	var x, y, z fixed_t
	// count total number of skull currently on the level
	count = 0
	currentthinker = thinkercap.Fnext
	for currentthinker != &thinkercap {
		if currentthinker.Ffunction.Facv == __ccgo_fp(P_MobjThinker) && (*mobj_t)(unsafe.Pointer(currentthinker)).Ftype1 == int32(MT_SKULL) {
			count++
		}
		currentthinker = currentthinker.Fnext
	}
	// if there are allready 20 skulls on the level,
	// don't spit another one
	if count > 20 {
		return
	}
	// okay, there's playe for another one
	an = angle >> int32(ANGLETOFINESHIFT)
	prestep = 4*(1<<FRACBITS) + 3*((*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fradius+mobjinfo[int32(MT_SKULL)].Fradius)/int32(2)
	x = actor.Fx + FixedMul(prestep, finecosine[an])
	y = actor.Fy + FixedMul(prestep, finesine[an])
	z = actor.Fz + 8*(1<<FRACBITS)
	newmobj = P_SpawnMobj(x, y, z, int32(MT_SKULL))
	// Check for movements.
	if P_TryMove(newmobj, newmobj.Fx, newmobj.Fy) == 0 {
		// kill it immediately
		P_DamageMobj(newmobj, actor, actor, 10000)
		return
	}
	newmobj.Ftarget = actor.Ftarget
	A_SkullAttack(newmobj)
}

// C documentation
//
//	//
//	// A_PainAttack
//	// Spawn a lost soul and launch it at the target
//	//
func A_PainAttack(actor *mobj_t) {
	if actor.Ftarget == nil {
		return
	}
	A_FaceTarget(actor)
	A_PainShootSkull(actor, actor.Fangle)
}

func A_PainDie(actor *mobj_t) {
	A_Fall(actor)
	A_PainShootSkull(actor, actor.Fangle+uint32(ANG903))
	A_PainShootSkull(actor, actor.Fangle+uint32(ANG1801))
	A_PainShootSkull(actor, actor.Fangle+uint32(ANG2703))
}

func A_Scream(actor *mobj_t) {
	var sound int32
	switch (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fdeathsound {
	case 0:
		return
	case int32(sfx_podth1):
		fallthrough
	case int32(sfx_podth2):
		fallthrough
	case int32(sfx_podth3):
		sound = int32(sfx_podth1) + P_Random()%int32(3)
	case int32(sfx_bgdth1):
		fallthrough
	case int32(sfx_bgdth2):
		sound = int32(sfx_bgdth1) + P_Random()%int32(2)
	default:
		sound = (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fdeathsound
		break
	}
	// Check for bosses.
	if actor.Ftype1 == int32(MT_SPIDER) || actor.Ftype1 == int32(MT_CYBORG) {
		// full volume
		S_StartSound(nil, sound)
	} else {
		S_StartSound(&actor.degenmobj_t, sound)
	}
}

func A_XScream(actor *mobj_t) {
	S_StartSound(&actor.degenmobj_t, int32(sfx_slop))
}

func A_Pain(actor *mobj_t) {
	if (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fpainsound != 0 {
		S_StartSound(&actor.degenmobj_t, (*mobjinfo_t)(unsafe.Pointer(actor.Finfo)).Fpainsound)
	}
}

func A_Fall(actor *mobj_t) {
	// actor is on ground, it can be walked over
	actor.Fflags &^= MF_SOLID
	// So change this if corpse objects
	// are meant to be obstacles.
}

// C documentation
//
//	//
//	// A_Explode
//	//
func A_Explode(thingy *mobj_t) {
	P_RadiusAttack(thingy, thingy.Ftarget, 128)
}

// Check whether the death of the specified monster type is allowed
// to trigger the end of episode special action.
//
// This behavior changed in v1.9, the most notable effect of which
// was to break uac_dead.wad

func CheckBossEnd(motype mobjtype_t) (r boolean) {
	if gameversion < exe_ultimate {
		if gamemap != 8 {
			return 0
		}
		// Baron death on later episodes is nothing special.
		if motype == int32(MT_BRUISER) && gameepisode != 1 {
			return 0
		}
		return 1
	} else {
		// New logic that appeared in Ultimate Doom.
		// Looks like the logic was overhauled while adding in the
		// episode 4 support.  Now bosses only trigger on their
		// specific episode.
		switch gameepisode {
		case 1:
			return booluint32(gamemap == 8 && motype == int32(MT_BRUISER))
		case 2:
			return booluint32(gamemap == 8 && motype == int32(MT_CYBORG))
		case 3:
			return booluint32(gamemap == 8 && motype == int32(MT_SPIDER))
		case 4:
			return booluint32(gamemap == 6 && motype == int32(MT_CYBORG) || gamemap == 8 && motype == int32(MT_SPIDER))
		default:
			return booluint32(gamemap == 8)
		}
	}
	return r
}

// C documentation
//
//	//
//	// A_BossDeath
//	// Possibly trigger special effects
//	// if on first boss level
//	//
func A_BossDeath(mo *mobj_t) {
	var i int32
	var mo2 *mobj_t
	var th *thinker_t
	if gamemode == commercial {
		if gamemap != 7 {
			return
		}
		if mo.Ftype1 != int32(MT_FATSO) && mo.Ftype1 != int32(MT_BABY) {
			return
		}
	} else {
		if CheckBossEnd(mo.Ftype1) == 0 {
			return
		}
	}
	// make sure there is a player alive for victory
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		if playeringame[i] != 0 && players[i].Fhealth > 0 {
			break
		}
		goto _1
	_1:
		;
		i++
	}
	if i == int32(MAXPLAYERS) {
		return
	} // no one left alive, so do not end game
	// scan the remaining thinkers to see
	// if all bosses are dead
	th = thinkercap.Fnext
	for {
		if th == &thinkercap {
			break
		}
		if th.Ffunction.Facv != __ccgo_fp(P_MobjThinker) {
			goto _2
		}
		mo2 = (*mobj_t)(unsafe.Pointer(th))
		if mo2 != mo && mo2.Ftype1 == mo.Ftype1 && mo2.Fhealth > 0 {
			// other boss not dead
			return
		}
		goto _2
	_2:
		;
		th = th.Fnext
	}
	// victory!
	if gamemode == commercial {
		if gamemap == 7 {
			if mo.Ftype1 == int32(MT_FATSO) {
				EV_DoFloor(&line_t{Ftag: 666}, int32(lowerFloorToLowest))
				return
			}
			if mo.Ftype1 == int32(MT_BABY) {
				EV_DoFloor(&line_t{Ftag: 667}, int32(raiseToTexture))
				return
			}
		}
	} else {
		switch gameepisode {
		case 1:
			EV_DoFloor(&line_t{Ftag: 666}, int32(lowerFloorToLowest))
			return
		case 4:
			switch gamemap {
			case 6:
				EV_DoDoor(&line_t{Ftag: 666}, int32(vld_blazeOpen))
				return
			case 8:
				EV_DoFloor(&line_t{Ftag: 666}, int32(lowerFloorToLowest))
				return
				break
			}
		}
	}
	G_ExitLevel()
}

func A_Hoof(mo *mobj_t) {
	S_StartSound(&mo.degenmobj_t, int32(sfx_hoof))
	A_Chase(mo)
}

func A_Metal(mo *mobj_t) {
	S_StartSound(&mo.degenmobj_t, int32(sfx_metal))
	A_Chase(mo)
}

func A_BabyMetal(mo *mobj_t) {
	S_StartSound(&mo.degenmobj_t, int32(sfx_bspwlk))
	A_Chase(mo)
}

func A_OpenShotgun2(player *player_t, psp *pspdef_t) {
	S_StartSound(&player.Fmo.degenmobj_t, int32(sfx_dbopn))
}

func A_LoadShotgun2(player *player_t, psp *pspdef_t) {
	S_StartSound(&player.Fmo.degenmobj_t, int32(sfx_dbload))
}

func A_CloseShotgun2(player *player_t, psp *pspdef_t) {
	S_StartSound(&player.Fmo.degenmobj_t, int32(sfx_dbcls))
	A_ReFire(player, psp)
}

func A_BrainAwake(mo *mobj_t) {
	var m *mobj_t
	var thinker *thinker_t
	// find all the target spots
	numbraintargets = 0
	braintargeton = 0
	thinker = thinkercap.Fnext
	thinker = thinkercap.Fnext
	for {
		if thinker == &thinkercap {
			break
		}
		if thinker.Ffunction.Facv != __ccgo_fp(P_MobjThinker) {
			goto _1
		} // not a mobj
		m = (*mobj_t)(unsafe.Pointer(thinker))
		if m.Ftype1 == int32(MT_BOSSTARGET) {
			braintargets[numbraintargets] = m
			numbraintargets++
		}
		goto _1
	_1:
		;
		thinker = thinker.Fnext
	}
	S_StartSound(nil, int32(sfx_bossit))
}

func A_BrainPain(mo *mobj_t) {
	S_StartSound(nil, int32(sfx_bospn))
}

func A_BrainScream(mo *mobj_t) {
	var th *mobj_t
	var x, y, z int32
	x = mo.Fx - 196*(1<<FRACBITS)
	for {
		if x >= mo.Fx+320*(1<<FRACBITS) {
			break
		}
		y = mo.Fy - 320*(1<<FRACBITS)
		z = 128 + P_Random()*int32(2)*(1<<FRACBITS)
		th = P_SpawnMobj(x, y, z, int32(MT_ROCKET))
		th.Fmomz = P_Random() * 512
		P_SetMobjState(th, S_BRAINEXPLODE1)
		th.Ftics -= P_Random() & 7
		if th.Ftics < 1 {
			th.Ftics = 1
		}
		goto _1
	_1:
		;
		x += 1 << FRACBITS * 8
	}
	S_StartSound(nil, int32(sfx_bosdth))
}

func A_BrainExplode(mo *mobj_t) {
	var th *mobj_t
	var x, y, z int32
	x = mo.Fx + (P_Random()-P_Random())*int32(2048)
	y = mo.Fy
	z = 128 + P_Random()*int32(2)*(1<<FRACBITS)
	th = P_SpawnMobj(x, y, z, int32(MT_ROCKET))
	th.Fmomz = P_Random() * 512
	P_SetMobjState(th, S_BRAINEXPLODE1)
	th.Ftics -= P_Random() & 7
	if th.Ftics < 1 {
		th.Ftics = 1
	}
}

func A_BrainDie(mo *mobj_t) {
	G_ExitLevel()
}

func A_BrainSpit(mo *mobj_t) {
	var newmobj, targ *mobj_t
	easy ^= 1
	if gameskill <= sk_easy && easy == 0 {
		return
	}
	// shoot a cube at current target
	targ = braintargets[braintargeton]
	braintargeton = (braintargeton + 1) % numbraintargets
	// spawn brain missile
	newmobj = P_SpawnMissile(mo, targ, int32(MT_SPAWNSHOT))
	newmobj.Ftarget = targ
	newmobj.Freactiontime = (targ.Fy - mo.Fy) / newmobj.Fmomy / newmobj.Fstate.Ftics
	S_StartSound(nil, int32(sfx_bospit))
}

var easy int32

// C documentation
//
//	// travelling cube sound
func A_SpawnSound(mo *mobj_t) {
	S_StartSound(&mo.degenmobj_t, int32(sfx_boscub))
	A_SpawnFly(mo)
}

func A_SpawnFly(mo *mobj_t) {
	var fog, newmobj, targ *mobj_t
	var r int32
	var type1 mobjtype_t
	mo.Freactiontime--
	if mo.Freactiontime != 0 {
		return
	} // still flying
	targ = P_SubstNullMobj(mo.Ftarget)
	// First spawn teleport fog.
	fog = P_SpawnMobj(targ.Fx, targ.Fy, targ.Fz, int32(MT_SPAWNFIRE))
	S_StartSound(&fog.degenmobj_t, int32(sfx_telept))
	// Randomly select monster to spawn.
	r = P_Random()
	// Probability distribution (kind of :),
	// decreasing likelihood.
	if r < 50 {
		type1 = int32(MT_TROOP)
	} else {
		if r < 90 {
			type1 = int32(MT_SERGEANT)
		} else {
			if r < 120 {
				type1 = int32(MT_SHADOWS)
			} else {
				if r < 130 {
					type1 = int32(MT_PAIN)
				} else {
					if r < 160 {
						type1 = int32(MT_HEAD)
					} else {
						if r < 162 {
							type1 = int32(MT_VILE)
						} else {
							if r < 172 {
								type1 = int32(MT_UNDEAD)
							} else {
								if r < 192 {
									type1 = int32(MT_BABY)
								} else {
									if r < 222 {
										type1 = int32(MT_FATSO)
									} else {
										if r < 246 {
											type1 = int32(MT_KNIGHT)
										} else {
											type1 = int32(MT_BRUISER)
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	newmobj = P_SpawnMobj(targ.Fx, targ.Fy, targ.Fz, type1)
	if P_LookForPlayers(newmobj, 1) != 0 {
		P_SetMobjState(newmobj, (*mobjinfo_t)(unsafe.Pointer(newmobj.Finfo)).Fseestate)
	}
	// telefrag anything in this spot
	P_TeleportMove(newmobj, newmobj.Fx, newmobj.Fy)
	// remove self (i.e., cube).
	P_RemoveMobj(mo)
}

func A_PlayerScream(mo *mobj_t) {
	var sound int32
	// Default death sound.
	sound = int32(sfx_pldeth)
	if gamemode == commercial && mo.Fhealth < -int32(50) {
		// IF THE PLAYER DIES
		// LESS THAN -50% WITHOUT GIBBING
		sound = int32(sfx_pdiehi)
	}
	S_StartSound(&mo.degenmobj_t, sound)
}

const INT_MAX9 = 2147483647

//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Refresh/render internal state variables (global).
//

// Data.
//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Created by the sound utility written by Dave Taylor.
//	Kept as a sample, DOOM2  sounds. Frozen.
//

//
// FLOORS
//

// C documentation
//
//	//
//	// Move a plane (floor or ceiling) and check for crushing
//	//
func T_MovePlane(sector *sector_t, speed fixed_t, dest fixed_t, crush boolean, floorOrCeiling int32, direction int32) (r result_e) {
	var flag boolean
	var lastpos fixed_t
	switch floorOrCeiling {
	case 0:
		// FLOOR
		switch direction {
		case -1:
			// DOWN
			if sector.Ffloorheight-speed < dest {
				lastpos = sector.Ffloorheight
				sector.Ffloorheight = dest
				flag = P_ChangeSector(sector, crush)
				if flag == 1 {
					sector.Ffloorheight = lastpos
					P_ChangeSector(sector, crush)
					//return crushed;
				}
				return int32(pastdest)
			} else {
				lastpos = sector.Ffloorheight
				sector.Ffloorheight -= speed
				flag = P_ChangeSector(sector, crush)
				if flag == 1 {
					sector.Ffloorheight = lastpos
					P_ChangeSector(sector, crush)
					return int32(crushed)
				}
			}
		case 1:
			// UP
			if sector.Ffloorheight+speed > dest {
				lastpos = sector.Ffloorheight
				sector.Ffloorheight = dest
				flag = P_ChangeSector(sector, crush)
				if flag == 1 {
					sector.Ffloorheight = lastpos
					P_ChangeSector(sector, crush)
					//return crushed;
				}
				return int32(pastdest)
			} else {
				// COULD GET CRUSHED
				lastpos = sector.Ffloorheight
				sector.Ffloorheight += speed
				flag = P_ChangeSector(sector, crush)
				if flag == 1 {
					if crush == 1 {
						return int32(crushed)
					}
					sector.Ffloorheight = lastpos
					P_ChangeSector(sector, crush)
					return int32(crushed)
				}
			}
			break
		}
	case 1:
		// CEILING
		switch direction {
		case -1:
			// DOWN
			if sector.Fceilingheight-speed < dest {
				lastpos = sector.Fceilingheight
				sector.Fceilingheight = dest
				flag = P_ChangeSector(sector, crush)
				if flag == 1 {
					sector.Fceilingheight = lastpos
					P_ChangeSector(sector, crush)
					//return crushed;
				}
				return int32(pastdest)
			} else {
				// COULD GET CRUSHED
				lastpos = sector.Fceilingheight
				sector.Fceilingheight -= speed
				flag = P_ChangeSector(sector, crush)
				if flag == 1 {
					if crush == 1 {
						return int32(crushed)
					}
					sector.Fceilingheight = lastpos
					P_ChangeSector(sector, crush)
					return int32(crushed)
				}
			}
		case 1:
			// UP
			if sector.Fceilingheight+speed > dest {
				lastpos = sector.Fceilingheight
				sector.Fceilingheight = dest
				flag = P_ChangeSector(sector, crush)
				if flag == 1 {
					sector.Fceilingheight = lastpos
					P_ChangeSector(sector, crush)
					//return crushed;
				}
				return int32(pastdest)
			} else {
				lastpos = sector.Fceilingheight
				sector.Fceilingheight += speed
				flag = P_ChangeSector(sector, crush)
				// UNUSED
			}
			break
		}
		break
	}
	return int32(ok)
}

// C documentation
//
//	//
//	// MOVE A FLOOR TO IT'S DESTINATION (UP OR DOWN)
//	//
func T_MoveFloor(floor *floormove_t) {
	var res result_e
	res = T_MovePlane(floor.Fsector, floor.Fspeed, floor.Ffloordestheight, floor.Fcrush, 0, floor.Fdirection)
	if leveltime&7 == 0 {
		S_StartSound(&floor.Fsector.Fsoundorg, int32(sfx_stnmov))
	}
	if res == int32(pastdest) {
		floor.Fsector.Fspecialdata = uintptr(0)
		if floor.Fdirection == 1 {
			switch floor.Ftype1 {
			case int32(donutRaise):
				floor.Fsector.Fspecial = int16(floor.Fnewspecial)
				floor.Fsector.Ffloorpic = floor.Ftexture
				fallthrough
			default:
				break
			}
		} else {
			if floor.Fdirection == -1 {
				switch floor.Ftype1 {
				case int32(lowerAndChange):
					floor.Fsector.Fspecial = int16((*floormove_t)(unsafe.Pointer(floor)).Fnewspecial)
					floor.Fsector.Ffloorpic = (*floormove_t)(unsafe.Pointer(floor)).Ftexture
					fallthrough
				default:
					break
				}
			}
		}
		P_RemoveThinker(&floor.Fthinker)
		S_StartSound(&floor.Fsector.Fsoundorg, int32(sfx_pstop))
	}
}

// C documentation
//
//	//
//	// HANDLE FLOOR TYPES
//	//
func EV_DoFloor(line *line_t, floortype floor_e) (r int32) {
	var floor uintptr
	var side *side_t
	var sec *sector_t
	var i, minsize, rtn, secnum, v1 int32
	secnum = -1
	rtn = 0
	for {
		v1 = P_FindSectorFromLineTag(line, secnum)
		secnum = v1
		if !(v1 >= 0) {
			break
		}
		sec = &sectors[secnum]
		// ALREADY MOVING?  IF SO, KEEP GOING...
		if sec.Fspecialdata != 0 {
			continue
		}
		// new floor thinker
		rtn = 1
		floor = Z_Malloc(64, int32(PU_LEVSPEC), uintptr(0))
		floorP := (*floormove_t)(unsafe.Pointer(floor))
		P_AddThinker(&floorP.Fthinker)
		sec.Fspecialdata = floor
		floorP.Fthinker.Ffunction.Facv = __ccgo_fp(T_MoveFloor)
		floorP.Ftype1 = floortype
		floorP.Fcrush = 0
		switch floortype {
		case int32(lowerFloor):
			floorP.Fdirection = -1
			floorP.Fsector = sec
			floorP.Fspeed = 1 << FRACBITS
			floorP.Ffloordestheight = P_FindHighestFloorSurrounding(sec)
		case int32(lowerFloorToLowest):
			floorP.Fdirection = -1
			floorP.Fsector = sec
			floorP.Fspeed = 1 << FRACBITS
			floorP.Ffloordestheight = P_FindLowestFloorSurrounding(sec)
		case int32(turboLower):
			floorP.Fdirection = -1
			floorP.Fsector = sec
			floorP.Fspeed = 1 << FRACBITS * 4
			floorP.Ffloordestheight = P_FindHighestFloorSurrounding(sec)
			if floorP.Ffloordestheight != sec.Ffloorheight {
				floorP.Ffloordestheight += 8 * (1 << FRACBITS)
			}
		case int32(raiseFloorCrush):
			floorP.Fcrush = 1
			fallthrough
		case int32(raiseFloor):
			floorP.Fdirection = 1
			floorP.Fsector = sec
			floorP.Fspeed = 1 << FRACBITS
			floorP.Ffloordestheight = P_FindLowestCeilingSurrounding(sec)
			if floorP.Ffloordestheight > sec.Fceilingheight {
				floorP.Ffloordestheight = sec.Fceilingheight
			}
			floorP.Ffloordestheight -= 8 * (1 << FRACBITS) * boolint32(floortype == int32(raiseFloorCrush))
		case int32(raiseFloorTurbo):
			floorP.Fdirection = 1
			floorP.Fsector = sec
			floorP.Fspeed = 1 << FRACBITS * 4
			floorP.Ffloordestheight = P_FindNextHighestFloor(sec, sec.Ffloorheight)
		case int32(raiseFloorToNearest):
			floorP.Fdirection = 1
			floorP.Fsector = sec
			floorP.Fspeed = 1 << FRACBITS
			floorP.Ffloordestheight = P_FindNextHighestFloor(sec, sec.Ffloorheight)
		case int32(raiseFloor24):
			floorP.Fdirection = 1
			floorP.Fsector = sec
			floorP.Fspeed = 1 << FRACBITS
			floorP.Ffloordestheight = (*sector_t)(unsafe.Pointer((*floormove_t)(unsafe.Pointer(floor)).Fsector)).Ffloorheight + 24*(1<<FRACBITS)
		case int32(raiseFloor512):
			floorP.Fdirection = 1
			floorP.Fsector = sec
			floorP.Fspeed = 1 << FRACBITS
			floorP.Ffloordestheight = (*sector_t)(unsafe.Pointer((*floormove_t)(unsafe.Pointer(floor)).Fsector)).Ffloorheight + 512*(1<<FRACBITS)
		case int32(raiseFloor24AndChange):
			floorP.Fdirection = 1
			floorP.Fsector = sec
			floorP.Fspeed = 1 << FRACBITS
			floorP.Ffloordestheight = (*sector_t)(unsafe.Pointer((*floormove_t)(unsafe.Pointer(floor)).Fsector)).Ffloorheight + 24*(1<<FRACBITS)
			sec.Ffloorpic = line.Ffrontsector.Ffloorpic
			sec.Fspecial = line.Ffrontsector.Fspecial
		case int32(raiseToTexture):
			minsize = int32(INT_MAX9)
			floorP.Fdirection = 1
			floorP.Fsector = sec
			floorP.Fspeed = 1 << FRACBITS
			i = 0
			for {
				if i >= sec.Flinecount {
					break
				}
				if twoSided(secnum, i) != 0 {
					side = getSide(secnum, i, 0)
					if int32((*side_t)(unsafe.Pointer(side)).Fbottomtexture) >= 0 {
						if textureheight[side.Fbottomtexture] < minsize {
							minsize = textureheight[side.Fbottomtexture]
						}
					}
					side = getSide(secnum, i, 1)
					if int32((*side_t)(unsafe.Pointer(side)).Fbottomtexture) >= 0 {
						if textureheight[side.Fbottomtexture] < minsize {
							minsize = textureheight[side.Fbottomtexture]
						}
					}
				}
				goto _2
			_2:
				;
				i++
			}
			floorP.Ffloordestheight = (*sector_t)(unsafe.Pointer((*floormove_t)(unsafe.Pointer(floor)).Fsector)).Ffloorheight + minsize
		case int32(lowerAndChange):
			floorP.Fdirection = -1
			floorP.Fsector = sec
			floorP.Fspeed = 1 << FRACBITS
			floorP.Ffloordestheight = P_FindLowestFloorSurrounding(sec)
			floorP.Ftexture = sec.Ffloorpic
			i = 0
			for {
				if i >= sec.Flinecount {
					break
				}
				if twoSided(secnum, i) != 0 {
					if sectorIndex(getSide(secnum, i, 0).Fsector) == secnum {
						sec = getSector(secnum, i, 1)
						if sec.Ffloorheight == (*floormove_t)(unsafe.Pointer(floor)).Ffloordestheight {
							floorP.Ftexture = sec.Ffloorpic
							floorP.Fnewspecial = int32(sec.Fspecial)
							break
						}
					} else {
						sec = getSector(secnum, i, 0)
						if sec.Ffloorheight == (*floormove_t)(unsafe.Pointer(floor)).Ffloordestheight {
							floorP.Ftexture = sec.Ffloorpic
							floorP.Fnewspecial = int32(sec.Fspecial)
							break
						}
					}
				}
				goto _3
			_3:
				;
				i++
			}
			fallthrough
		default:
			break
		}
	}
	return rtn
}

// C documentation
//
//	//
//	// BUILD A STAIRCASE!
//	//
func EV_BuildStairs(line *line_t, type1 stair_e) (r int32) {
	var floor uintptr
	var sec, tsec *sector_t
	var height, i, newsecnum, ok, rtn, secnum, texture, v1 int32
	var speed, stairsize fixed_t
	stairsize = 0
	speed = 0
	secnum = -1
	rtn = 0
	for {
		v1 = P_FindSectorFromLineTag(line, secnum)
		secnum = v1
		if !(v1 >= 0) {
			break
		}
		sec = &sectors[secnum]
		// ALREADY MOVING?  IF SO, KEEP GOING...
		if sec.Fspecialdata != 0 {
			continue
		}
		// new floor thinker
		rtn = 1
		floor = Z_Malloc(64, int32(PU_LEVSPEC), uintptr(0))
		floorP := (*floormove_t)(unsafe.Pointer(floor))
		P_AddThinker(&floorP.Fthinker)
		sec.Fspecialdata = floor
		*(*actionf_p1)(unsafe.Pointer(floor + 16)) = __ccgo_fp(T_MoveFloor)
		floorP.Fdirection = 1
		floorP.Fsector = sec
		switch type1 {
		case int32(build8):
			speed = 1 << FRACBITS / 4
			stairsize = 8 * (1 << FRACBITS)
		case int32(turbo16):
			speed = 1 << FRACBITS * 4
			stairsize = 16 * (1 << FRACBITS)
			break
		}
		floorP.Fspeed = speed
		height = sec.Ffloorheight + stairsize
		floorP.Ffloordestheight = height
		texture = int32(sec.Ffloorpic)
		// Find next sector to raise
		// 1.	Find 2-sided line with same sector side[0]
		// 2.	Other side is the next sector to raise
		for cond := true; cond; cond = ok != 0 {
			ok = 0
			i = 0
			for {
				if i >= sec.Flinecount {
					break
				}
				if int32(sec.Flines[i].Fflags)&ML_TWOSIDED == 0 {
					goto _2
				}
				tsec = sec.Flines[i].Ffrontsector
				newsecnum = sectorIndex(tsec)
				if secnum != newsecnum {
					goto _2
				}
				tsec = sec.Flines[i].Fbacksector
				newsecnum = sectorIndex(tsec)
				if int32(tsec.Ffloorpic) != texture {
					goto _2
				}
				height += stairsize
				if tsec.Fspecialdata != 0 {
					goto _2
				}
				sec = tsec
				secnum = newsecnum
				floor = Z_Malloc(64, int32(PU_LEVSPEC), uintptr(0))
				floorP = (*floormove_t)(unsafe.Pointer(floor))
				P_AddThinker(&floorP.Fthinker)
				sec.Fspecialdata = floor
				floorP.Fthinker.Ffunction.Facv = __ccgo_fp(T_MoveFloor)
				floorP.Fdirection = 1
				floorP.Fsector = sec
				floorP.Fspeed = speed
				floorP.Ffloordestheight = height
				ok = 1
				break
				goto _2
			_2:
				;
				i++
			}
		}
	}
	return rtn
}

const ANG1803 = 2147483648
const BONUSADD = 6

func init() {
	maxammo = [4]int32{
		0: 200,
		1: 50,
		2: 300,
		3: 50,
	}
}

func init() {
	clipammo = [4]int32{
		0: 10,
		1: 4,
		2: 20,
		3: 1,
	}
}

//
// GET STUFF
//

//
// P_GiveAmmo
// Num is the number of clip loads,
// not the individual count (0= 1/2 clip).
// Returns false if the ammo can't be picked up at all
//

func P_GiveAmmo(player *player_t, ammo ammotype_t, num int32) (r boolean) {
	var oldammo int32
	if ammo == am_noammo {
		return 0
	}
	if ammo > NUMAMMO {
		I_Error(23713, ammo)
	}
	if player.Fammo[ammo] == player.Fmaxammo[ammo] {
		return 0
	}
	if num != 0 {
		num *= clipammo[ammo]
	} else {
		num = clipammo[ammo] / 2
	}
	if gameskill == sk_baby || gameskill == sk_nightmare {
		// give double ammo in trainer mode,
		// you'll need in nightmare
		num <<= 1
	}
	oldammo = player.Fammo[ammo]
	player.Fammo[ammo] += num
	if player.Fammo[ammo] > player.Fmaxammo[ammo] {
		player.Fammo[ammo] = player.Fmaxammo[ammo]
	}
	// If non zero ammo,
	// don't change up weapons,
	// player was lower on purpose.
	if oldammo != 0 {
		return 1
	}
	// We were down to zero,
	// so select a new weapon.
	// Preferences are not user selectable.
	switch ammo {
	case am_clip:
		if player.Freadyweapon == wp_fist {
			if player.Fweaponowned[wp_chainsaw] != 0 {
				player.Fpendingweapon = wp_chaingun
			} else {
				player.Fpendingweapon = wp_pistol
			}
		}
	case am_shell:
		if player.Freadyweapon == wp_fist || player.Freadyweapon == wp_pistol {
			if player.Fweaponowned[wp_shotgun] != 0 {
				player.Fpendingweapon = wp_shotgun
			}
		}
	case am_cell:
		if player.Freadyweapon == wp_fist || player.Freadyweapon == wp_pistol {
			if player.Fweaponowned[wp_plasma] != 0 {
				player.Fpendingweapon = wp_plasma
			}
		}
	case am_misl:
		if player.Freadyweapon == wp_fist {
			if player.Fweaponowned[wp_missile] != 0 {
				player.Fpendingweapon = wp_missile
			}
		}
		fallthrough
	default:
		break
	}
	return 1
}

// C documentation
//
//	//
//	// P_GiveWeapon
//	// The weapon name may have a MF_DROPPED flag ored in.
//	//
func P_GiveWeapon(player *player_t, weapon weapontype_t, dropped boolean) (r boolean) {
	var gaveammo, gaveweapon boolean
	if netgame != 0 && deathmatch != 2 && dropped == 0 {
		// leave placed weapons forever on net games
		if player.Fweaponowned[weapon] != 0 {
			return 0
		}
		player.Fbonuscount += BONUSADD
		player.Fweaponowned[weapon] = 1
		if deathmatch != 0 {
			P_GiveAmmo(player, weaponinfo[weapon].Fammo, 5)
		} else {
			P_GiveAmmo(player, weaponinfo[weapon].Fammo, 2)
		}
		player.Fpendingweapon = weapon
		if player == &players[consoleplayer] {
			S_StartSound(nil, int32(sfx_wpnup))
		}
		return 0
	}
	if weaponinfo[weapon].Fammo != am_noammo {
		// give one clip with a dropped weapon,
		// two clips with a found weapon
		if dropped != 0 {
			gaveammo = P_GiveAmmo(player, weaponinfo[weapon].Fammo, 1)
		} else {
			gaveammo = P_GiveAmmo(player, weaponinfo[weapon].Fammo, 2)
		}
	} else {
		gaveammo = 0
	}
	if player.Fweaponowned[weapon] != 0 {
		gaveweapon = 0
	} else {
		gaveweapon = 1
		player.Fweaponowned[weapon] = 1
		player.Fpendingweapon = weapon
	}
	return booluint32(gaveweapon != 0 || gaveammo != 0)
}

// C documentation
//
//	//
//	// P_GiveBody
//	// Returns false if the body isn't needed at all
//	//
func P_GiveBody(player *player_t, num int32) (r boolean) {
	if player.Fhealth >= int32(MAXHEALTH) {
		return 0
	}
	player.Fhealth += num
	if player.Fhealth > int32(MAXHEALTH) {
		player.Fhealth = int32(MAXHEALTH)
	}
	player.Fmo.Fhealth = player.Fhealth
	return 1
}

// C documentation
//
//	//
//	// P_GiveArmor
//	// Returns false if the armor is worse
//	// than the current armor.
//	//
func P_GiveArmor(player *player_t, armortype int32) (r boolean) {
	var hits int32
	hits = armortype * 100
	if player.Farmorpoints >= hits {
		return 0
	} // don't pick up
	player.Farmortype = armortype
	player.Farmorpoints = hits
	return 1
}

// C documentation
//
//	//
//	// P_GiveCard
//	//
func P_GiveCard(player *player_t, card card_t) {
	if player.Fcards[card] != 0 {
		return
	}
	player.Fbonuscount = int32(BONUSADD)
	player.Fcards[card] = 1
}

// C documentation
//
//	//
//	// P_GivePower
//	//
func P_GivePower(player *player_t, power int32) (r boolean) {
	if power == int32(pw_invulnerability) {
		player.Fpowers[power] = INVULNTICS
		return 1
	}
	if power == int32(pw_invisibility) {
		player.Fpowers[power] = INVISTICS
		player.Fmo.Fflags |= MF_SHADOW
		return 1
	}
	if power == int32(pw_infrared) {
		player.Fpowers[power] = INFRATICS
		return 1
	}
	if power == int32(pw_ironfeet) {
		player.Fpowers[power] = IRONTICS
		return 1
	}
	if power == int32(pw_strength) {
		P_GiveBody(player, 100)
		player.Fpowers[power] = 1
		return 1
	}
	if player.Fpowers[power] != 0 {
		return 0
	} // already got it
	player.Fpowers[power] = 1
	return 1
}

// C documentation
//
//	//
//	// P_TouchSpecialThing
//	//
func P_TouchSpecialThing(special *mobj_t, toucher *mobj_t) {
	var delta fixed_t
	var i, sound int32
	var player *player_t
	delta = special.Fz - toucher.Fz
	if delta > toucher.Fheight || delta < -8*(1<<FRACBITS) {
		// out of reach
		return
	}
	sound = int32(sfx_itemup)
	player = toucher.Fplayer
	// Dead thing touching.
	// Can happen with a sliding player corpse.
	if toucher.Fhealth <= 0 {
		return
	}
	// Identify by sprite.
	switch special.Fsprite {
	// armor
	case SPR_ARM1:
		if P_GiveArmor(player, int32(DEH_DEFAULT_GREEN_ARMOR_CLASS)) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(23737)
	case SPR_ARM2:
		if P_GiveArmor(player, int32(DEH_DEFAULT_BLUE_ARMOR_CLASS)) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(23758)
		break
		// bonus items
		fallthrough
	case SPR_BON1:
		player.Fhealth++ // can go over 100%
		if player.Fhealth > int32(DEH_DEFAULT_MAX_HEALTH) {
			player.Fhealth = int32(DEH_DEFAULT_MAX_HEALTH)
		}
		player.Fmo.Fhealth = player.Fhealth
		player.Fmessage = __ccgo_ts_str(23783)
	case SPR_BON2:
		player.Farmorpoints++ // can go over 100%
		if player.Farmorpoints > int32(DEH_DEFAULT_MAX_ARMOR) {
			player.Farmorpoints = int32(DEH_DEFAULT_MAX_ARMOR)
		}
		// deh_green_armor_class only applies to the green armor shirt;
		// for the armor helmets, armortype 1 is always used.
		if player.Farmortype == 0 {
			player.Farmortype = 1
		}
		player.Fmessage = __ccgo_ts_str(23809)
	case SPR_SOUL:
		player.Fhealth += int32(DEH_DEFAULT_SOULSPHERE_HEALTH)
		if player.Fhealth > int32(DEH_DEFAULT_MAX_SOULSPHERE) {
			player.Fhealth = int32(DEH_DEFAULT_MAX_SOULSPHERE)
		}
		player.Fmo.Fhealth = player.Fhealth
		player.Fmessage = __ccgo_ts_str(23835)
		sound = int32(sfx_getpow)
	case SPR_MEGA:
		if gamemode != commercial {
			return
		}
		player.Fhealth = int32(DEH_DEFAULT_MEGASPHERE_HEALTH)
		player.Fmo.Fhealth = player.Fhealth
		// We always give armor type 2 for the megasphere; dehacked only
		// affects the MegaArmor.
		P_GiveArmor(player, 2)
		player.Fmessage = __ccgo_ts_str(23848)
		sound = int32(sfx_getpow)
		break
		// cards
		// leave cards for everyone
		fallthrough
	case SPR_BKEY:
		if player.Fcards[it_bluecard] == 0 {
			player.Fmessage = __ccgo_ts_str(23860)
		}
		P_GiveCard(player, it_bluecard)
		if netgame == 0 {
			break
		}
		return
	case SPR_YKEY:
		if player.Fcards[it_yellowcard] == 0 {
			player.Fmessage = __ccgo_ts_str(23886)
		}
		P_GiveCard(player, it_yellowcard)
		if netgame == 0 {
			break
		}
		return
	case SPR_RKEY:
		if player.Fcards[it_redcard] == 0 {
			player.Fmessage = __ccgo_ts_str(23914)
		}
		P_GiveCard(player, it_redcard)
		if netgame == 0 {
			break
		}
		return
	case SPR_BSKU:
		if player.Fcards[it_blueskull] == 0 {
			player.Fmessage = __ccgo_ts_str(23939)
		}
		P_GiveCard(player, it_blueskull)
		if netgame == 0 {
			break
		}
		return
	case SPR_YSKU:
		if player.Fcards[it_yellowskull] == 0 {
			player.Fmessage = __ccgo_ts_str(23967)
		}
		P_GiveCard(player, it_yellowskull)
		if netgame == 0 {
			break
		}
		return
	case SPR_RSKU:
		if player.Fcards[it_redskull] == 0 {
			player.Fmessage = __ccgo_ts_str(23997)
		}
		P_GiveCard(player, it_redskull)
		if netgame == 0 {
			break
		}
		return
		// medikits, heals
		fallthrough
	case SPR_STIM:
		if P_GiveBody(player, 10) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24024)
	case SPR_MEDI:
		if P_GiveBody(player, 25) == 0 {
			return
		}
		if player.Fhealth < 25 {
			player.Fmessage = __ccgo_ts_str(24046)
		} else {
			player.Fmessage = __ccgo_ts_str(24088)
		}
		break
		// power ups
		fallthrough
	case SPR_PINV:
		if P_GivePower(player, int32(pw_invulnerability)) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24109)
		sound = int32(sfx_getpow)
	case SPR_PSTR:
		if P_GivePower(player, int32(pw_strength)) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24126)
		if player.Freadyweapon != wp_fist {
			player.Fpendingweapon = wp_fist
		}
		sound = int32(sfx_getpow)
	case SPR_PINS:
		if P_GivePower(player, int32(pw_invisibility)) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24135)
		sound = int32(sfx_getpow)
	case SPR_SUIT:
		if P_GivePower(player, int32(pw_ironfeet)) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24156)
		sound = int32(sfx_getpow)
	case SPR_PMAP:
		if P_GivePower(player, int32(pw_allmap)) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24181)
		sound = int32(sfx_getpow)
	case SPR_PVIS:
		if P_GivePower(player, int32(pw_infrared)) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24199)
		sound = int32(sfx_getpow)
		break
		// ammo
		fallthrough
	case SPR_CLIP:
		if special.Fflags&MF_DROPPED != 0 {
			if P_GiveAmmo(player, am_clip, 0) == 0 {
				return
			}
		} else {
			if P_GiveAmmo(player, am_clip, 1) == 0 {
				return
			}
		}
		player.Fmessage = __ccgo_ts_str(24225)
	case SPR_AMMO:
		if P_GiveAmmo(player, am_clip, 5) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24243)
	case SPR_ROCK:
		if P_GiveAmmo(player, am_misl, 1) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24271)
	case SPR_BROK:
		if P_GiveAmmo(player, am_misl, 5) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24291)
	case SPR_CELL:
		if P_GiveAmmo(player, am_cell, 1) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24319)
	case SPR_CELP:
		if P_GiveAmmo(player, am_cell, 5) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24345)
	case SPR_SHEL:
		if P_GiveAmmo(player, am_shell, 1) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24376)
	case SPR_SBOX:
		if P_GiveAmmo(player, am_shell, 5) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24404)
	case SPR_BPAK:
		if player.Fbackpack == 0 {
			i = 0
			for {
				if i >= int32(NUMAMMO) {
					break
				}
				player.Fmaxammo[i] *= 2
				goto _1
			_1:
				;
				i++
			}
			player.Fbackpack = 1
		}
		i = 0
		for {
			if i >= int32(NUMAMMO) {
				break
			}
			P_GiveAmmo(player, ammotype_t(i), 1)
			goto _2
		_2:
			;
			i++
		}
		player.Fmessage = __ccgo_ts_str(24439)
		break
		// weapons
		fallthrough
	case SPR_BFUG:
		if P_GiveWeapon(player, wp_bfg, 0) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24474)
		sound = int32(sfx_wpnup)
	case SPR_MGUN:
		if P_GiveWeapon(player, wp_chaingun, booluint32(special.Fflags&MF_DROPPED != 0)) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24505)
		sound = int32(sfx_wpnup)
	case SPR_CSAW:
		if P_GiveWeapon(player, wp_chainsaw, 0) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24527)
		sound = int32(sfx_wpnup)
	case SPR_LAUN:
		if P_GiveWeapon(player, wp_missile, 0) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24556)
		sound = int32(sfx_wpnup)
	case SPR_PLAS:
		if P_GiveWeapon(player, wp_plasma, 0) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24585)
		sound = int32(sfx_wpnup)
	case SPR_SHOT:
		if P_GiveWeapon(player, wp_shotgun, booluint32(special.Fflags&MF_DROPPED != 0)) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24609)
		sound = int32(sfx_wpnup)
	case SPR_SGN2:
		if P_GiveWeapon(player, wp_supershotgun, booluint32(special.Fflags&MF_DROPPED != 0)) == 0 {
			return
		}
		player.Fmessage = __ccgo_ts_str(24630)
		sound = int32(sfx_wpnup)
	default:
		I_Error(24657, 0)
	}
	if special.Fflags&MF_COUNTITEM != 0 {
		player.Fitemcount++
	}
	P_RemoveMobj(special)
	player.Fbonuscount += BONUSADD
	if player == &players[consoleplayer] {
		S_StartSound(nil, sound)
	}
}

// C documentation
//
//	//
//	// KillMobj
//	//
func P_KillMobj(source *mobj_t, target *mobj_t) {
	var item mobjtype_t
	var mo *mobj_t
	target.Fflags &= ^(MF_SHOOTABLE | MF_FLOAT | MF_SKULLFLY)
	if target.Ftype1 != int32(MT_SKULL) {
		target.Fflags &= ^MF_NOGRAVITY
	}
	target.Fflags |= MF_CORPSE | MF_DROPOFF
	target.Fheight >>= 2
	if source != nil && source.Fplayer != nil {
		// count for intermission
		if target.Fflags&MF_COUNTKILL != 0 {
			source.Fplayer.Fkillcount++
		}
		if target.Fplayer != nil {
			idx := playerIndex(target.Fplayer)
			source.Fplayer.Ffrags[idx]++
		}
	} else {
		if netgame == 0 && target.Fflags&MF_COUNTKILL != 0 {
			// count all monster deaths,
			// even those caused by other monsters
			players[0].Fkillcount++
		}
	}
	if target.Fplayer != nil {
		// count environment kills against you
		if source == nil {
			idx := playerIndex(target.Fplayer)
			target.Fplayer.Ffrags[idx]++
		}
		target.Fflags &= ^MF_SOLID
		target.Fplayer.Fplayerstate = int32(PST_DEAD)
		P_DropWeapon(target.Fplayer)
		if target.Fplayer == &players[consoleplayer] && automapactive != 0 {
			// don't die in auto map,
			// switch view prior to dying
			AM_Stop()
		}
	}
	if target.Fhealth < -(*mobjinfo_t)(unsafe.Pointer(target.Finfo)).Fspawnhealth && (*mobjinfo_t)(unsafe.Pointer(target.Finfo)).Fxdeathstate != 0 {
		P_SetMobjState(target, (*mobjinfo_t)(unsafe.Pointer(target.Finfo)).Fxdeathstate)
	} else {
		P_SetMobjState(target, (*mobjinfo_t)(unsafe.Pointer(target.Finfo)).Fdeathstate)
	}
	target.Ftics -= P_Random() & 3
	if target.Ftics < 1 {
		target.Ftics = 1
	}
	//	I_StartSound (&actor->r, actor->info->deathsound);
	// In Chex Quest, monsters don't drop items.
	if gameversion == exe_chex {
		return
	}
	// Drop stuff.
	// This determines the kind of object spawned
	// during the death frame of a thing.
	switch target.Ftype1 {
	case int32(MT_WOLFSS):
		fallthrough
	case int32(MT_POSSESSED):
		item = int32(MT_CLIP)
	case int32(MT_SHOTGUY):
		item = int32(MT_SHOTGUN)
	case int32(MT_CHAINGUY):
		item = int32(MT_CHAINGUN)
	default:
		return
	}
	mo = P_SpawnMobj(target.Fx, target.Fy, -1-0x7fffffff, item)
	mo.Fflags |= MF_DROPPED // special versions of items
}

// C documentation
//
//	//
//	// P_DamageMobj
//	// Damages both enemies and players
//	// "inflictor" is the thing that caused the damage
//	//  creature or missile, can be NULL (slime, etc)
//	// "source" is the thing to target after taking damage
//	//  creature or NULL
//	// Source and inflictor are the same for melee attacks.
//	// Source can be NULL for slime, barrel explosions
//	// and other environmental stuff.
//	//
func P_DamageMobj(target *mobj_t, inflictor *mobj_t, source *mobj_t, damage int32) {
	var ang uint32
	var player *player_t
	var saved, temp, v3 int32
	var thrust, v1, v2 fixed_t
	if target.Fflags&MF_SHOOTABLE == 0 {
		return
	} // shouldn't happen...
	if target.Fhealth <= 0 {
		return
	}
	if target.Fflags&MF_SKULLFLY != 0 {
		v2 = 0
		target.Fmomz = v2
		v1 = v2
		target.Fmomy = v1
		target.Fmomx = v1
	}
	player = target.Fplayer
	if player != nil && gameskill == sk_baby {
		damage >>= 1
	} // take half damage in trainer mode
	// Some close combat weapons should not
	// inflict thrust and push the victim out of reach,
	// thus kick away unless using the chainsaw.
	if inflictor != nil && target.Fflags&MF_NOCLIP == 0 && (source == nil || source.Fplayer == nil || source.Fplayer.Freadyweapon != wp_chainsaw) {
		ang = R_PointToAngle2(inflictor.Fx, inflictor.Fy, target.Fx, target.Fy)
		thrust = damage * (1 << FRACBITS >> 3) * 100 / target.Finfo.Fmass
		// make fall forwards sometimes
		if damage < 40 && damage > target.Fhealth && target.Fz-inflictor.Fz > 64*(1<<FRACBITS) && P_Random()&int32(1) != 0 {
			ang += uint32(ANG1803)
			thrust *= 4
		}
		ang >>= uint32(ANGLETOFINESHIFT)
		target.Fmomx += FixedMul(thrust, finecosine[ang])
		target.Fmomy += FixedMul(thrust, finesine[ang])
	}
	// player specific
	if player != nil {
		// end of game hell hack
		if int32((*sector_t)(unsafe.Pointer(target.Fsubsector.Fsector)).Fspecial) == 11 && damage >= target.Fhealth {
			damage = target.Fhealth - 1
		}
		// Below certain threshold,
		// ignore damage in GOD mode, or with INVUL power.
		if damage < 1000 && (player.Fcheats&int32(CF_GODMODE) != 0 || player.Fpowers[pw_invulnerability] != 0) {
			return
		}
		if player.Farmortype != 0 {
			if player.Farmortype == 1 {
				saved = damage / 3
			} else {
				saved = damage / 2
			}
			if player.Farmorpoints <= saved {
				// armor is used up
				saved = player.Farmorpoints
				player.Farmortype = 0
			}
			player.Farmorpoints -= saved
			damage -= saved
		}
		player.Fhealth -= damage // mirror mobj health here for Dave
		if player.Fhealth < 0 {
			player.Fhealth = 0
		}
		player.Fattacker = source
		player.Fdamagecount += damage // add damage before armor / invuln
		if player.Fdamagecount > 100 {
			player.Fdamagecount = 100
		} // teleport stomp does 10k points...
		if damage < 100 {
			v3 = damage
		} else {
			v3 = 100
		}
		temp = v3
		if player == &players[consoleplayer] {
			I_Tactile(40, 10, 40+temp*int32(2))
		}
	}
	// do the damage
	target.Fhealth -= damage
	if target.Fhealth <= 0 {
		P_KillMobj(source, target)
		return
	}
	if P_Random() < target.Finfo.Fpainchance && target.Fflags&MF_SKULLFLY == 0 {
		target.Fflags |= MF_JUSTHIT // fight back!
		P_SetMobjState(target, target.Finfo.Fpainstate)
	}
	target.Freactiontime = 0 // we're awake now...
	if (target.Fthreshold == 0 || target.Ftype1 == int32(MT_VILE)) && source != nil && source != target && source.Ftype1 != int32(MT_VILE) {
		// if not intent on another player,
		// chase after this one
		target.Ftarget = source
		target.Fthreshold = int32(BASETHRESHOLD)
		if target.Fstate == &states[target.Finfo.Fspawnstate] && target.Finfo.Fseestate != S_NULL {
			P_SetMobjState(target, target.Finfo.Fseestate)
		}
	}
}

// State.
//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Refresh/render internal state variables (global).
//

//
// FIRELIGHT FLICKER
//

// C documentation
//
//	//
//	// T_FireFlicker
//	//
func T_FireFlicker(flick *fireflicker_t) {
	var amount int32
	flick.Fcount--
	if flick.Fcount != 0 {
		return
	}
	amount = P_Random() & 3 * 16
	if int32(flick.Fsector.Flightlevel)-amount < flick.Fminlight {
		flick.Fsector.Flightlevel = int16(flick.Fminlight)
	} else {
		flick.Fsector.Flightlevel = int16(flick.Fmaxlight - amount)
	}
	flick.Fcount = 4
}

// C documentation
//
//	//
//	// P_SpawnFireFlicker
//	//
func P_SpawnFireFlicker(sector *sector_t) {
	// Note that we are resetting sector attributes.
	// Nothing special about it during gameplay.
	sector.Fspecial = 0
	mem := Z_Malloc(48, int32(PU_LEVSPEC), uintptr(0))
	flick := (*fireflicker_t)(unsafe.Pointer(mem))
	P_AddThinker(&flick.Fthinker)
	flick.Fthinker.Ffunction.Facv = __ccgo_fp(T_FireFlicker)
	flick.Fsector = sector
	flick.Fmaxlight = int32(sector.Flightlevel)
	flick.Fminlight = P_FindMinSurroundingLight(sector, int32(sector.Flightlevel)) + 16
	flick.Fcount = 4
}

//
// BROKEN LIGHT FLASHING
//

// C documentation
//
//	//
//	// T_LightFlash
//	// Do flashing lights.
//	//
func T_LightFlash(flash uintptr) {
	var v1 int32
	var v2 uintptr
	v2 = flash + 32
	*(*int32)(unsafe.Pointer(v2))--
	v1 = *(*int32)(unsafe.Pointer(v2))
	if v1 != 0 {
		return
	}
	if int32((*sector_t)(unsafe.Pointer((*lightflash_t)(unsafe.Pointer(flash)).Fsector)).Flightlevel) == (*lightflash_t)(unsafe.Pointer(flash)).Fmaxlight {
		(*sector_t)(unsafe.Pointer((*lightflash_t)(unsafe.Pointer(flash)).Fsector)).Flightlevel = int16((*lightflash_t)(unsafe.Pointer(flash)).Fminlight)
		(*lightflash_t)(unsafe.Pointer(flash)).Fcount = P_Random()&(*lightflash_t)(unsafe.Pointer(flash)).Fmintime + 1
	} else {
		(*sector_t)(unsafe.Pointer((*lightflash_t)(unsafe.Pointer(flash)).Fsector)).Flightlevel = int16((*lightflash_t)(unsafe.Pointer(flash)).Fmaxlight)
		(*lightflash_t)(unsafe.Pointer(flash)).Fcount = P_Random()&(*lightflash_t)(unsafe.Pointer(flash)).Fmaxtime + 1
	}
}

// C documentation
//
//	//
//	// P_SpawnLightFlash
//	// After the map has been loaded, scan each sector
//	// for specials that spawn thinkers
//	//
func P_SpawnLightFlash(sector *sector_t) {
	var flash uintptr
	// nothing special about it during gameplay
	sector.Fspecial = 0
	flash = Z_Malloc(56, int32(PU_LEVSPEC), uintptr(0))
	flashP := (*lightflash_t)(unsafe.Pointer(flash))
	P_AddThinker(&flashP.Fthinker)
	flashP.Fthinker.Ffunction.Facv = __ccgo_fp(T_LightFlash)
	flashP.Fsector = sector
	flashP.Fmaxlight = int32(sector.Flightlevel)
	flashP.Fminlight = P_FindMinSurroundingLight(sector, int32(sector.Flightlevel))
	flashP.Fmaxtime = 64
	flashP.Fmintime = 7
	flashP.Fcount = P_Random()&flashP.Fmaxtime + 1
}

//
// STROBE LIGHT FLASHING
//

// C documentation
//
//	//
//	// T_StrobeFlash
//	//
func T_StrobeFlash(flash *strobe_t) {
	flash.Fcount--
	if flash.Fcount != 0 {
		return
	}
	if int32(flash.Fsector.Flightlevel) == flash.Fminlight {
		flash.Fsector.Flightlevel = int16(flash.Fmaxlight)
		flash.Fcount = flash.Fbrighttime
	} else {
		flash.Fsector.Flightlevel = int16(flash.Fminlight)
		flash.Fcount = flash.Fdarktime
	}
}

// C documentation
//
//	//
//	// P_SpawnStrobeFlash
//	// After the map has been loaded, scan each sector
//	// for specials that spawn thinkers
//	//
func P_SpawnStrobeFlash(sector *sector_t, fastOrSlow int32, inSync int32) {
	var flash uintptr
	flash = Z_Malloc(56, int32(PU_LEVSPEC), uintptr(0))
	flashP := (*strobe_t)(unsafe.Pointer(flash))
	P_AddThinker(&flashP.Fthinker)
	flashP.Fsector = sector
	flashP.Fdarktime = fastOrSlow
	flashP.Fbrighttime = int32(STROBEBRIGHT)
	flashP.Fthinker.Ffunction.Facv = __ccgo_fp(T_StrobeFlash)
	flashP.Fmaxlight = int32(sector.Flightlevel)
	flashP.Fminlight = P_FindMinSurroundingLight(sector, int32(sector.Flightlevel))
	if flashP.Fminlight == flashP.Fmaxlight {
		flashP.Fminlight = 0
	}
	// nothing special about it during gameplay
	sector.Fspecial = 0
	if inSync == 0 {
		flashP.Fcount = P_Random()&int32(7) + 1
	} else {
		flashP.Fcount = 1
	}
}

// C documentation
//
//	//
//	// Start strobing lights (usually from a trigger)
//	//
func EV_StartLightStrobing(line *line_t) {
	var sec *sector_t
	var secnum, v1 int32
	secnum = -1
	for {
		v1 = P_FindSectorFromLineTag(line, secnum)
		secnum = v1
		if !(v1 >= 0) {
			break
		}
		sec = &sectors[secnum]
		if sec.Fspecialdata != 0 {
			continue
		}
		P_SpawnStrobeFlash(sec, int32(SLOWDARK), 0)
	}
}

// C documentation
//
//	//
//	// TURN LINE'S TAG LIGHTS OFF
//	//
func EV_TurnTagLightsOff(line *line_t) {
	var i, j, min int32
	var templine *line_t
	var tsec *sector_t
	j = 0
	for {
		if j >= numsectors {
			break
		}
		sector := &sectors[j]
		if int32(sector.Ftag) == int32(line.Ftag) {
			min = int32(sector.Flightlevel)
			i = 0
			for {
				if i >= sector.Flinecount {
					break
				}
				templine = sector.Flines[i]
				tsec = getNextSector(templine, sector)
				if tsec == nil {
					goto _2
				}
				if int32(tsec.Flightlevel) < min {
					min = int32(tsec.Flightlevel)
				}
				goto _2
			_2:
				;
				i++
			}
			sector.Flightlevel = int16(min)
		}
		goto _1
	_1:
		;
		j++
	}
}

// C documentation
//
//	//
//	// TURN LINE'S TAG LIGHTS ON
//	//
func EV_LightTurnOn(line *line_t, bright int32) {
	var i, j int32
	var temp *sector_t
	var templine *line_t
	i = 0
	for {
		if i >= numsectors {
			break
		}
		sector := &sectors[i]
		if int32(sector.Ftag) == int32(line.Ftag) {
			// bright = 0 means to search
			// for highest light level
			// surrounding sector
			if bright == 0 {
				j = 0
				for {
					if j >= sector.Flinecount {
						break
					}
					templine = sector.Flines[j]
					temp = getNextSector(templine, sector)
					if temp == nil {
						goto _2
					}
					if int32(temp.Flightlevel) > bright {
						bright = int32(temp.Flightlevel)
					}
					goto _2
				_2:
					;
					j++
				}
			}
			sector.Flightlevel = int16(bright)
		}
		goto _1
	_1:
		;
		i++
	}
}

//
// Spawn glowing light
//

func T_Glow(g *glow_t) {
	switch g.Fdirection {
	case -1:
		// DOWN
		g.Fsector.Flightlevel -= GLOWSPEED
		if int32(g.Fsector.Flightlevel) <= g.Fminlight {
			g.Fsector.Flightlevel += GLOWSPEED
			g.Fdirection = 1
		}
	case 1:
		// UP
		g.Fsector.Flightlevel += GLOWSPEED
		if int32(g.Fsector.Flightlevel) >= g.Fmaxlight {
			g.Fsector.Flightlevel -= GLOWSPEED
			g.Fdirection = -1
		}
		break
	}
}

func P_SpawnGlowingLight(sector *sector_t) {
	var g uintptr
	g = Z_Malloc(48, int32(PU_LEVSPEC), uintptr(0))
	gP := (*glow_t)(unsafe.Pointer(g))
	P_AddThinker(&gP.Fthinker)
	gP.Fsector = sector
	gP.Fminlight = P_FindMinSurroundingLight(sector, int32(sector.Flightlevel))
	gP.Fmaxlight = int32(sector.Flightlevel)
	gP.Fthinker.Ffunction.Facv = __ccgo_fp(T_Glow)
	gP.Fdirection = -1
	sector.Fspecial = 0
}

const ANG1805 = 2147483648
const DEFAULT_SPECHIT_MAGIC = 29400216

//
// TELEPORT MOVE
//

// C documentation
//
//	//
//	// PIT_StompThing
//	//
func PIT_StompThing(thing *mobj_t) (r boolean) {
	var blockdist fixed_t
	if thing.Fflags&MF_SHOOTABLE == 0 {
		return 1
	}
	blockdist = thing.Fradius + tmthing.Fradius
	if xabs(thing.Fx-tmx) >= blockdist || xabs(thing.Fy-tmy) >= blockdist {
		// didn't hit it
		return 1
	}
	// don't clip against self
	if thing == tmthing {
		return 1
	}
	// monsters don't stomp things except on boss level
	if tmthing.Fplayer == nil && gamemap != 30 {
		return 0
	}
	P_DamageMobj(thing, tmthing, tmthing, 10000)
	return 1
}

// C documentation
//
//	//
//	// P_TeleportMove
//	//
func P_TeleportMove(thing *mobj_t, x fixed_t, y fixed_t) (r boolean) {
	var bx, by, xh, xl, yh, yl int32
	var newsubsec *subsector_t
	var v1 fixed_t
	// kill anything occupying the position
	tmthing = thing
	tmflags = thing.Fflags
	tmx = x
	tmy = y
	tmbbox[int32(BOXTOP)] = y + tmthing.Fradius
	tmbbox[int32(BOXBOTTOM)] = y - tmthing.Fradius
	tmbbox[int32(BOXRIGHT)] = x + tmthing.Fradius
	tmbbox[int32(BOXLEFT)] = x - tmthing.Fradius
	newsubsec = R_PointInSubsector(x, y)
	ceilingline = nil
	// The base floor/ceiling is from the subsector
	// that contains the point.
	// Any contacted lines the step closer together
	// will adjust them.
	v1 = newsubsec.Fsector.Ffloorheight
	tmdropoffz = v1
	tmfloorz = v1
	tmceilingz = newsubsec.Fsector.Fceilingheight
	validcount++
	numspechit = 0
	// stomp on any things contacted
	xl = (tmbbox[int32(BOXLEFT)] - bmaporgx - 32*(1<<FRACBITS)) >> (FRACBITS + 7)
	xh = (tmbbox[int32(BOXRIGHT)] - bmaporgx + 32*(1<<FRACBITS)) >> (FRACBITS + 7)
	yl = (tmbbox[int32(BOXBOTTOM)] - bmaporgy - 32*(1<<FRACBITS)) >> (FRACBITS + 7)
	yh = (tmbbox[int32(BOXTOP)] - bmaporgy + 32*(1<<FRACBITS)) >> (FRACBITS + 7)
	bx = xl
	for {
		if !(bx <= xh) {
			break
		}
		by = yl
		for {
			if !(by <= yh) {
				break
			}
			if P_BlockThingsIterator(bx, by, PIT_StompThing) == 0 {
				return 0
			}
			goto _3
		_3:
			;
			by++
		}
		goto _2
	_2:
		;
		bx++
	}
	// the move is ok,
	// so link the thing into its new position
	P_UnsetThingPosition(thing)
	thing.Ffloorz = tmfloorz
	thing.Fceilingz = tmceilingz
	thing.Fx = x
	thing.Fy = y
	P_SetThingPosition(thing)
	return 1
}

// C documentation
//
//	//
//	// PIT_CheckLine
//	// Adjusts tmfloorz and tmceilingz as lines are contacted
//	//
func PIT_CheckLine(ld *line_t) (r boolean) {
	if tmbbox[int32(BOXRIGHT)] <= ld.Fbbox[BOXLEFT] || tmbbox[int32(BOXLEFT)] >= ld.Fbbox[BOXRIGHT] || tmbbox[int32(BOXTOP)] <= ld.Fbbox[BOXBOTTOM] || tmbbox[int32(BOXBOTTOM)] >= ld.Fbbox[BOXTOP] {
		return 1
	}
	if P_BoxOnLineSide(uintptr(unsafe.Pointer(&tmbbox)), ld) != -1 {
		return 1
	}
	// A line has been hit
	// The moving thing's destination position will cross
	// the given line.
	// If this should not be allowed, return false.
	// If the line is special, keep track of it
	// to process later if the move is proven ok.
	// NOTE: specials are NOT sorted by order,
	// so two special lines that are only 8 pixels apart
	// could be crossed in either order.
	if ld.Fbacksector == nil {
		return 0
	} // one sided line
	if tmthing.Fflags&MF_MISSILE == 0 {
		if int32(ld.Fflags)&ML_BLOCKING != 0 {
			return 0
		} // explicitly blocking everything
		if tmthing.Fplayer == nil && int32(ld.Fflags)&ML_BLOCKMONSTERS != 0 {
			return 0
		} // block monsters only
	}
	// set openrange, opentop, openbottom
	P_LineOpening(ld)
	// adjust floor / ceiling heights
	if opentop < tmceilingz {
		tmceilingz = opentop
		ceilingline = ld
	}
	if openbottom > tmfloorz {
		tmfloorz = openbottom
	}
	if lowfloor < tmdropoffz {
		tmdropoffz = lowfloor
	}
	// if contacted a special line, add it to the list
	if ld.Fspecial != 0 {
		spechit[numspechit] = ld
		numspechit++
		// fraggle: spechits overrun emulation code from prboom-plus
		if numspechit > int32(MAXSPECIALCROSS_ORIGINAL) {
			SpechitOverrun(ld)
		}
	}
	return 1
}

// C documentation
//
//	//
//	// PIT_CheckThing
//	//
func PIT_CheckThing(thing *mobj_t) (r boolean) {
	var blockdist, v1, v2 fixed_t
	var damage int32
	var solid boolean
	if thing.Fflags&(MF_SOLID|MF_SPECIAL|MF_SHOOTABLE) == 0 {
		return 1
	}
	blockdist = thing.Fradius + tmthing.Fradius
	if xabs(thing.Fx-tmx) >= blockdist || xabs(thing.Fy-tmy) >= blockdist {
		// didn't hit it
		return 1
	}
	// don't clip against self
	if thing == tmthing {
		return 1
	}
	// check for skulls slamming into things
	if tmthing.Fflags&MF_SKULLFLY != 0 {
		damage = (P_Random()%int32(8) + 1) * tmthing.Finfo.Fdamage
		P_DamageMobj(thing, tmthing, tmthing, damage)
		tmthing.Fflags &^= MF_SKULLFLY
		v2 = 0
		tmthing.Fmomz = v2
		v1 = v2
		tmthing.Fmomy = v1
		tmthing.Fmomx = v1
		P_SetMobjState(tmthing, tmthing.Finfo.Fspawnstate)
		return 0 // stop moving
	}
	// missiles can hit other things
	if tmthing.Fflags&MF_MISSILE != 0 {
		// see if it went over / under
		if tmthing.Fz > thing.Fz+thing.Fheight {
			return 1
		} // overhead
		if tmthing.Fz+tmthing.Fheight < thing.Fz {
			return 1
		} // underneath
		if tmthing.Ftarget != nil && ((*mobj_t)(unsafe.Pointer(tmthing.Ftarget)).Ftype1 == thing.Ftype1 || (*mobj_t)(unsafe.Pointer(tmthing.Ftarget)).Ftype1 == int32(MT_KNIGHT) && thing.Ftype1 == int32(MT_BRUISER) || (*mobj_t)(unsafe.Pointer(tmthing.Ftarget)).Ftype1 == int32(MT_BRUISER) && thing.Ftype1 == int32(MT_KNIGHT)) {
			// Don't hit same species as originator.
			if thing == tmthing.Ftarget {
				return 1
			}
			// sdh: Add deh_species_infighting here.  We can override the
			// "monsters of the same species cant hurt each other" behavior
			// through dehacked patches
			if thing.Ftype1 != int32(MT_PLAYER) && DEH_DEFAULT_SPECIES_INFIGHTING == 0 {
				// Explode, but do no damage.
				// Let players missile other players.
				return 0
			}
		}
		if thing.Fflags&MF_SHOOTABLE == 0 {
			// didn't do any damage
			return booluint32(thing.Fflags&MF_SOLID == 0)
		}
		// damage / explode
		damage = (P_Random()%int32(8) + 1) * tmthing.Finfo.Fdamage
		P_DamageMobj(thing, tmthing, tmthing.Ftarget, damage)
		// don't traverse any more
		return 0
	}
	// check for special pickup
	if thing.Fflags&MF_SPECIAL != 0 {
		solid = uint32(thing.Fflags & MF_SOLID)
		if tmflags&MF_PICKUP != 0 {
			// can remove thing
			P_TouchSpecialThing(thing, tmthing)
		}
		return booluint32(solid == 0)
	}
	return booluint32(thing.Fflags&MF_SOLID == 0)
}

//
// MOVEMENT CLIPPING
//

// C documentation
//
//	//
//	// P_CheckPosition
//	// This is purely informative, nothing is modified
//	// (except things picked up).
//	//
//	// in:
//	//  a mobj_t (can be valid or invalid)
//	//  a position to be checked
//	//   (doesn't need to be related to the mobj_t->x,y)
//	//
//	// during:
//	//  special things are touched if MF_PICKUP
//	//  early out on solid lines?
//	//
//	// out:
//	//  newsubsec
//	//  floorz
//	//  ceilingz
//	//  tmdropoffz
//	//   the lowest point contacted
//	//   (monsters won't move to a dropoff)
//	//  speciallines[]
//	//  numspeciallines
//	//
func P_CheckPosition(thing *mobj_t, x fixed_t, y fixed_t) (r boolean) {
	var bx, by, xh, xl, yh, yl int32
	var newsubsec *subsector_t
	var v1 fixed_t
	tmthing = thing
	tmflags = thing.Fflags
	tmx = x
	tmy = y
	tmbbox[int32(BOXTOP)] = y + tmthing.Fradius
	tmbbox[int32(BOXBOTTOM)] = y - tmthing.Fradius
	tmbbox[int32(BOXRIGHT)] = x + tmthing.Fradius
	tmbbox[int32(BOXLEFT)] = x - tmthing.Fradius
	newsubsec = R_PointInSubsector(x, y)
	ceilingline = nil
	// The base floor / ceiling is from the subsector
	// that contains the point.
	// Any contacted lines the step closer together
	// will adjust them.
	v1 = newsubsec.Fsector.Ffloorheight
	tmdropoffz = v1
	tmfloorz = v1
	tmceilingz = newsubsec.Fsector.Fceilingheight
	validcount++
	numspechit = 0
	if tmflags&MF_NOCLIP != 0 {
		return 1
	}
	// Check things first, possibly picking things up.
	// The bounding box is extended by MAXRADIUS
	// because mobj_ts are grouped into mapblocks
	// based on their origin point, and can overlap
	// into adjacent blocks by up to MAXRADIUS units.
	xl = (tmbbox[int32(BOXLEFT)] - bmaporgx - 32*(1<<FRACBITS)) >> (FRACBITS + 7)
	xh = (tmbbox[int32(BOXRIGHT)] - bmaporgx + 32*(1<<FRACBITS)) >> (FRACBITS + 7)
	yl = (tmbbox[int32(BOXBOTTOM)] - bmaporgy - 32*(1<<FRACBITS)) >> (FRACBITS + 7)
	yh = (tmbbox[int32(BOXTOP)] - bmaporgy + 32*(1<<FRACBITS)) >> (FRACBITS + 7)
	bx = xl
	for {
		if !(bx <= xh) {
			break
		}
		by = yl
		for {
			if !(by <= yh) {
				break
			}
			if P_BlockThingsIterator(bx, by, PIT_CheckThing) == 0 {
				return 0
			}
			goto _3
		_3:
			;
			by++
		}
		goto _2
	_2:
		;
		bx++
	}
	// check lines
	xl = (tmbbox[int32(BOXLEFT)] - bmaporgx) >> (FRACBITS + 7)
	xh = (tmbbox[int32(BOXRIGHT)] - bmaporgx) >> (FRACBITS + 7)
	yl = (tmbbox[int32(BOXBOTTOM)] - bmaporgy) >> (FRACBITS + 7)
	yh = (tmbbox[int32(BOXTOP)] - bmaporgy) >> (FRACBITS + 7)
	bx = xl
	for {
		if !(bx <= xh) {
			break
		}
		by = yl
		for {
			if !(by <= yh) {
				break
			}
			if P_BlockLinesIterator(bx, by, PIT_CheckLine) == 0 {
				return 0
			}
			goto _5
		_5:
			;
			by++
		}
		goto _4
	_4:
		;
		bx++
	}
	return 1
}

// C documentation
//
//	//
//	// P_TryMove
//	// Attempt to move to a new position,
//	// crossing special lines unless MF_TELEPORT is set.
//	//
func P_TryMove(thing *mobj_t, x fixed_t, y fixed_t) (r boolean) {
	var oldside, side, v1 int32
	var oldx, oldy fixed_t
	mthing := thing
	floatok = 0
	if P_CheckPosition(thing, x, y) == 0 {
		return 0
	} // solid wall or thing
	if mthing.Fflags&MF_NOCLIP == 0 {
		if tmceilingz-tmfloorz < mthing.Fheight {
			return 0
		} // doesn't fit
		floatok = 1
		if mthing.Fflags&MF_TELEPORT == 0 && tmceilingz-mthing.Fz < mthing.Fheight {
			return 0
		} // mobj must lower itself to fit
		if mthing.Fflags&MF_TELEPORT == 0 && tmfloorz-mthing.Fz > 24*(1<<FRACBITS) {
			return 0
		} // too big a step up
		if mthing.Fflags&(MF_DROPOFF|MF_FLOAT) == 0 && tmfloorz-tmdropoffz > 24*(1<<FRACBITS) {
			return 0
		} // don't stand over a dropoff
	}
	// the move is ok,
	// so link the thing into its new position
	P_UnsetThingPosition(thing)
	oldx = mthing.Fx
	oldy = mthing.Fy
	mthing.Ffloorz = tmfloorz
	mthing.Fceilingz = tmceilingz
	mthing.Fx = x
	mthing.Fy = y
	P_SetThingPosition(thing)
	// if any special lines were hit, do the effect
	if mthing.Fflags&(MF_TELEPORT|MF_NOCLIP) == 0 {
		for {
			v1 = numspechit
			numspechit--
			if v1 == 0 {
				break
			}
			// see if the line was crossed
			ld := spechit[numspechit]
			side = P_PointOnLineSide(mthing.Fx, mthing.Fy, ld)
			oldside = P_PointOnLineSide(oldx, oldy, ld)
			if side != oldside {
				if ld.Fspecial != 0 {
					P_CrossSpecialLine(lineIndex(ld), oldside, thing)
				}
			}
		}
	}
	return 1
}

// C documentation
//
//	//
//	// P_ThingHeightClip
//	// Takes a valid thing and adjusts the thing->floorz,
//	// thing->ceilingz, and possibly thing->z.
//	// This is called for all nearby monsters
//	// whenever a sector changes height.
//	// If the thing doesn't fit,
//	// the z will be set to the lowest value
//	// and false will be returned.
//	//
func P_ThingHeightClip(thing *mobj_t) (r boolean) {
	var onfloor boolean
	onfloor = booluint32(thing.Fz == thing.Ffloorz)
	P_CheckPosition(thing, thing.Fx, thing.Fy)
	// what about stranding a monster partially off an edge?
	thing.Ffloorz = tmfloorz
	thing.Fceilingz = tmceilingz
	if onfloor != 0 {
		// walking monsters rise and fall with the floor
		thing.Fz = thing.Ffloorz
	} else {
		// don't adjust a floating monster unless forced to
		if thing.Fz+thing.Fheight > thing.Fceilingz {
			thing.Fz = thing.Fceilingz - thing.Fheight
		}
	}
	if thing.Fceilingz-thing.Ffloorz < thing.Fheight {
		return 0
	}
	return 1
}

// C documentation
//
//	//
//	// P_HitSlideLine
//	// Adjusts the xmove / ymove
//	// so that the next move will slide along the wall.
//	//
func P_HitSlideLine(ld *line_t) {
	var deltaangle, lineangle, moveangle angle_t
	var movelen, newlen fixed_t
	var side int32
	if ld.Fslopetype == ST_HORIZONTAL {
		tmymove = 0
		return
	}
	if ld.Fslopetype == ST_VERTICAL {
		tmxmove = 0
		return
	}
	side = P_PointOnLineSide(slidemo.Fx, slidemo.Fy, ld)
	lineangle = R_PointToAngle2(0, 0, ld.Fdx, ld.Fdy)
	if side == 1 {
		lineangle += uint32(ANG1805)
	}
	moveangle = R_PointToAngle2(0, 0, tmxmove, tmymove)
	deltaangle = moveangle - lineangle
	if deltaangle > uint32(ANG1805) {
		deltaangle += uint32(ANG1805)
	}
	//	I_Error ("SlideLine: ang>ANG180");
	lineangle >>= uint32(ANGLETOFINESHIFT)
	deltaangle >>= uint32(ANGLETOFINESHIFT)
	movelen = P_AproxDistance(tmxmove, tmymove)
	newlen = FixedMul(movelen, finecosine[deltaangle])
	tmxmove = FixedMul(newlen, finecosine[lineangle])
	tmymove = FixedMul(newlen, finesine[lineangle])
}

// C documentation
//
//	//
//	// PTR_SlideTraverse
//	//
func PTR_SlideTraverse(in *intercept_t) (r boolean) {
	var li *line_t
	if in.Fisaline == 0 {
		I_Error(24696, 0)
	}
	li = in.Fd.Fthing.(*line_t)
	if int32(li.Fflags)&ML_TWOSIDED == 0 {
		if P_PointOnLineSide(slidemo.Fx, slidemo.Fy, li) != 0 {
			// don't hit the back side
			return 1
		}
		goto isblocking
	}
	// set openrange, opentop, openbottom
	P_LineOpening(li)
	if openrange < slidemo.Fheight {
		goto isblocking
	} // doesn't fit
	if opentop-slidemo.Fz < slidemo.Fheight {
		goto isblocking
	} // mobj is too high
	if openbottom-slidemo.Fz > 24*(1<<FRACBITS) {
		goto isblocking
	} // too big a step up
	// this line doesn't block movement
	return 1
	// the line does block movement,
	// see if it is closer than best so far
	goto isblocking
isblocking:
	;
	if in.Ffrac < bestslidefrac {
		bestslidefrac = in.Ffrac
		bestslideline = li
	}
	return 0 // stop
}

// C documentation
//
//	//
//	// P_SlideMove
//	// The momx / momy move is bad, so try to slide
//	// along a wall.
//	// Find the first line hit, move flush to it,
//	// and slide along it
//	//
//	// This is a kludgy mess.
//	//
func P_SlideMove(mo *mobj_t) {
	var hitcount, v1 int32
	var leadx, leady, newx, newy, trailx, traily fixed_t
	slidemo = mo
	hitcount = 0
	goto retry
retry:
	;
	hitcount++
	v1 = hitcount
	if v1 == 3 {
		goto stairstep
	} // don't loop forever
	// trace along the three leading corners
	if mo.Fmomx > 0 {
		leadx = mo.Fx + mo.Fradius
		trailx = mo.Fx - mo.Fradius
	} else {
		leadx = mo.Fx - mo.Fradius
		trailx = mo.Fx + mo.Fradius
	}
	if mo.Fmomy > 0 {
		leady = mo.Fy + mo.Fradius
		traily = mo.Fy - mo.Fradius
	} else {
		leady = mo.Fy - mo.Fradius
		traily = mo.Fy + mo.Fradius
	}
	bestslidefrac = 1<<FRACBITS + 1
	P_PathTraverse(leadx, leady, leadx+mo.Fmomx, leady+mo.Fmomy, int32(PT_ADDLINES), PTR_SlideTraverse)
	P_PathTraverse(trailx, leady, trailx+mo.Fmomx, leady+mo.Fmomy, int32(PT_ADDLINES), PTR_SlideTraverse)
	P_PathTraverse(leadx, traily, leadx+mo.Fmomx, traily+mo.Fmomy, int32(PT_ADDLINES), PTR_SlideTraverse)
	// move up to the wall
	if bestslidefrac != 1<<FRACBITS+1 {
		goto _2
	}
	// the move most have hit the middle, so stairstep
	goto stairstep
stairstep:
	;
	if P_TryMove(mo, mo.Fx, mo.Fy+mo.Fmomy) == 0 {
		P_TryMove(mo, mo.Fx+mo.Fmomx, mo.Fy)
	}
	return
_2:
	;
	// fudge a bit to make sure it doesn't hit
	bestslidefrac -= 0x800
	if bestslidefrac > 0 {
		newx = FixedMul(mo.Fmomx, bestslidefrac)
		newy = FixedMul(mo.Fmomy, bestslidefrac)
		if P_TryMove(mo, mo.Fx+newx, mo.Fy+newy) == 0 {
			goto stairstep
		}
	}
	// Now continue along the wall.
	// First calculate remainder.
	bestslidefrac = 1<<FRACBITS - (bestslidefrac + 0x800)
	if bestslidefrac > 1<<FRACBITS {
		bestslidefrac = 1 << FRACBITS
	}
	if bestslidefrac <= 0 {
		return
	}
	tmxmove = FixedMul(mo.Fmomx, bestslidefrac)
	tmymove = FixedMul(mo.Fmomy, bestslidefrac)
	P_HitSlideLine(bestslideline) // clip the moves
	mo.Fmomx = tmxmove
	mo.Fmomy = tmymove
	if P_TryMove(mo, mo.Fx+tmxmove, mo.Fy+tmymove) == 0 {
		goto retry
	}
}

// C documentation
//
//	//
//	// PTR_AimTraverse
//	// Sets linetaget and aimslope when a target is aimed at.
//	//
func PTR_AimTraverse(in *intercept_t) (r boolean) {
	var dist, slope, thingbottomslope, thingtopslope fixed_t
	var th *mobj_t
	var li *line_t
	if in.Fisaline != 0 {
		li = in.Fd.Fthing.(*line_t)
		if int32(li.Fflags)&ML_TWOSIDED == 0 {
			return 0
		} // stop
		// Crosses a two sided line.
		// A two sided line will restrict
		// the possible target ranges.
		P_LineOpening(li)
		if openbottom >= opentop {
			return 0
		} // stop
		dist = FixedMul(attackrange, in.Ffrac)
		if li.Fbacksector == nil || li.Ffrontsector.Ffloorheight != li.Fbacksector.Ffloorheight {
			slope = FixedDiv(openbottom-shootz, dist)
			if slope > bottomslope {
				bottomslope = slope
			}
		}
		if li.Fbacksector == nil || li.Ffrontsector.Fceilingheight != li.Fbacksector.Fceilingheight {
			slope = FixedDiv(opentop-shootz, dist)
			if slope < topslope {
				topslope = slope
			}
		}
		if topslope <= bottomslope {
			return 0
		} // stop
		return 1 // shot continues
	}
	// shoot a thing
	th = in.Fd.Fthing.(*mobj_t)
	if th == shootthing {
		return 1
	} // can't shoot self
	if th.Fflags&MF_SHOOTABLE == 0 {
		return 1
	} // corpse or something
	// check angles to see if the thing can be aimed at
	dist = FixedMul(attackrange, in.Ffrac)
	thingtopslope = FixedDiv(th.Fz+th.Fheight-shootz, dist)
	if thingtopslope < bottomslope {
		return 1
	} // shot over the thing
	thingbottomslope = FixedDiv(th.Fz-shootz, dist)
	if thingbottomslope > topslope {
		return 1
	} // shot under the thing
	// this thing can be hit!
	if thingtopslope > topslope {
		thingtopslope = topslope
	}
	if thingbottomslope < bottomslope {
		thingbottomslope = bottomslope
	}
	aimslope = (thingtopslope + thingbottomslope) / 2
	linetarget = th
	return 0 // don't go any farther
}

// C documentation
//
//	//
//	// PTR_ShootTraverse
//	//
func PTR_ShootTraverse(in *intercept_t) (r boolean) {
	var dist, frac, slope, thingbottomslope, thingtopslope, x, y, z fixed_t
	var th *mobj_t
	var li *line_t
	if in.Fisaline != 0 {
		li = in.Fd.Fthing.(*line_t)
		if li.Fspecial != 0 {
			P_ShootSpecialLine(shootthing, li)
		}
		if int32(li.Fflags)&ML_TWOSIDED == 0 {
			goto hitline
		}
		// crosses a two sided line
		P_LineOpening(li)
		dist = FixedMul(attackrange, in.Ffrac)
		// e6y: emulation of missed back side on two-sided lines.
		// backsector can be NULL when emulating missing back side.
		if li.Fbacksector == nil {
			slope = FixedDiv(openbottom-shootz, dist)
			if slope > aimslope {
				goto hitline
			}
			slope = FixedDiv(opentop-shootz, dist)
			if slope < aimslope {
				goto hitline
			}
		} else {
			if li.Ffrontsector.Ffloorheight != li.Fbacksector.Ffloorheight {
				slope = FixedDiv(openbottom-shootz, dist)
				if slope > aimslope {
					goto hitline
				}
			}
			if li.Ffrontsector.Fceilingheight != li.Fbacksector.Fceilingheight {
				slope = FixedDiv(opentop-shootz, dist)
				if slope < aimslope {
					goto hitline
				}
			}
		}
		// shot continues
		return 1
		// hit line
		goto hitline
	hitline:
		;
		// position a bit closer
		frac = in.Ffrac - FixedDiv(4*(1<<FRACBITS), attackrange)
		x = trace.Fx + FixedMul(trace.Fdx, frac)
		y = trace.Fy + FixedMul(trace.Fdy, frac)
		z = shootz + FixedMul(aimslope, FixedMul(frac, attackrange))
		if int32(li.Ffrontsector.Fceilingpic) == skyflatnum {
			// don't shoot the sky!
			if z > li.Ffrontsector.Fceilingheight {
				return 0
			}
			// it's a sky hack wall
			if li.Fbacksector != nil && int32(li.Fbacksector.Fceilingpic) == skyflatnum {
				return 0
			}
		}
		// Spawn bullet puffs.
		P_SpawnPuff(x, y, z)
		// don't go any farther
		return 0
	}
	// shoot a thing
	th = in.Fd.Fthing.(*mobj_t)
	if th == shootthing {
		return 1
	} // can't shoot self
	if th.Fflags&MF_SHOOTABLE == 0 {
		return 1
	} // corpse or something
	// check angles to see if the thing can be aimed at
	dist = FixedMul(attackrange, in.Ffrac)
	thingtopslope = FixedDiv(th.Fz+th.Fheight-shootz, dist)
	if thingtopslope < aimslope {
		return 1
	} // shot over the thing
	thingbottomslope = FixedDiv(th.Fz-shootz, dist)
	if thingbottomslope > aimslope {
		return 1
	} // shot under the thing
	// hit thing
	// position a bit closer
	frac = in.Ffrac - FixedDiv(10*(1<<FRACBITS), attackrange)
	x = trace.Fx + FixedMul(trace.Fdx, frac)
	y = trace.Fy + FixedMul(trace.Fdy, frac)
	z = shootz + FixedMul(aimslope, FixedMul(frac, attackrange))
	// Spawn bullet puffs or blod spots,
	// depending on target type.
	if in.Fd.Fthing.(*mobj_t).Fflags&MF_NOBLOOD != 0 {
		P_SpawnPuff(x, y, z)
	} else {
		P_SpawnBlood(x, y, z, la_damage)
	}
	if la_damage != 0 {
		P_DamageMobj(th, shootthing, shootthing, la_damage)
	}
	// don't go any farther
	return 0
}

// C documentation
//
//	//
//	// P_AimLineAttack
//	//
func P_AimLineAttack(t1 *mobj_t, angle angle_t, distance fixed_t) (r fixed_t) {
	var x2, y2 fixed_t
	t1 = P_SubstNullMobj(t1)
	angle >>= uint32(ANGLETOFINESHIFT)
	shootthing = t1
	x2 = t1.Fx + distance>>FRACBITS*finecosine[angle]
	y2 = t1.Fy + distance>>FRACBITS*finesine[angle]
	shootz = t1.Fz + t1.Fheight>>1 + 8*(1<<FRACBITS)
	// can't shoot outside view angles
	topslope = 100 * (1 << FRACBITS) / 160
	bottomslope = -100 * (1 << FRACBITS) / 160
	attackrange = distance
	linetarget = nil
	P_PathTraverse(t1.Fx, t1.Fy, x2, y2, PT_ADDLINES|PT_ADDTHINGS, PTR_AimTraverse)
	if linetarget != nil {
		return aimslope
	}
	return 0
}

// C documentation
//
//	//
//	// P_LineAttack
//	// If damage == 0, it is just a test trace
//	// that will leave linetarget set.
//	//
func P_LineAttack(t1 *mobj_t, angle angle_t, distance fixed_t, slope fixed_t, damage int32) {
	var x2, y2 fixed_t
	angle >>= uint32(ANGLETOFINESHIFT)
	shootthing = t1
	la_damage = damage
	x2 = t1.Fx + distance>>FRACBITS*finecosine[angle]
	y2 = t1.Fy + distance>>FRACBITS*finesine[angle]
	shootz = t1.Fz + t1.Fheight>>1 + 8*(1<<FRACBITS)
	attackrange = distance
	aimslope = slope
	P_PathTraverse(t1.Fx, t1.Fy, x2, y2, PT_ADDLINES|PT_ADDTHINGS, PTR_ShootTraverse)
}

func PTR_UseTraverse(in *intercept_t) (r boolean) {
	var side int32
	line := in.Fd.Fthing.(*line_t)
	if line.Fspecial == 0 {
		P_LineOpening(line)
		if openrange <= 0 {
			S_StartSound(&usething.degenmobj_t, int32(sfx_noway))
			// can't use through a wall
			return 0
		}
		// not a special line, but keep checking
		return 1
	}
	side = 0
	if P_PointOnLineSide(usething.Fx, usething.Fy, line) == 1 {
		side = 1
	}
	//	return false;		// don't use back side
	P_UseSpecialLine(usething, line, side)
	// can't use for than one special line in a row
	return 0
}

// C documentation
//
//	//
//	// P_UseLines
//	// Looks for special lines in front of the player to activate.
//	//
func P_UseLines(player *player_t) {
	var angle int32
	var x1, x2, y1, y2 fixed_t
	usething = player.Fmo
	angle = int32(player.Fmo.Fangle >> int32(ANGLETOFINESHIFT))
	x1 = player.Fmo.Fx
	y1 = player.Fmo.Fy
	x2 = x1 + 64*(1<<FRACBITS)>>FRACBITS*finecosine[angle]
	y2 = y1 + 64*(1<<FRACBITS)>>FRACBITS*finesine[angle]
	P_PathTraverse(x1, y1, x2, y2, int32(PT_ADDLINES), PTR_UseTraverse)
}

// C documentation
//
//	//
//	// PIT_RadiusAttack
//	// "bombsource" is the creature
//	// that caused the explosion at "bombspot".
//	//
func PIT_RadiusAttack(thing *mobj_t) (r boolean) {
	var dist, dx, dy fixed_t
	var v1 int32
	if thing.Fflags&MF_SHOOTABLE == 0 {
		return 1
	}
	// Boss spider and cyborg
	// take no damage from concussion.
	if thing.Ftype1 == int32(MT_CYBORG) || thing.Ftype1 == int32(MT_SPIDER) {
		return 1
	}
	dx = xabs(thing.Fx - bombspot.Fx)
	dy = xabs(thing.Fy - bombspot.Fy)
	if dx > dy {
		v1 = dx
	} else {
		v1 = dy
	}
	dist = v1
	dist = (dist - thing.Fradius) >> int32(FRACBITS)
	if dist < 0 {
		dist = 0
	}
	if dist >= bombdamage {
		return 1
	} // out of range
	if P_CheckSight(thing, bombspot) != 0 {
		// must be in direct path
		P_DamageMobj(thing, bombspot, bombsource, bombdamage-dist)
	}
	return 1
}

// C documentation
//
//	//
//	// P_RadiusAttack
//	// Source is the creature that caused the explosion at spot.
//	//
func P_RadiusAttack(spot *mobj_t, source *mobj_t, damage int32) {
	var dist fixed_t
	var x, xh, xl, y, yh, yl int32
	dist = (damage + 32*(1<<FRACBITS)) << int32(FRACBITS)
	yh = (spot.Fy + dist - bmaporgy) >> (FRACBITS + 7)
	yl = (spot.Fy - dist - bmaporgy) >> (FRACBITS + 7)
	xh = (spot.Fx + dist - bmaporgx) >> (FRACBITS + 7)
	xl = (spot.Fx - dist - bmaporgx) >> (FRACBITS + 7)
	bombspot = spot
	bombsource = source
	bombdamage = damage
	y = yl
	for {
		if !(y <= yh) {
			break
		}
		x = xl
		for {
			if !(x <= xh) {
				break
			}
			P_BlockThingsIterator(x, y, PIT_RadiusAttack)
			goto _2
		_2:
			;
			x++
		}
		goto _1
	_1:
		;
		y++
	}
}

// C documentation
//
//	//
//	// PIT_ChangeSector
//	//
func PIT_ChangeSector(thing *mobj_t) (r boolean) {
	var mo *mobj_t
	if P_ThingHeightClip(thing) != 0 {
		// keep checking
		return 1
	}
	// crunch bodies to giblets
	if thing.Fhealth <= 0 {
		P_SetMobjState(thing, S_GIBS)
		thing.Fflags &= ^MF_SOLID
		thing.Fheight = 0
		thing.Fradius = 0
		// keep checking
		return 1
	}
	// crunch dropped items
	if thing.Fflags&MF_DROPPED != 0 {
		P_RemoveMobj(thing)
		// keep checking
		return 1
	}
	if thing.Fflags&MF_SHOOTABLE == 0 {
		// assume it is bloody gibs or something
		return 1
	}
	nofit = 1
	if crushchange != 0 && leveltime&3 == 0 {
		P_DamageMobj(thing, nil, nil, 10)
		// spray blood in a random direction
		mo = P_SpawnMobj(thing.Fx, thing.Fy, thing.Fz+thing.Fheight/int32(2), int32(MT_BLOOD))
		mo.Fmomx = (P_Random() - P_Random()) << 12
		mo.Fmomy = (P_Random() - P_Random()) << 12
	}
	// keep checking (crush other things)
	return 1
}

// C documentation
//
//	//
//	// P_ChangeSector
//	//
func P_ChangeSector(sector *sector_t, crunch boolean) (r boolean) {
	var x, y int32
	nofit = 0
	crushchange = crunch
	// re-check heights for all things near the moving sector
	x = sector.Fblockbox[BOXLEFT]
	for {
		if !(x <= sector.Fblockbox[BOXRIGHT]) {
			break
		}
		y = sector.Fblockbox[BOXBOTTOM]
		for {
			if !(y <= sector.Fblockbox[BOXTOP]) {
				break
			}
			P_BlockThingsIterator(x, y, PIT_ChangeSector)
			goto _2
		_2:
			;
			y++
		}
		goto _1
	_1:
		;
		x++
	}
	return nofit
}

// Code to emulate the behavior of Vanilla Doom when encountering an overrun
// of the spechit array.  This is by Andrey Budko (e6y) and comes from his
// PrBoom plus port.  A big thanks to Andrey for this.

func SpechitOverrun(ld *line_t) {
	var addr int32
	var p int32
	if baseaddr == 0 {
		// This is the first time we have had an overrun.  Work out
		// what base address we are going to use.
		// Allow a spechit value to be specified on the command line.
		//!
		// @category compat
		// @arg <n>
		//
		// Use the specified magic value when emulating spechit overruns.
		//
		p = M_CheckParmWithArgs(__ccgo_ts_str(24727), 1)
		if p > 0 {
			v, _ := strconv.Atoi(myargs[p+1])
			baseaddr = int32(v)
		} else {
			baseaddr = DEFAULT_SPECHIT_MAGIC
		}
	}
	// Calculate address used in doom2.exe
	addr = baseaddr + int32(lineIndex(ld))*0x3E
	switch numspechit {
	case 9:
		fallthrough
	case 10:
		fallthrough
	case 11:
		fallthrough
	case 12:
		tmbbox[numspechit-9] = addr
	case 13:
		crushchange = boolean(addr)
	case 14:
		nofit = boolean(addr)
	default:
		fprintf_ccgo(os.Stderr, 24736, numspechit)
		break
	}
}

var baseaddr int32

const INT_MAX11 = 2147483647

// State.
//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Refresh/render internal state variables (global).
//

//
// P_AproxDistance
// Gives an estimation of distance (not exact)
//

func P_AproxDistance(dx fixed_t, dy fixed_t) (r fixed_t) {
	dx = xabs(dx)
	dy = xabs(dy)
	if dx < dy {
		return dx + dy - dx>>1
	}
	return dx + dy - dy>>1
}

// C documentation
//
//	//
//	// P_PointOnLineSide
//	// Returns 0 or 1
//	//
func P_PointOnLineSide(x fixed_t, y fixed_t, line *line_t) (r int32) {
	var dx, dy, left, right fixed_t
	if line.Fdx == 0 {
		if x <= line.Fv1.Fx {
			return boolint32(line.Fdy > 0)
		}
		return boolint32(line.Fdy < 0)
	}
	if line.Fdy == 0 {
		if y <= line.Fv1.Fy {
			return boolint32(line.Fdx < 0)
		}
		return boolint32(line.Fdx > 0)
	}
	dx = x - line.Fv1.Fx
	dy = y - line.Fv1.Fy
	left = FixedMul(line.Fdy>>int32(FRACBITS), dx)
	right = FixedMul(dy, line.Fdx>>int32(FRACBITS))
	if right < left {
		return 0
	} // front side
	return 1 // back side
}

// C documentation
//
//	//
//	// P_BoxOnLineSide
//	// Considers the line to be infinite
//	// Returns side 0 or 1, -1 if box crosses the line.
//	//
func P_BoxOnLineSide(tmbox uintptr, ld *line_t) (r int32) {
	var p1, p2 int32
	p1 = 0
	p2 = 0
	switch ld.Fslopetype {
	case ST_HORIZONTAL:
		p1 = boolint32(*(*fixed_t)(unsafe.Pointer(tmbox + uintptr(BOXTOP)*4)) > ld.Fv1.Fy)
		p2 = boolint32(*(*fixed_t)(unsafe.Pointer(tmbox + uintptr(BOXBOTTOM)*4)) > ld.Fv1.Fy)
		if ld.Fdx < 0 {
			p1 ^= 1
			p2 ^= 1
		}
	case ST_VERTICAL:
		p1 = boolint32(*(*fixed_t)(unsafe.Pointer(tmbox + uintptr(BOXRIGHT)*4)) < ld.Fv1.Fx)
		p2 = boolint32(*(*fixed_t)(unsafe.Pointer(tmbox + uintptr(BOXLEFT)*4)) < ld.Fv1.Fx)
		if ld.Fdy < 0 {
			p1 ^= 1
			p2 ^= 1
		}
	case ST_POSITIVE:
		p1 = P_PointOnLineSide(*(*fixed_t)(unsafe.Pointer(tmbox + uintptr(BOXLEFT)*4)), *(*fixed_t)(unsafe.Pointer(tmbox + uintptr(BOXTOP)*4)), ld)
		p2 = P_PointOnLineSide(*(*fixed_t)(unsafe.Pointer(tmbox + uintptr(BOXRIGHT)*4)), *(*fixed_t)(unsafe.Pointer(tmbox + uintptr(BOXBOTTOM)*4)), ld)
	case ST_NEGATIVE:
		p1 = P_PointOnLineSide(*(*fixed_t)(unsafe.Pointer(tmbox + uintptr(BOXRIGHT)*4)), *(*fixed_t)(unsafe.Pointer(tmbox + uintptr(BOXTOP)*4)), ld)
		p2 = P_PointOnLineSide(*(*fixed_t)(unsafe.Pointer(tmbox + uintptr(BOXLEFT)*4)), *(*fixed_t)(unsafe.Pointer(tmbox + uintptr(BOXBOTTOM)*4)), ld)
		break
	}
	if p1 == p2 {
		return p1
	}
	return -1
}

// C documentation
//
//	//
//	// P_PointOnDivlineSide
//	// Returns 0 or 1.
//	//
func P_PointOnDivlineSide(x fixed_t, y fixed_t, line uintptr) (r int32) {
	var dx, dy, left, right fixed_t
	if (*divline_t)(unsafe.Pointer(line)).Fdx == 0 {
		if x <= (*divline_t)(unsafe.Pointer(line)).Fx {
			return boolint32((*divline_t)(unsafe.Pointer(line)).Fdy > 0)
		}
		return boolint32((*divline_t)(unsafe.Pointer(line)).Fdy < 0)
	}
	if (*divline_t)(unsafe.Pointer(line)).Fdy == 0 {
		if y <= (*divline_t)(unsafe.Pointer(line)).Fy {
			return boolint32((*divline_t)(unsafe.Pointer(line)).Fdx < 0)
		}
		return boolint32((*divline_t)(unsafe.Pointer(line)).Fdx > 0)
	}
	dx = x - (*divline_t)(unsafe.Pointer(line)).Fx
	dy = y - (*divline_t)(unsafe.Pointer(line)).Fy
	// try to quickly decide by looking at sign bits
	if uint32((*divline_t)(unsafe.Pointer(line)).Fdy^(*divline_t)(unsafe.Pointer(line)).Fdx^dx^dy)&0x80000000 != 0 {
		if uint32((*divline_t)(unsafe.Pointer(line)).Fdy^dx)&0x80000000 != 0 {
			return 1
		} // (left is negative)
		return 0
	}
	left = FixedMul((*divline_t)(unsafe.Pointer(line)).Fdy>>int32(8), dx>>int32(8))
	right = FixedMul(dy>>int32(8), (*divline_t)(unsafe.Pointer(line)).Fdx>>int32(8))
	if right < left {
		return 0
	} // front side
	return 1 // back side
}

// C documentation
//
//	//
//	// P_MakeDivline
//	//
func P_MakeDivline(li *line_t, dl uintptr) {
	(*divline_t)(unsafe.Pointer(dl)).Fx = li.Fv1.Fx
	(*divline_t)(unsafe.Pointer(dl)).Fy = li.Fv1.Fy
	(*divline_t)(unsafe.Pointer(dl)).Fdx = li.Fdx
	(*divline_t)(unsafe.Pointer(dl)).Fdy = li.Fdy
}

// C documentation
//
//	//
//	// P_InterceptVector
//	// Returns the fractional intercept point
//	// along the first divline.
//	// This is only called by the addthings
//	// and addlines traversers.
//	//
func P_InterceptVector(v2 uintptr, v1 uintptr) (r fixed_t) {
	var den, frac, num fixed_t
	den = FixedMul((*divline_t)(unsafe.Pointer(v1)).Fdy>>int32(8), (*divline_t)(unsafe.Pointer(v2)).Fdx) - FixedMul((*divline_t)(unsafe.Pointer(v1)).Fdx>>int32(8), (*divline_t)(unsafe.Pointer(v2)).Fdy)
	if den == 0 {
		return 0
	}
	//	I_Error ("P_InterceptVector: parallel");
	num = FixedMul(((*divline_t)(unsafe.Pointer(v1)).Fx-(*divline_t)(unsafe.Pointer(v2)).Fx)>>int32(8), (*divline_t)(unsafe.Pointer(v1)).Fdy) + FixedMul(((*divline_t)(unsafe.Pointer(v2)).Fy-(*divline_t)(unsafe.Pointer(v1)).Fy)>>int32(8), (*divline_t)(unsafe.Pointer(v1)).Fdx)
	frac = FixedDiv(num, den)
	return frac
}

func P_LineOpening(linedef *line_t) {
	var back, front *sector_t
	if linedef.Fsidenum[1] == -1 {
		// single sided line
		openrange = 0
		return
	}
	front = linedef.Ffrontsector
	back = linedef.Fbacksector
	if front.Fceilingheight < back.Fceilingheight {
		opentop = front.Fceilingheight
	} else {
		opentop = back.Fceilingheight
	}
	if front.Ffloorheight > back.Ffloorheight {
		openbottom = front.Ffloorheight
		lowfloor = back.Ffloorheight
	} else {
		openbottom = back.Ffloorheight
		lowfloor = front.Ffloorheight
	}
	openrange = opentop - openbottom
}

//
// THING POSITION SETTING
//

// C documentation
//
//	//
//	// P_UnsetThingPosition
//	// Unlinks a thing from block map and sectors.
//	// On each position change, BLOCKMAP and other
//	// lookups maintaining lists ot things inside
//	// these structures need to be updated.
//	//
func P_UnsetThingPosition(thing *mobj_t) {
	var blockx, blocky int32
	if thing.Fflags&MF_NOSECTOR == 0 {
		// inert things don't need to be in blockmap?
		// unlink from subsector
		if thing.Fsnext != nil {
			(*mobj_t)(unsafe.Pointer(thing.Fsnext)).Fsprev = thing.Fsprev
		}
		if thing.Fsprev != nil {
			(*mobj_t)(unsafe.Pointer(thing.Fsprev)).Fsnext = thing.Fsnext
		} else {
			(*sector_t)(unsafe.Pointer(thing.Fsubsector.Fsector)).Fthinglist = thing.Fsnext
		}
	}
	if thing.Fflags&MF_NOBLOCKMAP == 0 {
		// inert things don't need to be in blockmap
		// unlink from block map
		if thing.Fbnext != nil {
			(*mobj_t)(unsafe.Pointer(thing.Fbnext)).Fbprev = thing.Fbprev
		}
		if thing.Fbprev != nil {
			(*mobj_t)(unsafe.Pointer(thing.Fbprev)).Fbnext = thing.Fbnext
		} else {
			blockx = (thing.Fx - bmaporgx) >> (FRACBITS + 7)
			blocky = (thing.Fy - bmaporgy) >> (FRACBITS + 7)
			if blockx >= 0 && blockx < bmapwidth && blocky >= 0 && blocky < bmapheight {
				*(*uintptr)(unsafe.Pointer(blocklinks + uintptr(blocky*bmapwidth+blockx)*8)) = uintptr(unsafe.Pointer(thing.Fbnext))
			}
		}
	}
}

// C documentation
//
//	//
//	// P_SetThingPosition
//	// Links a thing into both a block and a subsector
//	// based on it's x y.
//	// Sets thing->subsector properly
//	//
func P_SetThingPosition(thing *mobj_t) {
	var blockx, blocky int32
	var link uintptr
	var ss *subsector_t
	var sec *sector_t
	// link into subsector
	ss = R_PointInSubsector(thing.Fx, thing.Fy)
	thing.Fsubsector = ss
	if thing.Fflags&MF_NOSECTOR == 0 {
		// invisible things don't go into the sector links
		sec = ss.Fsector
		thing.Fsprev = nil
		thing.Fsnext = sec.Fthinglist
		if sec.Fthinglist != nil {
			(*mobj_t)(unsafe.Pointer(sec.Fthinglist)).Fsprev = thing
		}
		sec.Fthinglist = thing
	}
	// link into blockmap
	if thing.Fflags&MF_NOBLOCKMAP == 0 {
		// inert things don't need to be in blockmap
		blockx = (thing.Fx - bmaporgx) >> (FRACBITS + 7)
		blocky = (thing.Fy - bmaporgy) >> (FRACBITS + 7)
		if blockx >= 0 && blockx < bmapwidth && blocky >= 0 && blocky < bmapheight {
			link = blocklinks + uintptr(blocky*bmapwidth+blockx)*8
			thing.Fbprev = nil
			thing.Fbnext = *(**mobj_t)(unsafe.Pointer(link))
			if *(*uintptr)(unsafe.Pointer(link)) != 0 {
				(*mobj_t)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(link)))).Fbprev = thing
			}
			*(*uintptr)(unsafe.Pointer(link)) = uintptr(unsafe.Pointer(thing))
		} else {
			// thing is off the map
			thing.Fbprev = nil
			thing.Fbnext = nil
		}
	}
}

//
// BLOCK MAP ITERATORS
// For each line/thing in the given mapblock,
// call the passed PIT_* function.
// If the function returns false,
// exit with false without checking anything else.
//

// C documentation
//
//	//
//	// P_BlockLinesIterator
//	// The validcount flags are used to avoid checking lines
//	// that are marked in multiple mapblocks,
//	// so increment validcount before the first call
//	// to P_BlockLinesIterator, then make one or more calls
//	// to it.
//	//
func P_BlockLinesIterator(x int32, y int32, func1 func(*line_t) boolean) (r boolean) {
	var list uintptr
	var offset int32
	if x < 0 || y < 0 || x >= bmapwidth || y >= bmapheight {
		return 1
	}
	offset = y*bmapwidth + x
	offset = int32(*(*int16)(unsafe.Pointer(blockmap + uintptr(offset)*2)))
	list = blockmaplump + uintptr(offset)*2
	for {
		if int32(*(*int16)(unsafe.Pointer(list))) == -1 {
			break
		}
		ld := &lines[*(*int16)(unsafe.Pointer(list))]
		if ld.Fvalidcount == validcount {
			goto _1
		} // line has already been checked
		ld.Fvalidcount = validcount
		if func1(ld) == 0 {
			return 0
		}
		goto _1
	_1:
		;
		list += 2
	}
	return 1 // everything was checked
}

// C documentation
//
//	//
//	// P_BlockThingsIterator
//	//
func P_BlockThingsIterator(x int32, y int32, func1 func(*mobj_t) boolean) (r boolean) {
	var mobj *mobj_t
	if x < 0 || y < 0 || x >= bmapwidth || y >= bmapheight {
		return 1
	}
	mobj = *(**mobj_t)(unsafe.Pointer(blocklinks + uintptr(y*bmapwidth+x)*8))
	for {
		if mobj == nil {
			break
		}
		if func1(mobj) == 0 {
			return 0
		}
		goto _1
	_1:
		;
		mobj = mobj.Fbnext
	}
	return 1
}

// C documentation
//
//	//
//	// PIT_AddLineIntercepts.
//	// Looks for lines in the given block
//	// that intercept the given trace
//	// to add to the intercepts list.
//	//
//	// A line is crossed if its endpoints
//	// are on opposite sides of the trace.
//	// Returns true if earlyout and a solid line hit.
//	//
func PIT_AddLineIntercepts(ld *line_t) (r boolean) {
	bp := alloc(16)
	var frac fixed_t
	var s1, s2 int32
	// avoid precision problems with two routines
	if trace.Fdx > 1<<FRACBITS*16 || trace.Fdy > 1<<FRACBITS*16 || trace.Fdx < -(1<<FRACBITS)*16 || trace.Fdy < -(1<<FRACBITS)*16 {
		s1 = P_PointOnDivlineSide(ld.Fv1.Fx, ld.Fv1.Fy, uintptr(unsafe.Pointer(&trace)))
		s2 = P_PointOnDivlineSide(ld.Fv2.Fx, ld.Fv2.Fy, uintptr(unsafe.Pointer(&trace)))
	} else {
		s1 = P_PointOnLineSide(trace.Fx, trace.Fy, ld)
		s2 = P_PointOnLineSide(trace.Fx+trace.Fdx, trace.Fy+trace.Fdy, ld)
	}
	if s1 == s2 {
		return 1
	} // line isn't crossed
	// hit the line
	P_MakeDivline(ld, bp)
	frac = P_InterceptVector(uintptr(unsafe.Pointer(&trace)), bp)
	if frac < 0 {
		return 1
	} // behind source
	// try to early out the check
	if earlyout != 0 && frac < 1<<FRACBITS && ld.Fbacksector == nil {
		return 0 // stop checking
	}
	intercepts[intercept_pos].Ffrac = frac
	intercepts[intercept_pos].Fisaline = 1
	intercepts[intercept_pos].Fd.Fthing = ld
	InterceptsOverrun(intercept_pos, &intercepts[intercept_pos])
	intercept_pos++
	return 1 // continue
}

// C documentation
//
//	//
//	// PIT_AddThingIntercepts
//	//
func PIT_AddThingIntercepts(thing *mobj_t) (r boolean) {
	bp := alloc(16)
	var frac, x1, x2, y1, y2 fixed_t
	var s1, s2 int32
	var tracepositive boolean
	tracepositive = booluint32(trace.Fdx^trace.Fdy > 0)
	// check a corner to corner crossection for hit
	if tracepositive != 0 {
		x1 = thing.Fx - thing.Fradius
		y1 = thing.Fy + thing.Fradius
		x2 = thing.Fx + thing.Fradius
		y2 = thing.Fy - thing.Fradius
	} else {
		x1 = thing.Fx - thing.Fradius
		y1 = thing.Fy - thing.Fradius
		x2 = thing.Fx + thing.Fradius
		y2 = thing.Fy + thing.Fradius
	}
	s1 = P_PointOnDivlineSide(x1, y1, uintptr(unsafe.Pointer(&trace)))
	s2 = P_PointOnDivlineSide(x2, y2, uintptr(unsafe.Pointer(&trace)))
	if s1 == s2 {
		return 1
	} // line isn't crossed
	(*(*divline_t)(unsafe.Pointer(bp))).Fx = x1
	(*(*divline_t)(unsafe.Pointer(bp))).Fy = y1
	(*(*divline_t)(unsafe.Pointer(bp))).Fdx = x2 - x1
	(*(*divline_t)(unsafe.Pointer(bp))).Fdy = y2 - y1
	frac = P_InterceptVector(uintptr(unsafe.Pointer(&trace)), bp)
	if frac < 0 {
		return 1
	} // behind source
	intercepts[intercept_pos].Ffrac = frac
	intercepts[intercept_pos].Fisaline = 0
	intercepts[intercept_pos].Fd.Fthing = thing
	InterceptsOverrun(intercept_pos, &intercepts[intercept_pos])
	intercept_pos++
	return 1 // keep going
}

// C documentation
//
//	//
//	// P_TraverseIntercepts
//	// Returns true if the traverser function returns true
//	// for all lines.
//	//
func P_TraverseIntercepts(func1 func(*intercept_t) boolean, maxfrac fixed_t) (r boolean) {
	var count, v1 int32
	var dist fixed_t
	var in *intercept_t
	count = intercept_pos
	for {
		v1 = count
		count--
		if v1 == 0 {
			break
		}
		dist = int32(INT_MAX11)
		for scan := int32(0); scan < intercept_pos; scan++ {
			if intercepts[scan].Ffrac < dist {
				dist = intercepts[scan].Ffrac
				in = &intercepts[scan]
			}
		}
		if dist > maxfrac {
			return 1
		} // checked everything in range
		if func1(in) == 0 {
			return 0
		} // don't bother going farther
		in.Ffrac = int32(INT_MAX11)
	}
	return 1 // everything was traversed
}

// Intercepts Overrun emulation, from PrBoom-plus.
// Thanks to Andrey Budko (entryway) for researching this and his
// implementation of Intercepts Overrun emulation in PrBoom-plus
// which this is based on.

type intercepts_overrun_t struct {
	Flen1        int32
	Faddr        uintptr
	Fint16_array boolean
}

// Intercepts memory table.  This is where various variables are located
// in memory in Vanilla Doom.  When the intercepts table overflows, we
// need to write to them.
//
// Almost all of the values to overwrite are 32-bit integers, except for
// playerstarts, which is effectively an array of 16-bit integers and
// must be treated differently.

var intercepts_overrun = [23]intercepts_overrun_t{
	0: {
		Flen1: 4,
	},
	1: {
		Flen1: 4,
	},
	2: {
		Flen1: 4,
	},
	3: {
		Flen1: 4,
		Faddr: uintptr(unsafe.Pointer(&lowfloor)),
	},
	4: {
		Flen1: 4,
		Faddr: uintptr(unsafe.Pointer(&openbottom)),
	},
	5: {
		Flen1: 4,
		Faddr: uintptr(unsafe.Pointer(&opentop)),
	},
	6: {
		Flen1: 4,
		Faddr: uintptr(unsafe.Pointer(&openrange)),
	},
	7: {
		Flen1: 4,
	},
	8: {
		Flen1: 120,
	},
	9: {
		Flen1: 8,
	},
	10: {
		Flen1: 4,
		Faddr: uintptr(unsafe.Pointer(&bulletslope)),
	},
	11: {
		Flen1: 4,
	},
	12: {
		Flen1: 4,
	},
	13: {
		Flen1: 4,
	},
	14: {
		Flen1:        40,
		Faddr:        uintptr(unsafe.Pointer(&playerstarts)),
		Fint16_array: 1,
	},
	15: {
		Flen1: 4,
	},
	16: {
		Flen1: 4,
		Faddr: uintptr(unsafe.Pointer(&bmapwidth)),
	},
	17: {
		Flen1: 4,
	},
	18: {
		Flen1: 4,
		Faddr: uintptr(unsafe.Pointer(&bmaporgx)),
	},
	19: {
		Flen1: 4,
		Faddr: uintptr(unsafe.Pointer(&bmaporgy)),
	},
	20: {
		Flen1: 4,
	},
	21: {
		Flen1: 4,
		Faddr: uintptr(unsafe.Pointer(&bmapheight)),
	},
	22: {},
}

// Overwrite a specific memory location with a value.

func InterceptsMemoryOverrun(location int32, value int32) {
	var addr uintptr
	var i, index, offset int32
	i = 0
	offset = 0
	// Search down the array until we find the right entry
	for intercepts_overrun[i].Flen1 != 0 {
		if offset+intercepts_overrun[i].Flen1 > location {
			addr = intercepts_overrun[i].Faddr
			// Write the value to the memory location.
			// 16-bit and 32-bit values are written differently.
			if addr != uintptr(0) {
				if intercepts_overrun[i].Fint16_array != 0 {
					index = (location - offset) / 2
					*(*int16)(unsafe.Pointer(addr + uintptr(index)*2)) = int16(value & 0xffff)
					*(*int16)(unsafe.Pointer(addr + uintptr(index+int32(1))*2)) = int16(value >> 16 & 0xffff)
				} else {
					index = (location - offset) / 4
					*(*int32)(unsafe.Pointer(addr + uintptr(index)*4)) = value
				}
			}
			break
		}
		offset += intercepts_overrun[i].Flen1
		i++
	}
}

// Emulate overruns of the intercepts[] array.

func InterceptsOverrun(num_intercepts int32, intercept *intercept_t) {
	var location int32
	if num_intercepts <= int32(MAXINTERCEPTS_ORIGINAL) {
		// No overrun
		return
	}
	location = (num_intercepts - int32(MAXINTERCEPTS_ORIGINAL) - 1) * 12
	// Overwrite memory that is overwritten in Vanilla Doom, using
	// the values from the intercept structure.
	//
	// Note: the ->d.{thing,line} member should really have its
	// address translated into the correct address value for
	// Vanilla Doom.
	InterceptsMemoryOverrun(location, intercept.Ffrac)
	InterceptsMemoryOverrun(location+int32(4), int32(intercept.Fisaline))
	InterceptsMemoryOverrun(location+int32(8), int32(*(*uintptr)(unsafe.Pointer(&intercept.Fd))))
}

// C documentation
//
//	//
//	// P_PathTraverse
//	// Traces a line from x1,y1 to x2,y2,
//	// calling the traverser function for each.
//	// Returns true if the traverser function returns true
//	// for all lines.
//	//
func P_PathTraverse(x1 fixed_t, y1 fixed_t, x2 fixed_t, y2 fixed_t, flags int32, trav func(*intercept_t) boolean) (r boolean) {
	var count, mapx, mapxstep, mapy, mapystep int32
	var partial, xintercept, xstep, xt1, xt2, yintercept, ystep, yt1, yt2 fixed_t
	earlyout = uint32(flags & int32(PT_EARLYOUT))
	validcount++
	intercept_pos = 0
	if (x1-bmaporgx)&(MAPBLOCKUNITS*(1<<FRACBITS)-1) == 0 {
		x1 += 1 << FRACBITS
	} // don't side exactly on a line
	if (y1-bmaporgy)&(MAPBLOCKUNITS*(1<<FRACBITS)-1) == 0 {
		y1 += 1 << FRACBITS
	} // don't side exactly on a line
	trace.Fx = x1
	trace.Fy = y1
	trace.Fdx = x2 - x1
	trace.Fdy = y2 - y1
	x1 -= bmaporgx
	y1 -= bmaporgy
	xt1 = x1 >> (FRACBITS + 7)
	yt1 = y1 >> (FRACBITS + 7)
	x2 -= bmaporgx
	y2 -= bmaporgy
	xt2 = x2 >> (FRACBITS + 7)
	yt2 = y2 >> (FRACBITS + 7)
	if xt2 > xt1 {
		mapxstep = 1
		partial = 1<<FRACBITS - x1>>(FRACBITS+7-FRACBITS)&(1<<FRACBITS-1)
		ystep = FixedDiv(y2-y1, xabs(x2-x1))
	} else {
		if xt2 < xt1 {
			mapxstep = -1
			partial = x1 >> (FRACBITS + 7 - FRACBITS) & (1<<FRACBITS - 1)
			ystep = FixedDiv(y2-y1, xabs(x2-x1))
		} else {
			mapxstep = 0
			partial = 1 << FRACBITS
			ystep = 256 * (1 << FRACBITS)
		}
	}
	yintercept = y1>>(FRACBITS+7-FRACBITS) + FixedMul(partial, ystep)
	if yt2 > yt1 {
		mapystep = 1
		partial = 1<<FRACBITS - y1>>(FRACBITS+7-FRACBITS)&(1<<FRACBITS-1)
		xstep = FixedDiv(x2-x1, xabs(y2-y1))
	} else {
		if yt2 < yt1 {
			mapystep = -1
			partial = y1 >> (FRACBITS + 7 - FRACBITS) & (1<<FRACBITS - 1)
			xstep = FixedDiv(x2-x1, xabs(y2-y1))
		} else {
			mapystep = 0
			partial = 1 << FRACBITS
			xstep = 256 * (1 << FRACBITS)
		}
	}
	xintercept = x1>>(FRACBITS+7-FRACBITS) + FixedMul(partial, xstep)
	// Step through map blocks.
	// Count is present to prevent a round off error
	// from skipping the break.
	mapx = xt1
	mapy = yt1
	count = 0
	for {
		if count >= 64 {
			break
		}
		if flags&int32(PT_ADDLINES) != 0 {
			if P_BlockLinesIterator(mapx, mapy, PIT_AddLineIntercepts) == 0 {
				return 0
			} // early out
		}
		if flags&int32(PT_ADDTHINGS) != 0 {
			if P_BlockThingsIterator(mapx, mapy, PIT_AddThingIntercepts) == 0 {
				return 0
			} // early out
		}
		if mapx == xt2 && mapy == yt2 {
			break
		}
		if yintercept>>FRACBITS == mapy {
			yintercept += ystep
			mapx += mapxstep
		} else {
			if xintercept>>FRACBITS == mapx {
				xintercept += xstep
				mapy += mapystep
			}
		}
		goto _1
	_1:
		;
		count++
	}
	// go through the sorted list
	return P_TraverseIntercepts(trav, 1<<FRACBITS)
}

const ANG453 = 536870912
const FRICTION = 59392
const STOPSPEED = 4096

func P_SetMobjState(mobj *mobj_t, state statenum_t) (r boolean) {
	for cond := true; cond; cond = mobj.Ftics == 0 {
		if state == S_NULL {
			mobj.Fstate = nil
			P_RemoveMobj(mobj)
			return 0
		}
		st := &states[state]
		mobj.Fstate = st
		mobj.Ftics = st.Ftics
		mobj.Fsprite = st.Fsprite
		mobj.Fframe = st.Fframe
		// Modified handling.
		// Call action functions when the state is set
		if st.Faction != nil {
			st.Faction(mobj, nil)
		}
		state = st.Fnextstate
	}
	return 1
}

// C documentation
//
//	//
//	// P_ExplodeMissile
//	//
func P_ExplodeMissile(mo *mobj_t) {
	var v1, v2 fixed_t
	v2 = 0
	mo.Fmomz = v2
	v1 = v2
	mo.Fmomy = v1
	mo.Fmomx = v1
	P_SetMobjState(mo, mobjinfo[mo.Ftype1].Fdeathstate)
	mo.Ftics -= P_Random() & 3
	if mo.Ftics < 1 {
		mo.Ftics = 1
	}
	mo.Fflags &= ^MF_MISSILE
	if mo.Finfo.Fdeathsound != 0 {
		S_StartSound(&mo.degenmobj_t, mo.Finfo.Fdeathsound)
	}
}

//
// P_XYMovement
//

func P_XYMovement(mo *mobj_t) {
	var player *player_t
	var ptryx, ptryy, xmove, ymove, v1, v2, v3, v4, v5 fixed_t
	if mo.Fmomx == 0 && mo.Fmomy == 0 {
		if mo.Fflags&MF_SKULLFLY != 0 {
			// the skull slammed into something
			mo.Fflags &= ^MF_SKULLFLY
			v2 = 0
			mo.Fmomz = v2
			v1 = v2
			mo.Fmomy = v1
			mo.Fmomx = v1
			P_SetMobjState(mo, mo.Finfo.Fspawnstate)
		}
		return
	}
	player = mo.Fplayer
	if mo.Fmomx > 30*(1<<FRACBITS) {
		mo.Fmomx = 30 * (1 << FRACBITS)
	} else {
		if mo.Fmomx < -(30 * (1 << FRACBITS)) {
			mo.Fmomx = -(30 * (1 << FRACBITS))
		}
	}
	if mo.Fmomy > 30*(1<<FRACBITS) {
		mo.Fmomy = 30 * (1 << FRACBITS)
	} else {
		if mo.Fmomy < -(30 * (1 << FRACBITS)) {
			mo.Fmomy = -(30 * (1 << FRACBITS))
		}
	}
	xmove = mo.Fmomx
	ymove = mo.Fmomy
	for cond := true; cond; cond = xmove != 0 || ymove != 0 {
		if xmove > 30*(1<<FRACBITS)/2 || ymove > 30*(1<<FRACBITS)/2 {
			ptryx = mo.Fx + xmove/int32(2)
			ptryy = mo.Fy + ymove/int32(2)
			xmove >>= 1
			ymove >>= 1
		} else {
			ptryx = mo.Fx + xmove
			ptryy = mo.Fy + ymove
			v3 = 0
			ymove = v3
			xmove = v3
		}
		if P_TryMove(mo, ptryx, ptryy) == 0 {
			// blocked move
			if mo.Fplayer != nil {
				// try to slide along it
				P_SlideMove(mo)
			} else {
				if mo.Fflags&MF_MISSILE != 0 {
					// explode a missile
					if ceilingline != nil && ceilingline.Fbacksector != nil && int32(ceilingline.Fbacksector.Fceilingpic) == skyflatnum {
						// Hack to prevent missiles exploding
						// against the sky.
						// Does not handle sky floors.
						P_RemoveMobj(mo)
						return
					}
					P_ExplodeMissile(mo)
				} else {
					v4 = 0
					mo.Fmomy = v4
					mo.Fmomx = v4
				}
			}
		}
	}
	// slow down
	if player != nil && player.Fcheats&int32(CF_NOMOMENTUM) != 0 {
		// debug option for no sliding at all
		v5 = 0
		mo.Fmomy = v5
		mo.Fmomx = v5
		return
	}
	if mo.Fflags&(MF_MISSILE|MF_SKULLFLY) != 0 {
		return
	} // no friction for missiles ever
	if mo.Fz > mo.Ffloorz {
		return
	} // no friction when airborne
	if mo.Fflags&MF_CORPSE != 0 {
		// do not stop sliding
		//  if halfway off a step with some momentum
		if mo.Fmomx > 1<<FRACBITS/4 || mo.Fmomx < -(1<<FRACBITS)/4 || mo.Fmomy > 1<<FRACBITS/4 || mo.Fmomy < -(1<<FRACBITS)/4 {
			if mo.Ffloorz != (*sector_t)(unsafe.Pointer(mo.Fsubsector.Fsector)).Ffloorheight {
				return
			}
		}
	}
	if mo.Fmomx > -int32(STOPSPEED) && mo.Fmomx < int32(STOPSPEED) && mo.Fmomy > -int32(STOPSPEED) && mo.Fmomy < int32(STOPSPEED) && (player == nil || int32(player.Fcmd.Fforwardmove) == 0 && int32(player.Fcmd.Fsidemove) == 0) {
		// if in a walking frame, stop moving
		if player != nil && stateIndex(player.Fmo.Fstate)-S_PLAY_RUN1 < 4 {
			P_SetMobjState(player.Fmo, S_PLAY)
		}
		mo.Fmomx = 0
		mo.Fmomy = 0
	} else {
		mo.Fmomx = FixedMul(mo.Fmomx, int32(FRICTION))
		mo.Fmomy = FixedMul(mo.Fmomy, int32(FRICTION))
	}
}

// C documentation
//
//	//
//	// P_ZMovement
//	//
func P_ZMovement(mo *mobj_t) {
	var correct_lost_soul_bounce int32
	var delta, dist fixed_t
	// check for smooth step up
	if mo.Fplayer != nil && mo.Fz < mo.Ffloorz {
		mo.Fplayer.Fviewheight -= mo.Ffloorz - mo.Fz
		mo.Fplayer.Fdeltaviewheight = (41*(1<<FRACBITS) - mo.Fplayer.Fviewheight) >> 3
	}
	// adjust height
	mo.Fz += mo.Fmomz
	if mo.Fflags&MF_FLOAT != 0 && mo.Ftarget != nil {
		// float down towards target if too close
		if mo.Fflags&MF_SKULLFLY == 0 && mo.Fflags&MF_INFLOAT == 0 {
			dist = P_AproxDistance(mo.Fx-(*mobj_t)(unsafe.Pointer(mo.Ftarget)).Fx, mo.Fy-(*mobj_t)(unsafe.Pointer(mo.Ftarget)).Fy)
			delta = (*mobj_t)(unsafe.Pointer(mo.Ftarget)).Fz + mo.Fheight>>1 - mo.Fz
			if delta < 0 && dist < -(delta*int32(3)) {
				mo.Fz -= 1 << FRACBITS * 4
			} else {
				if delta > 0 && dist < delta*int32(3) {
					mo.Fz += 1 << FRACBITS * 4
				}
			}
		}
	}
	// clip movement
	if mo.Fz <= mo.Ffloorz {
		// hit the floor
		// Note (id):
		//  somebody left this after the setting momz to 0,
		//  kinda useless there.
		//
		// cph - This was the a bug in the linuxdoom-1.10 source which
		//  caused it not to sync Doom 2 v1.9 demos. Someone
		//  added the above comment and moved up the following code. So
		//  demos would desync in close lost soul fights.
		// Note that this only applies to original Doom 1 or Doom2 demos - not
		//  Final Doom and Ultimate Doom.  So we test demo_compatibility *and*
		//  gamemission. (Note we assume that Doom1 is always Ult Doom, which
		//  seems to hold for most published demos.)
		//
		//  fraggle - cph got the logic here slightly wrong.  There are three
		//  versions of Doom 1.9:
		//
		//  * The version used in registered doom 1.9 + doom2 - no bounce
		//  * The version used in ultimate doom - has bounce
		//  * The version used in final doom - has bounce
		//
		// So we need to check that this is either retail or commercial
		// (but not doom2)
		correct_lost_soul_bounce = boolint32(gameversion >= exe_ultimate)
		if correct_lost_soul_bounce != 0 && mo.Fflags&MF_SKULLFLY != 0 {
			// the skull slammed into something
			mo.Fmomz = -mo.Fmomz
		}
		if mo.Fmomz < 0 {
			if mo.Fplayer != nil && mo.Fmomz < -(1<<FRACBITS)*8 {
				// Squat down.
				// Decrease viewheight for a moment
				// after hitting the ground (hard),
				// and utter appropriate sound.
				mo.Fplayer.Fdeltaviewheight = mo.Fmomz >> 3
				S_StartSound(&mo.degenmobj_t, int32(sfx_oof))
			}
			mo.Fmomz = 0
		}
		mo.Fz = mo.Ffloorz
		// cph 2001/05/26 -
		// See lost soul bouncing comment above. We need this here for bug
		// compatibility with original Doom2 v1.9 - if a soul is charging and
		// hit by a raising floor this incorrectly reverses its Y momentum.
		//
		if correct_lost_soul_bounce == 0 && mo.Fflags&MF_SKULLFLY != 0 {
			mo.Fmomz = -mo.Fmomz
		}
		if mo.Fflags&MF_MISSILE != 0 && mo.Fflags&MF_NOCLIP == 0 {
			P_ExplodeMissile(mo)
			return
		}
	} else {
		if mo.Fflags&MF_NOGRAVITY == 0 {
			if mo.Fmomz == 0 {
				mo.Fmomz = -(1 << FRACBITS) * 2
			} else {
				mo.Fmomz -= 1 << FRACBITS
			}
		}
	}
	if mo.Fz+mo.Fheight > mo.Fceilingz {
		// hit the ceiling
		if mo.Fmomz > 0 {
			mo.Fmomz = 0
		}
		mo.Fz = mo.Fceilingz - mo.Fheight
		if mo.Fflags&MF_SKULLFLY != 0 {
			// the skull slammed into something
			mo.Fmomz = -mo.Fmomz
		}
		if mo.Fflags&MF_MISSILE != 0 && mo.Fflags&MF_NOCLIP == 0 {
			P_ExplodeMissile(mo)
			return
		}
	}
}

// C documentation
//
//	//
//	// P_NightmareRespawn
//	//
func P_NightmareRespawn(mobj *mobj_t) {
	var mo *mobj_t
	var mthing *mapthing_t
	var ss *subsector_t
	var x, y, z fixed_t
	x = int32(mobj.Fspawnpoint.Fx) << int32(FRACBITS)
	y = int32(mobj.Fspawnpoint.Fy) << int32(FRACBITS)
	// somthing is occupying it's position?
	if P_CheckPosition(mobj, x, y) == 0 {
		return
	} // no respwan
	// spawn a teleport fog at old spot
	// because of removal of the body?
	mo = P_SpawnMobj(mobj.Fx, mobj.Fy, (*sector_t)(unsafe.Pointer(mobj.Fsubsector.Fsector)).Ffloorheight, int32(MT_TFOG))
	// initiate teleport sound
	S_StartSound(&mo.degenmobj_t, int32(sfx_telept))
	// spawn a teleport fog at the new spot
	ss = R_PointInSubsector(x, y)
	mo = P_SpawnMobj(x, y, ss.Fsector.Ffloorheight, int32(MT_TFOG))
	S_StartSound(&mo.degenmobj_t, int32(sfx_telept))
	// spawn the new monster
	mthing = &mobj.Fspawnpoint
	// spawn it
	if mobj.Finfo.Fflags&MF_SPAWNCEILING != 0 {
		z = int32(INT_MAX11)
	} else {
		z = -1 - 0x7fffffff
	}
	// inherit attributes from deceased one
	mo = P_SpawnMobj(x, y, z, mobj.Ftype1)
	mo.Fspawnpoint = mobj.Fspawnpoint
	mo.Fangle = uint32(int32(ANG453) * (int32(mthing.Fangle) / 45))
	if int32(mthing.Foptions)&int32(MTF_AMBUSH) != 0 {
		mo.Fflags |= MF_AMBUSH
	}
	mo.Freactiontime = 18
	// remove the old monster,
	P_RemoveMobj(mobj)
}

// C documentation
//
//	//
//	// P_MobjThinker
//	//
func P_MobjThinker(mobj *mobj_t) {
	// momentum movement
	if mobj.Fmomx != 0 || mobj.Fmomy != 0 || mobj.Fflags&MF_SKULLFLY != 0 {
		P_XYMovement(mobj)
		// FIXME: decent NOP/NULL/Nil function pointer please.
		if mobj.Fthinker.Ffunction.Facv == uintptr_negative_one {
			return
		} // mobj was removed
	}
	if mobj.Fz != mobj.Ffloorz || mobj.Fmomz != 0 {
		P_ZMovement(mobj)
		// FIXME: decent NOP/NULL/Nil function pointer please.
		if mobj.Fthinker.Ffunction.Facv == uintptr_negative_one {
			return
		} // mobj was removed
	}
	// cycle through states,
	// calling action functions at transitions
	if mobj.Ftics != -1 {
		mobj.Ftics--
		// you can cycle through multiple states in a tic
		if mobj.Ftics == 0 {
			if P_SetMobjState(mobj, mobj.Fstate.Fnextstate) == 0 {
				return
			}
		} // freed itself
	} else {
		// check for nightmare respawn
		if mobj.Fflags&MF_COUNTKILL == 0 {
			return
		}
		if respawnmonsters == 0 {
			return
		}
		mobj.Fmovecount++
		if mobj.Fmovecount < 12*TICRATE {
			return
		}
		if leveltime&int32(31) != 0 {
			return
		}
		if P_Random() > 4 {
			return
		}
		P_NightmareRespawn(mobj)
	}
}

// C documentation
//
//	//
//	// P_SpawnMobj
//	//
func P_SpawnMobj(x fixed_t, y fixed_t, z fixed_t, type1 mobjtype_t) (r *mobj_t) {
	var mobj *mobj_t
	var info *mobjinfo_t
	mobj = (*mobj_t)(unsafe.Pointer(Z_Malloc(224, int32(PU_LEVEL), uintptr(0))))
	*mobj = mobj_t{}
	info = &mobjinfo[uintptr(type1)]
	mobj.Ftype1 = type1
	mobj.Finfo = info
	mobj.Fx = x
	mobj.Fy = y
	mobj.Fradius = info.Fradius
	mobj.Fheight = info.Fheight
	mobj.Fflags = info.Fflags
	mobj.Fhealth = info.Fspawnhealth
	if gameskill != sk_nightmare {
		mobj.Freactiontime = info.Freactiontime
	}
	mobj.Flastlook = P_Random() % int32(MAXPLAYERS)
	// do not set the state with P_SetMobjState,
	// because action routines can not be called yet
	st := &states[info.Fspawnstate]
	mobj.Fstate = st
	mobj.Ftics = st.Ftics
	mobj.Fsprite = st.Fsprite
	mobj.Fframe = st.Fframe
	// set subsector and/or block links
	P_SetThingPosition(mobj)
	mobj.Ffloorz = (*sector_t)(unsafe.Pointer(mobj.Fsubsector.Fsector)).Ffloorheight
	mobj.Fceilingz = (*sector_t)(unsafe.Pointer(mobj.Fsubsector.Fsector)).Fceilingheight
	if z == -1-0x7fffffff {
		mobj.Fz = mobj.Ffloorz
	} else {
		if z == int32(INT_MAX11) {
			mobj.Fz = mobj.Fceilingz - mobj.Finfo.Fheight
		} else {
			mobj.Fz = z
		}
	}
	mobj.Fthinker.Ffunction.Facv = __ccgo_fp(P_MobjThinker)
	P_AddThinker(&mobj.Fthinker)
	return mobj
}

func P_RemoveMobj(mobj *mobj_t) {
	if mobj.Fflags&MF_SPECIAL != 0 && mobj.Fflags&MF_DROPPED == 0 && mobj.Ftype1 != int32(MT_INV) && mobj.Ftype1 != int32(MT_INS) {
		itemrespawnque[iquehead] = mobj.Fspawnpoint
		itemrespawntime[iquehead] = leveltime
		iquehead = (iquehead + 1) & (ITEMQUESIZE - 1)
		// lose one off the end?
		if iquehead == iquetail {
			iquetail = (iquetail + 1) & (ITEMQUESIZE - 1)
		}
	}
	// unlink from sector and block lists
	P_UnsetThingPosition(mobj)
	// stop any playing sound
	S_StopSound(&mobj.degenmobj_t)
	// free block
	P_RemoveThinker(&mobj.Fthinker)
}

// C documentation
//
//	//
//	// P_RespawnSpecials
//	//
func P_RespawnSpecials() {
	var i int32
	var mo *mobj_t
	var mthing *mapthing_t
	var ss *subsector_t
	var x, y, z fixed_t
	// only respawn items in deathmatch
	if deathmatch != 2 {
		return
	} //
	// nothing left to respawn?
	if iquehead == iquetail {
		return
	}
	// wait at least 30 seconds
	if leveltime-itemrespawntime[iquetail] < 30*TICRATE {
		return
	}
	mthing = &itemrespawnque[iquetail]
	x = int32(mthing.Fx) << int32(FRACBITS)
	y = int32(mthing.Fy) << int32(FRACBITS)
	// spawn a teleport fog at the new spot
	ss = R_PointInSubsector(x, y)
	mo = P_SpawnMobj(x, y, ss.Fsector.Ffloorheight, int32(MT_IFOG))
	S_StartSound(&mo.degenmobj_t, int32(sfx_itmbk))
	// find which type to spawn
	i = 0
	for {
		if i >= int32(NUMMOBJTYPES) {
			break
		}
		if int32(mthing.Ftype1) == mobjinfo[i].Fdoomednum {
			break
		}
		goto _1
	_1:
		;
		i++
	}
	// spawn it
	if mobjinfo[i].Fflags&MF_SPAWNCEILING != 0 {
		z = int32(INT_MAX11)
	} else {
		z = -1 - 0x7fffffff
	}
	mo = P_SpawnMobj(x, y, z, i)
	mo.Fspawnpoint = *mthing
	mo.Fangle = uint32(int32(ANG453) * (int32(mthing.Fangle) / 45))
	// pull it from the que
	iquetail = (iquetail + 1) & (ITEMQUESIZE - 1)
}

// C documentation
//
//	//
//	// P_SpawnPlayer
//	// Called when a player is spawned on the level.
//	// Most of the player structure stays unchanged
//	//  between levels.
//	//
func P_SpawnPlayer(mthing *mapthing_t) {
	var i int32
	var mobj *mobj_t
	var p *player_t
	var x, y, z fixed_t
	if int32(mthing.Ftype1) == 0 {
		return
	}
	// not playing?
	if playeringame[int32(mthing.Ftype1)-1] == 0 {
		return
	}
	p = &players[mthing.Ftype1-1]
	if p.Fplayerstate == int32(PST_REBORN) {
		G_PlayerReborn(int32(mthing.Ftype1) - 1)
	}
	x = int32(mthing.Fx) << int32(FRACBITS)
	y = int32(mthing.Fy) << int32(FRACBITS)
	z = -1 - 0x7fffffff
	mobj = P_SpawnMobj(x, y, z, int32(MT_PLAYER))
	// set color translations for player sprites
	if int32(mthing.Ftype1) > 1 {
		mobj.Fflags |= (int32(mthing.Ftype1) - 1) << MF_TRANSSHIFT
	}
	mobj.Fangle = uint32(int32(ANG453) * (int32(mthing.Fangle) / 45))
	mobj.Fplayer = p
	mobj.Fhealth = p.Fhealth
	p.Fmo = mobj
	p.Fplayerstate = int32(PST_LIVE)
	p.Frefire = 0
	p.Fmessage = ""
	p.Fdamagecount = 0
	p.Fbonuscount = 0
	p.Fextralight = 0
	p.Ffixedcolormap = 0
	p.Fviewheight = 41 * (1 << FRACBITS)
	// setup gun psprite
	P_SetupPsprites(p)
	// give all cards in death match mode
	if deathmatch != 0 {
		i = 0
		for {
			if i >= int32(NUMCARDS) {
				break
			}
			p.Fcards[i] = 1
			goto _1
		_1:
			;
			i++
		}
	}
	if int32(mthing.Ftype1)-1 == consoleplayer {
		// wake up the status bar
		ST_Start()
		// wake up the heads up text
		HU_Start()
	}
}

// C documentation
//
//	//
//	// P_SpawnMapThing
//	// The fields of the mapthing should
//	// already be in host byte order.
//	//
func P_SpawnMapThing(mthing *mapthing_t) {
	var bit, i int32
	var mobj *mobj_t
	var x, y, z fixed_t
	// count deathmatch start positions
	if int32(mthing.Ftype1) == 11 {
		if deathmatch_pos < len(deathmatchstarts) {
			deathmatchstarts[deathmatch_pos] = *mthing
			deathmatch_pos++
		}
		return
	}
	if int32(mthing.Ftype1) <= 0 {
		// Thing type 0 is actually "player -1 start".
		// For some reason, Vanilla Doom accepts/ignores this.
		return
	}
	// check for players specially
	if int32(mthing.Ftype1) <= 4 {
		// save spots for respawning in network games
		playerstarts[int32(mthing.Ftype1)-1] = *mthing
		if deathmatch == 0 {
			P_SpawnPlayer(mthing)
		}
		return
	}
	// check for apropriate skill level
	if netgame == 0 && int32(mthing.Foptions)&int32(16) != 0 {
		return
	}
	if gameskill == sk_baby {
		bit = 1
	} else {
		if gameskill == sk_nightmare {
			bit = 4
		} else {
			bit = 1 << (gameskill - 1)
		}
	}
	if int32(mthing.Foptions)&bit == 0 {
		return
	}
	// find which type to spawn
	i = 0
	for {
		if i >= int32(NUMMOBJTYPES) {
			break
		}
		if int32(mthing.Ftype1) == mobjinfo[i].Fdoomednum {
			break
		}
		goto _1
	_1:
		;
		i++
	}
	if i == int32(NUMMOBJTYPES) {
		I_Error(24810, int32(mthing.Ftype1), int32(mthing.Fx), int32(mthing.Fy))
	}
	// don't spawn keycards and players in deathmatch
	if deathmatch != 0 && mobjinfo[i].Fflags&MF_NOTDMATCH != 0 {
		return
	}
	// don't spawn any monsters if -nomonsters
	if nomonsters != 0 && (i == int32(MT_SKULL) || mobjinfo[i].Fflags&MF_COUNTKILL != 0) {
		return
	}
	// spawn it
	x = int32(mthing.Fx) << int32(FRACBITS)
	y = int32(mthing.Fy) << int32(FRACBITS)
	if mobjinfo[i].Fflags&MF_SPAWNCEILING != 0 {
		z = int32(INT_MAX11)
	} else {
		z = -1 - 0x7fffffff
	}
	mobj = P_SpawnMobj(x, y, z, i)
	mobj.Fspawnpoint = *mthing
	if mobj.Ftics > 0 {
		mobj.Ftics = 1 + P_Random()%mobj.Ftics
	}
	if mobj.Fflags&MF_COUNTKILL != 0 {
		totalkills++
	}
	if mobj.Fflags&MF_COUNTITEM != 0 {
		totalitems++
	}
	mobj.Fangle = uint32(int32(ANG453) * (int32(mthing.Fangle) / 45))
	if int32(mthing.Foptions)&int32(MTF_AMBUSH) != 0 {
		mobj.Fflags |= MF_AMBUSH
	}
}

func P_SpawnPuff(x fixed_t, y fixed_t, z fixed_t) {
	var th *mobj_t
	z += (P_Random() - P_Random()) << 10
	th = P_SpawnMobj(x, y, z, int32(MT_PUFF))
	th.Fmomz = 1 << FRACBITS
	th.Ftics -= P_Random() & 3
	if th.Ftics < 1 {
		th.Ftics = 1
	}
	// don't make punches spark on the wall
	if attackrange == 64*(1<<FRACBITS) {
		P_SetMobjState(th, S_PUFF3)
	}
}

// C documentation
//
//	//
//	// P_SpawnBlood
//	//
func P_SpawnBlood(x fixed_t, y fixed_t, z fixed_t, damage int32) {
	var th *mobj_t
	z += (P_Random() - P_Random()) << 10
	th = P_SpawnMobj(x, y, z, int32(MT_BLOOD))
	th.Fmomz = 1 << FRACBITS * 2
	th.Ftics -= P_Random() & 3
	if th.Ftics < 1 {
		th.Ftics = 1
	}
	if damage <= 12 && damage >= 9 {
		P_SetMobjState(th, S_BLOOD2)
	} else {
		if damage < 9 {
			P_SetMobjState(th, S_BLOOD3)
		}
	}
}

// C documentation
//
//	//
//	// P_CheckMissileSpawn
//	// Moves the missile forward a bit
//	//  and possibly explodes it right there.
//	//
func P_CheckMissileSpawn(th *mobj_t) {
	th.Ftics -= P_Random() & 3
	if th.Ftics < 1 {
		th.Ftics = 1
	}
	// move a little forward so an angle can
	// be computed if it immediately explodes
	th.Fx += th.Fmomx >> 1
	th.Fy += th.Fmomy >> 1
	th.Fz += th.Fmomz >> 1
	if P_TryMove(th, th.Fx, th.Fy) == 0 {
		P_ExplodeMissile(th)
	}
}

// Certain functions assume that a mobj_t pointer is non-NULL,
// causing a crash in some situations where it is NULL.  Vanilla
// Doom did not crash because of the lack of proper memory
// protection. This function substitutes NULL pointers for
// pointers to a dummy mobj, to avoid a crash.

func P_SubstNullMobj(mobj *mobj_t) *mobj_t {
	if mobj == nil {
		dummy_mobj.Fx = 0
		dummy_mobj.Fy = 0
		dummy_mobj.Fz = 0
		dummy_mobj.Fflags = 0
		mobj = &dummy_mobj
	}
	return mobj
}

var dummy_mobj mobj_t

// C documentation
//
//	//
//	// P_SpawnMissile
//	//
func P_SpawnMissile(source *mobj_t, dest *mobj_t, type1 mobjtype_t) (r *mobj_t) {
	var an angle_t
	var dist int32
	var th *mobj_t
	th = P_SpawnMobj(source.Fx, source.Fy, source.Fz+4*8*(1<<FRACBITS), type1)
	if th.Finfo.Fseesound != 0 {
		S_StartSound(&th.degenmobj_t, th.Finfo.Fseesound)
	}
	th.Ftarget = source // where it came from
	an = R_PointToAngle2(source.Fx, source.Fy, dest.Fx, dest.Fy)
	// fuzzy player
	if dest.Fflags&MF_SHADOW != 0 {
		an += uint32((P_Random() - P_Random()) << 20)
	}
	th.Fangle = an
	an >>= uint32(ANGLETOFINESHIFT)
	th.Fmomx = FixedMul(th.Finfo.Fspeed, finecosine[an])
	th.Fmomy = FixedMul(th.Finfo.Fspeed, finesine[an])
	dist = P_AproxDistance(dest.Fx-source.Fx, dest.Fy-source.Fy)
	dist = dist / th.Finfo.Fspeed
	if dist < 1 {
		dist = 1
	}
	th.Fmomz = (dest.Fz - source.Fz) / dist
	P_CheckMissileSpawn(th)
	return th
}

// C documentation
//
//	//
//	// P_SpawnPlayerMissile
//	// Tries to aim at a nearby monster
//	//
func P_SpawnPlayerMissile(source *mobj_t, type1 mobjtype_t) {
	var an angle_t
	var slope, x, y, z fixed_t
	var th *mobj_t
	// see which target is to be aimed at
	an = source.Fangle
	slope = P_AimLineAttack(source, an, 16*64*(1<<FRACBITS))
	if linetarget == nil {
		an += uint32(1 << 26)
		slope = P_AimLineAttack(source, an, 16*64*(1<<FRACBITS))
		if linetarget == nil {
			an -= uint32(2 << 26)
			slope = P_AimLineAttack(source, an, 16*64*(1<<FRACBITS))
		}
		if linetarget == nil {
			an = source.Fangle
			slope = 0
		}
	}
	x = source.Fx
	y = source.Fy
	z = source.Fz + 4*8*(1<<FRACBITS)
	th = P_SpawnMobj(x, y, z, type1)
	if th.Finfo.Fseesound != 0 {
		S_StartSound(&th.degenmobj_t, th.Finfo.Fseesound)
	}
	th.Ftarget = source
	th.Fangle = an
	th.Fmomx = FixedMul(th.Finfo.Fspeed, finecosine[an>>int32(ANGLETOFINESHIFT)])
	th.Fmomy = FixedMul(th.Finfo.Fspeed, finesine[an>>int32(ANGLETOFINESHIFT)])
	th.Fmomz = FixedMul(th.Finfo.Fspeed, slope)
	P_CheckMissileSpawn(th)
}

// C documentation
//
//	//
//	// Move a plat up and down
//	//
func T_PlatRaise(plat *plat_t) {
	var res result_e
	switch plat.Fstatus {
	case int32(up):
		res = T_MovePlane(plat.Fsector, plat.Fspeed, plat.Fhigh, plat.Fcrush, 0, 1)
		if plat.Ftype1 == int32(raiseAndChange) || plat.Ftype1 == int32(raiseToNearestAndChange) {
			if leveltime&7 == 0 {
				S_StartSound(&plat.Fsector.Fsoundorg, int32(sfx_stnmov))
			}
		}
		if res == int32(crushed) && plat.Fcrush == 0 {
			plat.Fcount = plat.Fwait
			plat.Fstatus = int32(down)
			S_StartSound(&plat.Fsector.Fsoundorg, int32(sfx_pstart))
		} else {
			if res == int32(pastdest) {
				plat.Fcount = plat.Fwait
				plat.Fstatus = int32(waiting)
				S_StartSound(&plat.Fsector.Fsoundorg, int32(sfx_pstop))
				switch plat.Ftype1 {
				case int32(blazeDWUS):
					fallthrough
				case int32(downWaitUpStay):
					P_RemoveActivePlat(plat)
				case int32(raiseAndChange):
					fallthrough
				case int32(raiseToNearestAndChange):
					P_RemoveActivePlat(plat)
				default:
					break
				}
			}
		}
	case int32(down):
		res = T_MovePlane(plat.Fsector, plat.Fspeed, plat.Flow, 0, 0, -1)
		if res == int32(pastdest) {
			plat.Fcount = (*plat_t)(unsafe.Pointer(plat)).Fwait
			plat.Fstatus = int32(waiting)
			S_StartSound(&plat.Fsector.Fsoundorg, int32(sfx_pstop))
		}
	case int32(waiting):
		plat.Fcount--
		if plat.Fcount == 0 {
			if plat.Fsector.Ffloorheight == plat.Flow {
				plat.Fstatus = int32(up)
			} else {
				plat.Fstatus = int32(down)
			}
			S_StartSound(&plat.Fsector.Fsoundorg, int32(sfx_pstart))
		}
		fallthrough
	case int32(in_stasis):
		break
	}
}

// C documentation
//
//	//
//	// Do Platforms
//	//  "amount" is only used for SOME platforms.
//	//
func EV_DoPlat(line *line_t, type1 plattype_e, amount int32) (r int32) {
	var plat uintptr
	var sec *sector_t
	var rtn, secnum, v1 int32
	secnum = -1
	rtn = 0
	//	Activate all <type> plats that are in_stasis
	switch type1 {
	case int32(perpetualRaise):
		P_ActivateInStasis(int32(line.Ftag))
	default:
		break
	}
	for {
		v1 = P_FindSectorFromLineTag(line, secnum)
		secnum = v1
		if !(v1 >= 0) {
			break
		}
		sec = &sectors[secnum]
		if sec.Fspecialdata != 0 {
			continue
		}
		// Find lowest & highest floors around sector
		rtn = 1
		plat = Z_Malloc(72, int32(PU_LEVSPEC), uintptr(0))
		platP := (*plat_t)(unsafe.Pointer(plat))
		P_AddThinker(&platP.Fthinker)
		platP.Ftype1 = type1
		platP.Fsector = sec
		platP.Fsector.Fspecialdata = plat
		platP.Fthinker.Ffunction.Facv = __ccgo_fp(T_PlatRaise)
		platP.Fcrush = 0
		platP.Ftag = int32(line.Ftag)
		switch type1 {
		case int32(raiseToNearestAndChange):
			platP.Fspeed = 1 << FRACBITS / 2
			sec.Ffloorpic = sides[line.Fsidenum[0]].Fsector.Ffloorpic
			platP.Fhigh = P_FindNextHighestFloor(sec, sec.Ffloorheight)
			platP.Fwait = 0
			platP.Fstatus = int32(up)
			// NO MORE DAMAGE, IF APPLICABLE
			sec.Fspecial = 0
			S_StartSound(&sec.Fsoundorg, int32(sfx_stnmov))
		case int32(raiseAndChange):
			platP.Fspeed = 1 << FRACBITS / 2
			sec.Ffloorpic = sides[line.Fsidenum[0]].Fsector.Ffloorpic
			platP.Fhigh = sec.Ffloorheight + amount*(1<<FRACBITS)
			platP.Fwait = 0
			platP.Fstatus = int32(up)
			S_StartSound(&sec.Fsoundorg, int32(sfx_stnmov))
		case int32(downWaitUpStay):
			platP.Fspeed = 1 << FRACBITS * 4
			platP.Flow = P_FindLowestFloorSurrounding(sec)
			if platP.Flow > sec.Ffloorheight {
				platP.Flow = sec.Ffloorheight
			}
			platP.Fhigh = sec.Ffloorheight
			platP.Fwait = TICRATE * PLATWAIT
			platP.Fstatus = int32(down)
			S_StartSound(&sec.Fsoundorg, int32(sfx_pstart))
		case int32(blazeDWUS):
			platP.Fspeed = 1 << FRACBITS * 8
			platP.Flow = P_FindLowestFloorSurrounding(sec)
			if platP.Flow > sec.Ffloorheight {
				platP.Flow = sec.Ffloorheight
			}
			platP.Fhigh = sec.Ffloorheight
			platP.Fwait = TICRATE * PLATWAIT
			platP.Fstatus = int32(down)
			S_StartSound(&sec.Fsoundorg, int32(sfx_pstart))
		case int32(perpetualRaise):
			platP.Fspeed = 1 << FRACBITS
			platP.Flow = P_FindLowestFloorSurrounding(sec)
			if platP.Flow > sec.Ffloorheight {
				platP.Flow = sec.Ffloorheight
			}
			platP.Fhigh = P_FindHighestFloorSurrounding(sec)
			if platP.Fhigh < sec.Ffloorheight {
				platP.Fhigh = sec.Ffloorheight
			}
			platP.Fwait = TICRATE * PLATWAIT
			platP.Fstatus = P_Random() & 1
			S_StartSound(&sec.Fsoundorg, int32(sfx_pstart))
			break
		}
		P_AddActivePlat(platP)
	}
	return rtn
}

func P_ActivateInStasis(tag int32) {
	var i int32
	i = 0
	for {
		if i >= int32(MAXPLATS) {
			break
		}
		if activeplats[i] != nil && activeplats[i].Ftag == tag && activeplats[i].Fstatus == int32(in_stasis) {
			activeplats[i].Fstatus = (*plat_t)(unsafe.Pointer(activeplats[i])).Foldstatus
			activeplats[i].Fthinker.Ffunction.Facv = __ccgo_fp(T_PlatRaise)
		}
		goto _1
	_1:
		;
		i++
	}
}

func EV_StopPlat(line *line_t) {
	var j int32
	j = 0
	for {
		if j >= int32(MAXPLATS) {
			break
		}
		if activeplats[j] != nil && activeplats[j].Fstatus != int32(in_stasis) && activeplats[j].Ftag == int32(line.Ftag) {
			activeplats[j].Foldstatus = (*plat_t)(unsafe.Pointer(activeplats[j])).Fstatus
			activeplats[j].Fstatus = int32(in_stasis)
			activeplats[j].Fthinker.Ffunction.Facv = 0
		}
		goto _1
	_1:
		;
		j++
	}
}

func P_AddActivePlat(plat *plat_t) {
	var i int32
	i = 0
	for {
		if i >= int32(MAXPLATS) {
			break
		}
		if activeplats[i] == nil {
			activeplats[i] = plat
			return
		}
		goto _1
	_1:
		;
		i++
	}
	I_Error(24855, 0)
}

func P_RemoveActivePlat(plat *plat_t) {
	var i int32
	i = 0
	for {
		if i >= int32(MAXPLATS) {
			break
		}
		if plat == activeplats[i] {
			activeplats[i].Fsector.Fspecialdata = uintptr(0)
			P_RemoveThinker(&activeplats[i].Fthinker)
			activeplats[i] = nil
			return
		}
		goto _1
	_1:
		;
		i++
	}
	I_Error(24887, 0)
}

const ANG1807 = 2147483648
const ANG905 = 1073741824

// Data.
//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Created by the sound utility written by Dave Taylor.
//	Kept as a sample, DOOM2  sounds. Frozen.
//

//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//  Sprite animation.
//

// C documentation
//
//	//
//	// P_SetPsprite
//	//
func P_SetPsprite(player *player_t, position int32, stnum statenum_t) {
	psp := &player.Fpsprites[position]
	for cond := true; cond; cond = psp.Ftics == 0 {
		if stnum == 0 {
			// object removed itself
			psp.Fstate = nil
			break
		}
		state := &states[stnum]
		psp.Fstate = state
		psp.Ftics = state.Ftics // could be 0
		if state.Fmisc1 != 0 {
			// coordinate set
			psp.Fsx = state.Fmisc1 << int32(FRACBITS)
			psp.Fsy = state.Fmisc2 << int32(FRACBITS)
		}
		// Call action routine.
		// Modified handling.
		if state.Faction != nil {
			state.Faction(player.Fmo, psp)
			if psp.Fstate == nil {
				break
			}
		}
		stnum = psp.Fstate.Fnextstate
	}
	// an initial state of 0 could cycle through
}

// C documentation
//
//	//
//	// P_BringUpWeapon
//	// Starts bringing the pending weapon up
//	// from the bottom of the screen.
//	// Uses player
//	//
func P_BringUpWeapon(player *player_t) {
	var newstate statenum_t
	if player.Fpendingweapon == wp_nochange {
		player.Fpendingweapon = player.Freadyweapon
	}
	if player.Fpendingweapon == wp_chainsaw {
		S_StartSound(&player.Fmo.degenmobj_t, int32(sfx_sawup))
	}
	newstate = weaponinfo[player.Fpendingweapon].Fupstate
	player.Fpendingweapon = wp_nochange
	(*(*pspdef_t)(unsafe.Pointer(&player.Fpsprites[ps_weapon]))).Fsy = 128 * (1 << FRACBITS)
	P_SetPsprite(player, int32(ps_weapon), newstate)
}

// C documentation
//
//	//
//	// P_CheckAmmo
//	// Returns true if there is enough ammo to shoot.
//	// If not, selects the next weapon to use.
//	//
func P_CheckAmmo(player *player_t) (r boolean) {
	var ammo ammotype_t
	var count int32
	ammo = weaponinfo[player.Freadyweapon].Fammo
	// Minimal amount for one shot varies.
	if player.Freadyweapon == wp_bfg {
		count = int32(DEH_DEFAULT_BFG_CELLS_PER_SHOT)
	} else {
		if player.Freadyweapon == wp_supershotgun {
			count = 2
		} else {
			count = 1
		}
	} // Regular.
	// Some do not need ammunition anyway.
	// Return if current ammunition sufficient.
	if ammo == am_noammo || player.Fammo[ammo] >= count {
		return 1
	}
	// Out of ammo, pick a weapon to change to.
	// Preferences are set here.
	for cond := true; cond; cond = player.Fpendingweapon == wp_nochange {
		if player.Fweaponowned[wp_plasma] != 0 && player.Fammo[am_cell] != 0 && gamemode != shareware {
			player.Fpendingweapon = wp_plasma
		} else {
			if player.Fweaponowned[wp_supershotgun] != 0 && player.Fammo[am_shell] > 2 && gamemode == commercial {
				player.Fpendingweapon = wp_supershotgun
			} else {
				if player.Fweaponowned[wp_chaingun] != 0 && player.Fammo[am_clip] != 0 {
					player.Fpendingweapon = wp_chaingun
				} else {
					if player.Fweaponowned[wp_shotgun] != 0 && player.Fammo[am_shell] != 0 {
						player.Fpendingweapon = wp_shotgun
					} else {
						if player.Fweaponowned[am_clip] != 0 {
							player.Fpendingweapon = wp_pistol
						} else {
							if player.Fweaponowned[wp_chainsaw] != 0 {
								player.Fpendingweapon = wp_chainsaw
							} else {
								if player.Fweaponowned[wp_missile] != 0 && player.Fammo[am_misl] != 0 {
									player.Fpendingweapon = wp_missile
								} else {
									if player.Fweaponowned[wp_bfg] != 0 && player.Fammo[am_cell] > 40 && gamemode != shareware {
										player.Fpendingweapon = wp_bfg
									} else {
										// If everything fails.
										player.Fpendingweapon = wp_fist
									}
								}
							}
						}
					}
				}
			}
		}
	}
	// Now set appropriate weapon overlay.
	P_SetPsprite(player, int32(ps_weapon), weaponinfo[player.Freadyweapon].Fdownstate)
	return 0
}

// C documentation
//
//	//
//	// P_FireWeapon.
//	//
func P_FireWeapon(player *player_t) {
	var newstate statenum_t
	if P_CheckAmmo(player) == 0 {
		return
	}
	P_SetMobjState(player.Fmo, S_PLAY_ATK1)
	newstate = weaponinfo[player.Freadyweapon].Fatkstate
	P_SetPsprite(player, int32(ps_weapon), newstate)
	P_NoiseAlert(player.Fmo, player.Fmo)
}

// C documentation
//
//	//
//	// P_DropWeapon
//	// Player died, so put the weapon away.
//	//
func P_DropWeapon(player *player_t) {
	P_SetPsprite(player, int32(ps_weapon), weaponinfo[player.Freadyweapon].Fdownstate)
}

// C documentation
//
//	//
//	// A_WeaponReady
//	// The player can fire the weapon
//	// or change to another weapon at this time.
//	// Follows after getting weapon up,
//	// or after previous attack/fire sequence.
//	//
func A_WeaponReady(player *player_t, psp *pspdef_t) {
	var angle int32
	var newstate statenum_t
	// get out of attack state
	if player.Fmo.Fstate == &states[S_PLAY_ATK1] || player.Fmo.Fstate == &states[S_PLAY_ATK2] {
		P_SetMobjState(player.Fmo, S_PLAY)
	}
	if player.Freadyweapon == wp_chainsaw && psp.Fstate == &states[S_SAW] {
		S_StartSound(&player.Fmo.degenmobj_t, int32(sfx_sawidl))
	}
	// check for change
	//  if player is dead, put the weapon away
	if player.Fpendingweapon != wp_nochange || player.Fhealth == 0 {
		// change weapon
		//  (pending weapon should allready be validated)
		newstate = weaponinfo[player.Freadyweapon].Fdownstate
		P_SetPsprite(player, int32(ps_weapon), newstate)
		return
	}
	// check for fire
	//  the missile launcher and bfg do not auto fire
	if int32(player.Fcmd.Fbuttons)&BT_ATTACK != 0 {
		if player.Fattackdown == 0 || player.Freadyweapon != wp_missile && player.Freadyweapon != wp_bfg {
			player.Fattackdown = 1
			P_FireWeapon(player)
			return
		}
	} else {
		player.Fattackdown = 0
	}
	// bob the weapon based on movement speed
	angle = 128 * leveltime & (FINEANGLES - 1)
	psp.Fsx = 1<<FRACBITS + FixedMul(player.Fbob, finecosine[angle])
	angle &= FINEANGLES/2 - 1
	psp.Fsy = 32*(1<<FRACBITS) + FixedMul(player.Fbob, finesine[angle])
}

// C documentation
//
//	//
//	// A_ReFire
//	// The player can re-fire the weapon
//	// without lowering it entirely.
//	//
func A_ReFire(player *player_t, psp *pspdef_t) {
	// check for fire
	//  (if a weaponchange is pending, let it go through instead)
	if int32(player.Fcmd.Fbuttons)&BT_ATTACK != 0 && player.Fpendingweapon == wp_nochange && player.Fhealth != 0 {
		player.Frefire++
		P_FireWeapon(player)
	} else {
		player.Frefire = 0
		P_CheckAmmo(player)
	}
}

func A_CheckReload(player *player_t, psp *pspdef_t) {
	P_CheckAmmo(player)
}

// C documentation
//
//	//
//	// A_Lower
//	// Lowers current weapon,
//	//  and changes weapon at bottom.
//	//
func A_Lower(player *player_t, psp *pspdef_t) {
	psp.Fsy += 1 << FRACBITS * 6
	// Is already down.
	if psp.Fsy < 128*(1<<FRACBITS) {
		return
	}
	// Player is dead.
	if player.Fplayerstate == int32(PST_DEAD) {
		psp.Fsy = 128 * (1 << FRACBITS)
		// don't bring weapon back up
		return
	}
	// The old weapon has been lowered off the screen,
	// so change the weapon and start raising it
	if player.Fhealth == 0 {
		// Player is dead, so keep the weapon off screen.
		P_SetPsprite(player, int32(ps_weapon), S_NULL)
		return
	}
	player.Freadyweapon = player.Fpendingweapon
	P_BringUpWeapon(player)
}

// C documentation
//
//	//
//	// A_Raise
//	//
func A_Raise(player *player_t, psp *pspdef_t) {
	var newstate statenum_t
	psp.Fsy -= 1 << FRACBITS * 6
	if psp.Fsy > 32*(1<<FRACBITS) {
		return
	}
	psp.Fsy = 32 * (1 << FRACBITS)
	// The weapon has been raised all the way,
	//  so change to the ready state.
	newstate = weaponinfo[player.Freadyweapon].Freadystate
	P_SetPsprite(player, int32(ps_weapon), newstate)
}

// C documentation
//
//	//
//	// A_GunFlash
//	//
func A_GunFlash(player *player_t, psp *pspdef_t) {
	P_SetMobjState(player.Fmo, S_PLAY_ATK2)
	P_SetPsprite(player, int32(ps_flash), weaponinfo[player.Freadyweapon].Fflashstate)
}

//
// WEAPON ATTACKS
//

// C documentation
//
//	//
//	// A_Punch
//	//
func A_Punch(player *player_t, psp *pspdef_t) {
	var angle angle_t
	var damage, slope int32
	damage = (P_Random()%int32(10) + 1) << 1
	if player.Fpowers[pw_strength] != 0 {
		damage *= 10
	}
	angle = player.Fmo.Fangle
	angle += uint32((P_Random() - P_Random()) << 18)
	slope = P_AimLineAttack(player.Fmo, angle, 64*(1<<FRACBITS))
	P_LineAttack(player.Fmo, angle, 64*(1<<FRACBITS), slope, damage)
	// turn to face target
	if linetarget != nil {
		S_StartSound(&player.Fmo.degenmobj_t, int32(sfx_punch))
		player.Fmo.Fangle = R_PointToAngle2(player.Fmo.Fx, player.Fmo.Fy, linetarget.Fx, linetarget.Fy)
	}
}

// C documentation
//
//	//
//	// A_Saw
//	//
func A_Saw(player *player_t, psp *pspdef_t) {
	var angle angle_t
	var damage, slope int32
	damage = 2 * (P_Random()%int32(10) + 1)
	angle = player.Fmo.Fangle
	angle += uint32((P_Random() - P_Random()) << 18)
	// use meleerange + 1 se the puff doesn't skip the flash
	slope = P_AimLineAttack(player.Fmo, angle, 64*(1<<FRACBITS)+1)
	P_LineAttack(player.Fmo, angle, 64*(1<<FRACBITS)+1, slope, damage)
	if linetarget == nil {
		S_StartSound(&player.Fmo.degenmobj_t, int32(sfx_sawful))
		return
	}
	S_StartSound(&player.Fmo.degenmobj_t, int32(sfx_sawhit))
	// turn to face target
	angle = R_PointToAngle2(player.Fmo.Fx, player.Fmo.Fy, linetarget.Fx, linetarget.Fy)
	if angle-player.Fmo.Fangle > uint32(ANG1807) {
		if int32(angle-player.Fmo.Fangle) < -ANG905/20 {
			player.Fmo.Fangle = angle + uint32(ANG905/21)
		} else {
			player.Fmo.Fangle -= uint32(ANG905 / 20)
		}
	} else {
		if angle-player.Fmo.Fangle > uint32(ANG905/20) {
			player.Fmo.Fangle = angle - uint32(ANG905/21)
		} else {
			player.Fmo.Fangle += uint32(ANG905 / 20)
		}
	}
	player.Fmo.Fflags |= MF_JUSTATTACKED
}

// Doom does not check the bounds of the ammo array.  As a result,
// it is possible to use an ammo type > 4 that overflows into the
// maxammo array and affects that instead.  Through dehacked, for
// example, it is possible to make a weapon that decreases the max
// number of ammo for another weapon.  Emulate this.

func DecreaseAmmo(player *player_t, ammonum ammotype_t, amount int32) {
	if ammonum < NUMAMMO {
		player.Fammo[ammonum] -= amount
	} else {
		player.Fmaxammo[ammonum-NUMAMMO] -= amount
	}
}

// C documentation
//
//	//
//	// A_FireMissile
//	//
func A_FireMissile(player *player_t, psp *pspdef_t) {
	DecreaseAmmo(player, weaponinfo[player.Freadyweapon].Fammo, 1)
	P_SpawnPlayerMissile(player.Fmo, int32(MT_ROCKET))
}

// C documentation
//
//	//
//	// A_FireBFG
//	//
func A_FireBFG(player *player_t, psp *pspdef_t) {
	DecreaseAmmo(player, weaponinfo[player.Freadyweapon].Fammo, int32(DEH_DEFAULT_BFG_CELLS_PER_SHOT))
	P_SpawnPlayerMissile(player.Fmo, int32(MT_BFG))
}

// C documentation
//
//	//
//	// A_FirePlasma
//	//
func A_FirePlasma(player *player_t, psp *pspdef_t) {
	DecreaseAmmo(player, weaponinfo[player.Freadyweapon].Fammo, 1)
	P_SetPsprite(player, int32(ps_flash), weaponinfo[player.Freadyweapon].Fflashstate+P_Random()&int32(1))
	P_SpawnPlayerMissile(player.Fmo, int32(MT_PLASMA))
}

func P_BulletSlope(mo *mobj_t) {
	var an angle_t
	// see which target is to be aimed at
	an = mo.Fangle
	bulletslope = P_AimLineAttack(mo, an, 16*64*(1<<FRACBITS))
	if linetarget == nil {
		an += uint32(1 << 26)
		bulletslope = P_AimLineAttack(mo, an, 16*64*(1<<FRACBITS))
		if linetarget == nil {
			an -= uint32(2 << 26)
			bulletslope = P_AimLineAttack(mo, an, 16*64*(1<<FRACBITS))
		}
	}
}

// C documentation
//
//	//
//	// P_GunShot
//	//
func P_GunShot(mo *mobj_t, accurate boolean) {
	var angle angle_t
	var damage int32
	damage = 5 * (P_Random()%int32(3) + 1)
	angle = mo.Fangle
	if accurate == 0 {
		angle += uint32((P_Random() - P_Random()) << 18)
	}
	P_LineAttack(mo, angle, 32*64*(1<<FRACBITS), bulletslope, damage)
}

// C documentation
//
//	//
//	// A_FirePistol
//	//
func A_FirePistol(player *player_t, psp *pspdef_t) {
	S_StartSound(&player.Fmo.degenmobj_t, int32(sfx_pistol))
	P_SetMobjState(player.Fmo, S_PLAY_ATK2)
	DecreaseAmmo(player, weaponinfo[player.Freadyweapon].Fammo, 1)
	P_SetPsprite(player, int32(ps_flash), weaponinfo[player.Freadyweapon].Fflashstate)
	P_BulletSlope(player.Fmo)
	P_GunShot(player.Fmo, booluint32(player.Frefire == 0))
}

// C documentation
//
//	//
//	// A_FireShotgun
//	//
func A_FireShotgun(player *player_t, psp *pspdef_t) {
	var i int32
	S_StartSound(&player.Fmo.degenmobj_t, int32(sfx_shotgn))
	P_SetMobjState(player.Fmo, S_PLAY_ATK2)
	DecreaseAmmo(player, weaponinfo[player.Freadyweapon].Fammo, 1)
	P_SetPsprite(player, int32(ps_flash), weaponinfo[player.Freadyweapon].Fflashstate)
	P_BulletSlope(player.Fmo)
	i = 0
	for {
		if i >= 7 {
			break
		}
		P_GunShot(player.Fmo, 0)
		goto _1
	_1:
		;
		i++
	}
}

// C documentation
//
//	//
//	// A_FireShotgun2
//	//
func A_FireShotgun2(player *player_t, psp *pspdef_t) {
	var angle angle_t
	var damage, i int32
	S_StartSound(&player.Fmo.degenmobj_t, int32(sfx_dshtgn))
	P_SetMobjState(player.Fmo, S_PLAY_ATK2)
	DecreaseAmmo(player, weaponinfo[player.Freadyweapon].Fammo, 2)
	P_SetPsprite(player, int32(ps_flash), weaponinfo[player.Freadyweapon].Fflashstate)
	P_BulletSlope(player.Fmo)
	i = 0
	for {
		if i >= 20 {
			break
		}
		damage = 5 * (P_Random()%int32(3) + 1)
		angle = player.Fmo.Fangle
		angle += uint32((P_Random() - P_Random()) << 19)
		P_LineAttack(player.Fmo, angle, 32*64*(1<<FRACBITS), bulletslope+(P_Random()-P_Random())<<int32(5), damage)
		goto _1
	_1:
		;
		i++
	}
}

// C documentation
//
//	//
//	// A_FireCGun
//	//
func A_FireCGun(player *player_t, psp *pspdef_t) {
	S_StartSound(&player.Fmo.degenmobj_t, int32(sfx_pistol))
	if player.Fammo[weaponinfo[player.Freadyweapon].Fammo] == 0 {
		return
	}
	P_SetMobjState(player.Fmo, S_PLAY_ATK2)
	DecreaseAmmo(player, weaponinfo[player.Freadyweapon].Fammo, 1)
	newState := weaponinfo[player.Freadyweapon].Fflashstate + stateIndex(psp.Fstate) - S_CHAIN1
	P_SetPsprite(player, int32(ps_flash), newState)
	P_BulletSlope(player.Fmo)
	P_GunShot(player.Fmo, booluint32(player.Frefire == 0))
}

// C documentation
//
//	//
//	// ?
//	//
func A_Light0(player *player_t, psp *pspdef_t) {
	player.Fextralight = 0
}

func A_Light1(player *player_t, psp *pspdef_t) {
	player.Fextralight = 1
}

func A_Light2(player *player_t, psp *pspdef_t) {
	player.Fextralight = 2
}

// C documentation
//
//	//
//	// A_BFGSpray
//	// Spawn a BFG explosion on every monster in view
//	//
func A_BFGSpray(mo *mobj_t) {
	var an angle_t
	var damage, i, j int32
	// offset angles from its attack angle
	i = 0
	for {
		if i >= 40 {
			break
		}
		an = mo.Fangle - uint32(ANG905/2) + uint32(ANG905/40*i)
		// mo->target is the originator (player)
		//  of the missile
		P_AimLineAttack(mo.Ftarget, an, 16*64*(1<<FRACBITS))
		if linetarget == nil {
			goto _1
		}
		P_SpawnMobj(linetarget.Fx, linetarget.Fy, linetarget.Fz+linetarget.Fheight>>2, int32(MT_EXTRABFG))
		damage = 0
		j = 0
		for {
			if j >= 15 {
				break
			}
			damage += P_Random()&int32(7) + 1
			goto _2
		_2:
			;
			j++
		}
		P_DamageMobj(linetarget, mo.Ftarget, mo.Ftarget, damage)
		goto _1
	_1:
		;
		i++
	}
}

// C documentation
//
//	//
//	// A_BFGsound
//	//
func A_BFGsound(player *player_t, psp *pspdef_t) {
	S_StartSound(&player.Fmo.degenmobj_t, int32(sfx_bfg))
}

// C documentation
//
//	//
//	// P_SetupPsprites
//	// Called at start of level for each player.
//	//
func P_SetupPsprites(player *player_t) {
	var i int32
	// remove all psprites
	i = 0
	for {
		if i >= int32(NUMPSPRITES) {
			break
		}
		(*(*pspdef_t)(unsafe.Pointer(&player.Fpsprites[i]))).Fstate = nil
		goto _1
	_1:
		;
		i++
	}
	// spawn the gun
	player.Fpendingweapon = player.Freadyweapon
	P_BringUpWeapon(player)
}

// C documentation
//
//	//
//	// P_MovePsprites
//	// Called every tic by player thinking routine.
//	//
func P_MovePsprites(player *player_t) {
	var i int32
	var v2 *state_t
	i = 0
	for {
		if i >= int32(NUMPSPRITES) {
			break
		}
		psp := &player.Fpsprites[i]
		// a null state means not active
		v2 = psp.Fstate
		if v2 != nil {
			// drop tic count and possibly change state
			// a -1 tic count never changes
			if psp.Ftics != -1 {
				psp.Ftics--
				if psp.Ftics == 0 {
					P_SetPsprite(player, i, psp.Fstate.Fnextstate)
				}
			}
		}
		goto _1
	_1:
		;
		i++
	}
	player.Fpsprites[ps_flash].Fsx = player.Fpsprites[ps_weapon].Fsx
	player.Fpsprites[ps_flash].Fsy = player.Fpsprites[ps_weapon].Fsy
}

const SAVEGAME_EOF = 29

// Get the filename of a temporary file to write the savegame to.  After
// the file has been successfully saved, it will be renamed to the
// real file.

func P_TempSaveGameFile() string {
	if filename == "" {
		filename = savegamedir + __ccgo_ts_str(24924)
	}
	return filename
}

var filename string

// Get the filename of the save game file to use for the specified slot.

func P_SaveGameFile(slot int32) string {
	return fmt.Sprintf("%sdgsave%d.dsg", savegamedir, slot)
}

// Endian-safe integer read/write functions

func saveg_read8() (r uint8) {
	var val [1]byte
	if _, err := save_stream.Read(val[:]); err != nil {
		if savegame_error == 0 {
			fprintf_ccgo(os.Stderr, 24952)
			savegame_error = 1
		}
	}
	return val[0]
}

func saveg_write8(_value uint8) {
	val := [1]byte{_value}
	if _, err := save_stream.Write(val[:]); err != nil {
		if savegame_error == 0 {
			fprintf_ccgo(os.Stderr, 25013)
			savegame_error = 1
		}
	}
}

func saveg_read16() (r int16) {
	var result int32
	result = int32(saveg_read8())
	result |= int32(saveg_read8()) << 8
	return int16(result)
}

func saveg_write16(value int16) {
	saveg_write8(uint8(int32(value) & 0xff))
	saveg_write8(uint8(int32(value) >> int32(8) & 0xff))
}

func saveg_read32() (r int32) {
	var result int32
	result = int32(saveg_read8())
	result |= int32(saveg_read8()) << 8
	result |= int32(saveg_read8()) << 16
	result |= int32(saveg_read8()) << 24
	return result
}

func saveg_write32(value int32) {
	saveg_write8(uint8(value & 0xff))
	saveg_write8(uint8(value >> int32(8) & 0xff))
	saveg_write8(uint8(value >> int32(16) & 0xff))
	saveg_write8(uint8(value >> int32(24) & 0xff))
}

// Pad to 4-byte boundaries

func saveg_read_pad() {
	var i, padding int32
	pos, _ := save_stream.Seek(0, io.SeekCurrent)
	padding = int32((4 - uint64(pos)&uint64(3)) & uint64(3))
	i = 0
	for {
		if i >= padding {
			break
		}
		saveg_read8()
		goto _1
	_1:
		;
		i++
	}
}

func saveg_write_pad() {
	var i, padding int32
	pos, _ := save_stream.Seek(0, io.SeekCurrent)
	padding = int32((4 - uint64(pos)&uint64(3)) & uint64(3))
	i = 0
	for {
		if i >= padding {
			break
		}
		saveg_write8(0)
		goto _1
	_1:
		;
		i++
	}
}

// Pointers

func saveg_readp() (r uintptr) {
	return uintptr(int64(saveg_read32()))
}

func saveg_writep(p uintptr) {
	saveg_write32(int32(int64(p)))
}

// Enum values are 32-bit integers.

//
// Structure read/write functions
//

//
// mapthing_t
//

func saveg_read_mapthing_t(str *mapthing_t) {
	// short x;
	str.Fx = saveg_read16()
	// short y;
	str.Fy = saveg_read16()
	// short angle;
	str.Fangle = saveg_read16()
	// short type;
	str.Ftype1 = saveg_read16()
	// short options;
	str.Foptions = saveg_read16()
}

func saveg_write_mapthing_t(str *mapthing_t) {
	// short x;
	saveg_write16(str.Fx)
	// short y;
	saveg_write16(str.Fy)
	// short angle;
	saveg_write16(str.Fangle)
	// short type;
	saveg_write16(str.Ftype1)
	// short options;
	saveg_write16(str.Foptions)
}

//
// actionf_t
//

func saveg_read_actionf_t(str *actionf_t) {
	// actionf_p1 acp1;
	str.Facv = saveg_readp()
}

func saveg_write_actionf_t(str *actionf_t) {
	// actionf_p1 acp1;
	saveg_writep(uintptr(unsafe.Pointer(str.Facv)))
}

//
// think_t
//
// This is just an actionf_t.
//

//
// thinker_t
//

func saveg_read_thinker_t(str *thinker_t) {
	// struct thinker_t* prev;
	str.Fprev = (*thinker_t)(unsafe.Pointer(saveg_readp()))
	// struct thinker_t* next;
	str.Fnext = (*thinker_t)(unsafe.Pointer(saveg_readp()))
	// think_t function;

	saveg_read_actionf_t(&str.Ffunction)
}

func saveg_write_thinker_t(str *thinker_t) {
	// struct thinker_t* prev;
	saveg_writep(uintptr(unsafe.Pointer(str.Fprev)))
	// struct thinker_t* next;
	saveg_writep(uintptr(unsafe.Pointer(str.Fnext)))
	// think_t function;
	saveg_write_actionf_t(&str.Ffunction)
}

//
// mobj_t
//

func saveg_read_mobj_t(str *mobj_t) {
	var pl int32
	// thinker_t thinker;
	saveg_read_thinker_t(&str.Fthinker)
	// fixed_t x;
	str.Fx = saveg_read32()
	// fixed_t y;
	str.Fy = saveg_read32()
	// fixed_t z;
	str.Fz = saveg_read32()
	// struct mobj_t* snext;
	str.Fsnext = (*mobj_t)(unsafe.Pointer(saveg_readp()))
	// struct mobj_t* sprev;
	str.Fsprev = (*mobj_t)(unsafe.Pointer(saveg_readp()))
	// angle_t angle;
	str.Fangle = uint32(saveg_read32())
	// spritenum_t sprite;
	str.Fsprite = saveg_read32()
	// int frame;
	str.Fframe = saveg_read32()
	// struct mobj_t* bnext;
	str.Fbnext = (*mobj_t)(unsafe.Pointer(saveg_readp()))
	// struct mobj_t* bprev;
	str.Fbprev = (*mobj_t)(unsafe.Pointer(saveg_readp()))
	// struct subsector_t* subsector;
	str.Fsubsector = (*subsector_t)(unsafe.Pointer(saveg_readp()))
	// fixed_t floorz;
	str.Ffloorz = saveg_read32()
	// fixed_t ceilingz;
	str.Fceilingz = saveg_read32()
	// fixed_t radius;
	str.Fradius = saveg_read32()
	// fixed_t height;
	str.Fheight = saveg_read32()
	// fixed_t momx;
	str.Fmomx = saveg_read32()
	// fixed_t momy;
	str.Fmomy = saveg_read32()
	// fixed_t momz;
	str.Fmomz = saveg_read32()
	// int validcount;
	str.Fvalidcount = saveg_read32()
	// mobjtype_t type;
	str.Ftype1 = saveg_read32()
	// mobjinfo_t* info;
	str.Finfo = (*mobjinfo_t)(unsafe.Pointer(saveg_readp()))
	// int tics;
	str.Ftics = saveg_read32()
	// state_t* state;
	str.Fstate = &states[saveg_read32()]
	// int flags;
	str.Fflags = saveg_read32()
	// int health;
	str.Fhealth = saveg_read32()
	// int movedir;
	str.Fmovedir = saveg_read32()
	// int movecount;
	str.Fmovecount = saveg_read32()
	// struct mobj_t* target;
	str.Ftarget = (*mobj_t)(unsafe.Pointer(saveg_readp()))
	// int reactiontime;
	str.Freactiontime = saveg_read32()
	// int threshold;
	str.Fthreshold = saveg_read32()
	// player_t* player;
	pl = saveg_read32()
	if pl > 0 {
		str.Fplayer = &players[pl-1]
		str.Fplayer.Fmo = str
	} else {
		str.Fplayer = nil
	}
	// int lastlook;
	str.Flastlook = saveg_read32()
	// mapthing_t spawnpoint;
	saveg_read_mapthing_t(&str.Fspawnpoint)
	// struct mobj_t* tracer;
	str.Ftracer = (*mobj_t)(unsafe.Pointer(saveg_readp()))
}

func saveg_write_mobj_t(str *mobj_t) {
	// thinker_t thinker;
	saveg_write_thinker_t(&str.Fthinker)
	// fixed_t x;
	saveg_write32(str.Fx)
	// fixed_t y;
	saveg_write32(str.Fy)
	// fixed_t z;
	saveg_write32(str.Fz)
	// struct mobj_t* snext;
	saveg_writep(uintptr(unsafe.Pointer(str.Fsnext)))
	// struct mobj_t* sprev;
	saveg_writep(uintptr(unsafe.Pointer(str.Fsprev)))
	// angle_t angle;
	saveg_write32(int32(str.Fangle))
	// spritenum_t sprite;
	saveg_write32(str.Fsprite)
	// int frame;
	saveg_write32(str.Fframe)
	// struct mobj_t* bnext;
	saveg_writep(uintptr(unsafe.Pointer(str.Fbnext)))
	// struct mobj_t* bprev;
	saveg_writep(uintptr(unsafe.Pointer(str.Fbprev)))
	// struct subsector_t* subsector;
	saveg_writep(uintptr(unsafe.Pointer(str.Fsubsector)))
	// fixed_t floorz;
	saveg_write32(str.Ffloorz)
	// fixed_t ceilingz;
	saveg_write32(str.Fceilingz)
	// fixed_t radius;
	saveg_write32(str.Fradius)
	// fixed_t height;
	saveg_write32(str.Fheight)
	// fixed_t momx;
	saveg_write32(str.Fmomx)
	// fixed_t momy;
	saveg_write32(str.Fmomy)
	// fixed_t momz;
	saveg_write32(str.Fmomz)
	// int validcount;
	saveg_write32(str.Fvalidcount)
	// mobjtype_t type;
	saveg_write32(str.Ftype1)
	// mobjinfo_t* info;
	saveg_writep(uintptr(unsafe.Pointer(str.Finfo)))
	// int tics;
	saveg_write32(str.Ftics)
	// state_t* state;
	idx := stateIndex(str.Fstate)
	saveg_write32(idx)
	// int flags;
	saveg_write32(str.Fflags)
	// int health;
	saveg_write32(str.Fhealth)
	// int movedir;
	saveg_write32(str.Fmovedir)
	// int movecount;
	saveg_write32(str.Fmovecount)
	// struct mobj_t* target;
	saveg_writep(uintptr(unsafe.Pointer(str.Ftarget)))
	// int reactiontime;
	saveg_write32(str.Freactiontime)
	// int threshold;
	saveg_write32(str.Fthreshold)
	// player_t* player;
	if str.Fplayer != nil {
		idx := int32(playerIndex(str.Fplayer))
		saveg_write32(idx + 1)
	} else {
		saveg_write32(0)
	}
	// int lastlook;
	saveg_write32(str.Flastlook)
	// mapthing_t spawnpoint;
	saveg_write_mapthing_t(&str.Fspawnpoint)
	// struct mobj_t* tracer;
	saveg_writep(uintptr(unsafe.Pointer(str.Ftracer)))
}

//
// ticcmd_t
//

func saveg_read_ticcmd_t(str *ticcmd_t) {
	// signed char forwardmove;
	str.Fforwardmove = int8(saveg_read8())
	// signed char sidemove;
	str.Fsidemove = int8(saveg_read8())
	// short angleturn;
	str.Fangleturn = saveg_read16()
	// short consistancy;
	str.Fconsistancy = uint8(saveg_read16())
	// byte chatchar;
	str.Fchatchar = saveg_read8()
	// byte buttons;
	str.Fbuttons = saveg_read8()
}

func saveg_write_ticcmd_t(str *ticcmd_t) {
	// signed char forwardmove;
	saveg_write8(uint8(str.Fforwardmove))
	// signed char sidemove;
	saveg_write8(uint8(str.Fsidemove))
	// short angleturn;
	saveg_write16(str.Fangleturn)
	// short consistancy;
	saveg_write16(int16(str.Fconsistancy))
	// byte chatchar;
	saveg_write8(str.Fchatchar)
	// byte buttons;
	saveg_write8(str.Fbuttons)
}

//
// pspdef_t
//

func saveg_read_pspdef_t(str *pspdef_t) {
	var state int32
	// state_t* state;
	state = saveg_read32()
	if state > 0 {
		str.Fstate = &states[state]
	} else {
		str.Fstate = nil
	}
	// int tics;
	str.Ftics = saveg_read32()
	// fixed_t sx;
	str.Fsx = saveg_read32()
	// fixed_t sy;
	str.Fsy = saveg_read32()
}

func saveg_write_pspdef_t(str *pspdef_t) {
	// state_t* state;
	if str.Fstate != nil {
		saveg_write32(stateIndex(str.Fstate))
	} else {
		saveg_write32(0)
	}
	// int tics;
	saveg_write32(str.Ftics)
	// fixed_t sx;
	saveg_write32(str.Fsx)
	// fixed_t sy;
	saveg_write32(str.Fsy)
}

//
// player_t
//

func saveg_read_player_t(str *player_t) {
	// mobj_t* mo;
	str.Fmo = (*mobj_t)(unsafe.Pointer(saveg_readp()))
	// playerstate_t playerstate;
	str.Fplayerstate = saveg_read32()
	// ticcmd_t cmd;
	saveg_read_ticcmd_t(&str.Fcmd)
	// fixed_t viewz;
	str.Fviewz = saveg_read32()
	// fixed_t viewheight;
	str.Fviewheight = saveg_read32()
	// fixed_t deltaviewheight;
	str.Fdeltaviewheight = saveg_read32()
	// fixed_t bob;
	str.Fbob = saveg_read32()
	// int health;
	str.Fhealth = saveg_read32()
	// int armorpoints;
	str.Farmorpoints = saveg_read32()
	// int armortype;
	str.Farmortype = saveg_read32()
	// int powers[NUMPOWERS];
	for i := 0; i < NUMPOWERS; i++ {
		str.Fpowers[i] = saveg_read32()
	}
	// boolean cards[NUMCARDS];
	for i := 0; i < NUMCARDS; i++ {
		str.Fcards[i] = uint32(saveg_read32())
	}
	// boolean backpack;
	str.Fbackpack = uint32(saveg_read32())
	// int frags[MAXPLAYERS];
	for i := 0; i < MAXPLAYERS; i++ {
		str.Ffrags[i] = saveg_read32()
	}
	// weapontype_t readyweapon;
	str.Freadyweapon = weapontype_t(saveg_read32())
	// weapontype_t pendingweapon;
	str.Fpendingweapon = weapontype_t(saveg_read32())
	// boolean weaponowned[NUMWEAPONS];
	for i := 0; i < NUMWEAPONS; i++ {
		str.Fweaponowned[i] = uint32(saveg_read32())
	}
	for i := 0; i < NUMAMMO; i++ {
		str.Fammo[i] = saveg_read32()
	}
	// int maxammo[NUMAMMO];
	for i := 0; i < NUMAMMO; i++ {
		str.Fmaxammo[i] = saveg_read32()
	}
	// int attackdown;
	str.Fattackdown = saveg_read32()
	// int usedown;
	str.Fusedown = saveg_read32()
	// int cheats;
	str.Fcheats = saveg_read32()
	// int refire;
	str.Frefire = saveg_read32()
	// int killcount;
	str.Fkillcount = saveg_read32()
	// int itemcount;
	str.Fitemcount = saveg_read32()
	// int secretcount;
	str.Fsecretcount = saveg_read32()
	// char* message;
	str.Fmessage = gostring(saveg_readp())
	// int damagecount;
	str.Fdamagecount = saveg_read32()
	// int bonuscount;
	str.Fbonuscount = saveg_read32()
	// mobj_t* attacker;
	str.Fattacker = (*mobj_t)(unsafe.Pointer(saveg_readp()))
	// int extralight;
	str.Fextralight = saveg_read32()
	// int fixedcolormap;
	str.Ffixedcolormap = saveg_read32()
	// int colormap;
	str.Fcolormap = saveg_read32()
	// pspdef_t psprites[NUMPSPRITES];
	for i := 0; i < NUMPSPRITES; i++ {
		saveg_read_pspdef_t(&str.Fpsprites[i])
	}
	// boolean didsecret;
	str.Fdidsecret = uint32(saveg_read32())
}

func saveg_write_player_t(str *player_t) {
	var i int32
	// mobj_t* mo;
	saveg_writep(uintptr(unsafe.Pointer(str.Fmo)))
	// playerstate_t playerstate;
	saveg_write32(str.Fplayerstate)
	// ticcmd_t cmd;
	saveg_write_ticcmd_t(&str.Fcmd)
	// fixed_t viewz;
	saveg_write32(str.Fviewz)
	// fixed_t viewheight;
	saveg_write32(str.Fviewheight)
	// fixed_t deltaviewheight;
	saveg_write32(str.Fdeltaviewheight)
	// fixed_t bob;
	saveg_write32(str.Fbob)
	// int health;
	saveg_write32(str.Fhealth)
	// int armorpoints;
	saveg_write32(str.Farmorpoints)
	// int armortype;
	saveg_write32(str.Farmortype)
	// int powers[NUMPOWERS];
	i = 0
	for {
		if i >= int32(NUMPOWERS) {
			break
		}
		saveg_write32(str.Fpowers[i])
		goto _1
	_1:
		;
		i++
	}
	// boolean cards[NUMCARDS];
	i = 0
	for {
		if i >= int32(NUMCARDS) {
			break
		}
		saveg_write32(int32(str.Fcards[i]))
		goto _2
	_2:
		;
		i++
	}
	// boolean backpack;
	saveg_write32(int32(str.Fbackpack))
	// int frags[MAXPLAYERS];
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		saveg_write32(str.Ffrags[i])
		goto _3
	_3:
		;
		i++
	}
	// weapontype_t readyweapon;
	saveg_write32(int32(str.Freadyweapon))
	// weapontype_t pendingweapon;
	saveg_write32(int32(str.Fpendingweapon))
	// boolean weaponowned[NUMWEAPONS];
	i = 0
	for {
		if i >= int32(NUMWEAPONS) {
			break
		}
		saveg_write32(int32(str.Fweaponowned[i]))
		goto _4
	_4:
		;
		i++
	}
	// int ammo[NUMAMMO];
	i = 0
	for {
		if i >= int32(NUMAMMO) {
			break
		}
		saveg_write32(str.Fammo[i])
		goto _5
	_5:
		;
		i++
	}
	// int maxammo[NUMAMMO];
	i = 0
	for {
		if i >= int32(NUMAMMO) {
			break
		}
		saveg_write32(str.Fmaxammo[i])
		goto _6
	_6:
		;
		i++
	}
	// int attackdown;
	saveg_write32(str.Fattackdown)
	// int usedown;
	saveg_write32(str.Fusedown)
	// int cheats;
	saveg_write32(str.Fcheats)
	// int refire;
	saveg_write32(str.Frefire)
	// int killcount;
	saveg_write32(str.Fkillcount)
	// int itemcount;
	saveg_write32(str.Fitemcount)
	// int secretcount;
	saveg_write32(str.Fsecretcount)
	// char* message;
	if str.Fmessage == "" {
		saveg_writep(0)
	} else {
		saveg_writep(uintptr(unsafe.Pointer(&[]byte(str.Fmessage)[0])))
	}
	// int damagecount;
	saveg_write32(str.Fdamagecount)
	// int bonuscount;
	saveg_write32(str.Fbonuscount)
	// mobj_t* attacker;
	saveg_writep(uintptr(unsafe.Pointer(str.Fattacker)))
	// int extralight;
	saveg_write32(str.Fextralight)
	// int fixedcolormap;
	saveg_write32(str.Ffixedcolormap)
	// int colormap;
	saveg_write32(str.Fcolormap)
	// pspdef_t psprites[NUMPSPRITES];
	i = 0
	for {
		if i >= int32(NUMPSPRITES) {
			break
		}
		saveg_write_pspdef_t(&str.Fpsprites[i])
		goto _7
	_7:
		;
		i++
	}
	// boolean didsecret;
	saveg_write32(int32(str.Fdidsecret))
}

//
// ceiling_t
//

func saveg_read_ceiling_t(str *ceiling_t) {
	var sector int32
	// thinker_t thinker;
	saveg_read_thinker_t(&str.Fthinker)
	// ceiling_e type;
	str.Ftype1 = saveg_read32()
	// sector_t* sector;
	sector = saveg_read32()
	str.Fsector = &sectors[sector]
	// fixed_t bottomheight;
	str.Fbottomheight = saveg_read32()
	// fixed_t topheight;
	str.Ftopheight = saveg_read32()
	// fixed_t speed;
	str.Fspeed = saveg_read32()
	// boolean crush;
	str.Fcrush = uint32(saveg_read32())
	// int direction;
	str.Fdirection = saveg_read32()
	// int tag;
	str.Ftag = saveg_read32()
	// int olddirection;
	str.Folddirection = saveg_read32()
}

func saveg_write_ceiling_t(str *ceiling_t) {
	// thinker_t thinker;
	saveg_write_thinker_t(&str.Fthinker)
	// ceiling_e type;
	saveg_write32(str.Ftype1)
	// sector_t* sector;
	saveg_write32(sectorIndex(str.Fsector))
	// fixed_t bottomheight;
	saveg_write32(str.Fbottomheight)
	// fixed_t topheight;
	saveg_write32(str.Ftopheight)
	// fixed_t speed;
	saveg_write32(str.Fspeed)
	// boolean crush;
	saveg_write32(int32(str.Fcrush))
	// int direction;
	saveg_write32(str.Fdirection)
	// int tag;
	saveg_write32(str.Ftag)
	// int olddirection;
	saveg_write32(str.Folddirection)
}

//
// vldoor_t
//

func saveg_read_vldoor_t(str *vldoor_t) {
	var sector int32
	// thinker_t thinker;
	saveg_read_thinker_t(&str.Fthinker)
	// vldoor_e type;
	str.Ftype1 = saveg_read32()
	// sector_t* sector;
	sector = saveg_read32()
	str.Fsector = &sectors[sector]
	// fixed_t topheight;
	str.Ftopheight = saveg_read32()
	// fixed_t speed;
	str.Fspeed = saveg_read32()
	// int direction;
	str.Fdirection = saveg_read32()
	// int topwait;
	str.Ftopwait = saveg_read32()
	// int topcountdown;
	str.Ftopcountdown = saveg_read32()
}

func saveg_write_vldoor_t(str *vldoor_t) {
	// thinker_t thinker;
	saveg_write_thinker_t(&str.Fthinker)
	// vldoor_e type;
	saveg_write32(str.Ftype1)
	// sector_t* sector;
	saveg_write32(sectorIndex(str.Fsector))
	// fixed_t topheight;
	saveg_write32(str.Ftopheight)
	// fixed_t speed;
	saveg_write32(str.Fspeed)
	// int direction;
	saveg_write32(str.Fdirection)
	// int topwait;
	saveg_write32(str.Ftopwait)
	// int topcountdown;
	saveg_write32(str.Ftopcountdown)
}

//
// floormove_t
//

func saveg_read_floormove_t(str *floormove_t) {
	var sector int32
	// thinker_t thinker;
	saveg_read_thinker_t(&str.Fthinker)
	// floor_e type;
	str.Ftype1 = saveg_read32()
	// boolean crush;
	str.Fcrush = uint32(saveg_read32())
	// sector_t* sector;
	sector = saveg_read32()
	str.Fsector = &sectors[sector]
	// int direction;
	str.Fdirection = saveg_read32()
	// int newspecial;
	str.Fnewspecial = saveg_read32()
	// short texture;
	str.Ftexture = saveg_read16()
	// fixed_t floordestheight;
	str.Ffloordestheight = saveg_read32()
	// fixed_t speed;
	str.Fspeed = saveg_read32()
}

func saveg_write_floormove_t(str *floormove_t) {
	// thinker_t thinker;
	saveg_write_thinker_t(&str.Fthinker)
	// floor_e type;
	saveg_write32(str.Ftype1)
	// boolean crush;
	saveg_write32(int32(str.Fcrush))
	// sector_t* sector;
	saveg_write32(sectorIndex(str.Fsector))
	// int direction;
	saveg_write32(str.Fdirection)
	// int newspecial;
	saveg_write32(str.Fnewspecial)
	// short texture;
	saveg_write16(str.Ftexture)
	// fixed_t floordestheight;
	saveg_write32(str.Ffloordestheight)
	// fixed_t speed;
	saveg_write32(str.Fspeed)
}

//
// plat_t
//

func saveg_read_plat_t(str *plat_t) {
	var sector int32
	// thinker_t thinker;
	saveg_read_thinker_t(&str.Fthinker)
	// sector_t* sector;
	sector = saveg_read32()
	str.Fsector = &sectors[sector]
	// fixed_t speed;
	str.Fspeed = saveg_read32()
	// fixed_t low;
	str.Flow = saveg_read32()
	// fixed_t high;
	str.Fhigh = saveg_read32()
	// int wait;
	str.Fwait = saveg_read32()
	// int count;
	str.Fcount = saveg_read32()
	// plat_e status;
	str.Fstatus = saveg_read32()
	// plat_e oldstatus;
	str.Foldstatus = saveg_read32()
	// boolean crush;
	str.Fcrush = uint32(saveg_read32())
	// int tag;
	str.Ftag = saveg_read32()
	// plattype_e type;
	str.Ftype1 = saveg_read32()
}

func saveg_write_plat_t(str *plat_t) {
	// thinker_t thinker;
	saveg_write_thinker_t(&str.Fthinker)
	// sector_t* sector;
	saveg_write32(sectorIndex(str.Fsector))
	// fixed_t speed;
	saveg_write32(str.Fspeed)
	// fixed_t low;
	saveg_write32(str.Flow)
	// fixed_t high;
	saveg_write32(str.Fhigh)
	// int wait;
	saveg_write32(str.Fwait)
	// int count;
	saveg_write32(str.Fcount)
	// plat_e status;
	saveg_write32(str.Fstatus)
	// plat_e oldstatus;
	saveg_write32(str.Foldstatus)
	// boolean crush;
	saveg_write32(int32(str.Fcrush))
	// int tag;
	saveg_write32(str.Ftag)
	// plattype_e type;
	saveg_write32(str.Ftype1)
}

//
// lightflash_t
//

func saveg_read_lightflash_t(str *lightflash_t) {
	var sector int32
	// thinker_t thinker;
	saveg_read_thinker_t(&str.Fthinker)
	// sector_t* sector;
	sector = saveg_read32()
	str.Fsector = &sectors[sector]
	// int count;
	str.Fcount = saveg_read32()
	// int maxlight;
	str.Fmaxlight = saveg_read32()
	// int minlight;
	str.Fminlight = saveg_read32()
	// int maxtime;
	str.Fmaxtime = saveg_read32()
	// int mintime;
	str.Fmintime = saveg_read32()
}

func saveg_write_lightflash_t(str *lightflash_t) {
	// thinker_t thinker;
	saveg_write_thinker_t(&str.Fthinker)
	// sector_t* sector;
	saveg_write32(sectorIndex(str.Fsector))
	// int count;
	saveg_write32(str.Fcount)
	// int maxlight;
	saveg_write32(str.Fmaxlight)
	// int minlight;
	saveg_write32(str.Fminlight)
	// int maxtime;
	saveg_write32(str.Fmaxtime)
	// int mintime;
	saveg_write32(str.Fmintime)
}

//
// strobe_t
//

func saveg_read_strobe_t(str *strobe_t) {
	var sector int32
	// thinker_t thinker;
	saveg_read_thinker_t(&str.Fthinker)
	// sector_t* sector;
	sector = saveg_read32()
	str.Fsector = &sectors[sector]
	// int count;
	str.Fcount = saveg_read32()
	// int minlight;
	str.Fminlight = saveg_read32()
	// int maxlight;
	str.Fmaxlight = saveg_read32()
	// int darktime;
	str.Fdarktime = saveg_read32()
	// int brighttime;
	str.Fbrighttime = saveg_read32()
}

func saveg_write_strobe_t(str *strobe_t) {
	// thinker_t thinker;
	saveg_write_thinker_t(&str.Fthinker)
	// sector_t* sector;
	saveg_write32(sectorIndex(str.Fsector))
	// int count;
	saveg_write32(str.Fcount)
	// int minlight;
	saveg_write32(str.Fminlight)
	// int maxlight;
	saveg_write32(str.Fmaxlight)
	// int darktime;
	saveg_write32(str.Fdarktime)
	// int brighttime;
	saveg_write32(str.Fbrighttime)
}

//
// glow_t
//

func saveg_read_glow_t(str *glow_t) {
	var sector int32
	// thinker_t thinker;
	saveg_read_thinker_t(&str.Fthinker)
	// sector_t* sector;
	sector = saveg_read32()
	str.Fsector = &sectors[sector]
	// int minlight;
	str.Fminlight = saveg_read32()
	// int maxlight;
	str.Fmaxlight = saveg_read32()
	// int direction;
	str.Fdirection = saveg_read32()
}

func saveg_write_glow_t(str *glow_t) {
	// thinker_t thinker;
	saveg_write_thinker_t(&str.Fthinker)
	// sector_t* sector;
	saveg_write32(sectorIndex(str.Fsector))
	// int minlight;
	saveg_write32(str.Fminlight)
	// int maxlight;
	saveg_write32(str.Fmaxlight)
	// int direction;
	saveg_write32(str.Fdirection)
}

//
// Write the header for a savegame
//

func P_WriteSaveGameHeader(description string) {
	var i int
	bp := alloc(32)
	for i = 0; i < SAVESTRINGSIZE; i++ {
		if i < len(description) {
			saveg_write8(uint8(description[i]))
		} else {
			saveg_write8(0)
		}
	}
	xmemset(bp, 0, 16)
	M_snprintf(bp, 16, __ccgo_ts_str(25058), G_VanillaVersionCode())
	i = 0
	for {
		if i >= VERSIONSIZE {
			break
		}
		saveg_write8(uint8((*(*[16]int8)(unsafe.Pointer(bp)))[i]))
		goto _3
	_3:
		;
		i++
	}
	saveg_write8(uint8(gameskill))
	saveg_write8(uint8(gameepisode))
	saveg_write8(uint8(gamemap))
	i = 0
	for {
		if i >= MAXPLAYERS {
			break
		}
		saveg_write8(uint8(playeringame[i]))
		goto _4
	_4:
		;
		i++
	}
	saveg_write8(uint8(leveltime >> int32(16) & 0xff))
	saveg_write8(uint8(leveltime >> int32(8) & 0xff))
	saveg_write8(uint8(leveltime & 0xff))
}

//
// Read the header for a savegame
//

func P_ReadSaveGameHeader() (r boolean) {
	bp := alloc(48)
	var a, b, c uint8
	var i int32
	// skip the description field
	i = 0
	for {
		if i >= int32(SAVESTRINGSIZE) {
			break
		}
		saveg_read8()
		goto _1
	_1:
		;
		i++
	}
	i = 0
	for {
		if i >= int32(VERSIONSIZE) {
			break
		}
		(*(*[16]int8)(unsafe.Pointer(bp + 16)))[i] = int8(saveg_read8())
		goto _2
	_2:
		;
		i++
	}
	xmemset(bp, 0, 16)
	M_snprintf(bp, 16, __ccgo_ts_str(25058), G_VanillaVersionCode())
	if xstrcmp(bp+16, bp) != 0 {
		return 0
	} // bad version
	gameskill = skill_t(saveg_read8())
	gameepisode = int32(saveg_read8())
	gamemap = int32(saveg_read8())
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		playeringame[i] = uint32(saveg_read8())
		goto _3
	_3:
		;
		i++
	}
	// get the times
	a = saveg_read8()
	b = saveg_read8()
	c = saveg_read8()
	leveltime = int32(a)<<int32(16) + int32(b)<<int32(8) + int32(c)
	return 1
}

//
// Read the end of file marker.  Returns true if read successfully.
//

func P_ReadSaveGameEOF() (r boolean) {
	var value int32
	value = int32(saveg_read8())
	return booluint32(value == int32(SAVEGAME_EOF))
}

//
// Write the end of file marker
//

func P_WriteSaveGameEOF() {
	saveg_write8(uint8(SAVEGAME_EOF))
}

// C documentation
//
//	//
//	// P_ArchivePlayers
//	//
func P_ArchivePlayers() {
	var i int32
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		if playeringame[i] == 0 {
			goto _1
		}
		saveg_write_pad()
		saveg_write_player_t(&players[i])
		goto _1
	_1:
		;
		i++
	}
}

// C documentation
//
//	//
//	// P_UnArchivePlayers
//	//
func P_UnArchivePlayers() {
	for i := 0; i < MAXPLAYERS; i++ {
		if playeringame[i] == 0 {
			continue
		}
		saveg_read_pad()
		saveg_read_player_t(&players[i])
		// will be set when unarc thinker
		players[i].Fmo = nil
		players[i].Fmessage = ""
		players[i].Fattacker = nil
	}
}

// C documentation
//
//	//
//	// P_ArchiveWorld
//	//
func P_ArchiveWorld() {
	var si *side_t
	// do sectors
	for i := int32(0); i < numsectors; i++ {
		sec := &sectors[i]
		saveg_write16(int16(sec.Ffloorheight >> int32(FRACBITS)))
		saveg_write16(int16(sec.Fceilingheight >> int32(FRACBITS)))
		saveg_write16(sec.Ffloorpic)
		saveg_write16(sec.Fceilingpic)
		saveg_write16(sec.Flightlevel)
		saveg_write16(sec.Fspecial) // needed?
		saveg_write16(sec.Ftag)     // needed?
	}
	// do lines
	for i := int32(0); i < numlines; i++ {
		li := &lines[i]
		saveg_write16(li.Fflags)
		saveg_write16(li.Fspecial)
		saveg_write16(li.Ftag)
		for j := 0; j < 2; j++ {
			if li.Fsidenum[j] == -1 {
				continue
			}
			si = &sides[li.Fsidenum[j]]
			saveg_write16(int16((*side_t)(unsafe.Pointer(si)).Ftextureoffset >> int32(FRACBITS)))
			saveg_write16(int16((*side_t)(unsafe.Pointer(si)).Frowoffset >> int32(FRACBITS)))
			saveg_write16((*side_t)(unsafe.Pointer(si)).Ftoptexture)
			saveg_write16((*side_t)(unsafe.Pointer(si)).Fbottomtexture)
			saveg_write16((*side_t)(unsafe.Pointer(si)).Fmidtexture)
		}
	}
}

// C documentation
//
//	//
//	// P_UnArchiveWorld
//	//
func P_UnArchiveWorld() {
	var si *side_t
	// do sectors
	for i := int32(0); i < numsectors; i++ {
		sec := &sectors[i]
		sec.Ffloorheight = int32(saveg_read16()) << int32(FRACBITS)
		sec.Fceilingheight = int32(saveg_read16()) << int32(FRACBITS)
		sec.Ffloorpic = saveg_read16()
		sec.Fceilingpic = saveg_read16()
		sec.Flightlevel = saveg_read16()
		sec.Fspecial = saveg_read16() // needed?
		sec.Ftag = saveg_read16()     // needed?
		sec.Fspecialdata = uintptr(0)
		sec.Fsoundtarget = nil
	}
	// do lines
	for i := int32(0); i < numlines; i++ {
		li := &lines[i]
		li.Fflags = saveg_read16()
		li.Fspecial = saveg_read16()
		li.Ftag = saveg_read16()
		for j := 0; j < 2; j++ {
			if li.Fsidenum[j] == -1 {
				continue
			}
			si = &sides[li.Fsidenum[j]]
			(*side_t)(unsafe.Pointer(si)).Ftextureoffset = int32(saveg_read16()) << int32(FRACBITS)
			(*side_t)(unsafe.Pointer(si)).Frowoffset = int32(saveg_read16()) << int32(FRACBITS)
			(*side_t)(unsafe.Pointer(si)).Ftoptexture = saveg_read16()
			(*side_t)(unsafe.Pointer(si)).Fbottomtexture = saveg_read16()
			(*side_t)(unsafe.Pointer(si)).Fmidtexture = saveg_read16()
		}
	}
}

const tc_end = 0
const tc_mobj = 1

// C documentation
//
//	//
//	// P_ArchiveThinkers
//	//
func P_ArchiveThinkers() {
	var th *thinker_t
	// save off the current thinkers
	th = thinkercap.Fnext
	for {
		if th == &thinkercap {
			break
		}
		if th.Ffunction.Facv == __ccgo_fp(P_MobjThinker) {
			saveg_write8(uint8(tc_mobj))
			saveg_write_pad()
			saveg_write_mobj_t((*mobj_t)(unsafe.Pointer(th)))
			goto _1
		}
		// I_Error ("P_ArchiveThinkers: Unknown thinker function");
		goto _1
	_1:
		;
		th = th.Fnext
	}
	// add a terminating marker
	saveg_write8(uint8(tc_end))
}

// C documentation
//
//	//
//	// P_UnArchiveThinkers
//	//
func P_UnArchiveThinkers() {
	var currentthinker, next *thinker_t
	var mobj *mobj_t
	var tclass uint8
	// remove all the current thinkers
	currentthinker = thinkercap.Fnext
	for currentthinker != &thinkercap {
		next = currentthinker.Fnext
		if currentthinker.Ffunction.Facv == __ccgo_fp(P_MobjThinker) {
			P_RemoveMobj((*mobj_t)(unsafe.Pointer(currentthinker)))
		} else {
			Z_Free(uintptr(unsafe.Pointer(currentthinker)))
		}
		currentthinker = next
	}
	P_InitThinkers()
	// read in saved thinkers
	for 1 != 0 {
		tclass = saveg_read8()
		switch int32(tclass) {
		case tc_end:
			return // end of list
		case tc_mobj:
			saveg_read_pad()
			mobj = (*mobj_t)(unsafe.Pointer(Z_Malloc(224, int32(PU_LEVEL), uintptr(0))))
			saveg_read_mobj_t(mobj)
			mobj.Ftarget = nil
			mobj.Ftracer = nil
			P_SetThingPosition(mobj)
			mobj.Finfo = &mobjinfo[mobj.Ftype1]
			mobj.Ffloorz = (*sector_t)(unsafe.Pointer(mobj.Fsubsector.Fsector)).Ffloorheight
			mobj.Fceilingz = (*sector_t)(unsafe.Pointer(mobj.Fsubsector.Fsector)).Fceilingheight
			mobj.Fthinker.Ffunction.Facv = __ccgo_fp(P_MobjThinker)
			P_AddThinker(&mobj.Fthinker)
		default:
			I_Error(25069, tclass)
		}
	}
}

const tc_ceiling = 0
const tc_door = 1
const tc_floor = 2
const tc_plat = 3
const tc_flash = 4
const tc_strobe = 5
const tc_glow = 6
const tc_endspecials = 7

// C documentation
//
//	//
//	// Things to handle:
//	//
//	// T_MoveCeiling, (ceiling_t: sector_t * swizzle), - active list
//	// T_VerticalDoor, (vldoor_t: sector_t * swizzle),
//	// T_MoveFloor, (floormove_t: sector_t * swizzle),
//	// T_LightFlash, (lightflash_t: sector_t * swizzle),
//	// T_StrobeFlash, (strobe_t: sector_t *),
//	// T_Glow, (glow_t: sector_t *),
//	// T_PlatRaise, (plat_t: sector_t *), - active list
//	//
func P_ArchiveSpecials() {
	var i int32
	var th *thinker_t
	// save off the current thinkers
	th = thinkercap.Fnext
	for {
		if th == &thinkercap {
			break
		}
		if th.Ffunction.Facv == 0 {
			i = 0
			for {
				if i >= int32(MAXCEILINGS) {
					break
				}
				if &activeceilings[i].Fthinker == th {
					break
				}
				goto _2
			_2:
				;
				i++
			}
			if i < int32(MAXCEILINGS) {
				saveg_write8(uint8(tc_ceiling))
				saveg_write_pad()
				saveg_write_ceiling_t((*ceiling_t)(unsafe.Pointer(th)))
			}
			goto _1
		}
		if th.Ffunction.Facv == __ccgo_fp(T_MoveCeiling) {
			saveg_write8(uint8(tc_ceiling))
			saveg_write_pad()
			saveg_write_ceiling_t((*ceiling_t)(unsafe.Pointer(th)))
			goto _1
		}
		if th.Ffunction.Facv == __ccgo_fp(T_VerticalDoor) {
			saveg_write8(uint8(tc_door))
			saveg_write_pad()
			saveg_write_vldoor_t((*vldoor_t)(unsafe.Pointer(th)))
			goto _1
		}
		if th.Ffunction.Facv == __ccgo_fp(T_MoveFloor) {
			saveg_write8(uint8(tc_floor))
			saveg_write_pad()
			saveg_write_floormove_t((*floormove_t)(unsafe.Pointer(th)))
			goto _1
		}
		if th.Ffunction.Facv == __ccgo_fp(T_PlatRaise) {
			saveg_write8(uint8(tc_plat))
			saveg_write_pad()
			saveg_write_plat_t((*plat_t)(unsafe.Pointer(th)))
			goto _1
		}
		if th.Ffunction.Facv == __ccgo_fp(T_LightFlash) {
			saveg_write8(uint8(tc_flash))
			saveg_write_pad()
			saveg_write_lightflash_t((*lightflash_t)(unsafe.Pointer(th)))
			goto _1
		}
		if th.Ffunction.Facv == __ccgo_fp(T_StrobeFlash) {
			saveg_write8(uint8(tc_strobe))
			saveg_write_pad()
			saveg_write_strobe_t((*strobe_t)(unsafe.Pointer(th)))
			goto _1
		}
		if th.Ffunction.Facv == __ccgo_fp(T_Glow) {
			saveg_write8(uint8(tc_glow))
			saveg_write_pad()
			saveg_write_glow_t((*glow_t)(unsafe.Pointer(th)))
			goto _1
		}
		goto _1
	_1:
		;
		th = th.Fnext
	}
	// add a terminating marker
	saveg_write8(uint8(tc_endspecials))
}

// C documentation
//
//	//
//	// P_UnArchiveSpecials
//	//
func P_UnArchiveSpecials() {
	var ceiling, door, flash, floor, glow, plat, strobe uintptr
	var tclass uint8
	// read in saved thinkers
	for 1 != 0 {
		tclass = saveg_read8()
		switch int32(tclass) {
		case tc_endspecials:
			return // end of list
		case tc_ceiling:
			saveg_read_pad()
			ceiling = Z_Malloc(72, int32(PU_LEVEL), uintptr(0))
			ceilingP := (*ceiling_t)(unsafe.Pointer(ceiling))
			saveg_read_ceiling_t(ceilingP)
			ceilingP.Fsector.Fspecialdata = ceiling
			if ceilingP.Fthinker.Ffunction.Facv != uintptr(0) {
				ceilingP.Fthinker.Ffunction.Facv = __ccgo_fp(T_MoveCeiling)
			}
			P_AddThinker(&ceilingP.Fthinker)
			P_AddActiveCeiling(ceilingP)
		case tc_door:
			saveg_read_pad()
			door = Z_Malloc(64, int32(PU_LEVEL), uintptr(0))
			doorP := (*vldoor_t)(unsafe.Pointer(door))
			saveg_read_vldoor_t(doorP)
			doorP.Fsector.Fspecialdata = door
			doorP.Fthinker.Ffunction.Facv = __ccgo_fp(T_VerticalDoor)
			P_AddThinker(&doorP.Fthinker)
		case tc_floor:
			saveg_read_pad()
			floor = Z_Malloc(64, int32(PU_LEVEL), uintptr(0))
			floorP := (*floormove_t)(unsafe.Pointer(floor))
			saveg_read_floormove_t(floorP)
			floorP.Fsector.Fspecialdata = floor
			floorP.Fthinker.Ffunction.Facv = __ccgo_fp(T_MoveFloor)
			P_AddThinker(&floorP.Fthinker)
		case tc_plat:
			saveg_read_pad()
			plat = Z_Malloc(72, int32(PU_LEVEL), uintptr(0))
			platP := (*plat_t)(unsafe.Pointer(plat))
			saveg_read_plat_t(platP)
			platP.Fsector.Fspecialdata = plat
			if platP.Fthinker.Ffunction.Facv != uintptr(0) {
				platP.Fthinker.Ffunction.Facv = __ccgo_fp(T_PlatRaise)
			}
			P_AddThinker(&platP.Fthinker)
			P_AddActivePlat(platP)
		case tc_flash:
			saveg_read_pad()
			flash = Z_Malloc(56, int32(PU_LEVEL), uintptr(0))
			flashP := (*lightflash_t)(unsafe.Pointer(flash))
			saveg_read_lightflash_t(flashP)
			flashP.Fthinker.Ffunction.Facv = __ccgo_fp(T_LightFlash)
			P_AddThinker(&flashP.Fthinker)
		case tc_strobe:
			saveg_read_pad()
			strobe = Z_Malloc(56, int32(PU_LEVEL), uintptr(0))
			strobeP := (*strobe_t)(unsafe.Pointer(strobe))
			saveg_read_strobe_t(strobeP)
			strobeP.Fthinker.Ffunction.Facv = __ccgo_fp(T_StrobeFlash)
			P_AddThinker(&strobeP.Fthinker)
		case tc_glow:
			saveg_read_pad()
			glow = Z_Malloc(48, int32(PU_LEVEL), uintptr(0))
			glowP := (*glow_t)(unsafe.Pointer(glow))
			saveg_read_glow_t(glowP)
			glowP.Fthinker.Ffunction.Facv = __ccgo_fp(T_Glow)
			P_AddThinker(&glowP.Fthinker)
		default:
			I_Error(25099, tclass)
		}
	}
}

var totallines int32

// C documentation
//
//	//
//	// P_LoadVertexes
//	//
func P_LoadVertexes(lump int32) {
	var data uintptr
	// Determine number of lumps:
	//  total lump length / vertex record length.
	numvertexes = int32(uint64(W_LumpLength(uint32(lump))) / 4)
	// Allocate zone memory for buffer.
	vertexes = make([]vertex_t, numvertexes)
	// Load data into cache.
	data = W_CacheLumpNum(lump, int32(PU_STATIC))
	ml := unsafe.Slice((*mapvertex_t)(unsafe.Pointer(data)), numvertexes)
	// Copy and convert vertex coordinates,
	// internal representation as fixed.
	for i := int32(0); i < numvertexes; i++ {
		li := &vertexes[i]
		li.Fx = int32(ml[i].Fx) << int32(FRACBITS)
		li.Fy = int32(ml[i].Fy) << int32(FRACBITS)
	}
	// Free buffer memory.
	W_ReleaseLumpNum(lump)
}

// C documentation
//
//	//
//	// GetSectorAtNullAddress
//	//
func GetSectorAtNullAddress() (r *sector_t) {
	if null_sector_is_initialized == 0 {
		null_sector = sector_t{}
		I_GetMemoryValue(0, uintptr(unsafe.Pointer(&null_sector)), 4)
		I_GetMemoryValue(4, uintptr(unsafe.Pointer(&null_sector))+4, 4)
		null_sector_is_initialized = 1
	}
	return &null_sector
}

var null_sector_is_initialized boolean

var null_sector sector_t

// C documentation
//
//	//
//	// P_LoadSegs
//	//
func P_LoadSegs(lump int32) {
	var data uintptr
	var ldef *line_t
	var linedef, side, sidenum int32
	numsegs = int32(uint64(W_LumpLength(uint32(lump))) / 12)
	segs = make([]seg_t, numsegs)
	data = W_CacheLumpNum(lump, int32(PU_STATIC))
	ml := unsafe.Slice((*mapseg_t)(unsafe.Pointer(data)), numsegs)
	for i := int32(0); i < numsegs; i++ {
		li := &segs[i]
		li.Fv1 = &vertexes[ml[i].Fv1]
		li.Fv2 = &vertexes[ml[i].Fv2]
		li.Fangle = uint32(int32(ml[i].Fangle) << 16)
		li.Foffset = int32(ml[i].Foffset) << 16
		linedef = int32(ml[i].Flinedef)
		ldef = &lines[linedef]
		li.Flinedef = ldef
		side = int32(ml[i].Fside)
		li.Fsidedef = &sides[ldef.Fsidenum[side]]
		li.Ffrontsector = sides[ldef.Fsidenum[side]].Fsector
		if int32(ldef.Fflags)&ML_TWOSIDED != 0 {
			sidenum = int32(ldef.Fsidenum[side^int32(1)])
			// If the sidenum is out of range, this may be a "glass hack"
			// impassible window.  Point at side #0 (this may not be
			// the correct Vanilla behavior; however, it seems to work for
			// OTTAWAU.WAD, which is the one place I've seen this trick
			// used).
			if sidenum < 0 || sidenum >= numsides {
				li.Fbacksector = GetSectorAtNullAddress()
			} else {
				li.Fbacksector = sides[sidenum].Fsector
			}
		} else {
			li.Fbacksector = nil
		}
	}
	W_ReleaseLumpNum(lump)
}

// C documentation
//
//	//
//	// P_LoadSubsectors
//	//
func P_LoadSubsectors(lump int32) {
	var data, ms uintptr
	numsubsectors = int32(uint64(W_LumpLength(uint32(lump))) / 4)
	subsectors = make([]subsector_t, numsubsectors)
	data = W_CacheLumpNum(lump, int32(PU_STATIC))
	ms = data
	for i := int32(0); i < numsubsectors; i++ {
		subsectors[i].Fnumlines = (*mapsubsector_t)(unsafe.Pointer(ms)).Fnumsegs
		subsectors[i].Ffirstline = (*mapsubsector_t)(unsafe.Pointer(ms)).Ffirstseg
		ms += 4
	}
	W_ReleaseLumpNum(lump)
}

// C documentation
//
//	//
//	// P_LoadSectors
//	//
func P_LoadSectors(lump int32) {
	var data uintptr
	numsectors = int32(uint64(W_LumpLength(uint32(lump))) / uint64(unsafe.Sizeof(mapsector_t{})))
	sectors = make([]sector_t, numsectors)
	data = W_CacheLumpNum(lump, int32(PU_STATIC))
	mapsectors := unsafe.Slice((*mapsector_t)(unsafe.Pointer(data)), numsectors)
	for i := int32(0); i < numsectors; i++ {
		ms := &mapsectors[i]
		ss := &sectors[i]
		ss.Ffloorheight = int32(ms.Ffloorheight) << int32(FRACBITS)
		ss.Fceilingheight = int32(ms.Fceilingheight) << int32(FRACBITS)
		ss.Ffloorpic = int16(R_FlatNumForName(uintptr(unsafe.Pointer(&ms.Ffloorpic))))
		ss.Fceilingpic = int16(R_FlatNumForName(uintptr(unsafe.Pointer(&ms.Fceilingpic))))
		ss.Flightlevel = ms.Flightlevel
		ss.Fspecial = ms.Fspecial
		ss.Ftag = ms.Ftag
		ss.Fthinglist = nil
	}
	W_ReleaseLumpNum(lump)
}

// C documentation
//
//	//
//	// P_LoadNodes
//	//
func P_LoadNodes(lump int32) {
	var data uintptr
	numnodes = int32(uint64(W_LumpLength(uint32(lump))) / uint64(unsafe.Sizeof(mapnode_t{})))
	nodes = make([]node_t, numnodes)
	data = W_CacheLumpNum(lump, int32(PU_STATIC))
	mapnodes := unsafe.Slice((*mapnode_t)(unsafe.Pointer(data)), numnodes)
	for i := 0; i < int(numnodes); i++ {
		no := &nodes[i]
		mn := &mapnodes[i]
		no.Fx = int32(mn.Fx) << int32(FRACBITS)
		no.Fy = int32(mn.Fy) << int32(FRACBITS)
		no.Fdx = int32(mn.Fdx) << int32(FRACBITS)
		no.Fdy = int32(mn.Fdy) << int32(FRACBITS)
		for j := 0; j < 2; j++ {
			no.Fchildren[j] = mn.Fchildren[j]
			for k := 0; k < 4; k++ {
				no.Fbbox[j][k] = int32(mn.Fbbox[j][k]) << int32(FRACBITS)
			}
		}
	}
	W_ReleaseLumpNum(lump)
}

// C documentation
//
//	//
//	// P_LoadThings
//	//
func P_LoadThings(lump int32) {
	var data uintptr
	var numthings int32
	var spawn boolean
	data = W_CacheLumpNum(lump, int32(PU_STATIC))
	numthings = int32(uint64(W_LumpLength(uint32(lump))) / uint64(unsafe.Sizeof(mapthing_t{})))
	mthings := unsafe.Slice((*mapthing_t)(unsafe.Pointer(data)), numthings)
	for i := int32(0); i < numthings; i++ {
		mt := &mthings[i]
		spawn = 1
		// Do not spawn cool, new monsters if !commercial
		if gamemode != commercial {
			switch int32(mt.Ftype1) {
			case 68: // Arachnotron
				fallthrough
			case 64: // Archvile
				fallthrough
			case 88: // Boss Brain
				fallthrough
			case 89: // Boss Shooter
				fallthrough
			case 69: // Hell Knight
				fallthrough
			case 67: // Mancubus
				fallthrough
			case 71: // Pain Elemental
				fallthrough
			case 65: // Former Human Commando
				fallthrough
			case 66: // Revenant
				fallthrough
			case 84: // Wolf SS
				spawn = 0
				break
			}
		}
		if spawn == 0 {
			break
		}
		// Do spawn all other stuff.
		bp := &mapthing_t{
			Fx:       mt.Fx,
			Fy:       mt.Fy,
			Fangle:   mt.Fangle,
			Ftype1:   mt.Ftype1,
			Foptions: mt.Foptions,
		}
		P_SpawnMapThing(bp)
	}
	W_ReleaseLumpNum(lump)
}

// C documentation
//
//	//
//	// P_LoadLineDefs
//	// Also counts secret lines for intermissions.
//	//
func P_LoadLineDefs(lump int32) {
	var data, mld uintptr
	var v1, v2, v21, v3 *vertex_t
	var i int32
	numlines = int32(uint64(W_LumpLength(uint32(lump))) / 14)
	lines = make([]line_t, numlines)
	data = W_CacheLumpNum(lump, int32(PU_STATIC))
	mld = data
	for i = 0; i < numlines; i++ {
		ld := &lines[i]
		ld.Fflags = (*maplinedef_t)(unsafe.Pointer(mld)).Fflags
		ld.Fspecial = (*maplinedef_t)(unsafe.Pointer(mld)).Fspecial
		ld.Ftag = (*maplinedef_t)(unsafe.Pointer(mld)).Ftag
		v21 = &vertexes[(*maplinedef_t)(unsafe.Pointer(mld)).Fv1]
		ld.Fv1 = v21
		v1 = v21
		v3 = &vertexes[(*maplinedef_t)(unsafe.Pointer(mld)).Fv2]
		ld.Fv2 = v3
		v2 = v3
		ld.Fdx = v2.Fx - v1.Fx
		ld.Fdy = v2.Fy - v1.Fy
		if ld.Fdx == 0 {
			ld.Fslopetype = ST_VERTICAL
		} else {
			if ld.Fdy == 0 {
				ld.Fslopetype = ST_HORIZONTAL
			} else {
				if FixedDiv(ld.Fdy, ld.Fdx) > 0 {
					ld.Fslopetype = ST_POSITIVE
				} else {
					ld.Fslopetype = ST_NEGATIVE
				}
			}
		}
		if v1.Fx < v2.Fx {
			ld.Fbbox[BOXLEFT] = v1.Fx
			ld.Fbbox[BOXRIGHT] = v2.Fx
		} else {
			ld.Fbbox[BOXLEFT] = v2.Fx
			ld.Fbbox[BOXRIGHT] = v1.Fx
		}
		if v1.Fy < v2.Fy {
			ld.Fbbox[BOXBOTTOM] = v1.Fy
			ld.Fbbox[BOXTOP] = v2.Fy
		} else {
			ld.Fbbox[BOXBOTTOM] = v2.Fy
			ld.Fbbox[BOXTOP] = v1.Fy
		}
		ld.Fsidenum[0] = *(*int16)(unsafe.Pointer(mld + 10))
		ld.Fsidenum[1] = *(*int16)(unsafe.Pointer(mld + 10 + 1*2))
		if ld.Fsidenum[0] != -1 {
			ld.Ffrontsector = sides[ld.Fsidenum[0]].Fsector
		} else {
			ld.Ffrontsector = nil
		}
		if ld.Fsidenum[1] != -1 {
			ld.Fbacksector = sides[ld.Fsidenum[1]].Fsector
		} else {
			ld.Fbacksector = nil
		}
		mld += 14
	}
	W_ReleaseLumpNum(lump)
}

// C documentation
//
//	//
//	// P_LoadSideDefs
//	//
func P_LoadSideDefs(lump int32) {
	var data, msd uintptr
	numsides = int32(uint64(W_LumpLength(uint32(lump))) / 30)
	sides = make([]side_t, numsides)
	data = W_CacheLumpNum(lump, int32(PU_STATIC))
	msd = data
	for i := int32(0); i < numsides; i++ {
		sd := &sides[i]
		sd.Ftextureoffset = int32((*mapsidedef_t)(unsafe.Pointer(msd)).Ftextureoffset) << int32(FRACBITS)
		sd.Frowoffset = int32((*mapsidedef_t)(unsafe.Pointer(msd)).Frowoffset) << int32(FRACBITS)
		sd.Ftoptexture = int16(R_TextureNumForName(msd + 4))
		sd.Fbottomtexture = int16(R_TextureNumForName(msd + 12))
		sd.Fmidtexture = int16(R_TextureNumForName(msd + 20))
		sd.Fsector = &sectors[(*mapsidedef_t)(unsafe.Pointer(msd)).Fsector]
		msd += 30
	}
	W_ReleaseLumpNum(lump)
}

// C documentation
//
//	//
//	// P_LoadBlockMap
//	//
func P_LoadBlockMap(lump int32) {
	var count, i, lumplen int32
	lumplen = W_LumpLength(uint32(lump))
	count = lumplen / 2
	blockmaplump = Z_Malloc(lumplen, int32(PU_LEVEL), uintptr(0))
	W_ReadLump(uint32(lump), blockmaplump)
	blockmap = blockmaplump + uintptr(4)*2
	// Swap all short integers to native byte ordering.
	i = 0
	for {
		if i >= count {
			break
		}
		*(*int16)(unsafe.Pointer(blockmaplump + uintptr(i)*2)) = *(*int16)(unsafe.Pointer(blockmaplump + uintptr(i)*2))
		goto _1
	_1:
		;
		i++
	}
	// Read the header
	bmaporgx = int32(*(*int16)(unsafe.Pointer(blockmaplump))) << int32(FRACBITS)
	bmaporgy = int32(*(*int16)(unsafe.Pointer(blockmaplump + 1*2))) << int32(FRACBITS)
	bmapwidth = int32(*(*int16)(unsafe.Pointer(blockmaplump + 2*2)))
	bmapheight = int32(*(*int16)(unsafe.Pointer(blockmaplump + 3*2)))
	// Clear out mobj chains
	count = int32(8 * uint64(bmapwidth) * uint64(bmapheight))
	blocklinks = Z_Malloc(count, int32(PU_LEVEL), uintptr(0))
	xmemset(blocklinks, 0, uint64(count))
}

// C documentation
//
//	//
//	// P_GroupLines
//	// Builds sector line lists and subsector sector numbers.
//	// Finds block bounding boxes for sectors.
//	//
func P_GroupLines() {
	var block, i, j, v10, v7, v8, v9 int32
	// look up sector number for each subsector
	for i := int32(0); i < numsubsectors; i++ {
		ss := &subsectors[i]
		seg := &segs[ss.Ffirstline]
		ss.Fsector = seg.Fsidedef.Fsector
	}
	// count number of lines in each sector
	totallines = 0
	for i := int32(0); i < numlines; i++ {
		li := &lines[i]
		totallines++
		li.Ffrontsector.Flinecount++
		if li.Fbacksector != nil && li.Fbacksector != li.Ffrontsector {
			li.Fbacksector.Flinecount++
			totallines++
		}
	}
	// build line tables for each sector
	i = 0
	for {
		if i >= numsectors {
			break
		}
		// Assign the line buffer for this sector
		sector := &sectors[i]
		sector.Flines = make([]*line_t, sector.Flinecount)
		// Reset linecount to zero so in the next stage we can count
		// lines into the list.
		sector.Flinecount = 0
		goto _3
	_3:
		;
		i++
	}
	// Assign lines to sectors
	for i := int32(0); i < numlines; i++ {
		li := &lines[i]
		if li.Ffrontsector != nil {
			li.Ffrontsector.Flines[li.Ffrontsector.Flinecount] = li
			li.Ffrontsector.Flinecount++
		}
		if li.Fbacksector != nil && li.Ffrontsector != li.Fbacksector {
			li.Fbacksector.Flines[li.Fbacksector.Flinecount] = li
			li.Fbacksector.Flinecount++
		}
	}
	// Generate bounding boxes for sectors
	i = 0
	for {
		if i >= numsectors {
			break
		}
		var box box_t
		sector := &sectors[i]
		M_ClearBox(&box)
		j = 0
		for {
			if j >= sector.Flinecount {
				break
			}
			li := sector.Flines[j]
			M_AddToBox(&box, li.Fv1.Fx, li.Fv1.Fy)
			M_AddToBox(&box, li.Fv2.Fx, li.Fv2.Fy)
			goto _6
		_6:
			;
			j++
		}
		// set the degenmobj_t to the middle of the bounding box
		sector.Fsoundorg.Fx = (box[BOXRIGHT] + box[BOXLEFT]) / 2
		sector.Fsoundorg.Fy = (box[BOXTOP] + box[BOXBOTTOM]) / 2
		// adjust bounding box to map blocks
		block = (box[int32(BOXTOP)] - bmaporgy + 32*(1<<FRACBITS)) >> (FRACBITS + 7)
		if block >= bmapheight {
			v7 = bmapheight - 1
		} else {
			v7 = block
		}
		block = v7
		sector.Fblockbox[BOXTOP] = block
		block = (box[int32(BOXBOTTOM)] - bmaporgy - 32*(1<<FRACBITS)) >> (FRACBITS + 7)
		if block < 0 {
			v8 = 0
		} else {
			v8 = block
		}
		block = v8
		sector.Fblockbox[BOXBOTTOM] = block
		block = (box[int32(BOXRIGHT)] - bmaporgx + 32*(1<<FRACBITS)) >> (FRACBITS + 7)
		if block >= bmapwidth {
			v9 = bmapwidth - 1
		} else {
			v9 = block
		}
		block = v9
		sector.Fblockbox[BOXRIGHT] = block
		block = (box[int32(BOXLEFT)] - bmaporgx - 32*(1<<FRACBITS)) >> (FRACBITS + 7)
		if block < 0 {
			v10 = 0
		} else {
			v10 = block
		}
		block = v10
		sector.Fblockbox[BOXLEFT] = block
		goto _5
	_5:
		;
		i++
	}
}

// Pad the REJECT lump with extra data when the lump is too small,
// to simulate a REJECT buffer overflow in Vanilla Doom.

func PadRejectArray(array uintptr, len1 uint32) {
	var byte_num, i uint32
	var padvalue uint8
	var dest uintptr
	var rejectpad [4]uint32
	// Values to pad the REJECT array with:
	rejectpad = [4]uint32{
		0: uint32((totallines*int32(4)+int32(3)) & ^3 + 24),
		2: 50,
		3: 0x1d4a11,
	}
	// Copy values from rejectpad into the destination array.
	dest = array
	i = 0
	for {
		if !(i < len1 && uint64(i) < 16) {
			break
		}
		byte_num = i % 4
		*(*uint8)(unsafe.Pointer(dest)) = uint8(rejectpad[i/4] >> (byte_num * 8) & 0xff)
		dest++
		goto _1
	_1:
		;
		i++
	}
	// We only have a limited pad size.  Print a warning if the
	// REJECT lump is too small.
	if uint64(len1) > 16 {
		fprintf_ccgo(os.Stderr, 25149, len1, 16)
		// Pad remaining space with 0 (or 0xff, if specified on command line).
		if M_CheckParm(__ccgo_ts_str(25206)) != 0 {
			padvalue = 0xff
		} else {
			padvalue = 0x00
		}
		xmemset(array+uintptr(16), padvalue, uint64(len1)-16)
	}
}

func P_LoadReject(lumpnum int32) {
	var lumplen, minlength int32
	// Calculate the size that the REJECT lump *should* be.
	minlength = (numsectors*numsectors + 7) / 8
	// If the lump meets the minimum length, it can be loaded directly.
	// Otherwise, we need to allocate a buffer of the correct size
	// and pad it with appropriate data.
	lumplen = W_LumpLength(uint32(lumpnum))
	if lumplen >= minlength {
		rejectmatrix = W_CacheLumpNum(lumpnum, int32(PU_LEVEL))
	} else {
		rejectmatrix = Z_Malloc(minlength, int32(PU_LEVEL), uintptr(unsafe.Pointer(&rejectmatrix)))
		W_ReadLump(uint32(lumpnum), rejectmatrix)
		PadRejectArray(rejectmatrix+uintptr(lumplen), uint32(minlength-lumplen))
	}
}

// C documentation
//
//	//
//	// P_SetupLevel
//	//
func P_SetupLevel(episode int32, map1 int32, playermask int32, skill skill_t) {
	bp := alloc(32)
	var i, lumpnum, v1, v2, v3, v5, v6, v8 int32
	v3 = 0
	wminfo.Fmaxfrags = v3
	v2 = v3
	totalsecret = v2
	v1 = v2
	totalitems = v1
	totalkills = v1
	wminfo.Fpartime = 180
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		v6 = 0
		players[i].Fitemcount = v6
		v5 = v6
		players[i].Fsecretcount = v5
		players[i].Fkillcount = v5
		goto _4
	_4:
		;
		i++
	}
	// Initial height of PointOfView
	// will be set by player think.
	players[consoleplayer].Fviewz = 1
	// Make sure all sounds are stopped before Z_FreeTags.
	S_Start()
	Z_FreeTags(int32(PU_LEVEL), int32(PU_PURGELEVEL)-1)
	// UNUSED W_Profile ();
	P_InitThinkers()
	// find map name
	if gamemode == commercial {
		if map1 < 10 {
			snprintf_ccgo(bp, 9, 25226, map1)
		} else {
			snprintf_ccgo(bp, 9, 25233, map1)
		}
	} else {
		(*(*[9]int8)(unsafe.Pointer(bp)))[0] = int8('E')
		(*(*[9]int8)(unsafe.Pointer(bp)))[int32(1)] = int8(int32('0') + episode)
		(*(*[9]int8)(unsafe.Pointer(bp)))[int32(2)] = int8('M')
		(*(*[9]int8)(unsafe.Pointer(bp)))[int32(3)] = int8(int32('0') + map1)
		(*(*[9]int8)(unsafe.Pointer(bp)))[int32(4)] = 0
	}
	lumpnum = W_GetNumForName(bp)
	leveltime = 0
	// note: most of this ordering is important
	P_LoadBlockMap(lumpnum + ML_BLOCKMAP)
	P_LoadVertexes(lumpnum + ML_VERTEXES)
	P_LoadSectors(lumpnum + ML_SECTORS)
	P_LoadSideDefs(lumpnum + ML_SIDEDEFS)
	P_LoadLineDefs(lumpnum + ML_LINEDEFS)
	P_LoadSubsectors(lumpnum + ML_SSECTORS)
	P_LoadNodes(lumpnum + ML_NODES)
	P_LoadSegs(lumpnum + ML_SEGS)
	P_GroupLines()
	P_LoadReject(lumpnum + ML_REJECT)
	bodyqueslot = 0
	deathmatch_pos = 0
	P_LoadThings(lumpnum + ML_THINGS)
	// if deathmatch, randomly spawn the active players
	if deathmatch != 0 {
		i = 0
		for {
			if i >= int32(MAXPLAYERS) {
				break
			}
			if playeringame[i] != 0 {
				players[i].Fmo = nil
				G_DeathMatchSpawnPlayer(i)
			}
			goto _7
		_7:
			;
			i++
		}
	}
	// clear special respawning que
	v8 = 0
	iquetail = v8
	iquehead = v8
	// set up world state
	P_SpawnSpecials()
	// build subsector connect matrix
	//	UNUSED P_ConnectSubsectors ();
	// preload graphics
	if precache != 0 {
		R_PrecacheLevel()
	}
	//printf ("free memory: 0x%x\n", Z_FreeMemory());
}

// C documentation
//
//	//
//	// P_Init
//	//
func P_Init() {
	P_InitSwitchList()
	P_InitPicAnims()
	R_InitSprites(sprnames)
}

const NF_SUBSECTOR1 = 32768

// C documentation
//
//	//
//	// P_DivlineSide
//	// Returns side 0 (front), 1 (back), or 2 (on).
//	//
func P_DivlineSide(x fixed_t, y fixed_t, node uintptr) (r int32) {
	var dx, dy, left, right fixed_t
	if (*divline_t)(unsafe.Pointer(node)).Fdx == 0 {
		if x == (*divline_t)(unsafe.Pointer(node)).Fx {
			return 2
		}
		if x <= (*divline_t)(unsafe.Pointer(node)).Fx {
			return boolint32((*divline_t)(unsafe.Pointer(node)).Fdy > 0)
		}
		return boolint32((*divline_t)(unsafe.Pointer(node)).Fdy < 0)
	}
	if (*divline_t)(unsafe.Pointer(node)).Fdy == 0 {
		if x == (*divline_t)(unsafe.Pointer(node)).Fy {
			return 2
		}
		if y <= (*divline_t)(unsafe.Pointer(node)).Fy {
			return boolint32((*divline_t)(unsafe.Pointer(node)).Fdx < 0)
		}
		return boolint32((*divline_t)(unsafe.Pointer(node)).Fdx > 0)
	}
	dx = x - (*divline_t)(unsafe.Pointer(node)).Fx
	dy = y - (*divline_t)(unsafe.Pointer(node)).Fy
	left = (*divline_t)(unsafe.Pointer(node)).Fdy >> FRACBITS * (dx >> FRACBITS)
	right = dy >> FRACBITS * ((*divline_t)(unsafe.Pointer(node)).Fdx >> FRACBITS)
	if right < left {
		return 0
	} // front side
	if left == right {
		return 2
	}
	return 1 // back side
}

// C documentation
//
//	//
//	// P_InterceptVector2
//	// Returns the fractional intercept point
//	// along the first divline.
//	// This is only called by the addthings and addlines traversers.
//	//
func P_InterceptVector2(v2 uintptr, v1 uintptr) (r fixed_t) {
	var den, frac, num fixed_t
	den = FixedMul((*divline_t)(unsafe.Pointer(v1)).Fdy>>int32(8), (*divline_t)(unsafe.Pointer(v2)).Fdx) - FixedMul((*divline_t)(unsafe.Pointer(v1)).Fdx>>int32(8), (*divline_t)(unsafe.Pointer(v2)).Fdy)
	if den == 0 {
		return 0
	}
	//	I_Error ("P_InterceptVector: parallel");
	num = FixedMul(((*divline_t)(unsafe.Pointer(v1)).Fx-(*divline_t)(unsafe.Pointer(v2)).Fx)>>int32(8), (*divline_t)(unsafe.Pointer(v1)).Fdy) + FixedMul(((*divline_t)(unsafe.Pointer(v2)).Fy-(*divline_t)(unsafe.Pointer(v1)).Fy)>>int32(8), (*divline_t)(unsafe.Pointer(v1)).Fdx)
	frac = FixedDiv(num, den)
	return frac
}

// C documentation
//
//	//
//	// P_CrossSubsector
//	// Returns true
//	//  if strace crosses the given subsector successfully.
//	//
func P_CrossSubsector(num int32) (r boolean) {
	bp := alloc(48)
	var v1, v2 *vertex_t
	var line *line_t
	var front, back *sector_t
	var count, s1, s2 int32
	var frac, openbottom, opentop, slope fixed_t
	if num >= numsubsectors {
		I_Error(25239, num, numsubsectors)
	}
	sub := &subsectors[num]
	// check lines
	count = int32(sub.Fnumlines)
	for i := sub.Ffirstline; ; i++ {
		if count == 0 {
			break
		}
		seg := &segs[sub.Ffirstline]
		line = seg.Flinedef
		// allready checked other side?
		if line.Fvalidcount == validcount {
			goto _1
		}
		line.Fvalidcount = validcount
		v1 = line.Fv1
		v2 = line.Fv2
		s1 = P_DivlineSide(v1.Fx, v1.Fy, uintptr(unsafe.Pointer(&strace)))
		s2 = P_DivlineSide(v2.Fx, v2.Fy, uintptr(unsafe.Pointer(&strace)))
		// line isn't crossed?
		if s1 == s2 {
			goto _1
		}
		(*(*divline_t)(unsafe.Pointer(bp))).Fx = v1.Fx
		(*(*divline_t)(unsafe.Pointer(bp))).Fy = v1.Fy
		(*(*divline_t)(unsafe.Pointer(bp))).Fdx = v2.Fx - v1.Fx
		(*(*divline_t)(unsafe.Pointer(bp))).Fdy = v2.Fy - v1.Fy
		s1 = P_DivlineSide(strace.Fx, strace.Fy, bp)
		s2 = P_DivlineSide(t2x, t2y, bp)
		// line isn't crossed?
		if s1 == s2 {
			goto _1
		}
		// Backsector may be NULL if this is an "impassible
		// glass" hack line.
		if line.Fbacksector == nil {
			return 0
		}
		// stop because it is not two sided anyway
		// might do this after updating validcount?
		if int32(line.Fflags)&ML_TWOSIDED == 0 {
			return 0
		}
		// crosses a two sided line
		front = seg.Ffrontsector
		back = seg.Fbacksector
		// no wall to block sight with?
		if front.Ffloorheight == back.Ffloorheight && front.Fceilingheight == back.Fceilingheight {
			goto _1
		}
		// possible occluder
		// because of ceiling height differences
		if front.Fceilingheight < back.Fceilingheight {
			opentop = front.Fceilingheight
		} else {
			opentop = back.Fceilingheight
		}
		// because of ceiling height differences
		if front.Ffloorheight > back.Ffloorheight {
			openbottom = front.Ffloorheight
		} else {
			openbottom = back.Ffloorheight
		}
		// quick test for totally closed doors
		if openbottom >= opentop {
			return 0
		} // stop
		frac = P_InterceptVector2(uintptr(unsafe.Pointer(&strace)), bp)
		if front.Ffloorheight != back.Ffloorheight {
			slope = FixedDiv(openbottom-sightzstart, frac)
			if slope > bottomslope {
				bottomslope = slope
			}
		}
		if front.Fceilingheight != back.Fceilingheight {
			slope = FixedDiv(opentop-sightzstart, frac)
			if slope < topslope {
				topslope = slope
			}
		}
		if topslope <= bottomslope {
			return 0
		} // stop
		goto _1
	_1:
		;
		count--
	}
	// passed the subsector ok
	return 1
}

// C documentation
//
//	//
//	// P_CrossBSPNode
//	// Returns true
//	//  if strace crosses the given node successfully.
//	//
func P_CrossBSPNode(bspnum int32) (r boolean) {
	var side int32
	if bspnum&int32(NF_SUBSECTOR1) != 0 {
		if bspnum == -1 {
			return P_CrossSubsector(0)
		} else {
			return P_CrossSubsector(bspnum & ^NF_SUBSECTOR1)
		}
	}
	bsp := uintptr(unsafe.Pointer(&nodes[bspnum]))
	// decide which side the start point is on
	side = P_DivlineSide(strace.Fx, strace.Fy, bsp)
	if side == 2 {
		side = 0
	} // an "on" should cross both sides
	// cross the starting side
	if P_CrossBSPNode(int32(*(*uint16)(unsafe.Pointer(bsp + 48 + uintptr(side)*2)))) == 0 {
		return 0
	}
	// the partition plane is crossed here
	if side == P_DivlineSide(t2x, t2y, bsp) {
		// the line doesn't touch the other side
		return 1
	}
	// cross the ending side
	return P_CrossBSPNode(int32(*(*uint16)(unsafe.Pointer(bsp + 48 + uintptr(side^int32(1))*2))))
}

// C documentation
//
//	//
//	// P_CheckSight
//	// Returns true
//	//  if a straight line between t1 and t2 is unobstructed.
//	// Uses REJECT.
//	//
func P_CheckSight(t1 *mobj_t, t2 *mobj_t) (r boolean) {
	var bitnum, bytenum, pnum, s1, s2 int32
	// First check for trivial rejection.
	// Determine subsector entries in REJECT table.
	s1 = sectorIndex(t1.Fsubsector.Fsector)
	s2 = sectorIndex(t2.Fsubsector.Fsector)
	pnum = s1*numsectors + s2
	bytenum = pnum >> 3
	bitnum = 1 << (pnum & 7)
	// Check in REJECT table.
	if int32(*(*uint8)(unsafe.Pointer(rejectmatrix + uintptr(bytenum))))&bitnum != 0 {
		sightcounts[0]++
		// can't possibly be connected
		return 0
	}
	// An unobstructed LOS is possible.
	// Now look from eyes of t1 to any part of t2.
	sightcounts[int32(1)]++
	validcount++
	sightzstart = t1.Fz + t1.Fheight - t1.Fheight>>2
	topslope = t2.Fz + t2.Fheight - sightzstart
	bottomslope = t2.Fz - sightzstart
	strace.Fx = t1.Fx
	strace.Fy = t1.Fy
	t2x = t2.Fx
	t2y = t2.Fy
	strace.Fdx = t2.Fx - t1.Fx
	strace.Fdy = t2.Fy - t1.Fy
	// the head node is the last node output
	return P_CrossBSPNode(numnodes - 1)
}

const DONUT_FLOORHEIGHT_DEFAULT = 0
const DONUT_FLOORPIC_DEFAULT = 22
const INT_MAX13 = 2147483647
const MAXLINEANIMS = 64
const MAX_ADJOINING_SECTORS = 20

// State.
//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Refresh/render internal state variables (global).
//

// Data.
//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Created by the sound utility written by Dave Taylor.
//	Kept as a sample, DOOM2  sounds. Frozen.
//

// C documentation
//
//	//
//	// Animating textures and planes
//	// There is another anim_t used in wi_stuff, unrelated.
//	//
type anim_t struct {
	Fistexture boolean
	Fpicnum    int32
	Fbasepic   int32
	Fnumpics   int32
	Fspeed     int32
}

// C documentation
//
//	//
//	//      source animation definition
//	//
type animdef_t struct {
	Fistexture int32
	Fendname   [9]int8
	Fstartname [9]int8
	Fspeed     int32
}

func init() {
	animdefs = [23]animdef_t{
		0: {
			Fendname:   [9]int8{'N', 'U', 'K', 'A', 'G', 'E', '3'},
			Fstartname: [9]int8{'N', 'U', 'K', 'A', 'G', 'E', '1'},
			Fspeed:     8,
		},
		1: {
			Fendname:   [9]int8{'F', 'W', 'A', 'T', 'E', 'R', '4'},
			Fstartname: [9]int8{'F', 'W', 'A', 'T', 'E', 'R', '1'},
			Fspeed:     8,
		},
		2: {
			Fendname:   [9]int8{'S', 'W', 'A', 'T', 'E', 'R', '4'},
			Fstartname: [9]int8{'S', 'W', 'A', 'T', 'E', 'R', '1'},
			Fspeed:     8,
		},
		3: {
			Fendname:   [9]int8{'L', 'A', 'V', 'A', '4'},
			Fstartname: [9]int8{'L', 'A', 'V', 'A', '1'},
			Fspeed:     8,
		},
		4: {
			Fendname:   [9]int8{'B', 'L', 'O', 'O', 'D', '3'},
			Fstartname: [9]int8{'B', 'L', 'O', 'O', 'D', '1'},
			Fspeed:     8,
		},
		5: {
			Fendname:   [9]int8{'R', 'R', 'O', 'C', 'K', '0', '8'},
			Fstartname: [9]int8{'R', 'R', 'O', 'C', 'K', '0', '5'},
			Fspeed:     8,
		},
		6: {
			Fendname:   [9]int8{'S', 'L', 'I', 'M', 'E', '0', '4'},
			Fstartname: [9]int8{'S', 'L', 'I', 'M', 'E', '0', '1'},
			Fspeed:     8,
		},
		7: {
			Fendname:   [9]int8{'S', 'L', 'I', 'M', 'E', '0', '8'},
			Fstartname: [9]int8{'S', 'L', 'I', 'M', 'E', '0', '5'},
			Fspeed:     8,
		},
		8: {
			Fendname:   [9]int8{'S', 'L', 'I', 'M', 'E', '1', '2'},
			Fstartname: [9]int8{'S', 'L', 'I', 'M', 'E', '0', '9'},
			Fspeed:     8,
		},
		9: {
			Fistexture: 1,
			Fendname:   [9]int8{'B', 'L', 'O', 'D', 'G', 'R', '4'},
			Fstartname: [9]int8{'B', 'L', 'O', 'D', 'G', 'R', '1'},
			Fspeed:     8,
		},
		10: {
			Fistexture: 1,
			Fendname:   [9]int8{'S', 'L', 'A', 'D', 'R', 'I', 'P', '3'},
			Fstartname: [9]int8{'S', 'L', 'A', 'D', 'R', 'I', 'P', '1'},
			Fspeed:     8,
		},
		11: {
			Fistexture: 1,
			Fendname:   [9]int8{'B', 'L', 'O', 'D', 'R', 'I', 'P', '4'},
			Fstartname: [9]int8{'B', 'L', 'O', 'D', 'R', 'I', 'P', '1'},
			Fspeed:     8,
		},
		12: {
			Fistexture: 1,
			Fendname:   [9]int8{'F', 'I', 'R', 'E', 'W', 'A', 'L', 'L'},
			Fstartname: [9]int8{'F', 'I', 'R', 'E', 'W', 'A', 'L', 'A'},
			Fspeed:     8,
		},
		13: {
			Fistexture: 1,
			Fendname:   [9]int8{'G', 'S', 'T', 'F', 'O', 'N', 'T', '3'},
			Fstartname: [9]int8{'G', 'S', 'T', 'F', 'O', 'N', 'T', '1'},
			Fspeed:     8,
		},
		14: {
			Fistexture: 1,
			Fendname:   [9]int8{'F', 'I', 'R', 'E', 'L', 'A', 'V', 'A'},
			Fstartname: [9]int8{'F', 'I', 'R', 'E', 'L', 'A', 'V', '3'},
			Fspeed:     8,
		},
		15: {
			Fistexture: 1,
			Fendname:   [9]int8{'F', 'I', 'R', 'E', 'M', 'A', 'G', '3'},
			Fstartname: [9]int8{'F', 'I', 'R', 'E', 'M', 'A', 'G', '1'},
			Fspeed:     8,
		},
		16: {
			Fistexture: 1,
			Fendname:   [9]int8{'F', 'I', 'R', 'E', 'B', 'L', 'U', '2'},
			Fstartname: [9]int8{'F', 'I', 'R', 'E', 'B', 'L', 'U', '1'},
			Fspeed:     8,
		},
		17: {
			Fistexture: 1,
			Fendname:   [9]int8{'R', 'O', 'C', 'K', 'R', 'E', 'D', '3'},
			Fstartname: [9]int8{'R', 'O', 'C', 'K', 'R', 'E', 'D', '1'},
			Fspeed:     8,
		},
		18: {
			Fistexture: 1,
			Fendname:   [9]int8{'B', 'F', 'A', 'L', 'L', '4'},
			Fstartname: [9]int8{'B', 'F', 'A', 'L', 'L', '1'},
			Fspeed:     8,
		},
		19: {
			Fistexture: 1,
			Fendname:   [9]int8{'S', 'F', 'A', 'L', 'L', '4'},
			Fstartname: [9]int8{'S', 'F', 'A', 'L', 'L', '1'},
			Fspeed:     8,
		},
		20: {
			Fistexture: 1,
			Fendname:   [9]int8{'W', 'F', 'A', 'L', 'L', '4'},
			Fstartname: [9]int8{'W', 'F', 'A', 'L', 'L', '1'},
			Fspeed:     8,
		},
		21: {
			Fistexture: 1,
			Fendname:   [9]int8{'D', 'B', 'R', 'A', 'I', 'N', '4'},
			Fstartname: [9]int8{'D', 'B', 'R', 'A', 'I', 'N', '1'},
			Fspeed:     8,
		},
		22: {
			Fistexture: -1,
			Fendname:   [9]int8{},
			Fstartname: [9]int8{},
		},
	}
}

func P_InitPicAnims() {
	var endname, startname uintptr
	//	Init animation
	lastanim = &anims[0]
	animPos := 0
	for i := 0; ; i++ {
		if animdefs[i].Fistexture == -1 {
			break
		}
		startname = uintptr(unsafe.Pointer(&animdefs)) + uintptr(i)*28 + 13
		endname = uintptr(unsafe.Pointer(&animdefs)) + uintptr(i)*28 + 4
		if animdefs[i].Fistexture != 0 {
			// different episode ?
			if R_CheckTextureNumForName(startname) == -1 {
				continue
			}
			lastanim.Fpicnum = R_TextureNumForName(endname)
			lastanim.Fbasepic = R_TextureNumForName(startname)
		} else {
			if W_CheckNumForName(startname) == -1 {
				continue
			}
			lastanim.Fpicnum = R_FlatNumForName(endname)
			lastanim.Fbasepic = R_FlatNumForName(startname)
		}
		lastanim.Fistexture = uint32(animdefs[i].Fistexture)
		lastanim.Fnumpics = lastanim.Fpicnum - lastanim.Fbasepic + 1
		if lastanim.Fnumpics < 2 {
			I_Error(25279, startname, endname)
		}
		(*anim_t)(unsafe.Pointer(lastanim)).Fspeed = animdefs[i].Fspeed
		animPos++
		lastanim = &anims[animPos]
	}
}

//
// UTILITIES
//

// C documentation
//
//	//
//	// getSide()
//	// Will return a side_t*
//	//  given the number of the current sector,
//	//  the line number, and the side (0/1) that you want.
//	//
func getSide(currentSector int32, line int32, side int32) *side_t {
	sec := &sectors[currentSector]
	linePtr := sec.Flines[line]
	return &sides[linePtr.Fsidenum[side]]
}

// C documentation
//
//	//
//	// getSector()
//	// Will return a sector_t*
//	//  given the number of the current sector,
//	//  the line number and the side (0/1) that you want.
//	//
func getSector(currentSector int32, line int32, side int32) (r *sector_t) {
	sidePtr := getSide(currentSector, line, side)
	return sidePtr.Fsector
}

// C documentation
//
//	//
//	// twoSided()
//	// Given the sector number and the line number,
//	//  it will tell you whether the line is two-sided or not.
//	//
func twoSided(sector int32, line int32) (r int32) {
	sec := &sectors[sector]
	return int32(sec.Flines[line].Fflags & ML_TWOSIDED)
}

// C documentation
//
//	//
//	// getNextSector()
//	// Return sector_t * of sector next to current.
//	// NULL if not two-sided line
//	//
func getNextSector(line *line_t, sec *sector_t) (r *sector_t) {
	if int32(line.Fflags)&ML_TWOSIDED == 0 {
		return nil
	}
	if line.Ffrontsector == sec {
		return line.Fbacksector
	}
	return line.Ffrontsector
}

// C documentation
//
//	//
//	// P_FindLowestFloorSurrounding()
//	// FIND LOWEST FLOOR HEIGHT IN SURROUNDING SECTORS
//	//
func P_FindLowestFloorSurrounding(sec *sector_t) (r fixed_t) {
	var check *line_t
	var other *sector_t
	var floor fixed_t
	var i int32
	floor = sec.Ffloorheight
	i = 0
	for {
		if i >= sec.Flinecount {
			break
		}
		check = sec.Flines[i]
		other = getNextSector(check, sec)
		if other == nil {
			goto _1
		}
		if other.Ffloorheight < floor {
			floor = other.Ffloorheight
		}
		goto _1
	_1:
		;
		i++
	}
	return floor
}

// C documentation
//
//	//
//	// P_FindHighestFloorSurrounding()
//	// FIND HIGHEST FLOOR HEIGHT IN SURROUNDING SECTORS
//	//
func P_FindHighestFloorSurrounding(sec *sector_t) (r fixed_t) {
	var check *line_t
	var other *sector_t
	var floor fixed_t
	var i int32
	floor = -500 * (1 << FRACBITS)
	i = 0
	for {
		if i >= sec.Flinecount {
			break
		}
		check = sec.Flines[i]
		other = getNextSector(check, sec)
		if other == nil {
			goto _1
		}
		if other.Ffloorheight > floor {
			floor = other.Ffloorheight
		}
		goto _1
	_1:
		;
		i++
	}
	return floor
}

//
// P_FindNextHighestFloor
// FIND NEXT HIGHEST FLOOR IN SURROUNDING SECTORS
// Note: this should be doable w/o a fixed array.

// Thanks to entryway for the Vanilla overflow emulation.

// 20 adjoining sectors max!

func P_FindNextHighestFloor(sec *sector_t, currentheight int32) (r fixed_t) {
	var check *line_t
	var other *sector_t
	var h, i, min, v2 int32
	var height fixed_t
	var heightlist [22]fixed_t
	height = currentheight
	i = 0
	h = 0
	for {
		if i >= sec.Flinecount {
			break
		}
		check = sec.Flines[i]
		other = getNextSector(check, sec)
		if other == nil {
			goto _1
		}
		if other.Ffloorheight > height {
			// Emulation of memory (stack) overflow
			if h == MAX_ADJOINING_SECTORS+1 {
				height = other.Ffloorheight
			} else {
				if h == MAX_ADJOINING_SECTORS+2 {
					// Fatal overflow: game crashes at 22 textures
					I_Error(25319, 0)
				}
			}
			v2 = h
			h++
			heightlist[v2] = other.Ffloorheight
		}
		goto _1
	_1:
		;
		i++
	}
	// Find lowest height in list
	if h == 0 {
		return currentheight
	}
	min = heightlist[0]
	// Range checking?
	i = 1
	for {
		if i >= h {
			break
		}
		if heightlist[i] < min {
			min = heightlist[i]
		}
		goto _3
	_3:
		;
		i++
	}
	return min
}

// C documentation
//
//	//
//	// FIND LOWEST CEILING IN THE SURROUNDING SECTORS
//	//
func P_FindLowestCeilingSurrounding(sec *sector_t) (r fixed_t) {
	var check *line_t
	var other *sector_t
	var height fixed_t
	var i int32
	height = int32(INT_MAX13)
	i = 0
	for {
		if i >= sec.Flinecount {
			break
		}
		check = sec.Flines[i]
		other = getNextSector(check, sec)
		if other == nil {
			goto _1
		}
		if other.Fceilingheight < height {
			height = other.Fceilingheight
		}
		goto _1
	_1:
		;
		i++
	}
	return height
}

// C documentation
//
//	//
//	// FIND HIGHEST CEILING IN THE SURROUNDING SECTORS
//	//
func P_FindHighestCeilingSurrounding(sec *sector_t) (r fixed_t) {
	var check *line_t
	var other *sector_t
	var height fixed_t
	var i int32
	height = 0
	i = 0
	for {
		if i >= sec.Flinecount {
			break
		}
		check = sec.Flines[i]
		other = getNextSector(check, sec)
		if other == nil {
			goto _1
		}
		if other.Fceilingheight > height {
			height = other.Fceilingheight
		}
		goto _1
	_1:
		;
		i++
	}
	return height
}

// C documentation
//
//	//
//	// RETURN NEXT SECTOR # THAT LINE TAG REFERS TO
//	//
func P_FindSectorFromLineTag(line *line_t, start int32) (r int32) {
	var i int32
	i = start + 1
	for {
		if i >= numsectors {
			break
		}
		if sectors[i].Ftag == line.Ftag {
			return i
		}
		goto _1
	_1:
		;
		i++
	}
	return -1
}

// C documentation
//
//	//
//	// Find minimum light from an adjacent sector
//	//
func P_FindMinSurroundingLight(sector *sector_t, max int32) (r int32) {
	var line *line_t
	var check *sector_t
	var i, min int32
	min = max
	i = 0
	for {
		if i >= sector.Flinecount {
			break
		}
		line = sector.Flines[i]
		check = getNextSector(line, sector)
		if check == nil {
			goto _1
		}
		if int32(check.Flightlevel) < min {
			min = int32(check.Flightlevel)
		}
		goto _1
	_1:
		;
		i++
	}
	return min
}

//
// EVENTS
// Events are operations triggered by using, crossing,
// or shooting special lines, or by timed thinkers.
//

// C documentation
//
//	//
//	// P_CrossSpecialLine - TRIGGER
//	// Called every time a thing origin is about
//	//  to cross a line with a non 0 special.
//	//
func P_CrossSpecialLine(linenum int32, side int32, thing *mobj_t) {
	var ok int32
	line := &lines[linenum]
	//	Triggers that other things can activate
	if thing.Fplayer == nil {
		// Things that should NOT trigger specials...
		switch thing.Ftype1 {
		case int32(MT_ROCKET):
			fallthrough
		case int32(MT_PLASMA):
			fallthrough
		case int32(MT_BFG):
			fallthrough
		case int32(MT_TROOPSHOT):
			fallthrough
		case int32(MT_HEADSHOT):
			fallthrough
		case int32(MT_BRUISERSHOT):
			return
		default:
			break
		}
		ok = 0
		switch int32(line.Fspecial) {
		case 39: // TELEPORT TRIGGER
			fallthrough
		case 97: // TELEPORT RETRIGGER
			fallthrough
		case 125: // TELEPORT MONSTERONLY TRIGGER
			fallthrough
		case 126: // TELEPORT MONSTERONLY RETRIGGER
			fallthrough
		case 4: // RAISE DOOR
			fallthrough
		case 10: // PLAT DOWN-WAIT-UP-STAY TRIGGER
			fallthrough
		case 88: // PLAT DOWN-WAIT-UP-STAY RETRIGGER
			ok = 1
			break
		}
		if ok == 0 {
			return
		}
	}
	// Note: could use some const's here.
	switch int32(line.Fspecial) {
	// TRIGGERS.
	// All from here to RETRIGGERS.
	case 2:
		// Open Door
		EV_DoDoor(line, int32(vld_open))
		line.Fspecial = 0
	case 3:
		// Close Door
		EV_DoDoor(line, int32(vld_close))
		line.Fspecial = 0
	case 4:
		// Raise Door
		EV_DoDoor(line, int32(vld_normal))
		line.Fspecial = 0
	case 5:
		// Raise Floor
		EV_DoFloor(line, int32(raiseFloor))
		line.Fspecial = 0
	case 6:
		// Fast Ceiling Crush & Raise
		EV_DoCeiling(line, int32(fastCrushAndRaise))
		line.Fspecial = 0
	case 8:
		// Build Stairs
		EV_BuildStairs(line, int32(build8))
		line.Fspecial = 0
	case 10:
		// PlatDownWaitUp
		EV_DoPlat(line, int32(downWaitUpStay), 0)
		line.Fspecial = 0
	case 12:
		// Light Turn On - brightest near
		EV_LightTurnOn(line, 0)
		line.Fspecial = 0
	case 13:
		// Light Turn On 255
		EV_LightTurnOn(line, 255)
		line.Fspecial = 0
	case 16:
		// Close Door 30
		EV_DoDoor(line, int32(vld_close30ThenOpen))
		line.Fspecial = 0
	case 17:
		// Start Light Strobing
		EV_StartLightStrobing(line)
		line.Fspecial = 0
	case 19:
		// Lower Floor
		EV_DoFloor(line, int32(lowerFloor))
		line.Fspecial = 0
	case 22:
		// Raise floor to nearest height and change texture
		EV_DoPlat(line, int32(raiseToNearestAndChange), 0)
		line.Fspecial = 0
	case 25:
		// Ceiling Crush and Raise
		EV_DoCeiling(line, int32(crushAndRaise))
		line.Fspecial = 0
	case 30:
		// Raise floor to shortest texture height
		//  on either side of lines.
		EV_DoFloor(line, int32(raiseToTexture))
		line.Fspecial = 0
	case 35:
		// Lights Very Dark
		EV_LightTurnOn(line, 35)
		line.Fspecial = 0
	case 36:
		// Lower Floor (TURBO)
		EV_DoFloor(line, int32(turboLower))
		line.Fspecial = 0
	case 37:
		// LowerAndChange
		EV_DoFloor(line, int32(lowerAndChange))
		line.Fspecial = 0
	case 38:
		// Lower Floor To Lowest
		EV_DoFloor(line, int32(lowerFloorToLowest))
		line.Fspecial = 0
	case 39:
		// TELEPORT!
		EV_Teleport(line, side, thing)
		line.Fspecial = 0
	case 40:
		// RaiseCeilingLowerFloor
		EV_DoCeiling(line, int32(raiseToHighest))
		EV_DoFloor(line, int32(lowerFloorToLowest))
		line.Fspecial = 0
	case 44:
		// Ceiling Crush
		EV_DoCeiling(line, int32(lowerAndCrush))
		line.Fspecial = 0
	case 52:
		// EXIT!
		G_ExitLevel()
	case 53:
		// Perpetual Platform Raise
		EV_DoPlat(line, int32(perpetualRaise), 0)
		line.Fspecial = 0
	case 54:
		// Platform Stop
		EV_StopPlat(line)
		line.Fspecial = 0
	case 56:
		// Raise Floor Crush
		EV_DoFloor(line, int32(raiseFloorCrush))
		line.Fspecial = 0
	case 57:
		// Ceiling Crush Stop
		EV_CeilingCrushStop(line)
		line.Fspecial = 0
	case 58:
		// Raise Floor 24
		EV_DoFloor(line, int32(raiseFloor24))
		line.Fspecial = 0
	case 59:
		// Raise Floor 24 And Change
		EV_DoFloor(line, int32(raiseFloor24AndChange))
		line.Fspecial = 0
	case 104:
		// Turn lights off in sector(tag)
		EV_TurnTagLightsOff(line)
		line.Fspecial = 0
	case 108:
		// Blazing Door Raise (faster than TURBO!)
		EV_DoDoor(line, int32(vld_blazeRaise))
		line.Fspecial = 0
	case 109:
		// Blazing Door Open (faster than TURBO!)
		EV_DoDoor(line, int32(vld_blazeOpen))
		line.Fspecial = 0
	case 100:
		// Build Stairs Turbo 16
		EV_BuildStairs(line, int32(turbo16))
		line.Fspecial = 0
	case 110:
		// Blazing Door Close (faster than TURBO!)
		EV_DoDoor(line, int32(vld_blazeClose))
		line.Fspecial = 0
	case 119:
		// Raise floor to nearest surr. floor
		EV_DoFloor(line, int32(raiseFloorToNearest))
		line.Fspecial = 0
	case 121:
		// Blazing PlatDownWaitUpStay
		EV_DoPlat(line, int32(blazeDWUS), 0)
		line.Fspecial = 0
	case 124:
		// Secret EXIT
		G_SecretExitLevel()
	case 125:
		// TELEPORT MonsterONLY
		if thing.Fplayer == nil {
			EV_Teleport(line, side, thing)
			line.Fspecial = 0
		}
	case 130:
		// Raise Floor Turbo
		EV_DoFloor(line, int32(raiseFloorTurbo))
		line.Fspecial = 0
	case 141:
		// Silent Ceiling Crush & Raise
		EV_DoCeiling(line, int32(silentCrushAndRaise))
		line.Fspecial = 0
		break
		// RETRIGGERS.  All from here till end.
		fallthrough
	case 72:
		// Ceiling Crush
		EV_DoCeiling(line, int32(lowerAndCrush))
	case 73:
		// Ceiling Crush and Raise
		EV_DoCeiling(line, int32(crushAndRaise))
	case 74:
		// Ceiling Crush Stop
		EV_CeilingCrushStop(line)
	case 75:
		// Close Door
		EV_DoDoor(line, int32(vld_close))
	case 76:
		// Close Door 30
		EV_DoDoor(line, int32(vld_close30ThenOpen))
	case 77:
		// Fast Ceiling Crush & Raise
		EV_DoCeiling(line, int32(fastCrushAndRaise))
	case 79:
		// Lights Very Dark
		EV_LightTurnOn(line, 35)
	case 80:
		// Light Turn On - brightest near
		EV_LightTurnOn(line, 0)
	case 81:
		// Light Turn On 255
		EV_LightTurnOn(line, 255)
	case 82:
		// Lower Floor To Lowest
		EV_DoFloor(line, int32(lowerFloorToLowest))
	case 83:
		// Lower Floor
		EV_DoFloor(line, int32(lowerFloor))
	case 84:
		// LowerAndChange
		EV_DoFloor(line, int32(lowerAndChange))
	case 86:
		// Open Door
		EV_DoDoor(line, int32(vld_open))
	case 87:
		// Perpetual Platform Raise
		EV_DoPlat(line, int32(perpetualRaise), 0)
	case 88:
		// PlatDownWaitUp
		EV_DoPlat(line, int32(downWaitUpStay), 0)
	case 89:
		// Platform Stop
		EV_StopPlat(line)
	case 90:
		// Raise Door
		EV_DoDoor(line, int32(vld_normal))
	case 91:
		// Raise Floor
		EV_DoFloor(line, int32(raiseFloor))
	case 92:
		// Raise Floor 24
		EV_DoFloor(line, int32(raiseFloor24))
	case 93:
		// Raise Floor 24 And Change
		EV_DoFloor(line, int32(raiseFloor24AndChange))
	case 94:
		// Raise Floor Crush
		EV_DoFloor(line, int32(raiseFloorCrush))
	case 95:
		// Raise floor to nearest height
		// and change texture.
		EV_DoPlat(line, int32(raiseToNearestAndChange), 0)
	case 96:
		// Raise floor to shortest texture height
		// on either side of lines.
		EV_DoFloor(line, int32(raiseToTexture))
	case 97:
		// TELEPORT!
		EV_Teleport(line, side, thing)
	case 98:
		// Lower Floor (TURBO)
		EV_DoFloor(line, int32(turboLower))
	case 105:
		// Blazing Door Raise (faster than TURBO!)
		EV_DoDoor(line, int32(vld_blazeRaise))
	case 106:
		// Blazing Door Open (faster than TURBO!)
		EV_DoDoor(line, int32(vld_blazeOpen))
	case 107:
		// Blazing Door Close (faster than TURBO!)
		EV_DoDoor(line, int32(vld_blazeClose))
	case 120:
		// Blazing PlatDownWaitUpStay.
		EV_DoPlat(line, int32(blazeDWUS), 0)
	case 126:
		// TELEPORT MonsterONLY.
		if thing.Fplayer == nil {
			EV_Teleport(line, side, thing)
		}
	case 128:
		// Raise To Nearest Floor
		EV_DoFloor(line, int32(raiseFloorToNearest))
	case 129:
		// Raise Floor Turbo
		EV_DoFloor(line, int32(raiseFloorTurbo))
		break
	}
}

// C documentation
//
//	//
//	// P_ShootSpecialLine - IMPACT SPECIALS
//	// Called when a thing shoots a special line.
//	//
func P_ShootSpecialLine(thing *mobj_t, line *line_t) {
	var ok int32
	//	Impacts that other things can activate.
	if thing.Fplayer == nil {
		ok = 0
		switch int32(line.Fspecial) {
		case 46:
			// OPEN DOOR IMPACT
			ok = 1
			break
		}
		if ok == 0 {
			return
		}
	}
	switch int32(line.Fspecial) {
	case 24:
		// RAISE FLOOR
		EV_DoFloor(line, int32(raiseFloor))
		P_ChangeSwitchTexture(line, 0)
	case 46:
		// OPEN DOOR
		EV_DoDoor(line, int32(vld_open))
		P_ChangeSwitchTexture(line, 1)
	case 47:
		// RAISE FLOOR NEAR AND CHANGE
		EV_DoPlat(line, int32(raiseToNearestAndChange), 0)
		P_ChangeSwitchTexture(line, 0)
		break
	}
}

// C documentation
//
//	//
//	// P_PlayerInSpecialSector
//	// Called every tic frame
//	//  that the player origin is in a special sector
//	//
func P_PlayerInSpecialSector(player *player_t) {
	var sector *sector_t
	sector = player.Fmo.Fsubsector.Fsector
	// Falling, not all the way down yet?
	if player.Fmo.Fz != sector.Ffloorheight {
		return
	}
	// Has hitten ground.
	switch int32(sector.Fspecial) {
	case 5:
		// HELLSLIME DAMAGE
		if player.Fpowers[pw_ironfeet] == 0 {
			if leveltime&0x1f == 0 {
				P_DamageMobj(player.Fmo, nil, nil, 10)
			}
		}
	case 7:
		// NUKAGE DAMAGE
		if player.Fpowers[pw_ironfeet] == 0 {
			if leveltime&0x1f == 0 {
				P_DamageMobj(player.Fmo, nil, nil, 5)
			}
		}
	case 16:
		// SUPER HELLSLIME DAMAGE
		fallthrough
	case 4:
		// STROBE HURT
		if player.Fpowers[pw_ironfeet] == 0 || P_Random() < 5 {
			if leveltime&0x1f == 0 {
				P_DamageMobj(player.Fmo, nil, nil, 20)
			}
		}
	case 9:
		// SECRET SECTOR
		player.Fsecretcount++
		sector.Fspecial = 0
	case 11:
		// EXIT SUPER DAMAGE! (for E1M8 finale)
		player.Fcheats &= ^int32(CF_GODMODE)
		if leveltime&0x1f == 0 {
			P_DamageMobj(player.Fmo, nil, nil, 20)
		}
		if player.Fhealth <= 10 {
			G_ExitLevel()
		}
	default:
		I_Error(25387, int32(sector.Fspecial))
		break
	}
}

func P_UpdateSpecials() {
	var i, pic int32
	//	LEVEL TIMER
	if levelTimer == 1 {
		levelTimeCount--
		if levelTimeCount == 0 {
			G_ExitLevel()
		}
	}
	//	ANIMATE FLATS AND TEXTURES GLOBALLY
	for pos := 0; ; pos++ {
		anim := &anims[pos]
		if anim == lastanim {
			break
		}
		i = anim.Fbasepic
		for {
			if i >= anim.Fbasepic+anim.Fnumpics {
				break
			}
			pic = anim.Fbasepic + (leveltime/anim.Fspeed+i)%anim.Fnumpics
			if anim.Fistexture != 0 {
				texturetranslation[i] = pic
			} else {
				flattranslation[i] = pic
			}
			i++
		}

	}
	//	ANIMATE LINE SPECIALS
	i = 0
	for {
		if i >= int32(numlinespecials) {
			break
		}
		line := linespeciallist[i]
		switch int32(line.Fspecial) {
		case 48:
			// EFFECT FIRSTCOL SCROLL +
			sides[line.Fsidenum[0]].Ftextureoffset += 1 << FRACBITS
			break
		}
		goto _3
	_3:
		;
		i++
	}
	//	DO BUTTONS
	i = 0
	for {
		if i >= int32(MAXBUTTONS) {
			break
		}
		if buttonlist[i].Fbtimer != 0 {
			buttonlist[i].Fbtimer--
			if buttonlist[i].Fbtimer == 0 {
				switch buttonlist[i].Fwhere {
				case int32(top):
					sides[buttonlist[i].Fline.Fsidenum[0]].Ftoptexture = int16(buttonlist[i].Fbtexture)
				case int32(middle):
					sides[buttonlist[i].Fline.Fsidenum[0]].Fmidtexture = int16(buttonlist[i].Fbtexture)
				case int32(bottom):
					sides[buttonlist[i].Fline.Fsidenum[0]].Fbottomtexture = int16(buttonlist[i].Fbtexture)
					break
				}
				S_StartSound(buttonlist[i].Fsoundorg, int32(sfx_swtchn))
				buttonlist[i] = button_t{}
			}
		}
		goto _4
	_4:
		;
		i++
	}
}

//
// Donut overrun emulation
//
// Derived from the code from PrBoom+.  Thanks go to Andrey Budko (entryway)
// as usual :-)
//

func DonutOverrun(s3_floorheight uintptr, s3_floorpic uintptr, line *line_t, pillar_sector *sector_t) {
	var p int32
	if first != 0 {
		// This is the first time we have had an overrun.
		first = 0
		// Default values
		tmp_s3_floorheight = DONUT_FLOORHEIGHT_DEFAULT
		tmp_s3_floorpic = int32(DONUT_FLOORPIC_DEFAULT)
		//!
		// @category compat
		// @arg <x> <y>
		//
		// Use the specified magic values when emulating behavior caused
		// by memory overruns from improperly constructed donuts.
		// In Vanilla Doom this can differ depending on the operating
		// system.  The default (if this option is not specified) is to
		// emulate the behavior when running under Windows 98.
		p = M_CheckParmWithArgs(__ccgo_ts_str(25431), 2)
		if p > 0 {
			// Dump of needed memory: (fixed_t)0000:0000 and (short)0000:0008
			//
			// C:\>debug
			// -d 0:0
			//
			// DOS 6.22:
			// 0000:0000    (57 92 19 00) F4 06 70 00-(16 00)
			// DOS 7.1:
			// 0000:0000    (9E 0F C9 00) 65 04 70 00-(16 00)
			// Win98:
			// 0000:0000    (00 00 00 00) 65 04 70 00-(16 00)
			// DOSBox under XP:
			// 0000:0000    (00 00 00 F1) ?? ?? ?? 00-(07 00)
			v, _ := strconv.Atoi(myargs[p+1])
			tmp_s3_floorheight = int32(v)
			v, _ = strconv.Atoi(myargs[p+2])
			tmp_s3_floorpic = int32(v)
			if tmp_s3_floorpic >= numflats {
				fprintf_ccgo(os.Stderr, 25438, numflats, DONUT_FLOORPIC_DEFAULT)
				tmp_s3_floorpic = int32(DONUT_FLOORPIC_DEFAULT)
			}
		}
	}
	/*
	   fprintf(stderr,
	           "Linedef: %d; Sector: %d; "
	           "New floor height: %d; New floor pic: %d\n",
	           line->iLineID, pillar_sector->iSectorID,
	           tmp_s3_floorheight >> 16, tmp_s3_floorpic);
	*/
	*(*fixed_t)(unsafe.Pointer(s3_floorheight)) = tmp_s3_floorheight
	*(*int16)(unsafe.Pointer(s3_floorpic)) = int16(tmp_s3_floorpic)
}

var first = 1

var tmp_s3_floorheight int32

var tmp_s3_floorpic int32

// C documentation
//
//	//
//	// Special Stuff that can not be categorized
//	//
func EV_DoDonut(line *line_t) (r int32) {
	bp := alloc(16)
	var floor uintptr
	var s1, s2, s3 *sector_t
	var i, rtn, secnum, v1 int32
	secnum = -1
	rtn = 0
	for {
		v1 = P_FindSectorFromLineTag(line, secnum)
		secnum = v1
		if !(v1 >= 0) {
			break
		}
		s1 = &sectors[secnum]
		// ALREADY MOVING?  IF SO, KEEP GOING...
		if s1.Fspecialdata != 0 {
			continue
		}
		rtn = 1
		s2 = getNextSector(s1.Flines[0], s1)
		// Vanilla Doom does not check if the linedef is one sided.  The
		// game does not crash, but reads invalid memory and causes the
		// sector floor to move "down" to some unknown height.
		// DOSbox prints a warning about an invalid memory access.
		//
		// I'm not sure exactly what invalid memory is being read.  This
		// isn't something that should be done, anyway.
		// Just print a warning and return.
		if s2 == nil {
			fprintf_ccgo(os.Stderr, 25590)
			break
		}
		i = 0
		for {
			var floorP *floormove_t
			if i >= s2.Flinecount {
				break
			}
			s3 = s2.Flines[i].Fbacksector
			if s3 == s1 {
				goto _2
			}
			if s3 == nil {
				// e6y
				// s3 is NULL, so
				// s3->floorheight is an int at 0000:0000
				// s3->floorpic is a short at 0000:0008
				// Trying to emulate
				fprintf_ccgo(os.Stderr, 25682)
				DonutOverrun(bp, bp+4, line, s1)
			} else {
				*(*fixed_t)(unsafe.Pointer(bp)) = s3.Ffloorheight
				*(*int16)(unsafe.Pointer(bp + 4)) = s3.Ffloorpic
			}
			//	Spawn rising slime
			floor = Z_Malloc(64, int32(PU_LEVSPEC), uintptr(0))
			floorP = (*floormove_t)(unsafe.Pointer(floor))
			P_AddThinker(&floorP.Fthinker)
			s2.Fspecialdata = floor
			floorP.Fthinker.Ffunction.Facv = __ccgo_fp(T_MoveFloor)
			floorP.Ftype1 = int32(donutRaise)
			floorP.Fcrush = 0
			floorP.Fdirection = 1
			floorP.Fsector = s2
			floorP.Fspeed = 1 << FRACBITS / 2
			floorP.Ftexture = *(*int16)(unsafe.Pointer(bp + 4))
			floorP.Fnewspecial = 0
			floorP.Ffloordestheight = *(*fixed_t)(unsafe.Pointer(bp))
			//	Spawn lowering donut-hole
			floor = Z_Malloc(64, int32(PU_LEVSPEC), uintptr(0))
			floorP = (*floormove_t)(unsafe.Pointer(floor))
			P_AddThinker(&floorP.Fthinker)
			s1.Fspecialdata = floor
			floorP.Fthinker.Ffunction.Facv = __ccgo_fp(T_MoveFloor)
			floorP.Ftype1 = int32(lowerFloor)
			floorP.Fcrush = 0
			floorP.Fdirection = -1
			floorP.Fsector = s1
			floorP.Fspeed = 1 << FRACBITS / 2
			floorP.Ffloordestheight = *(*fixed_t)(unsafe.Pointer(bp))
			break
			goto _2
		_2:
			;
			i++
		}
	}
	return rtn
}

// C documentation
//
//	// Parses command line parameters.
func P_SpawnSpecials() {
	var i int32
	// See if -TIMER was specified.
	if timelimit > 0 && deathmatch != 0 {
		levelTimer = 1
		levelTimeCount = timelimit * 60 * int32(TICRATE)
	} else {
		levelTimer = 0
	}
	//	Init special SECTORs.
	i = 0
	for {
		if i >= numsectors {
			break
		}
		sector := &sectors[i]
		if sector.Fspecial == 0 {
			goto _1
		}
		switch int32(sector.Fspecial) {
		case 1:
			// FLICKERING LIGHTS
			P_SpawnLightFlash(sector)
		case 2:
			// STROBE FAST
			P_SpawnStrobeFlash(sector, int32(FASTDARK), 0)
		case 3:
			// STROBE SLOW
			P_SpawnStrobeFlash(sector, int32(SLOWDARK), 0)
		case 4:
			// STROBE FAST/DEATH SLIME
			P_SpawnStrobeFlash(sector, int32(FASTDARK), 0)
			sector.Fspecial = 4
		case 8:
			// GLOWING LIGHT
			P_SpawnGlowingLight(sector)
		case 9:
			// SECRET SECTOR
			totalsecret++
		case 10:
			// DOOR CLOSE IN 30 SECONDS
			P_SpawnDoorCloseIn30(sector)
		case 12:
			// SYNC STROBE SLOW
			P_SpawnStrobeFlash(sector, int32(SLOWDARK), 1)
		case 13:
			// SYNC STROBE FAST
			P_SpawnStrobeFlash(sector, int32(FASTDARK), 1)
		case 14:
			// DOOR RAISE IN 5 MINUTES
			P_SpawnDoorRaiseIn5Mins(sector, i)
		case 17:
			P_SpawnFireFlicker(sector)
			break
		}
		goto _1
	_1:
		;
		i++
	}
	//	Init line EFFECTs
	numlinespecials = 0
	i = 0
	for {
		if i >= numlines {
			break
		}
		switch int32(lines[i].Fspecial) {
		case 48:
			if int32(numlinespecials) >= int32(MAXLINEANIMS) {
				I_Error(25801, 0)
			}
			// EFFECT FIRSTCOL SCROLL+
			linespeciallist[numlinespecials] = &lines[i]
			numlinespecials++
			break
		}
		goto _2
	_2:
		;
		i++
	}
	clear(activeceilings[:])
	clear(activeplats[:])
	clear(buttonlist[:])
	// UNUSED: no horizonal sliders.
	//	P_InitSlidingDoorFrames();
}

func init() {
	alphSwitchList = [41]switchlist_t{
		0: {
			Fname1:   [9]int8{'S', 'W', '1', 'B', 'R', 'C', 'O', 'M'},
			Fname2:   [9]int8{'S', 'W', '2', 'B', 'R', 'C', 'O', 'M'},
			Fepisode: 1,
		},
		1: {
			Fname1:   [9]int8{'S', 'W', '1', 'B', 'R', 'N', '1'},
			Fname2:   [9]int8{'S', 'W', '2', 'B', 'R', 'N', '1'},
			Fepisode: 1,
		},
		2: {
			Fname1:   [9]int8{'S', 'W', '1', 'B', 'R', 'N', '2'},
			Fname2:   [9]int8{'S', 'W', '2', 'B', 'R', 'N', '2'},
			Fepisode: 1,
		},
		3: {
			Fname1:   [9]int8{'S', 'W', '1', 'B', 'R', 'N', 'G', 'N'},
			Fname2:   [9]int8{'S', 'W', '2', 'B', 'R', 'N', 'G', 'N'},
			Fepisode: 1,
		},
		4: {
			Fname1:   [9]int8{'S', 'W', '1', 'B', 'R', 'O', 'W', 'N'},
			Fname2:   [9]int8{'S', 'W', '2', 'B', 'R', 'O', 'W', 'N'},
			Fepisode: 1,
		},
		5: {
			Fname1:   [9]int8{'S', 'W', '1', 'C', 'O', 'M', 'M'},
			Fname2:   [9]int8{'S', 'W', '2', 'C', 'O', 'M', 'M'},
			Fepisode: 1,
		},
		6: {
			Fname1:   [9]int8{'S', 'W', '1', 'C', 'O', 'M', 'P'},
			Fname2:   [9]int8{'S', 'W', '2', 'C', 'O', 'M', 'P'},
			Fepisode: 1,
		},
		7: {
			Fname1:   [9]int8{'S', 'W', '1', 'D', 'I', 'R', 'T'},
			Fname2:   [9]int8{'S', 'W', '2', 'D', 'I', 'R', 'T'},
			Fepisode: 1,
		},
		8: {
			Fname1:   [9]int8{'S', 'W', '1', 'E', 'X', 'I', 'T'},
			Fname2:   [9]int8{'S', 'W', '2', 'E', 'X', 'I', 'T'},
			Fepisode: 1,
		},
		9: {
			Fname1:   [9]int8{'S', 'W', '1', 'G', 'R', 'A', 'Y'},
			Fname2:   [9]int8{'S', 'W', '2', 'G', 'R', 'A', 'Y'},
			Fepisode: 1,
		},
		10: {
			Fname1:   [9]int8{'S', 'W', '1', 'G', 'R', 'A', 'Y', '1'},
			Fname2:   [9]int8{'S', 'W', '2', 'G', 'R', 'A', 'Y', '1'},
			Fepisode: 1,
		},
		11: {
			Fname1:   [9]int8{'S', 'W', '1', 'M', 'E', 'T', 'A', 'L'},
			Fname2:   [9]int8{'S', 'W', '2', 'M', 'E', 'T', 'A', 'L'},
			Fepisode: 1,
		},
		12: {
			Fname1:   [9]int8{'S', 'W', '1', 'P', 'I', 'P', 'E'},
			Fname2:   [9]int8{'S', 'W', '2', 'P', 'I', 'P', 'E'},
			Fepisode: 1,
		},
		13: {
			Fname1:   [9]int8{'S', 'W', '1', 'S', 'L', 'A', 'D'},
			Fname2:   [9]int8{'S', 'W', '2', 'S', 'L', 'A', 'D'},
			Fepisode: 1,
		},
		14: {
			Fname1:   [9]int8{'S', 'W', '1', 'S', 'T', 'A', 'R', 'G'},
			Fname2:   [9]int8{'S', 'W', '2', 'S', 'T', 'A', 'R', 'G'},
			Fepisode: 1,
		},
		15: {
			Fname1:   [9]int8{'S', 'W', '1', 'S', 'T', 'O', 'N', '1'},
			Fname2:   [9]int8{'S', 'W', '2', 'S', 'T', 'O', 'N', '1'},
			Fepisode: 1,
		},
		16: {
			Fname1:   [9]int8{'S', 'W', '1', 'S', 'T', 'O', 'N', '2'},
			Fname2:   [9]int8{'S', 'W', '2', 'S', 'T', 'O', 'N', '2'},
			Fepisode: 1,
		},
		17: {
			Fname1:   [9]int8{'S', 'W', '1', 'S', 'T', 'O', 'N', 'E'},
			Fname2:   [9]int8{'S', 'W', '2', 'S', 'T', 'O', 'N', 'E'},
			Fepisode: 1,
		},
		18: {
			Fname1:   [9]int8{'S', 'W', '1', 'S', 'T', 'R', 'T', 'N'},
			Fname2:   [9]int8{'S', 'W', '2', 'S', 'T', 'R', 'T', 'N'},
			Fepisode: 1,
		},
		19: {
			Fname1:   [9]int8{'S', 'W', '1', 'B', 'L', 'U', 'E'},
			Fname2:   [9]int8{'S', 'W', '2', 'B', 'L', 'U', 'E'},
			Fepisode: 2,
		},
		20: {
			Fname1:   [9]int8{'S', 'W', '1', 'C', 'M', 'T'},
			Fname2:   [9]int8{'S', 'W', '2', 'C', 'M', 'T'},
			Fepisode: 2,
		},
		21: {
			Fname1:   [9]int8{'S', 'W', '1', 'G', 'A', 'R', 'G'},
			Fname2:   [9]int8{'S', 'W', '2', 'G', 'A', 'R', 'G'},
			Fepisode: 2,
		},
		22: {
			Fname1:   [9]int8{'S', 'W', '1', 'G', 'S', 'T', 'O', 'N'},
			Fname2:   [9]int8{'S', 'W', '2', 'G', 'S', 'T', 'O', 'N'},
			Fepisode: 2,
		},
		23: {
			Fname1:   [9]int8{'S', 'W', '1', 'H', 'O', 'T'},
			Fname2:   [9]int8{'S', 'W', '2', 'H', 'O', 'T'},
			Fepisode: 2,
		},
		24: {
			Fname1:   [9]int8{'S', 'W', '1', 'L', 'I', 'O', 'N'},
			Fname2:   [9]int8{'S', 'W', '2', 'L', 'I', 'O', 'N'},
			Fepisode: 2,
		},
		25: {
			Fname1:   [9]int8{'S', 'W', '1', 'S', 'A', 'T', 'Y', 'R'},
			Fname2:   [9]int8{'S', 'W', '2', 'S', 'A', 'T', 'Y', 'R'},
			Fepisode: 2,
		},
		26: {
			Fname1:   [9]int8{'S', 'W', '1', 'S', 'K', 'I', 'N'},
			Fname2:   [9]int8{'S', 'W', '2', 'S', 'K', 'I', 'N'},
			Fepisode: 2,
		},
		27: {
			Fname1:   [9]int8{'S', 'W', '1', 'V', 'I', 'N', 'E'},
			Fname2:   [9]int8{'S', 'W', '2', 'V', 'I', 'N', 'E'},
			Fepisode: 2,
		},
		28: {
			Fname1:   [9]int8{'S', 'W', '1', 'W', 'O', 'O', 'D'},
			Fname2:   [9]int8{'S', 'W', '2', 'W', 'O', 'O', 'D'},
			Fepisode: 2,
		},
		29: {
			Fname1:   [9]int8{'S', 'W', '1', 'P', 'A', 'N', 'E', 'L'},
			Fname2:   [9]int8{'S', 'W', '2', 'P', 'A', 'N', 'E', 'L'},
			Fepisode: 3,
		},
		30: {
			Fname1:   [9]int8{'S', 'W', '1', 'R', 'O', 'C', 'K'},
			Fname2:   [9]int8{'S', 'W', '2', 'R', 'O', 'C', 'K'},
			Fepisode: 3,
		},
		31: {
			Fname1:   [9]int8{'S', 'W', '1', 'M', 'E', 'T', '2'},
			Fname2:   [9]int8{'S', 'W', '2', 'M', 'E', 'T', '2'},
			Fepisode: 3,
		},
		32: {
			Fname1:   [9]int8{'S', 'W', '1', 'W', 'D', 'M', 'E', 'T'},
			Fname2:   [9]int8{'S', 'W', '2', 'W', 'D', 'M', 'E', 'T'},
			Fepisode: 3,
		},
		33: {
			Fname1:   [9]int8{'S', 'W', '1', 'B', 'R', 'I', 'K'},
			Fname2:   [9]int8{'S', 'W', '2', 'B', 'R', 'I', 'K'},
			Fepisode: 3,
		},
		34: {
			Fname1:   [9]int8{'S', 'W', '1', 'M', 'O', 'D', '1'},
			Fname2:   [9]int8{'S', 'W', '2', 'M', 'O', 'D', '1'},
			Fepisode: 3,
		},
		35: {
			Fname1:   [9]int8{'S', 'W', '1', 'Z', 'I', 'M'},
			Fname2:   [9]int8{'S', 'W', '2', 'Z', 'I', 'M'},
			Fepisode: 3,
		},
		36: {
			Fname1:   [9]int8{'S', 'W', '1', 'S', 'T', 'O', 'N', '6'},
			Fname2:   [9]int8{'S', 'W', '2', 'S', 'T', 'O', 'N', '6'},
			Fepisode: 3,
		},
		37: {
			Fname1:   [9]int8{'S', 'W', '1', 'T', 'E', 'K'},
			Fname2:   [9]int8{'S', 'W', '2', 'T', 'E', 'K'},
			Fepisode: 3,
		},
		38: {
			Fname1:   [9]int8{'S', 'W', '1', 'M', 'A', 'R', 'B'},
			Fname2:   [9]int8{'S', 'W', '2', 'M', 'A', 'R', 'B'},
			Fepisode: 3,
		},
		39: {
			Fname1:   [9]int8{'S', 'W', '1', 'S', 'K', 'U', 'L', 'L'},
			Fname2:   [9]int8{'S', 'W', '2', 'S', 'K', 'U', 'L', 'L'},
			Fepisode: 3,
		},
		40: {
			Fname1: [9]int8{},
			Fname2: [9]int8{},
		},
	}
}

// C documentation
//
//	//
//	// P_InitSwitchList
//	// Only called at game initialization.
//	//
func P_InitSwitchList() {
	var episode, i, index, v2, v3 int32
	episode = 1
	if gamemode == registered || gamemode == retail {
		episode = 2
	} else {
		if gamemode == commercial {
			episode = 3
		}
	}
	index = 0
	i = 0
	for {
		if i >= int32(MAXSWITCHES) {
			break
		}
		if alphSwitchList[i].Fepisode == 0 {
			numswitches = index / 2
			switchlist[index] = -1
			break
		}
		if int32(alphSwitchList[i].Fepisode) <= episode {
			v2 = index
			index++
			switchlist[v2] = R_TextureNumForName(uintptr(unsafe.Pointer(&alphSwitchList)) + uintptr(i)*20)
			v3 = index
			index++
			switchlist[v3] = R_TextureNumForName(uintptr(unsafe.Pointer(&alphSwitchList)) + uintptr(i)*20 + 9)
		}
		goto _1
	_1:
		;
		i++
	}
}

// C documentation
//
//	//
//	// Start a button counting down till it turns off.
//	//
func P_StartButton(line *line_t, w bwhere_e, texture int32, time int32) {
	var i int32
	// See if button is already pressed
	i = 0
	for {
		if i >= int32(MAXBUTTONS) {
			break
		}
		if buttonlist[i].Fbtimer != 0 && buttonlist[i].Fline == line {
			return
		}
		goto _1
	_1:
		;
		i++
	}
	i = 0
	for {
		if i >= int32(MAXBUTTONS) {
			break
		}
		if buttonlist[i].Fbtimer == 0 {
			buttonlist[i].Fline = line
			buttonlist[i].Fwhere = w
			buttonlist[i].Fbtexture = texture
			buttonlist[i].Fbtimer = time
			buttonlist[i].Fsoundorg = &line.Ffrontsector.Fsoundorg
			return
		}
		goto _2
	_2:
		;
		i++
	}
	I_Error(25857, 0)
}

// C documentation
//
//	//
//	// Function that changes wall texture.
//	// Tell it if switch is ok to use again (1=yes, it's a button).
//	//
func P_ChangeSwitchTexture(line *line_t, useAgain int32) {
	var i, sound, texBot, texMid, texTop int32
	if useAgain == 0 {
		line.Fspecial = 0
	}
	texTop = int32(sides[line.Fsidenum[0]].Ftoptexture)
	texMid = int32(sides[line.Fsidenum[0]].Fmidtexture)
	texBot = int32(sides[line.Fsidenum[0]].Fbottomtexture)
	sound = int32(sfx_swtchn)
	// EXIT SWITCH?
	if int32(line.Fspecial) == 11 {
		sound = int32(sfx_swtchx)
	}
	i = 0
	for {
		if i >= numswitches*int32(2) {
			break
		}
		if switchlist[i] == texTop {
			S_StartSound(buttonlist[0].Fsoundorg, sound)
			sides[line.Fsidenum[0]].Ftoptexture = int16(switchlist[i^int32(1)])
			if useAgain != 0 {
				P_StartButton(line, int32(top), switchlist[i], int32(BUTTONTIME))
			}
			return
		} else {
			if switchlist[i] == texMid {
				S_StartSound(buttonlist[0].Fsoundorg, sound)
				sides[line.Fsidenum[0]].Fmidtexture = int16(switchlist[i^int32(1)])
				if useAgain != 0 {
					P_StartButton(line, int32(middle), switchlist[i], int32(BUTTONTIME))
				}
				return
			} else {
				if switchlist[i] == texBot {
					S_StartSound(buttonlist[0].Fsoundorg, sound)
					sides[line.Fsidenum[0]].Fbottomtexture = int16(switchlist[i^int32(1)])
					if useAgain != 0 {
						P_StartButton(line, int32(bottom), switchlist[i], int32(BUTTONTIME))
					}
					return
				}
			}
		}
		goto _1
	_1:
		;
		i++
	}
}

// C documentation
//
//	//
//	// P_UseSpecialLine
//	// Called when a thing uses a special line.
//	// Only the front sides of lines are usable.
//	//
func P_UseSpecialLine(thing *mobj_t, line *line_t, side int32) (r boolean) {
	// Err...
	// Use the back sides of VERY SPECIAL lines...
	if side != 0 {
		switch int32(line.Fspecial) {
		case 124:
			// Sliding door open&close
			// UNUSED?
		default:
			return 0
			break
		}
	}
	// Switches that other things can activate.
	if thing.Fplayer == nil {
		// never open secret doors
		if int32(line.Fflags)&ML_SECRET != 0 {
			return 0
		}
		switch int32(line.Fspecial) {
		case 1: // MANUAL DOOR RAISE
			fallthrough
		case 32: // MANUAL BLUE
			fallthrough
		case 33: // MANUAL RED
			fallthrough
		case 34: // MANUAL YELLOW
		default:
			return 0
			break
		}
	}
	// do something
	switch int32(line.Fspecial) {
	// MANUALS
	case 1: // Vertical Door
		fallthrough
	case 26: // Blue Door/Locked
		fallthrough
	case 27: // Yellow Door /Locked
		fallthrough
	case 28: // Red Door /Locked
		fallthrough
	case 31: // Manual door open
		fallthrough
	case 32: // Blue locked door open
		fallthrough
	case 33: // Red locked door open
		fallthrough
	case 34: // Yellow locked door open
		fallthrough
	case 117: // Blazing door raise
		fallthrough
	case 118: // Blazing door open
		EV_VerticalDoor(line, thing)
		break
		//UNUSED - Door Slide Open&Close
		// case 124:
		// EV_SlidingDoor (line, thing);
		// break;
		// SWITCHES
		fallthrough
	case 7:
		// Build Stairs
		if EV_BuildStairs(line, int32(build8)) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 9:
		// Change Donut
		if EV_DoDonut(line) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 11:
		// Exit level
		P_ChangeSwitchTexture(line, 0)
		G_ExitLevel()
	case 14:
		// Raise Floor 32 and change texture
		if EV_DoPlat(line, int32(raiseAndChange), 32) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 15:
		// Raise Floor 24 and change texture
		if EV_DoPlat(line, int32(raiseAndChange), 24) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 18:
		// Raise Floor to next highest floor
		if EV_DoFloor(line, int32(raiseFloorToNearest)) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 20:
		// Raise Plat next highest floor and change texture
		if EV_DoPlat(line, int32(raiseToNearestAndChange), 0) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 21:
		// PlatDownWaitUpStay
		if EV_DoPlat(line, int32(downWaitUpStay), 0) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 23:
		// Lower Floor to Lowest
		if EV_DoFloor(line, int32(lowerFloorToLowest)) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 29:
		// Raise Door
		if EV_DoDoor(line, int32(vld_normal)) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 41:
		// Lower Ceiling to Floor
		if EV_DoCeiling(line, int32(lowerToFloor)) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 71:
		// Turbo Lower Floor
		if EV_DoFloor(line, int32(turboLower)) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 49:
		// Ceiling Crush And Raise
		if EV_DoCeiling(line, int32(crushAndRaise)) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 50:
		// Close Door
		if EV_DoDoor(line, int32(vld_close)) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 51:
		// Secret EXIT
		P_ChangeSwitchTexture(line, 0)
		G_SecretExitLevel()
	case 55:
		// Raise Floor Crush
		if EV_DoFloor(line, int32(raiseFloorCrush)) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 101:
		// Raise Floor
		if EV_DoFloor(line, int32(raiseFloor)) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 102:
		// Lower Floor to Surrounding floor height
		if EV_DoFloor(line, int32(lowerFloor)) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 103:
		// Open Door
		if EV_DoDoor(line, int32(vld_open)) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 111:
		// Blazing Door Raise (faster than TURBO!)
		if EV_DoDoor(line, int32(vld_blazeRaise)) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 112:
		// Blazing Door Open (faster than TURBO!)
		if EV_DoDoor(line, int32(vld_blazeOpen)) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 113:
		// Blazing Door Close (faster than TURBO!)
		if EV_DoDoor(line, int32(vld_blazeClose)) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 122:
		// Blazing PlatDownWaitUpStay
		if EV_DoPlat(line, int32(blazeDWUS), 0) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 127:
		// Build Stairs Turbo 16
		if EV_BuildStairs(line, int32(turbo16)) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 131:
		// Raise Floor Turbo
		if EV_DoFloor(line, int32(raiseFloorTurbo)) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 133:
		// BlzOpenDoor BLUE
		fallthrough
	case 135:
		// BlzOpenDoor RED
		fallthrough
	case 137:
		// BlzOpenDoor YELLOW
		if EV_DoLockedDoor(line, int32(vld_blazeOpen), thing) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
	case 140:
		// Raise Floor 512
		if EV_DoFloor(line, int32(raiseFloor512)) != 0 {
			P_ChangeSwitchTexture(line, 0)
		}
		break
		// BUTTONS
		fallthrough
	case 42:
		// Close Door
		if EV_DoDoor(line, int32(vld_close)) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 43:
		// Lower Ceiling to Floor
		if EV_DoCeiling(line, int32(lowerToFloor)) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 45:
		// Lower Floor to Surrounding floor height
		if EV_DoFloor(line, int32(lowerFloor)) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 60:
		// Lower Floor to Lowest
		if EV_DoFloor(line, int32(lowerFloorToLowest)) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 61:
		// Open Door
		if EV_DoDoor(line, int32(vld_open)) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 62:
		// PlatDownWaitUpStay
		if EV_DoPlat(line, int32(downWaitUpStay), 1) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 63:
		// Raise Door
		if EV_DoDoor(line, int32(vld_normal)) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 64:
		// Raise Floor to ceiling
		if EV_DoFloor(line, int32(raiseFloor)) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 66:
		// Raise Floor 24 and change texture
		if EV_DoPlat(line, int32(raiseAndChange), 24) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 67:
		// Raise Floor 32 and change texture
		if EV_DoPlat(line, int32(raiseAndChange), 32) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 65:
		// Raise Floor Crush
		if EV_DoFloor(line, int32(raiseFloorCrush)) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 68:
		// Raise Plat to next highest floor and change texture
		if EV_DoPlat(line, int32(raiseToNearestAndChange), 0) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 69:
		// Raise Floor to next highest floor
		if EV_DoFloor(line, int32(raiseFloorToNearest)) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 70:
		// Turbo Lower Floor
		if EV_DoFloor(line, int32(turboLower)) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 114:
		// Blazing Door Raise (faster than TURBO!)
		if EV_DoDoor(line, int32(vld_blazeRaise)) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 115:
		// Blazing Door Open (faster than TURBO!)
		if EV_DoDoor(line, int32(vld_blazeOpen)) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 116:
		// Blazing Door Close (faster than TURBO!)
		if EV_DoDoor(line, int32(vld_blazeClose)) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 123:
		// Blazing PlatDownWaitUpStay
		if EV_DoPlat(line, int32(blazeDWUS), 0) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 132:
		// Raise Floor Turbo
		if EV_DoFloor(line, int32(raiseFloorTurbo)) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 99:
		// BlzOpenDoor BLUE
		fallthrough
	case 134:
		// BlzOpenDoor RED
		fallthrough
	case 136:
		// BlzOpenDoor YELLOW
		if EV_DoLockedDoor(line, int32(vld_blazeOpen), thing) != 0 {
			P_ChangeSwitchTexture(line, 1)
		}
	case 138:
		// Light Turn On
		EV_LightTurnOn(line, 255)
		P_ChangeSwitchTexture(line, 1)
	case 139:
		// Light Turn Off
		EV_LightTurnOn(line, 35)
		P_ChangeSwitchTexture(line, 1)
		break
	}
	return 1
}

// Data.
//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Created by the sound utility written by Dave Taylor.
//	Kept as a sample, DOOM2  sounds. Frozen.
//

// State.
//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Refresh/render internal state variables (global).
//

// C documentation
//
//	//
//	// TELEPORTATION
//	//
func EV_Teleport(line *line_t, side int32, thing *mobj_t) (r int32) {
	var an uint32
	var fog *mobj_t
	var m *mobj_t
	var thinker *thinker_t
	var sector *sector_t
	var i int32
	var tag int16
	var oldx, oldy, oldz, v3, v4 fixed_t
	// don't teleport missiles
	if thing.Fflags&MF_MISSILE != 0 {
		return 0
	}
	// Don't teleport if hit back of line,
	//  so you can get out of teleporter.
	if side == 1 {
		return 0
	}
	tag = line.Ftag
	i = 0
	for {
		if i >= numsectors {
			break
		}
		if sectors[i].Ftag == tag {
			thinker = thinkercap.Fnext
			thinker = thinkercap.Fnext
			for {
				if thinker == &thinkercap {
					break
				}
				// not a mobj
				if thinker.Ffunction.Facv != __ccgo_fp(P_MobjThinker) {
					goto _2
				}
				m = (*mobj_t)(unsafe.Pointer(thinker))
				// not a teleportman
				if m.Ftype1 != int32(MT_TELEPORTMAN) {
					goto _2
				}
				sector = m.Fsubsector.Fsector
				// wrong sector
				if sectorIndex(sector) != i {
					goto _2
				}
				oldx = thing.Fx
				oldy = thing.Fy
				oldz = thing.Fz
				if P_TeleportMove(thing, m.Fx, m.Fy) == 0 {
					return 0
				}
				// The first Final Doom executable does not set thing->z
				// when teleporting. This quirk is unique to this
				// particular version; the later version included in
				// some versions of the Id Anthology fixed this.
				if gameversion != exe_final {
					thing.Fz = thing.Ffloorz
				}
				if thing.Fplayer != nil {
					thing.Fplayer.Fviewz = thing.Fz + thing.Fplayer.Fviewheight
				}
				// spawn teleport fog at source and destination
				fog = P_SpawnMobj(oldx, oldy, oldz, int32(MT_TFOG))
				S_StartSound(&fog.degenmobj_t, int32(sfx_telept))
				an = m.Fangle >> int32(ANGLETOFINESHIFT)
				fog = P_SpawnMobj(m.Fx+int32(20)*finecosine[an], m.Fy+int32(20)*finesine[an], thing.Fz, int32(MT_TFOG))
				// emit sound, where?
				S_StartSound(&fog.degenmobj_t, int32(sfx_telept))
				// don't move for a bit
				if thing.Fplayer != nil {
					thing.Freactiontime = 18
				}
				thing.Fangle = m.Fangle
				v4 = 0
				thing.Fmomz = v4
				v3 = v4
				thing.Fmomy = v3
				thing.Fmomx = v3
				return 1
				goto _2
			_2:
				;
				thinker = thinker.Fnext
			}
		}
		goto _1
	_1:
		;
		i++
	}
	return 0
}

// C documentation
//
//	//
//	// P_InitThinkers
//	//
func P_InitThinkers() {
	thinkercap.Fnext = &thinkercap
	thinkercap.Fprev = &thinkercap
}

// C documentation
//
//	//
//	// P_AddThinker
//	// Adds a new thinker at the end of the list.
//	//
func P_AddThinker(thinker *thinker_t) {
	thinkercap.Fprev.Fnext = thinker
	thinker.Fnext = &thinkercap
	thinker.Fprev = thinkercap.Fprev
	thinkercap.Fprev = thinker
}

// C documentation
//
//	//
//	// P_RemoveThinker
//	// Deallocation is lazy -- it will not actually be freed
//	// until its thinking turn comes up.
//	//
func P_RemoveThinker(thinker *thinker_t) {
	// FIXME: NOP.
	thinker.Ffunction.Facv = uintptr_negative_one
}

// C documentation
//
//	//
//	// P_RunThinkers
//	//
func P_RunThinkers() {
	var currentthinker *thinker_t
	currentthinker = thinkercap.Fnext
	for currentthinker != &thinkercap {
		if currentthinker.Ffunction.Facv == uintptr_negative_one {
			// time to remove it
			currentthinker.Fnext.Fprev = currentthinker.Fprev
			currentthinker.Fprev.Fnext = currentthinker.Fnext
			Z_Free(uintptr(unsafe.Pointer(currentthinker)))
		} else {
			if currentthinker.Ffunction.Facv != 0 {
				(*(*func(*thinker_t))(unsafe.Pointer(&struct{ uintptr }{*(*actionf_p1)(unsafe.Pointer(&currentthinker.Ffunction))})))(currentthinker)
			}
		}
		currentthinker = currentthinker.Fnext
	}
}

//
// P_Ticker
//

func P_Ticker() {
	var i int32
	// run the tic
	if paused != 0 {
		return
	}
	// pause if in menu and at least one tic has been run
	if netgame == 0 && menuactive != 0 && demoplayback == 0 && players[consoleplayer].Fviewz != 1 {
		return
	}
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		if playeringame[i] != 0 {
			P_PlayerThink(&players[i])
		}
		goto _1
	_1:
		;
		i++
	}
	P_RunThinkers()
	P_UpdateSpecials()
	P_RespawnSpecials()
	// for par times
	leveltime++
}

const ANG1809 = 2147483648
const ANG907 = 1073741824
const INVERSECOLORMAP = 32
const MAXBOB = 1048576

// C documentation
//
//	//
//	// P_Thrust
//	// Moves the given origin along a given angle.
//	//
func P_Thrust(player *player_t, angle angle_t, move fixed_t) {
	angle >>= uint32(ANGLETOFINESHIFT)
	player.Fmo.Fmomx += FixedMul(move, finecosine[angle])
	player.Fmo.Fmomy += FixedMul(move, finesine[angle])
}

// C documentation
//
//	//
//	// P_CalcHeight
//	// Calculate the walking / running height adjustment
//	//
func P_CalcHeight(player *player_t) {
	var angle int32
	var bob fixed_t
	// Regular movement bobbing
	// (needs to be calculated for gun swing
	// even if not on ground)
	// OPTIMIZE: tablify angle
	// Note: a LUT allows for effects
	//  like a ramp with low health.
	player.Fbob = FixedMul(player.Fmo.Fmomx, player.Fmo.Fmomx) + FixedMul(player.Fmo.Fmomy, player.Fmo.Fmomy)
	player.Fbob >>= 2
	if player.Fbob > int32(MAXBOB) {
		player.Fbob = int32(MAXBOB)
	}
	if player.Fcheats&int32(CF_NOMOMENTUM) != 0 || onground == 0 {
		player.Fviewz = player.Fmo.Fz + 41*(1<<FRACBITS)
		if player.Fviewz > player.Fmo.Fceilingz-4*(1<<FRACBITS) {
			player.Fviewz = player.Fmo.Fceilingz - 4*(1<<FRACBITS)
		}
		player.Fviewz = player.Fmo.Fz + player.Fviewheight
		return
	}
	angle = FINEANGLES / 20 * leveltime & (FINEANGLES - 1)
	bob = FixedMul(player.Fbob/int32(2), finesine[angle])
	// move viewheight
	if player.Fplayerstate == int32(PST_LIVE) {
		player.Fviewheight += player.Fdeltaviewheight
		if player.Fviewheight > 41*(1<<FRACBITS) {
			player.Fviewheight = 41 * (1 << FRACBITS)
			player.Fdeltaviewheight = 0
		}
		if player.Fviewheight < 41*(1<<FRACBITS)/2 {
			player.Fviewheight = 41 * (1 << FRACBITS) / 2
			if player.Fdeltaviewheight <= 0 {
				player.Fdeltaviewheight = 1
			}
		}
		if player.Fdeltaviewheight != 0 {
			player.Fdeltaviewheight += 1 << FRACBITS / 4
			if player.Fdeltaviewheight == 0 {
				player.Fdeltaviewheight = 1
			}
		}
	}
	player.Fviewz = player.Fmo.Fz + player.Fviewheight + bob
	if player.Fviewz > player.Fmo.Fceilingz-4*(1<<FRACBITS) {
		player.Fviewz = player.Fmo.Fceilingz - 4*(1<<FRACBITS)
	}
}

// C documentation
//
//	//
//	// P_MovePlayer
//	//
func P_MovePlayer(player *player_t) {
	cmd := &player.Fcmd
	player.Fmo.Fangle += uint32(int32(cmd.Fangleturn) << 16)
	// Do not let the player control movement
	//  if not onground.
	onground = booluint32(player.Fmo.Fz <= player.Fmo.Ffloorz)
	if cmd.Fforwardmove != 0 && onground != 0 {
		P_Thrust(player, player.Fmo.Fangle, int32(cmd.Fforwardmove)*int32(2048))
	}
	if cmd.Fsidemove != 0 && onground != 0 {
		P_Thrust(player, player.Fmo.Fangle-uint32(ANG907), int32(cmd.Fsidemove)*int32(2048))
	}
	if (cmd.Fforwardmove != 0 || cmd.Fsidemove != 0) && player.Fmo.Fstate == &states[S_PLAY] {
		P_SetMobjState(player.Fmo, S_PLAY_RUN1)
	}
}

//
// P_DeathThink
// Fall on your face when dying.
// Decrease POV height to floor height.
//

func P_DeathThink(player *player_t) {
	var angle, delta angle_t
	P_MovePsprites(player)
	// fall to the ground
	if player.Fviewheight > 6*(1<<FRACBITS) {
		player.Fviewheight -= 1 << FRACBITS
	}
	if player.Fviewheight < 6*(1<<FRACBITS) {
		player.Fviewheight = 6 * (1 << FRACBITS)
	}
	player.Fdeltaviewheight = 0
	onground = booluint32(player.Fmo.Fz <= player.Fmo.Ffloorz)
	P_CalcHeight(player)
	if player.Fattacker != nil && player.Fattacker != player.Fmo {
		angle = R_PointToAngle2(player.Fmo.Fx, player.Fmo.Fy, (*mobj_t)(unsafe.Pointer(player.Fattacker)).Fx, (*mobj_t)(unsafe.Pointer(player.Fattacker)).Fy)
		delta = angle - player.Fmo.Fangle
		if delta < uint32(ANG907/18) || delta > uint32(-(ANG907/18)&0xffff_ffff) {
			// Looking at killer,
			//  so fade damage flash down.
			player.Fmo.Fangle = angle
			if player.Fdamagecount != 0 {
				player.Fdamagecount--
			}
		} else {
			if delta < uint32(ANG1809) {
				player.Fmo.Fangle += uint32(ANG907 / 18)
			} else {
				player.Fmo.Fangle -= uint32(ANG907 / 18)
			}
		}
	} else {
		if player.Fdamagecount != 0 {
			player.Fdamagecount--
		}
	}
	if int32(player.Fcmd.Fbuttons)&BT_USE != 0 {
		player.Fplayerstate = int32(PST_REBORN)
	}
}

// C documentation
//
//	//
//	// P_PlayerThink
//	//
func P_PlayerThink(player *player_t) {
	var newweapon weapontype_t
	// fixme: do this in the cheat code
	if player.Fcheats&int32(CF_NOCLIP) != 0 {
		player.Fmo.Fflags |= MF_NOCLIP
	} else {
		player.Fmo.Fflags &^= MF_NOCLIP
	}
	// chain saw run forward
	cmd := &player.Fcmd
	if player.Fmo.Fflags&MF_JUSTATTACKED != 0 {
		cmd.Fangleturn = 0
		cmd.Fforwardmove = int8(0xc800 / 512)
		cmd.Fsidemove = 0
		player.Fmo.Fflags &^= MF_JUSTATTACKED
	}
	if player.Fplayerstate == int32(PST_DEAD) {
		P_DeathThink(player)
		return
	}
	// Move around.
	// Reactiontime is used to prevent movement
	//  for a bit after a teleport.
	if player.Fmo.Freactiontime != 0 {
		player.Fmo.Freactiontime--
	} else {
		P_MovePlayer(player)
	}
	P_CalcHeight(player)
	if player.Fmo.Fsubsector.Fsector.Fspecial != 0 {
		P_PlayerInSpecialSector(player)
	}
	// Check for weapon change.
	// A special event has no other buttons.
	if int32(cmd.Fbuttons)&BT_SPECIAL != 0 {
		cmd.Fbuttons = 0
	}
	if int32(cmd.Fbuttons)&BT_CHANGE != 0 {
		// The actual changing of the weapon is done
		//  when the weapon psprite can do it
		//  (read: not in the middle of an attack).
		newweapon = weapontype_t(int32(cmd.Fbuttons) & BT_WEAPONMASK >> BT_WEAPONSHIFT)
		if newweapon == wp_fist && player.Fweaponowned[wp_chainsaw] != 0 && !(player.Freadyweapon == wp_chainsaw && player.Fpowers[pw_strength] != 0) {
			newweapon = wp_chainsaw
		}
		if gamemode == commercial && newweapon == wp_shotgun && player.Fweaponowned[wp_supershotgun] != 0 && player.Freadyweapon != wp_supershotgun {
			newweapon = wp_supershotgun
		}
		if player.Fweaponowned[newweapon] != 0 && newweapon != player.Freadyweapon {
			// Do not go to plasma or BFG in shareware,
			//  even if cheated.
			if newweapon != wp_plasma && newweapon != wp_bfg || gamemode != shareware {
				player.Fpendingweapon = newweapon
			}
		}
	}
	// check for use
	if int32(cmd.Fbuttons)&BT_USE != 0 {
		if player.Fusedown == 0 {
			P_UseLines(player)
			player.Fusedown = 1
		}
	} else {
		player.Fusedown = 0
	}
	// cycle psprites
	P_MovePsprites(player)
	// Counters, time dependend power ups.
	// Strength counts up to diminish fade.
	if player.Fpowers[pw_strength] != 0 {
		player.Fpowers[pw_strength]++
	}
	if player.Fpowers[pw_invulnerability] != 0 {
		player.Fpowers[pw_invulnerability]--
	}
	if player.Fpowers[pw_invisibility] != 0 {
		player.Fpowers[pw_invisibility]--
		if player.Fpowers[pw_invisibility] == 0 {
			player.Fmo.Fflags &^= MF_SHADOW
		}
	}
	if player.Fpowers[pw_infrared] != 0 {
		player.Fpowers[pw_infrared]--
	}
	if player.Fpowers[pw_ironfeet] != 0 {
		player.Fpowers[pw_ironfeet]--
	}
	if player.Fdamagecount != 0 {
		player.Fdamagecount--
	}
	if player.Fbonuscount != 0 {
		player.Fbonuscount--
	}
	// Handling colormaps.
	if player.Fpowers[pw_invulnerability] != 0 {
		if player.Fpowers[pw_invulnerability] > 4*32 || player.Fpowers[pw_invulnerability]&int32(8) != 0 {
			player.Ffixedcolormap = int32(INVERSECOLORMAP)
		} else {
			player.Ffixedcolormap = 0
		}
	} else {
		if player.Fpowers[pw_infrared] != 0 {
			if player.Fpowers[pw_infrared] > 4*32 || player.Fpowers[pw_infrared]&int32(8) != 0 {
				// almost full bright
				player.Ffixedcolormap = 1
			} else {
				player.Ffixedcolormap = 0
			}
		} else {
			player.Ffixedcolormap = 0
		}
	}
}

const NF_SUBSECTOR3 = 32768

// C documentation
//
//	//
//	// R_ClearDrawSegs
//	//
func R_ClearDrawSegs() {
	ds_index = 0
}

// C documentation
//
//	//
//	// ClipWallSegment
//	// Clips the given range of columns
//	// and includes it in the new clip list.
//	//
type cliprange_t struct {
	Ffirst int32
	Flast  int32
}

// C documentation
//
//	//
//	// R_ClipSolidWallSegment
//	// Does handle solid walls,
//	//  e.g. single sided LineDefs (middle texture)
//	//  that entirely block the view.
//	//
func R_ClipSolidWallSegment(first int32, last int32) {
	var v1 int
	var next, start int
	// Find the first range that touches the range
	//  (adjacent pixels are touching).
	for start = 0; solidsegs[start].Flast < first-1; start++ {
	}
	if first < solidsegs[start].Ffirst {
		if last < solidsegs[start].Ffirst-1 {
			// Post is entirely visible (above start),
			//  so insert a new clippost.
			R_StoreWallRange(first, last)
			next = newend
			newend++
			for next != start {
				solidsegs[next] = solidsegs[next-1]
				next--
			}
			solidsegs[next].Ffirst = first
			solidsegs[next].Flast = last
			return
		}
		// There is a fragment above *start.
		R_StoreWallRange(first, solidsegs[start].Ffirst-1)
		// Now adjust the clip size.
		solidsegs[start].Ffirst = first
	}
	// Bottom contained in start?
	if last <= solidsegs[start].Flast {
		return
	}
	next = start
	for last >= solidsegs[next+1].Ffirst-1 {
		// There is a fragment between two posts.
		R_StoreWallRange(solidsegs[next].Flast+1, solidsegs[next+1].Ffirst-1)
		next++
		if last <= solidsegs[next].Flast {
			// Bottom is contained in next.
			// Adjust the clip size.
			solidsegs[start].Flast = solidsegs[next].Flast
			goto crunch
		}
	}
	// There is a fragment after *next.
	R_StoreWallRange(solidsegs[next].Flast+int32(1), last)
	// Adjust the clip size.
	solidsegs[start].Flast = last
	// Remove start+1 to next from the clip list,
	// because start now covers their area.
	goto crunch
crunch:
	;
	if next == start {
		// Post just extended past the bottom of one post.
		return
	}
	for {
		v1 = next
		next++
		if v1 == newend {
			break
		}
		// Remove a post.
		start++
		solidsegs[start] = solidsegs[next]
	}
	newend = start + 1
}

// C documentation
//
//	//
//	// R_ClipPassWallSegment
//	// Clips the given range of columns,
//	//  but does not includes it in the clip list.
//	// Does handle windows,
//	//  e.g. LineDefs with upper and lower texture.
//	//
func R_ClipPassWallSegment(first int32, last int32) {
	var start int
	// Find the first range that touches the range
	//  (adjacent pixels are touching).
	for start = 0; solidsegs[start].Flast < first-1; start++ {
	}
	if first < solidsegs[start].Ffirst {
		if last < solidsegs[start].Ffirst-1 {
			// Post is entirely visible (above start).
			R_StoreWallRange(first, last)
			return
		}
		// There is a fragment above *start.
		R_StoreWallRange(first, solidsegs[start].Ffirst-1)
	}
	// Bottom contained in start?
	if last <= solidsegs[start].Flast {
		return
	}
	for last >= solidsegs[start+1].Ffirst-1 {
		// There is a fragment between two posts.
		R_StoreWallRange(solidsegs[start].Flast+int32(1), solidsegs[start+1].Ffirst-1)
		start++
		if last <= solidsegs[start].Flast {
			return
		}
	}
	// There is a fragment after *next.
	R_StoreWallRange(solidsegs[start].Flast+int32(1), last)
}

// C documentation
//
//	//
//	// R_ClearClipSegs
//	//
func R_ClearClipSegs() {
	solidsegs[0].Ffirst = -int32(0x7fffffff)
	solidsegs[0].Flast = -1
	solidsegs[int32(1)].Ffirst = viewwidth
	solidsegs[int32(1)].Flast = 0x7fffffff
	newend = 2
}

// C documentation
//
//	//
//	// R_AddLine
//	// Clips the given segment
//	// and adds any visible pieces to the line list.
//	//
func R_AddLine(line *seg_t) {
	var angle1, angle2, span, tspan angle_t
	var x1, x2 int32
	curline = line
	// OPTIMIZE: quickly reject orthogonal back sides.
	angle1 = R_PointToAngle(line.Fv1.Fx, line.Fv1.Fy)
	angle2 = R_PointToAngle(line.Fv2.Fx, line.Fv2.Fy)
	// Clip to view edges.
	// OPTIMIZE: make constant out of 2*clipangle (FIELDOFVIEW).
	span = angle1 - angle2
	// Back side? I.e. backface culling?
	if span >= uint32(ANG1809) {
		return
	}
	// Global angle needed by segcalc.
	rw_angle1 = int32(angle1)
	angle1 -= viewangle
	angle2 -= viewangle
	tspan = angle1 + clipangle
	if tspan > 2*clipangle {
		tspan -= 2 * clipangle
		// Totally off the left edge?
		if tspan >= span {
			return
		}
		angle1 = clipangle
	}
	tspan = clipangle - angle2
	if tspan > 2*clipangle {
		tspan -= 2 * clipangle
		// Totally off the left edge?
		if tspan >= span {
			return
		}
		angle2 = -clipangle
	}
	// The seg is in the view range,
	// but not necessarily visible.
	angle1 = (angle1 + uint32(ANG907)) >> int32(ANGLETOFINESHIFT)
	angle2 = (angle2 + uint32(ANG907)) >> int32(ANGLETOFINESHIFT)
	x1 = viewangletox[angle1]
	x2 = viewangletox[angle2]
	// Does not cross a pixel?
	if x1 == x2 {
		return
	}
	backsector = line.Fbacksector
	// Single sided line?
	if backsector == nil {
		goto clipsolid
	}
	// Closed door.
	if backsector.Fceilingheight <= frontsector.Ffloorheight || backsector.Ffloorheight >= frontsector.Fceilingheight {
		goto clipsolid
	}
	// Window.
	if backsector.Fceilingheight != frontsector.Fceilingheight || backsector.Ffloorheight != frontsector.Ffloorheight {
		goto clippass
	}
	// Reject empty lines used for triggers
	//  and special events.
	// Identical floor and ceiling on both sides,
	// identical light levels on both sides,
	// and no middle texture.
	if int32(backsector.Fceilingpic) == int32(frontsector.Fceilingpic) && int32(backsector.Ffloorpic) == int32(frontsector.Ffloorpic) && int32(backsector.Flightlevel) == int32(frontsector.Flightlevel) && int32((*side_t)(unsafe.Pointer(curline.Fsidedef)).Fmidtexture) == 0 {
		return
	}
	goto clippass
clippass:
	;
	R_ClipPassWallSegment(x1, x2-1)
	return
	goto clipsolid
clipsolid:
	;
	R_ClipSolidWallSegment(x1, x2-1)
}

func init() {
	checkcoord = [12][4]int32{
		0: {
			0: 3,
			2: 2,
			3: 1,
		},
		1: {
			0: 3,
			2: 2,
		},
		2: {
			0: 3,
			1: 1,
			2: 2,
		},
		3: {},
		4: {
			0: 2,
			2: 2,
			3: 1,
		},
		5: {},
		6: {
			0: 3,
			1: 1,
			2: 3,
		},
		7: {},
		8: {
			0: 2,
			2: 3,
			3: 1,
		},
		9: {
			0: 2,
			1: 1,
			2: 3,
			3: 1,
		},
		10: {
			0: 2,
			1: 1,
			2: 3,
		},
	}
}

func R_CheckBBox(bspcoord *box_t) (r boolean) {
	var angle1, angle2, span, tspan angle_t
	var boxpos, boxx, boxy, sx1, sx2 int32
	var start int
	var x1, x2, y1, y2 fixed_t
	// Find the corners of the box
	// that define the edges from current viewpoint.
	if viewx <= bspcoord[BOXLEFT] {
		boxx = 0
	} else {
		if viewx < bspcoord[BOXRIGHT] {
			boxx = 1
		} else {
			boxx = 2
		}
	}
	if viewy >= bspcoord[BOXTOP] {
		boxy = 0
	} else {
		if viewy > bspcoord[BOXBOTTOM] {
			boxy = 1
		} else {
			boxy = 2
		}
	}
	boxpos = boxy<<int32(2) + boxx
	if boxpos == 5 {
		return 1
	}

	x1 = bspcoord[checkcoord[boxpos][0]]
	y1 = bspcoord[checkcoord[boxpos][1]]
	x2 = bspcoord[checkcoord[boxpos][2]]
	y2 = bspcoord[checkcoord[boxpos][3]]

	// check clip list for an open space
	angle1 = R_PointToAngle(x1, y1) - viewangle
	angle2 = R_PointToAngle(x2, y2) - viewangle
	span = angle1 - angle2
	// Sitting on a line?
	if span >= uint32(ANG1809) {
		return 1
	}
	tspan = angle1 + clipangle
	if tspan > 2*clipangle {
		tspan -= 2 * clipangle
		// Totally off the left edge?
		if tspan >= span {
			return 0
		}
		angle1 = clipangle
	}
	tspan = clipangle - angle2
	if tspan > 2*clipangle {
		tspan -= 2 * clipangle
		// Totally off the left edge?
		if tspan >= span {
			return 0
		}
		angle2 = -clipangle
	}
	// Find the first clippost
	//  that touches the source post
	//  (adjacent pixels are touching).
	angle1 = (angle1 + uint32(ANG907)) >> int32(ANGLETOFINESHIFT)
	angle2 = (angle2 + uint32(ANG907)) >> int32(ANGLETOFINESHIFT)
	sx1 = viewangletox[angle1]
	sx2 = viewangletox[angle2]
	// Does not cross a pixel.
	if sx1 == sx2 {
		return 0
	}
	sx2--
	for start = 0; solidsegs[start].Flast < sx2; start++ {
	}
	if sx1 >= solidsegs[start].Ffirst && sx2 <= solidsegs[start].Flast {
		// The clippost contains the new span.
		return 0
	}
	return 1
}

// C documentation
//
//	//
//	// R_Subsector
//	// Determine floor/ceiling planes.
//	// Add sprites of things in sector.
//	// Draw one or more line segments.
//	//
func R_Subsector(num int32) {
	var count, v1 int32
	if num >= numsubsectors {
		I_Error(25894, num, numsubsectors)
	}
	sub := &subsectors[num]
	frontsector = sub.Fsector
	count = int32(sub.Fnumlines)
	if frontsector.Ffloorheight < viewz {
		floorplane = R_FindPlane(frontsector.Ffloorheight, int32(frontsector.Ffloorpic), int32(frontsector.Flightlevel))
	} else {
		floorplane = nil
	}
	if frontsector.Fceilingheight > viewz || int32(frontsector.Fceilingpic) == skyflatnum {
		ceilingplane = R_FindPlane(frontsector.Fceilingheight, int32(frontsector.Fceilingpic), int32(frontsector.Flightlevel))
	} else {
		ceilingplane = nil
	}
	R_AddSprites(frontsector)
	for i := sub.Ffirstline; ; i++ {
		v1 = count
		count--
		if v1 == 0 {
			break
		}
		line := &segs[i]
		R_AddLine(line)
	}
}

// C documentation
//
//	//
//	// RenderBSPNode
//	// Renders all subsectors below a given node,
//	//  traversing subtree recursively.
//	// Just call with BSP root.
func R_RenderBSPNode(bspnum int32) {
	var bsp *node_t
	var side int32
	// Found a subsector?
	if bspnum&int32(NF_SUBSECTOR3) != 0 {
		if bspnum == -1 {
			R_Subsector(0)
		} else {
			R_Subsector(bspnum & ^NF_SUBSECTOR3)
		}
		return
	}
	bsp = &nodes[bspnum]
	// Decide which side the view point is on.
	side = R_PointOnSide(viewx, viewy, &nodes[bspnum])
	// Recursively divide front space.
	R_RenderBSPNode(int32(bsp.Fchildren[side]))
	// Possibly divide back space.
	if R_CheckBBox(&bsp.Fbbox[side^1]) != 0 {
		R_RenderBSPNode(int32(bsp.Fchildren[side^int32(1)]))
	}
}

//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//  Refresh module, data I/O, caching, retrieval of graphics
//  by name.
//

//
// Graphics.
// DOOM graphics for walls and sprites
// is stored in vertical runs of opaque pixels (posts).
// A column is composed of zero or more posts,
// a patch or sprite is composed of zero or more columns.
//

// C documentation
//
//	//
//	// Texture definition.
//	// Each texture is composed of one or more patches,
//	// with patches being lumps stored in the WAD.
//	// The lumps are referenced by number, and patched
//	// into the rectangular texture space using origin
//	// and possibly other attributes.
//	//
type mappatch_t struct {
	Foriginx  int16
	Foriginy  int16
	Fpatch    int16
	Fstepdir  int16
	Fcolormap int16
}

// C documentation
//
//	//
//	// Texture definition.
//	// A DOOM wall texture is a list of patches
//	// which are to be combined in a predefined order.
//	//
type maptexture_t struct {
	Fname       [8]byte
	Fmasked     int32
	Fwidth      int16
	Fheight     int16
	Fobsolete   int32
	Fpatchcount int16
	Fpatches    [1]mappatch_t
}

// C documentation
//
//	// A single patch from a texture definition,
//	//  basically a rectangular area within
//	//  the texture rectangle.
type texpatch_t struct {
	Foriginx int16
	Foriginy int16
	Fpatch   int32
}

// A maptexturedef_t describes a rectangular texture,
//  which is composed of one or more mappatch_t structures
//  that arrange graphic patches.

type texture_t struct {
	Fname       [8]byte
	Fwidth      int16
	Fheight     int16
	Findex      int32
	Fnext       *texture_t
	Fpatchcount int16
	Fpatches    []texpatch_t
}

//
// MAPTEXTURE_T CACHING
// When a texture is first needed,
//  it counts the number of composite columns
//  required in the texture and allocates space
//  for a column directory and any new columns.
// The directory will simply point inside other patches
//  if there is only one patch in a given column,
//  but any columns with multiple patches
//  will have new column_ts generated.
//

// C documentation
//
//	//
//	// R_DrawColumnInCache
//	// Clip and draw a column
//	//  from a patch into a cached post.
//	//
func R_DrawColumnInCache(patch uintptr, cache uintptr, originy int32, cacheheight int32) {
	var count, position int32
	var source uintptr
	for int32((*column_t)(unsafe.Pointer(patch)).Ftopdelta) != 0xff {
		source = patch + uintptr(3)
		count = int32((*column_t)(unsafe.Pointer(patch)).Flength)
		position = originy + int32((*column_t)(unsafe.Pointer(patch)).Ftopdelta)
		if position < 0 {
			count += position
			position = 0
		}
		if position+count > cacheheight {
			count = cacheheight - position
		}
		if count > 0 {
			xmemcpy(cache+uintptr(position), source, uint64(count))
		}
		patch = patch + uintptr((*column_t)(unsafe.Pointer(patch)).Flength) + uintptr(4)
	}
}

// C documentation
//
//	//
//	// R_GenerateComposite
//	// Using the texture definition,
//	//  the composite texture is created from the patches,
//	//  and each column is cached.
//	//
func R_GenerateComposite(texnum int32) {
	var block uintptr
	var collump []int16
	var colofs []uint16
	var i, x, x1, x2 int32
	var texture *texture_t
	texture = textures[texnum]
	block = Z_Malloc(texturecompositesize[texnum], int32(PU_STATIC), texturecomposite+uintptr(texnum)*8)
	collump = texturecolumnlump[texnum]
	colofs = texturecolumnofs[texnum]
	// Composite the columns together.
	i = 0
	for {
		if i >= int32(texture.Fpatchcount) {
			break
		}
		patch := &texture.Fpatches[i]
		realpatch := W_CacheLumpNumT(patch.Fpatch, int32(PU_CACHE))
		x1 = int32(patch.Foriginx)
		x2 = x1 + int32(realpatch.Fwidth)
		if x1 < 0 {
			x = 0
		} else {
			x = x1
		}
		if x2 > int32(texture.Fwidth) {
			x2 = int32(texture.Fwidth)
		}
		for ; x < x2; x++ {
			// Column does not have multiple patches?
			if collump[x] >= 0 {
				continue
			}
			patchcol := realpatch.GetColumn(x - x1)
			R_DrawColumnInCache(patchcol, block+uintptr(colofs[x]), int32(patch.Foriginy), int32(texture.Fheight))
		}
		goto _1
	_1:
		;
		i++
	}
	// Now that the texture has been built in column cache,
	//  it is purgable from zone memory.
	Z_ChangeTag2(block, int32(PU_CACHE), __ccgo_ts(25929), 286)
}

// C documentation
//
//	//
//	// R_GenerateLookup
//	//
func R_GenerateLookup(texnum int32) {
	bp := alloc(32)
	var realpatch *patch_t
	var colofs []uint16
	var collump []int16
	var texture *texture_t
	var i, x, x1, x2 int32
	texture = textures[texnum]
	// Composited texture not created yet.
	*(*uintptr)(unsafe.Pointer(texturecomposite + uintptr(texnum)*8)) = uintptr(0)
	texturecompositesize[texnum] = 0
	collump = texturecolumnlump[texnum]
	colofs = texturecolumnofs[texnum]
	// Now count the number of columns
	//  that are covered by more than one patch.
	// Fill in the lump / offset, so columns
	//  with only a single patch are all done.
	*(*uintptr)(unsafe.Pointer(bp)) = Z_Malloc(int32(texture.Fwidth), int32(PU_STATIC), bp)
	xmemset(*(*uintptr)(unsafe.Pointer(bp)), 0, uint64(texture.Fwidth))
	i = 0
	for {
		if i >= int32(texture.Fpatchcount) {
			break
		}
		patch := &texture.Fpatches[i]
		realpatch = W_CacheLumpNumT(patch.Fpatch, int32(PU_CACHE))
		x1 = int32(patch.Foriginx)
		x2 = x1 + int32(realpatch.Fwidth)
		if x1 < 0 {
			x = 0
		} else {
			x = x1
		}
		if x2 > int32(texture.Fwidth) {
			x2 = int32(texture.Fwidth)
		}
		for {
			if x >= x2 {
				break
			}
			*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(bp)) + uintptr(x)))++
			collump[x] = int16(patch.Fpatch)
			colofs[x] = uint16(realpatch.Fcolumnofs[x-x1] + 3)
			goto _2
		_2:
			;
			x++
		}
		goto _1
	_1:
		;
		i++
	}
	x = 0
	for {
		if x >= int32(texture.Fwidth) {
			break
		}
		if *(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(bp)) + uintptr(x))) == 0 {
			fprintf_ccgo(os.Stdout, 25938, texture)
			return
		}
		// I_Error ("R_GenerateLookup: column without a patch");
		if int32(*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(bp)) + uintptr(x)))) > 1 {
			// Use the cached block.
			collump[x] = -1
			colofs[x] = uint16(texturecompositesize[texnum])
			if texturecompositesize[texnum] > 0x10000-int32(texture.Fheight) {
				I_Error(25985, texnum)
			}
			texturecompositesize[texnum] += int32(texture.Fheight)
		}
		goto _3
	_3:
		;
		x++
	}
	Z_Free(*(*uintptr)(unsafe.Pointer(bp)))
}

// C documentation
//
//	//
//	// R_GetColumn
//	//
func R_GetColumn(tex int32, col int32) (r uintptr) {
	var lump, ofs int32
	col &= texturewidthmask[tex]
	lump = int32(texturecolumnlump[tex][col])
	ofs = int32(texturecolumnofs[tex][col])
	if lump > 0 {
		return W_CacheLumpNum(lump, int32(PU_CACHE)) + uintptr(ofs)
	}
	if *(*uintptr)(unsafe.Pointer(texturecomposite + uintptr(tex)*8)) == 0 {
		R_GenerateComposite(tex)
	}
	return *(*uintptr)(unsafe.Pointer(texturecomposite + uintptr(tex)*8)) + uintptr(ofs)
}

func GenerateTextureHashTable() {
	var i, key int32
	var rover **texture_t
	textures_hashtable = make([]*texture_t, numtextures)
	// Add all textures to hash table
	i = 0
	for {
		if i >= numtextures {
			break
		}
		// Store index
		textures[i].Findex = i
		// Vanilla Doom does a linear search of the texures array
		// and stops at the first entry it finds.  If there are two
		// entries with the same name, the first one in the array
		// wins. The new entry must therefore be added at the end
		// of the hash chain, so that earlier entries win.
		key = int32(W_LumpNameHash(uintptr(unsafe.Pointer(&textures[i].Fname[0]))) % uint32(numtextures))
		rover = &textures_hashtable[key]
		for *rover != nil {
			rover = &(*rover).Fnext
		}
		// Hook into hash table
		textures[i].Fnext = nil
		*rover = textures[i]
		goto _1
	_1:
		;
		i++
	}
}

// C documentation
//
//	//
//	// R_InitTextures
//	// Initializes the texture list
//	//  with the textures from the world map.
//	//
func R_InitTextures() {
	bp := alloc(32)
	var directory, maptex, maptex2, mpatch, name_p, names, patchlookup, v2 uintptr
	var i, j, maxoff, maxoff2, nummappatches, numtextures1, numtextures2, offset, temp1, temp2, temp3, totalwidth int32
	// Load the patch names from pnames.lmp.
	(*(*[9]int8)(unsafe.Pointer(bp)))[int32(8)] = 0
	names = W_CacheLumpName(__ccgo_ts(26022), int32(PU_STATIC))
	nummappatches = *(*int32)(unsafe.Pointer(names))
	name_p = names + uintptr(4)
	patchlookup = Z_Malloc(int32(uint64(nummappatches)*4), int32(PU_STATIC), uintptr(0))
	i = 0
	for {
		if i >= nummappatches {
			break
		}
		M_StringCopy(bp, name_p+uintptr(i*int32(8)), 9)
		*(*int32)(unsafe.Pointer(patchlookup + uintptr(i)*4)) = W_CheckNumForName(bp)
		goto _1
	_1:
		;
		i++
	}
	W_ReleaseLumpName(__ccgo_ts(26022))
	// Load the map texture definitions from textures.lmp.
	// The data is contained in one or two lumps,
	//  TEXTURE1 for shareware, plus TEXTURE2 for commercial.
	v2 = W_CacheLumpName(__ccgo_ts(26029), int32(PU_STATIC))
	maptex = v2
	numtextures1 = *(*int32)(unsafe.Pointer(maptex))
	maxoff = W_LumpLength(uint32(W_GetNumForName(__ccgo_ts(26029))))
	directory = maptex + uintptr(1)*4
	if W_CheckNumForName(__ccgo_ts(26038)) != -1 {
		maptex2 = W_CacheLumpName(__ccgo_ts(26038), int32(PU_STATIC))
		numtextures2 = *(*int32)(unsafe.Pointer(maptex2))
		maxoff2 = W_LumpLength(uint32(W_GetNumForName(__ccgo_ts(26038))))
	} else {
		maptex2 = uintptr(0)
		numtextures2 = 0
		maxoff2 = 0
	}
	numtextures = numtextures1 + numtextures2
	textures = make([]*texture_t, numtextures)
	texturecolumnlump = make([][]int16, numtextures)
	texturecolumnofs = make([][]uint16, numtextures)
	texturecomposite = Z_Malloc(int32(uint64(numtextures)*8), int32(PU_STATIC), uintptr(0))
	texturecompositesize = make([]int32, numtextures)
	texturewidthmask = make([]int32, numtextures)
	textureheight = make([]fixed_t, numtextures)
	totalwidth = 0
	//	Really complex printing shit...
	temp1 = W_GetNumForName(__ccgo_ts(26047)) // P_???????
	temp2 = W_GetNumForName(__ccgo_ts(26055)) - 1
	temp3 = (temp2-temp1+int32(63))/int32(64) + (numtextures+int32(63))/int32(64)
	// If stdout is a real console, use the classic vanilla "filling
	// up the box" effect, which uses backspace to "step back" inside
	// the box.  If stdout is a file, don't draw the box.
	if I_ConsoleStdout() != 0 {
		fprintf_ccgo(os.Stdout, 26061)
		i = 0
		for {
			if i >= temp3+9 {
				break
			}
			fprintf_ccgo(os.Stdout, 26063)
			goto _3
		_3:
			;
			i++
		}
		fprintf_ccgo(os.Stdout, 26065)
		i = 0
		for {
			if i >= temp3+int32(10) {
				break
			}
			fprintf_ccgo(os.Stdout, 26067)
			goto _4
		_4:
			;
			i++
		}
	}
	i = 0
	for {
		if i >= numtextures {
			break
		}
		if i&63 == 0 {
			fprintf_ccgo(os.Stdout, 1250)
		}
		if i == numtextures1 {
			// Start looking in second texture file.
			maptex = maptex2
			maxoff = maxoff2
			directory = maptex + uintptr(1)*4
		}
		offset = *(*int32)(unsafe.Pointer(directory))
		if offset > maxoff {
			I_Error(26069, 0)
		}
		mtexture := (*maptexture_t)(unsafe.Pointer(maptex + uintptr(offset)))
		texture := &texture_t{
			Fpatches: make([]texpatch_t, mtexture.Fpatchcount),
		}
		textures[i] = texture
		texture.Fwidth = mtexture.Fwidth
		texture.Fheight = mtexture.Fheight
		texture.Fpatchcount = mtexture.Fpatchcount
		copy(texture.Fname[:], mtexture.Fname[:])
		mpatch = uintptr(unsafe.Pointer(&mtexture.Fpatches[0]))
		j = 0
		for {
			if j >= int32(texture.Fpatchcount) {
				break
			}
			patch := &texture.Fpatches[j]
			patch.Foriginx = (*mappatch_t)(unsafe.Pointer(mpatch)).Foriginx
			patch.Foriginy = (*mappatch_t)(unsafe.Pointer(mpatch)).Foriginy
			patch.Fpatch = *(*int32)(unsafe.Pointer(patchlookup + uintptr((*mappatch_t)(unsafe.Pointer(mpatch)).Fpatch)*4))
			if patch.Fpatch == -1 {
				I_Error(26107, texture)
			}
			goto _7
		_7:
			;
			j++
			mpatch += 10
		}
		texturecolumnlump[i] = make([]int16, texture.Fwidth)
		texturecolumnofs[i] = make([]uint16, texture.Fwidth)
		j = 1
		for j*int32(2) <= int32(texture.Fwidth) {
			j <<= 1
		}
		texturewidthmask[i] = j - 1
		textureheight[i] = int32(texture.Fheight) << int32(FRACBITS)
		totalwidth += int32(texture.Fwidth)
		goto _5
	_5:
		;
		i++
		directory += 4
	}
	Z_Free(patchlookup)
	W_ReleaseLumpName(__ccgo_ts(26029))
	if maptex2 != 0 {
		W_ReleaseLumpName(__ccgo_ts(26038))
	}
	// Precalculate whatever possible.
	i = 0
	for {
		if i >= numtextures {
			break
		}
		R_GenerateLookup(i)
		goto _8
	_8:
		;
		i++
	}
	// Create translation table for global animation.
	texturetranslation = make([]int32, numtextures+1)
	i = 0
	for {
		if i >= numtextures {
			break
		}
		texturetranslation[i] = i
		goto _9
	_9:
		;
		i++
	}
	GenerateTextureHashTable()
}

// C documentation
//
//	//
//	// R_InitFlats
//	//
func R_InitFlats() {
	var i int32
	firstflat = W_GetNumForName(__ccgo_ts(26151)) + 1
	lastflat = W_GetNumForName(__ccgo_ts(26159)) - 1
	numflats = lastflat - firstflat + 1
	// Create translation table for global animation.
	flattranslation = make([]int32, numflats+1)
	i = 0
	for {
		if i >= numflats {
			break
		}
		flattranslation[i] = i
		goto _1
	_1:
		;
		i++
	}
}

// C documentation
//
//	//
//	// R_InitSpriteLumps
//	// Finds the width and hoffset of all sprites in the wad,
//	//  so the sprite does not need to be cached completely
//	//  just for having the header info ready during rendering.
//	//
func R_InitSpriteLumps() {
	var i int32
	firstspritelump = W_GetNumForName(__ccgo_ts(26047)) + 1
	lastspritelump = W_GetNumForName(__ccgo_ts(26055)) - 1
	numspritelumps = lastspritelump - firstspritelump + 1
	spritewidth = make([]fixed_t, numspritelumps)
	spriteoffset = make([]fixed_t, numspritelumps)
	spritetopoffset = make([]fixed_t, numspritelumps)
	i = 0
	for {
		if i >= numspritelumps {
			break
		}
		if i&63 == 0 {
			fprintf_ccgo(os.Stdout, 1250)
		}
		patch := W_CacheLumpNumT[*patch_t](firstspritelump+i, int32(PU_CACHE))
		spritewidth[i] = int32(patch.Fwidth) << int32(FRACBITS)
		spriteoffset[i] = int32(patch.Fleftoffset) << int32(FRACBITS)
		spritetopoffset[i] = int32(patch.Ftopoffset) << int32(FRACBITS)
		goto _1
	_1:
		;
		i++
	}
}

// C documentation
//
//	//
//	// R_InitColormaps
//	//
func R_InitColormaps() {
	var lump int32
	var size int32
	var data uintptr
	// Load in the light tables,
	//  256 byte align tables.
	lump = W_GetNumForName(__ccgo_ts(26165))
	size = W_LumpLength(uint32(lump))
	data = W_CacheLumpNum(lump, int32(PU_STATIC))
	colormaps = unsafe.Slice((*lighttable_t)(unsafe.Pointer(data)), size)
}

// C documentation
//
//	//
//	// R_InitData
//	// Locates all the lumps
//	//  that will be used by all views
//	// Must be called after W_Init.
//	//
func R_InitData() {
	R_InitTextures()
	fprintf_ccgo(os.Stdout, 1250)
	R_InitFlats()
	fprintf_ccgo(os.Stdout, 1250)
	R_InitSpriteLumps()
	fprintf_ccgo(os.Stdout, 1250)
	R_InitColormaps()
}

// C documentation
//
//	//
//	// R_FlatNumForName
//	// Retrieval, get a flat number for a flat name.
//	//
func R_FlatNumForName(name uintptr) (r int32) {
	bp := alloc(32)
	var i int32
	i = W_CheckNumForName(name)
	if i == -1 {
		(*(*[9]int8)(unsafe.Pointer(bp)))[int32(8)] = 0
		xmemcpy(bp, name, 8)
		I_Error(26174, bp)
	}
	return i - firstflat
}

// C documentation
//
//	//
//	// R_CheckTextureNumForName
//	// Check whether texture is available.
//	// Filter out NoTexture indicator.
//	//
func R_CheckTextureNumForName(name uintptr) (r int32) {
	var key int32
	var texture *texture_t
	// "NoTexture" marker.
	if int32(*(*int8)(unsafe.Pointer(name))) == int32('-') {
		return 0
	}
	key = int32(W_LumpNameHash(name) % uint32(numtextures))
	texture = textures_hashtable[key]
	for texture != nil {
		if strings.EqualFold(gostring_bytes(texture.Fname[:]), gostring_n(name, 8)) {
			return texture.Findex
		}
		texture = texture.Fnext
	}
	return -1
}

// C documentation
//
//	//
//	// R_TextureNumForName
//	// Calls R_CheckTextureNumForName,
//	//  aborts with error message.
//	//
func R_TextureNumForName(name uintptr) (r int32) {
	var i int32
	i = R_CheckTextureNumForName(name)
	if i == -1 {
		I_Error(26205, name)
	}
	return i
}

func R_PrecacheLevel() {
	var flatpresent, spritepresent, texturepresent uintptr
	var texture *texture_t
	var sf *spriteframe_t
	var th *thinker_t
	var i, j, k, lump int32
	if demoplayback != 0 {
		return
	}
	// Precache flats.
	flatpresent = Z_Malloc(numflats, int32(PU_STATIC), uintptr(0))
	xmemset(flatpresent, 0, uint64(numflats))
	i = 0
	for {
		if i >= numsectors {
			break
		}
		sector := &sectors[i]
		*(*int8)(unsafe.Pointer(flatpresent + uintptr(sector.Ffloorpic))) = 1
		*(*int8)(unsafe.Pointer(flatpresent + uintptr(sector.Fceilingpic))) = 1
		goto _1
	_1:
		;
		i++
	}
	i = 0
	for {
		if i >= numflats {
			break
		}
		if *(*int8)(unsafe.Pointer(flatpresent + uintptr(i))) != 0 {
			lump = firstflat + i
			W_CacheLumpNum(lump, int32(PU_CACHE))
		}
		goto _2
	_2:
		;
		i++
	}
	Z_Free(flatpresent)
	// Precache textures.
	texturepresent = Z_Malloc(numtextures, int32(PU_STATIC), uintptr(0))
	xmemset(texturepresent, 0, uint64(numtextures))
	i = 0
	for {
		if i >= numsides {
			break
		}
		*(*int8)(unsafe.Pointer(texturepresent + uintptr(sides[i].Ftoptexture))) = 1
		*(*int8)(unsafe.Pointer(texturepresent + uintptr(sides[i].Fmidtexture))) = 1
		*(*int8)(unsafe.Pointer(texturepresent + uintptr(sides[i].Fbottomtexture))) = 1
		goto _3
	_3:
		;
		i++
	}
	// Sky texture is always present.
	// Note that F_SKY1 is the name used to
	//  indicate a sky floor/ceiling as a flat,
	//  while the sky texture is stored like
	//  a wall texture, with an episode dependend
	//  name.
	*(*int8)(unsafe.Pointer(texturepresent + uintptr(skytexture))) = 1
	i = 0
	for {
		if i >= numtextures {
			break
		}
		if *(*int8)(unsafe.Pointer(texturepresent + uintptr(i))) == 0 {
			goto _4
		}
		texture = textures[i]
		j = 0
		for {
			if j >= int32(texture.Fpatchcount) {
				break
			}
			lump = texture.Fpatches[j].Fpatch
			W_CacheLumpNum(lump, int32(PU_CACHE))
			goto _5
		_5:
			;
			j++
		}
		goto _4
	_4:
		;
		i++
	}
	Z_Free(texturepresent)
	// Precache sprites.
	spritepresent = Z_Malloc(numsprites, int32(PU_STATIC), uintptr(0))
	xmemset(spritepresent, 0, uint64(numsprites))
	th = thinkercap.Fnext
	for {
		if th == &thinkercap {
			break
		}
		if th.Ffunction.Facv == __ccgo_fp(P_MobjThinker) {
			*(*int8)(unsafe.Pointer(spritepresent + uintptr((*mobj_t)(unsafe.Pointer(th)).Fsprite))) = 1
		}
		goto _6
	_6:
		;
		th = th.Fnext
	}
	i = 0
	for {
		if i >= numsprites {
			break
		}
		if *(*int8)(unsafe.Pointer(spritepresent + uintptr(i))) == 0 {
			goto _7
		}
		j = 0
		for {
			if j >= sprites[i].Fnumframes {
				break
			}
			sf = &sprites[i].Fspriteframes[j]
			k = 0
			for {
				if k >= 8 {
					break
				}
				lump = firstspritelump + int32(sf.Flump[k])
				W_CacheLumpNum(lump, int32(PU_CACHE))
				goto _9
			_9:
				;
				k++
			}
			goto _8
		_8:
			;
			j++
		}
		goto _7
	_7:
		;
		i++
	}
	Z_Free(spritepresent)
}

const FUZZTABLE = 50
const SBARHEIGHT = 32

// Backing buffer containing the bezel drawn around the screen and
// surrounding background.

var background_buffer = uintptr(0)

// C documentation
//
//	//
//	// A column is a vertical slice/span from a wall texture that,
//	//  given the DOOM style restrictions on the view orientation,
//	//  will always have constant z depth.
//	// Thus a special case loop for very fast rendering can
//	//  be used. It has also been used with Wolfenstein 3D.
//	//
func R_DrawColumn() {
	var count, v1 int32
	var dest uintptr
	var frac, fracstep fixed_t
	count = dc_yh - dc_yl
	// Zero length, column does not exceed a pixel.
	if count < 0 {
		return
	}
	if uint32(dc_x) >= SCREENWIDTH || dc_yl < 0 || dc_yh >= SCREENHEIGHT {
		I_Error(26239, dc_yl, dc_yh, dc_x)
	}
	// Framebuffer destination address.
	// Use ylookup LUT to avoid multiply with ScreenWidth.
	// Use columnofs LUT for subwindows?
	dest = ylookup[dc_yl] + uintptr(columnofs[dc_x])
	// Determine scaling,
	//  which is the only mapping to be done.
	fracstep = dc_iscale
	frac = dc_texturemid + (dc_yl-centery)*fracstep
	// Inner loop that does the actual texture mapping,
	//  e.g. a DDA-lile scaling.
	// This is as fast as it gets.
	for {
		// Re-map color indices from wall texture column
		//  using a lighting/special effects LUT.
		*(*uint8)(unsafe.Pointer(dest)) = dc_colormap[*(*uint8)(unsafe.Pointer(dc_source + uintptr(frac>>FRACBITS&int32(127))))]
		dest += SCREENWIDTH
		frac += fracstep
		goto _2
	_2:
		;
		v1 = count
		count--
		if v1 == 0 {
			break
		}
	}
}

// UNUSED.
// Loop unrolled.

func R_DrawColumnLow() {
	var count, x, v1 int32
	var dest, dest2 uintptr
	var frac, fracstep fixed_t
	var v3 uint8
	count = dc_yh - dc_yl
	// Zero length.
	if count < 0 {
		return
	}
	if uint32(dc_x) >= SCREENWIDTH || dc_yl < 0 || dc_yh >= SCREENHEIGHT {
		I_Error(26239, dc_yl, dc_yh, dc_x)
	}
	//	dccount++;
	// Blocky mode, need to multiply by 2.
	x = dc_x << 1
	dest = ylookup[dc_yl] + uintptr(columnofs[x])
	dest2 = ylookup[dc_yl] + uintptr(columnofs[x+int32(1)])
	fracstep = dc_iscale
	frac = dc_texturemid + (dc_yl-centery)*fracstep
	for {
		// Hack. Does not work corretly.
		v3 = dc_colormap[*(*uint8)(unsafe.Pointer(dc_source + uintptr(frac>>FRACBITS&int32(127))))]
		*(*uint8)(unsafe.Pointer(dest)) = v3
		*(*uint8)(unsafe.Pointer(dest2)) = v3
		dest += SCREENWIDTH
		dest2 += SCREENWIDTH
		frac += fracstep
		goto _2
	_2:
		;
		v1 = count
		count--
		if v1 == 0 {
			break
		}
	}
}

func init() {
	fuzzoffset = [50]int32{
		0:  SCREENWIDTH,
		1:  -SCREENWIDTH,
		2:  SCREENWIDTH,
		3:  -SCREENWIDTH,
		4:  SCREENWIDTH,
		5:  SCREENWIDTH,
		6:  -SCREENWIDTH,
		7:  SCREENWIDTH,
		8:  SCREENWIDTH,
		9:  -SCREENWIDTH,
		10: SCREENWIDTH,
		11: SCREENWIDTH,
		12: SCREENWIDTH,
		13: -SCREENWIDTH,
		14: SCREENWIDTH,
		15: SCREENWIDTH,
		16: SCREENWIDTH,
		17: -SCREENWIDTH,
		18: -SCREENWIDTH,
		19: -SCREENWIDTH,
		20: -SCREENWIDTH,
		21: SCREENWIDTH,
		22: -SCREENWIDTH,
		23: -SCREENWIDTH,
		24: SCREENWIDTH,
		25: SCREENWIDTH,
		26: SCREENWIDTH,
		27: SCREENWIDTH,
		28: -SCREENWIDTH,
		29: SCREENWIDTH,
		30: -SCREENWIDTH,
		31: SCREENWIDTH,
		32: SCREENWIDTH,
		33: -SCREENWIDTH,
		34: -SCREENWIDTH,
		35: SCREENWIDTH,
		36: SCREENWIDTH,
		37: -SCREENWIDTH,
		38: -SCREENWIDTH,
		39: -SCREENWIDTH,
		40: -SCREENWIDTH,
		41: SCREENWIDTH,
		42: SCREENWIDTH,
		43: SCREENWIDTH,
		44: SCREENWIDTH,
		45: -SCREENWIDTH,
		46: SCREENWIDTH,
		47: SCREENWIDTH,
		48: -SCREENWIDTH,
		49: SCREENWIDTH,
	}
}

// C documentation
//
//	//
//	// Framebuffer postprocessing.
//	// Creates a fuzzy image by copying pixels
//	//  from adjacent ones to left and right.
//	// Used with an all black colormap, this
//	//  could create the SHADOW effect,
//	//  i.e. spectres and invisible players.
//	//
func R_DrawFuzzColumn() {
	var count, v1, v3 int32
	var dest uintptr
	var frac, fracstep fixed_t
	// Adjust borders. Low...
	if dc_yl == 0 {
		dc_yl = 1
	}
	// .. and high.
	if dc_yh == viewheight-1 {
		dc_yh = viewheight - 2
	}
	count = dc_yh - dc_yl
	// Zero length.
	if count < 0 {
		return
	}
	if uint32(dc_x) >= SCREENWIDTH || dc_yl < 0 || dc_yh >= SCREENHEIGHT {
		I_Error(26268, dc_yl, dc_yh, dc_x)
	}
	dest = ylookup[dc_yl] + uintptr(columnofs[dc_x])
	// Looks familiar.
	fracstep = dc_iscale
	frac = dc_texturemid + (dc_yl-centery)*fracstep
	// Looks like an attempt at dithering,
	//  using the colormap #6 (of 0-31, a bit
	//  brighter than average).
	for {
		// Lookup framebuffer, and retrieve
		//  a pixel that is either one column
		//  left or right of the current one.
		// Add index from colormap to index.
		*(*uint8)(unsafe.Pointer(dest)) = colormaps[6*256+int32(*(*uint8)(unsafe.Pointer(dest + uintptr(fuzzoffset[fuzzpos]))))]
		// Clamp table lookup index.
		fuzzpos++
		v3 = fuzzpos
		if v3 == int32(FUZZTABLE) {
			fuzzpos = 0
		}
		dest += SCREENWIDTH
		frac += fracstep
		goto _2
	_2:
		;
		v1 = count
		count--
		if v1 == 0 {
			break
		}
	}
}

// low detail mode version
func R_DrawFuzzColumnLow() {
	var count, x, v1, v3 int32
	var dest, dest2 uintptr
	var frac, fracstep fixed_t
	// Adjust borders. Low...
	if dc_yl == 0 {
		dc_yl = 1
	}
	// .. and high.
	if dc_yh == viewheight-1 {
		dc_yh = viewheight - 2
	}
	count = dc_yh - dc_yl
	// Zero length.
	if count < 0 {
		return
	}
	// low detail mode, need to multiply by 2
	x = dc_x << 1
	if uint32(x) >= SCREENWIDTH || dc_yl < 0 || dc_yh >= SCREENHEIGHT {
		I_Error(26268, dc_yl, dc_yh, dc_x)
	}
	dest = ylookup[dc_yl] + uintptr(columnofs[x])
	dest2 = ylookup[dc_yl] + uintptr(columnofs[x+int32(1)])
	// Looks familiar.
	fracstep = dc_iscale
	frac = dc_texturemid + (dc_yl-centery)*fracstep
	// Looks like an attempt at dithering,
	//  using the colormap #6 (of 0-31, a bit
	//  brighter than average).
	for {
		// Lookup framebuffer, and retrieve
		//  a pixel that is either one column
		//  left or right of the current one.
		// Add index from colormap to index.
		*(*uint8)(unsafe.Pointer(dest)) = colormaps[6*256+int32(*(*uint8)(unsafe.Pointer(dest + uintptr(fuzzoffset[fuzzpos]))))]
		*(*uint8)(unsafe.Pointer(dest2)) = colormaps[6*256+int32(*(*uint8)(unsafe.Pointer(dest2 + uintptr(fuzzoffset[fuzzpos]))))]
		// Clamp table lookup index.
		fuzzpos++
		v3 = fuzzpos
		if v3 == int32(FUZZTABLE) {
			fuzzpos = 0
		}
		dest += SCREENWIDTH
		dest2 += SCREENWIDTH
		frac += fracstep
		goto _2
	_2:
		;
		v1 = count
		count--
		if v1 == 0 {
			break
		}
	}
}

func R_DrawTranslatedColumn() {
	var count, v1 int32
	var dest uintptr
	var frac, fracstep fixed_t
	count = dc_yh - dc_yl
	if count < 0 {
		return
	}
	if uint32(dc_x) >= SCREENWIDTH || dc_yl < 0 || dc_yh >= SCREENHEIGHT {
		I_Error(26239, dc_yl, dc_yh, dc_x)
	}
	dest = ylookup[dc_yl] + uintptr(columnofs[dc_x])
	// Looks familiar.
	fracstep = dc_iscale
	frac = dc_texturemid + (dc_yl-centery)*fracstep
	// Here we do an additional index re-mapping.
	for {
		// Translation tables are used
		//  to map certain colorramps to other ones,
		//  used with PLAY sprites.
		// Thus the "green" ramp of the player 0 sprite
		//  is mapped to gray, red, black/indigo.
		*(*uint8)(unsafe.Pointer(dest)) = dc_colormap[dc_translation[*(*uint8)(unsafe.Pointer(dc_source + uintptr(frac>>int32(FRACBITS))))]]
		dest += SCREENWIDTH
		frac += fracstep
		goto _2
	_2:
		;
		v1 = count
		count--
		if v1 == 0 {
			break
		}
	}
}

func R_DrawTranslatedColumnLow() {
	var count, x, v1 int32
	var dest, dest2 uintptr
	var frac, fracstep fixed_t
	count = dc_yh - dc_yl
	if count < 0 {
		return
	}
	// low detail, need to scale by 2
	x = dc_x << 1
	if uint32(x) >= SCREENWIDTH || dc_yl < 0 || dc_yh >= SCREENHEIGHT {
		I_Error(26239, dc_yl, dc_yh, x)
	}
	dest = ylookup[dc_yl] + uintptr(columnofs[x])
	dest2 = ylookup[dc_yl] + uintptr(columnofs[x+int32(1)])
	// Looks familiar.
	fracstep = dc_iscale
	frac = dc_texturemid + (dc_yl-centery)*fracstep
	// Here we do an additional index re-mapping.
	for {
		// Translation tables are used
		//  to map certain colorramps to other ones,
		//  used with PLAY sprites.
		// Thus the "green" ramp of the player 0 sprite
		//  is mapped to gray, red, black/indigo.
		*(*uint8)(unsafe.Pointer(dest)) = dc_colormap[dc_translation[*(*uint8)(unsafe.Pointer(dc_source + uintptr(frac>>int32(FRACBITS))))]]
		*(*uint8)(unsafe.Pointer(dest2)) = dc_colormap[dc_translation[*(*uint8)(unsafe.Pointer(dc_source + uintptr(frac>>int32(FRACBITS))))]]
		dest += SCREENWIDTH
		dest2 += SCREENWIDTH
		frac += fracstep
		goto _2
	_2:
		;
		v1 = count
		count--
		if v1 == 0 {
			break
		}
	}
}

// C documentation
//
//	//
//	// R_InitTranslationTables
//	// Creates the translation tables to map
//	//  the green color ramp to gray, brown, red.
//	// Assumes a given structure of the PLAYPAL.
//	// Could be read from a lump instead.
//	//
func R_InitTranslationTables() {
	var i int32
	translationtables = make([]byte, 256*3)
	// translate just the 16 green colors
	i = 0
	for {
		if i >= 256 {
			break
		}
		if i >= 0x70 && i <= 0x7f {
			// map green ramp to gray, brown, red
			translationtables[i] = uint8(0x60 + i&int32(0xf))
			translationtables[i+256] = uint8(0x40 + i&int32(0xf))
			translationtables[i+512] = uint8(0x20 + i&int32(0xf))
		} else {
			// Keep all other colors as is.
			translationtables[i+512] = uint8(i)
			translationtables[i+256] = uint8(i)
			translationtables[i] = uint8(i)
		}
		goto _1
	_1:
		;
		i++
	}
}

// C documentation
//
//	//
//	// Draws the actual span.
func R_DrawSpan() {
	var count, spot, v1 int32
	var dest, v3 uintptr
	var position, step, xtemp, ytemp uint32
	if ds_x2 < ds_x1 || ds_x1 < 0 || ds_x2 >= SCREENWIDTH || uint32(ds_y) > SCREENHEIGHT {
		I_Error(26301, ds_x1, ds_x2, ds_y)
	}
	//	dscount++;
	// Pack position and step variables into a single 32-bit integer,
	// with x in the top 16 bits and y in the bottom 16 bits.  For
	// each 16-bit part, the top 6 bits are the integer part and the
	// bottom 10 bits are the fractional part of the pixel position.
	position = uint32(ds_xfrac<<10)&0xffff0000 | uint32(ds_yfrac>>6&0x0000ffff)
	step = uint32(ds_xstep<<10)&0xffff0000 | uint32(ds_ystep>>6&0x0000ffff)
	dest = ylookup[ds_y] + uintptr(columnofs[ds_x1])
	// We do not check for zero spans here?
	count = ds_x2 - ds_x1
	for {
		// Calculate current texture index in u,v.
		ytemp = position >> 4 & 0x0fc0
		xtemp = position >> 26
		spot = int32(xtemp | ytemp)
		// Lookup pixel from flat texture tile,
		//  re-index using light/colormap.
		v3 = dest
		dest++
		*(*uint8)(unsafe.Pointer(v3)) = ds_colormap[*(*uint8)(unsafe.Pointer(ds_source + uintptr(spot)))]
		position += step
		goto _2
	_2:
		;
		v1 = count
		count--
		if v1 == 0 {
			break
		}
	}
}

// UNUSED.
// Loop unrolled by 4.

// C documentation
//
//	//
//	// Again..
//	//
func R_DrawSpanLow() {
	var count, spot, v1 int32
	var dest, v3, v4 uintptr
	var position, step, xtemp, ytemp uint32
	if ds_x2 < ds_x1 || ds_x1 < 0 || ds_x2 >= SCREENWIDTH || uint32(ds_y) > SCREENHEIGHT {
		I_Error(26301, ds_x1, ds_x2, ds_y)
	}
	//	dscount++;
	position = uint32(ds_xfrac<<10)&0xffff0000 | uint32(ds_yfrac>>6&0x0000ffff)
	step = uint32(ds_xstep<<10)&0xffff0000 | uint32(ds_ystep>>6&0x0000ffff)
	count = ds_x2 - ds_x1
	// Blocky mode, need to multiply by 2.
	ds_x1 <<= 1
	ds_x2 <<= 1
	dest = ylookup[ds_y] + uintptr(columnofs[ds_x1])
	for {
		// Calculate current texture index in u,v.
		ytemp = position >> 4 & 0x0fc0
		xtemp = position >> 26
		spot = int32(xtemp | ytemp)
		// Lowres/blocky mode does it twice,
		//  while scale is adjusted appropriately.
		v3 = dest
		dest++
		*(*uint8)(unsafe.Pointer(v3)) = ds_colormap[*(*uint8)(unsafe.Pointer(ds_source + uintptr(spot)))]
		v4 = dest
		dest++
		*(*uint8)(unsafe.Pointer(v4)) = ds_colormap[*(*uint8)(unsafe.Pointer(ds_source + uintptr(spot)))]
		position += step
		goto _2
	_2:
		;
		v1 = count
		count--
		if v1 == 0 {
			break
		}
	}
}

// C documentation
//
//	//
//	// R_InitBuffer
//	// Creats lookup tables that avoid
//	//  multiplies and other hazzles
//	//  for getting the framebuffer address
//	//  of a pixel to draw.
//	//
func R_InitBuffer(width int32, height int32) {
	var i int32
	// Handle resize,
	//  e.g. smaller view windows
	//  with border and/or status bar.
	viewwindowx = (SCREENWIDTH - width) >> 1
	// Column offset. For windows.
	i = 0
	for {
		if i >= width {
			break
		}
		columnofs[i] = viewwindowx + i
		goto _1
	_1:
		;
		i++
	}
	// Samw with base row offset.
	if width == SCREENWIDTH {
		viewwindowy = 0
	} else {
		viewwindowy = (SCREENHEIGHT - SBARHEIGHT - height) >> 1
	}
	// Preclaculate all row offsets.
	i = 0
	for {
		if i >= height {
			break
		}
		ylookup[i] = I_VideoBuffer + uintptr((i+viewwindowy)*SCREENWIDTH)
		goto _2
	_2:
		;
		i++
	}
}

// C documentation
//
//	//
//	// R_FillBackScreen
//	// Fills the back screen with a pattern
//	//  for variable screen sizes
//	// Also draws a beveled edge.
//	//
func R_FillBackScreen() {
	var dest, name, name1, name2, src uintptr
	var patch *patch_t
	var x, y int32
	// DOOM border patch.
	name1 = __ccgo_ts(26328)
	// DOOM II border patch.
	name2 = __ccgo_ts(26337)
	// If we are running full screen, there is no need to do any of this,
	// and the background buffer can be freed if it was previously in use.
	if scaledviewwidth == SCREENWIDTH {
		if background_buffer != uintptr(0) {
			Z_Free(background_buffer)
			background_buffer = uintptr(0)
		}
		return
	}
	// Allocate the background buffer if necessary
	if background_buffer == uintptr(0) {
		background_buffer = Z_Malloc(SCREENWIDTH*(SCREENHEIGHT-SBARHEIGHT), int32(PU_STATIC), uintptr(0))
	}
	if gamemode == commercial {
		name = name2
	} else {
		name = name1
	}
	src = W_CacheLumpName(name, int32(PU_CACHE))
	dest = background_buffer
	y = 0
	for {
		if y >= SCREENHEIGHT-SBARHEIGHT {
			break
		}
		x = 0
		for {
			if x >= SCREENWIDTH/64 {
				break
			}
			xmemcpy(dest, src+uintptr(y&63<<6), 64)
			dest += uintptr(64)
			goto _2
		_2:
			;
			x++
		}
		if SCREENWIDTH&63 != 0 {
			xmemcpy(dest, src+uintptr(y&63<<6), SCREENWIDTH&63)
			dest += SCREENWIDTH & 63
		}
		goto _1
	_1:
		;
		y++
	}
	// Draw screen and bezel; this is done to a separate screen buffer.
	V_UseBuffer(background_buffer)
	patch = W_CacheLumpNameT(__ccgo_ts(26345), int32(PU_CACHE))
	x = 0
	for {
		if x >= scaledviewwidth {
			break
		}
		V_DrawPatch(viewwindowx+x, viewwindowy-int32(8), patch)
		goto _3
	_3:
		;
		x += 8
	}
	patch = W_CacheLumpNameT(__ccgo_ts(26352), int32(PU_CACHE))
	x = 0
	for {
		if x >= scaledviewwidth {
			break
		}
		V_DrawPatch(viewwindowx+x, viewwindowy+viewheight, patch)
		goto _4
	_4:
		;
		x += 8
	}
	patch = W_CacheLumpNameT(__ccgo_ts(26359), int32(PU_CACHE))
	y = 0
	for {
		if y >= viewheight {
			break
		}
		V_DrawPatch(viewwindowx-int32(8), viewwindowy+y, patch)
		goto _5
	_5:
		;
		y += 8
	}
	patch = W_CacheLumpNameT(__ccgo_ts(26366), int32(PU_CACHE))
	y = 0
	for {
		if y >= viewheight {
			break
		}
		V_DrawPatch(viewwindowx+scaledviewwidth, viewwindowy+y, patch)
		goto _6
	_6:
		;
		y += 8
	}
	// Draw beveled edge.
	V_DrawPatch(viewwindowx-int32(8), viewwindowy-int32(8), W_CacheLumpNameT(__ccgo_ts(26373), int32(PU_CACHE)))
	V_DrawPatch(viewwindowx+scaledviewwidth, viewwindowy-int32(8), W_CacheLumpNameT(__ccgo_ts(26381), int32(PU_CACHE)))
	V_DrawPatch(viewwindowx-int32(8), viewwindowy+viewheight, W_CacheLumpNameT(__ccgo_ts(26389), int32(PU_CACHE)))
	V_DrawPatch(viewwindowx+scaledviewwidth, viewwindowy+viewheight, W_CacheLumpNameT(__ccgo_ts(26397), int32(PU_CACHE)))
	V_RestoreBuffer()
}

// C documentation
//
//	//
//	// Copy a screen buffer.
//	//
func R_VideoErase(ofs uint32, count int32) {
	// LFB copy.
	// This might not be a good idea if memcpy
	//  is not optiomal, e.g. byte by byte on
	//  a 32bit CPU, as GNU GCC/Linux libc did
	//  at one point.
	if background_buffer != uintptr(0) {
		xmemcpy(I_VideoBuffer+uintptr(ofs), background_buffer+uintptr(ofs), uint64(count))
	}
}

// C documentation
//
//	//
//	// R_DrawViewBorder
//	// Draws the border around the view
//	//  for different size windows?
//	//
func R_DrawViewBorder() {
	var i, ofs, side, top int32
	if scaledviewwidth == SCREENWIDTH {
		return
	}
	top = (SCREENHEIGHT - SBARHEIGHT - viewheight) / 2
	side = (SCREENWIDTH - scaledviewwidth) / 2
	// copy top and one line of left side
	R_VideoErase(0, top*SCREENWIDTH+side)
	// copy one line of right side and bottom
	ofs = (viewheight+top)*SCREENWIDTH - side
	R_VideoErase(uint32(ofs), top*SCREENWIDTH+side)
	// copy sides using wraparound
	ofs = top*SCREENWIDTH + SCREENWIDTH - side
	side <<= 1
	i = 1
	for {
		if i >= viewheight {
			break
		}
		R_VideoErase(uint32(ofs), side)
		ofs += SCREENWIDTH
		goto _1
	_1:
		;
		i++
	}
	// ?
	V_MarkRect(0, 0, SCREENWIDTH, SCREENHEIGHT-SBARHEIGHT)
}

const ANG18011 = 2147483648
const ANG2705 = 3221225472
const ANG909 = 1073741824
const DISTMAP = 2
const FIELDOFVIEW = 2048
const NF_SUBSECTOR5 = 32768

func init() {
	validcount = 1
}

// C documentation
//
//	//
//	// R_PointOnSide
//	// Traverse BSP (sub) tree,
//	//  check point against partition plane.
//	// Returns side 0 (front) or 1 (back).
//	//
func R_PointOnSide(x fixed_t, y fixed_t, node *node_t) (r int32) {
	var dx, dy, left, right fixed_t
	if node.Fdx == 0 {
		if x <= node.Fx {
			return boolint32(node.Fdy > 0)
		}
		return boolint32(node.Fdy < 0)
	}
	if node.Fdy == 0 {
		if y <= node.Fy {
			return boolint32(node.Fdx < 0)
		}
		return boolint32(node.Fdx > 0)
	}
	dx = x - node.Fx
	dy = y - node.Fy
	// Try to quickly decide by looking at sign bits.
	if uint32(node.Fdy^node.Fdx^dx^dy)&0x80000000 != 0 {
		if uint32(node.Fdy^dx)&0x80000000 != 0 {
			// (left is negative)
			return 1
		}
		return 0
	}
	left = FixedMul(node.Fdy>>int32(FRACBITS), dx)
	right = FixedMul(dy, node.Fdx>>int32(FRACBITS))
	if right < left {
		// front side
		return 0
	}
	// back side
	return 1
}

func R_PointOnSegSide(x fixed_t, y fixed_t, line *seg_t) (r int32) {
	var dx, dy, ldx, ldy, left, lx, ly, right fixed_t
	lx = line.Fv1.Fx
	ly = line.Fv1.Fy
	ldx = line.Fv2.Fx - lx
	ldy = line.Fv2.Fy - ly
	if ldx == 0 {
		if x <= lx {
			return boolint32(ldy > 0)
		}
		return boolint32(ldy < 0)
	}
	if ldy == 0 {
		if y <= ly {
			return boolint32(ldx < 0)
		}
		return boolint32(ldx > 0)
	}
	dx = x - lx
	dy = y - ly
	// Try to quickly decide by looking at sign bits.
	if uint32(ldy^ldx^dx^dy)&0x80000000 != 0 {
		if uint32(ldy^dx)&0x80000000 != 0 {
			// (left is negative)
			return 1
		}
		return 0
	}
	left = FixedMul(ldy>>int32(FRACBITS), dx)
	right = FixedMul(dy, ldx>>int32(FRACBITS))
	if right < left {
		// front side
		return 0
	}
	// back side
	return 1
}

//
// R_PointToAngle
// To get a global angle from cartesian coordinates,
//  the coordinates are flipped until they are in
//  the first octant of the coordinate system, then
//  the y (<=x) is scaled and divided by x to get a
//  tangent (slope) value which is looked up in the
//  tantoangle[] table.

//

func R_PointToAngle(x fixed_t, y fixed_t) (r angle_t) {
	x -= viewx
	y -= viewy
	if x == 0 && y == 0 {
		return 0
	}
	if x >= 0 {
		// x >=0
		if y >= 0 {
			// y>= 0
			if x > y {
				// octant 0
				return tantoangle[SlopeDiv(uint32(y), uint32(x))]
			} else {
				// octant 1
				return uint32(ANG909-1) - tantoangle[SlopeDiv(uint32(x), uint32(y))]
			}
		} else {
			// y<0
			y = -y
			if x > y {
				// octant 8
				return -tantoangle[SlopeDiv(uint32(y), uint32(x))]
			} else {
				// octant 7
				return uint32(ANG2705) + tantoangle[SlopeDiv(uint32(x), uint32(y))]
			}
		}
	} else {
		// x<0
		x = -x
		if y >= 0 {
			// y>= 0
			if x > y {
				// octant 3
				return uint32(ANG18011) - 1 - tantoangle[SlopeDiv(uint32(y), uint32(x))]
			} else {
				// octant 2
				return uint32(ANG909) + tantoangle[SlopeDiv(uint32(x), uint32(y))]
			}
		} else {
			// y<0
			y = -y
			if x > y {
				// octant 4
				return uint32(ANG18011) + tantoangle[SlopeDiv(uint32(y), uint32(x))]
			} else {
				// octant 5
				return uint32(ANG2705) - 1 - tantoangle[SlopeDiv(uint32(x), uint32(y))]
			}
		}
	}
	return 0
}

func R_PointToAngle2(x1 fixed_t, y1 fixed_t, x2 fixed_t, y2 fixed_t) (r angle_t) {
	viewx = x1
	viewy = y1
	return R_PointToAngle(x2, y2)
}

func R_PointToDist(x fixed_t, y fixed_t) (r fixed_t) {
	var angle int32
	var dist, dx, dy, frac, temp fixed_t
	dx = xabs(x - viewx)
	dy = xabs(y - viewy)
	if dy > dx {
		temp = dx
		dx = dy
		dy = temp
	}
	// Fix crashes in udm1.wad
	if dx != 0 {
		frac = FixedDiv(dy, dx)
	} else {
		frac = 0
	}
	angle = int32((tantoangle[frac>>(FRACBITS-SLOPEBITS)] + uint32(ANG909)) >> int32(ANGLETOFINESHIFT))
	// use as cosine
	dist = FixedDiv(dx, finesine[angle])
	return dist
}

// C documentation
//
//	//
//	// R_InitPointToAngle
//	//
func R_InitPointToAngle() {
	// UNUSED - now getting from tables.c
}

// C documentation
//
//	//
//	// R_ScaleFromGlobalAngle
//	// Returns the texture mapping scale
//	//  for the current line (horizontal span)
//	//  at the given angle.
//	// rw_distance must be calculated first.
//	//
func R_ScaleFromGlobalAngle(visangle angle_t) (r fixed_t) {
	var anglea, angleb angle_t
	var den, sinea, sineb int32
	var num, scale fixed_t
	// UNUSED
	anglea = uint32(ANG909) + (visangle - viewangle)
	angleb = uint32(ANG909) + (visangle - rw_normalangle)
	// both sines are allways positive
	sinea = finesine[anglea>>int32(ANGLETOFINESHIFT)]
	sineb = finesine[angleb>>int32(ANGLETOFINESHIFT)]
	num = FixedMul(projection, sineb) << detailshift
	den = FixedMul(rw_distance, sinea)
	if den > num>>int32(16) {
		scale = FixedDiv(num, den)
		if scale > 64*(1<<FRACBITS) {
			scale = 64 * (1 << FRACBITS)
		} else {
			if scale < 256 {
				scale = 256
			}
		}
	} else {
		scale = 64 * (1 << FRACBITS)
	}
	return scale
}

// C documentation
//
//	//
//	// R_InitTables
//	//
func R_InitTables() {
	// UNUSED: now getting from tables.c
}

// C documentation
//
//	//
//	// R_InitTextureMapping
//	//
func R_InitTextureMapping() {
	var focallength fixed_t
	var i, t, x int32
	// Use tangent table to generate viewangletox:
	//  viewangletox will give the next greatest x
	//  after the view angle.
	//
	// Calc focallength
	//  so FIELDOFVIEW angles covers SCREENWIDTH.
	focallength = FixedDiv(centerxfrac, finetangent[FINEANGLES/4+FIELDOFVIEW/2])
	i = 0
	for {
		if i >= FINEANGLES/2 {
			break
		}
		if finetangent[i] > 1<<FRACBITS*2 {
			t = -1
		} else {
			if finetangent[i] < -(1<<FRACBITS)*2 {
				t = viewwidth + 1
			} else {
				t = FixedMul(finetangent[i], focallength)
				t = (centerxfrac - t + 1<<FRACBITS - 1) >> int32(FRACBITS)
				if t < -1 {
					t = -1
				} else {
					if t > viewwidth+int32(1) {
						t = viewwidth + 1
					}
				}
			}
		}
		viewangletox[i] = t
		goto _1
	_1:
		;
		i++
	}
	// Scan viewangletox[] to generate xtoviewangle[]:
	//  xtoviewangle will give the smallest view angle
	//  that maps to x.
	x = 0
	for {
		if !(x <= viewwidth) {
			break
		}
		i = 0
		for viewangletox[i] > x {
			i++
		}
		xtoviewangle[x] = uint32(i<<int32(ANGLETOFINESHIFT) - int32(ANG909))
		goto _2
	_2:
		;
		x++
	}
	// Take out the fencepost cases from viewangletox.
	i = 0
	for {
		if i >= FINEANGLES/2 {
			break
		}
		t = FixedMul(finetangent[i], focallength)
		t = centerx - t
		if viewangletox[i] == -1 {
			viewangletox[i] = 0
		} else {
			if viewangletox[i] == viewwidth+int32(1) {
				viewangletox[i] = viewwidth
			}
		}
		goto _3
	_3:
		;
		i++
	}
	clipangle = xtoviewangle[0]
}

//
// R_InitLightTables
// Only inits the zlight table,
//  because the scalelight table changes with view size.
//

func R_InitLightTables() {
	var i, j, level, scale, startmap int32
	// Calculate the light levels to use
	//  for each level / distance combination.
	i = 0
	for {
		if i >= int32(LIGHTLEVELS) {
			break
		}
		startmap = (LIGHTLEVELS - 1 - i) * 2 * int32(NUMCOLORMAPS) / int32(LIGHTLEVELS)
		j = 0
		for {
			if j >= int32(MAXLIGHTZ) {
				break
			}
			scale = FixedDiv(SCREENWIDTH/2*(1<<FRACBITS), (j+int32(1))<<int32(LIGHTZSHIFT))
			scale >>= int32(LIGHTSCALESHIFT)
			level = startmap - scale/int32(DISTMAP)
			if level < 0 {
				level = 0
			}
			if level >= int32(NUMCOLORMAPS) {
				level = NUMCOLORMAPS - 1
			}
			zlight[i][j] = colormaps[level*int32(256):]
			goto _2
		_2:
			;
			j++
		}
		goto _1
	_1:
		;
		i++
	}
}

func R_SetViewSize(blocks int32, detail int32) {
	setsizeneeded = 1
	setblocks = blocks
	setdetail = detail
}

// C documentation
//
//	//
//	// R_ExecuteSetViewSize
//	//
func R_ExecuteSetViewSize() {
	var cosadj, dy fixed_t
	var i, j, level, startmap int32
	setsizeneeded = 0
	if setblocks == 11 {
		scaledviewwidth = SCREENWIDTH
		viewheight = SCREENHEIGHT
	} else {
		scaledviewwidth = setblocks * 32
		viewheight = setblocks * 168 / 10 & ^7
	}
	detailshift = setdetail
	viewwidth = scaledviewwidth >> detailshift
	centery = viewheight / 2
	centerx = viewwidth / 2
	centerxfrac = centerx << int32(FRACBITS)
	centeryfrac = centery << int32(FRACBITS)
	projection = centerxfrac
	if detailshift == 0 {
		basecolfunc = R_DrawColumn
		colfunc = R_DrawColumn
		fuzzcolfunc = R_DrawFuzzColumn
		transcolfunc = R_DrawTranslatedColumn
		spanfunc = R_DrawSpan
	} else {
		basecolfunc = R_DrawColumnLow
		colfunc = R_DrawColumnLow
		fuzzcolfunc = R_DrawFuzzColumnLow
		transcolfunc = R_DrawTranslatedColumnLow
		spanfunc = R_DrawSpanLow
	}
	R_InitBuffer(scaledviewwidth, viewheight)
	R_InitTextureMapping()
	// psprite scales
	pspritescale = 1 << FRACBITS * viewwidth / SCREENWIDTH
	pspriteiscale = 1 << FRACBITS * SCREENWIDTH / viewwidth
	// thing clipping
	i = 0
	for {
		if i >= viewwidth {
			break
		}
		screenheightarray[i] = int16(viewheight)
		goto _3
	_3:
		;
		i++
	}
	// planes
	i = 0
	for {
		if i >= viewheight {
			break
		}
		dy = (i-viewheight/int32(2))<<int32(FRACBITS) + 1<<FRACBITS/2
		dy = xabs(dy)
		yslope[i] = FixedDiv(viewwidth<<detailshift/int32(2)*(1<<FRACBITS), dy)
		goto _4
	_4:
		;
		i++
	}
	i = 0
	for {
		if i >= viewwidth {
			break
		}
		cosadj = xabs(finecosine[xtoviewangle[i]>>int32(ANGLETOFINESHIFT)])
		distscale[i] = FixedDiv(1<<FRACBITS, cosadj)
		goto _5
	_5:
		;
		i++
	}
	// Calculate the light levels to use
	//  for each level / scale combination.
	i = 0
	for {
		if i >= int32(LIGHTLEVELS) {
			break
		}
		startmap = (LIGHTLEVELS - 1 - i) * 2 * int32(NUMCOLORMAPS) / int32(LIGHTLEVELS)
		j = 0
		for {
			if j >= int32(MAXLIGHTSCALE) {
				break
			}
			level = startmap - j*SCREENWIDTH/(viewwidth<<detailshift)/int32(DISTMAP)
			if level < 0 {
				level = 0
			}
			if level >= int32(NUMCOLORMAPS) {
				level = NUMCOLORMAPS - 1
			}
			scalelight[i][j] = colormaps[level*256:]
			goto _7
		_7:
			;
			j++
		}
		goto _6
	_6:
		;
		i++
	}
}

//
// R_Init
//

func R_Init() {
	R_InitData()
	fprintf_ccgo(os.Stdout, 1250)
	R_InitPointToAngle()
	fprintf_ccgo(os.Stdout, 1250)
	R_InitTables()
	// viewwidth / viewheight / detailLevel are set by the defaults
	fprintf_ccgo(os.Stdout, 1250)
	R_SetViewSize(screenblocks, detailLevel)
	R_InitPlanes()
	fprintf_ccgo(os.Stdout, 1250)
	R_InitLightTables()
	fprintf_ccgo(os.Stdout, 1250)
	R_InitSkyMap()
	R_InitTranslationTables()
	fprintf_ccgo(os.Stdout, 1250)
}

// C documentation
//
//	//
//	// R_PointInSubsector
//	//
func R_PointInSubsector(x fixed_t, y fixed_t) *subsector_t {
	var nodenum, side int32
	// single subsector is a special case
	if numnodes == 0 {
		return &subsectors[0]
	}
	nodenum = numnodes - 1
	for nodenum&NF_SUBSECTOR5 == 0 {
		node := &nodes[nodenum]
		side = R_PointOnSide(x, y, node)
		nodenum = int32(node.Fchildren[side])
	}
	return &subsectors[nodenum & ^NF_SUBSECTOR5]
}

// C documentation
//
//	//
//	// R_SetupFrame
//	//
func R_SetupFrame(player *player_t) {
	var i int32
	viewplayer = player
	viewx = player.Fmo.Fx
	viewy = player.Fmo.Fy
	viewangle = player.Fmo.Fangle + viewangleoffset
	extralight = player.Fextralight
	viewz = player.Fviewz
	viewsin = finesine[viewangle>>int32(ANGLETOFINESHIFT)]
	viewcos = finecosine[viewangle>>int32(ANGLETOFINESHIFT)]
	if player.Ffixedcolormap != 0 {
		fixedcolormap = colormaps[player.Ffixedcolormap*int32(256):]
		walllights = scalelightfixed
		i = 0
		for {
			if i >= int32(MAXLIGHTSCALE) {
				break
			}
			scalelightfixed[i] = fixedcolormap
			goto _1
		_1:
			;
			i++
		}
	} else {
		fixedcolormap = nil
	}
	validcount++
}

// C documentation
//
//	//
//	// R_RenderView
//	//
func R_RenderPlayerView(player *player_t) {
	R_SetupFrame(player)
	// Clear buffers.
	R_ClearClipSegs()
	R_ClearDrawSegs()
	R_ClearPlanes()
	R_ClearSprites()
	// check for new console commands.
	NetUpdate()
	// The head node is the last node output.
	R_RenderBSPNode(numnodes - 1)
	// Check for new console commands.
	NetUpdate()
	R_DrawPlanes()
	// Check for new console commands.
	NetUpdate()
	R_DrawMasked()
	// Check for new console commands.
	NetUpdate()
}

// C documentation
//
//	//
//	// R_InitPlanes
//	// Only at game startup.
//	//
func R_InitPlanes() {
	// Doh!
}

// C documentation
//
//	//
//	// R_MapPlane
//	//
//	// Uses global vars:
//	//  planeheight
//	//  ds_source
//	//  basexscale
//	//  baseyscale
//	//  viewx
//	//  viewy
//	//
//	// BASIC PRIMITIVE
//	//
func R_MapPlane(y int32, x1 int32, x2 int32) {
	var angle angle_t
	var distance, length, v1, v2, v3 fixed_t
	var index uint32
	if x2 < x1 || x1 < 0 || x2 >= viewwidth || y > viewheight {
		I_Error(26405, x1, x2, y)
	}
	if planeheight != cachedheight[y] {
		cachedheight[y] = planeheight
		v1 = FixedMul(planeheight, yslope[y])
		cacheddistance[y] = v1
		distance = v1
		v2 = FixedMul(distance, basexscale)
		cachedxstep[y] = v2
		ds_xstep = v2
		v3 = FixedMul(distance, baseyscale)
		cachedystep[y] = v3
		ds_ystep = v3
	} else {
		distance = cacheddistance[y]
		ds_xstep = cachedxstep[y]
		ds_ystep = cachedystep[y]
	}
	length = FixedMul(distance, distscale[x1])
	angle = (viewangle + xtoviewangle[x1]) >> int32(ANGLETOFINESHIFT)
	ds_xfrac = viewx + FixedMul(finecosine[angle], length)
	ds_yfrac = -viewy - FixedMul(finesine[angle], length)
	if fixedcolormap != nil {
		ds_colormap = fixedcolormap
	} else {
		index = uint32(distance >> int32(LIGHTZSHIFT))
		if index >= uint32(MAXLIGHTZ) {
			index = uint32(MAXLIGHTZ - 1)
		}
		ds_colormap = planezlight[index]
	}
	ds_y = y
	ds_x1 = x1
	ds_x2 = x2
	// high or low detail
	spanfunc()
}

// C documentation
//
//	//
//	// R_ClearPlanes
//	// At begining of frame.
//	//
func R_ClearPlanes() {
	var angle angle_t
	var i int32
	// opening / clipping determination
	i = 0
	for {
		if i >= viewwidth {
			break
		}
		floorclip[i] = int16(viewheight)
		ceilingclip[i] = int16(-1)
		goto _1
	_1:
		;
		i++
	}
	lastvisplane_index = 0
	lastopening = uintptr(unsafe.Pointer(&openings))
	// texture calculation
	clear(cachedheight[:])
	// left to right mapping
	angle = (viewangle - uint32(ANG909)) >> int32(ANGLETOFINESHIFT)
	// scale will be unit scale at SCREENWIDTH/2 distance
	basexscale = FixedDiv(finecosine[angle], centerxfrac)
	baseyscale = -FixedDiv(finesine[angle], centerxfrac)
}

// C documentation
//
//	//
//	// R_FindPlane
//	//
func R_FindPlane(height fixed_t, picnum int32, lightlevel int32) *visplane_t {
	if picnum == skyflatnum {
		height = 0 // all skys map together
		lightlevel = 0
	}
	for i := 0; i < lastvisplane_index; i++ {
		check := &visplanes[i]
		if height == check.Fheight && picnum == check.Fpicnum && lightlevel == check.Flightlevel {
			return check
		}
	}
	if lastvisplane_index >= len(visplanes)-1 {
		I_Error(26430, 0)
	}
	check := &visplanes[lastvisplane_index]
	check.Fheight = height
	check.Fpicnum = picnum
	check.Flightlevel = lightlevel
	check.Fminx = SCREENWIDTH
	check.Fmaxx = -1
	for i := 0; i < 320; i++ {
		check.Ftop[i] = 0xff
	}
	lastvisplane_index++
	return check
}

// C documentation
//
//	//
//	// R_CheckPlane
//	//
func R_CheckPlane(pl *visplane_t, start int32, stop int32) *visplane_t {
	var intrh, intrl, unionh, unionl, x int32
	if start < pl.Fminx {
		intrl = pl.Fminx
		unionl = start
	} else {
		unionl = pl.Fminx
		intrl = start
	}
	if stop > pl.Fmaxx {
		intrh = pl.Fmaxx
		unionh = stop
	} else {
		unionh = pl.Fmaxx
		intrh = stop
	}
	x = intrl
	for {
		if !(x <= intrh) {
			break
		}
		if pl.Ftop[x] != 0xff {
			break
		}
		goto _1
	_1:
		;
		x++
	}
	if x > intrh {
		pl.Fminx = unionl
		pl.Fmaxx = unionh
		// use the same one
		return pl
	}
	// make a new visplane
	newPl := &visplanes[lastvisplane_index]
	newPl.Fheight = pl.Fheight
	newPl.Fpicnum = pl.Fpicnum
	newPl.Flightlevel = pl.Flightlevel
	newPl.Fminx = start
	newPl.Fmaxx = stop
	for i := 0; i < 320; i++ {
		newPl.Ftop[i] = 0xff
	}
	lastvisplane_index++
	return newPl
}

// C documentation
//
//	//
//	// R_DrawPlanes
//	// At the end of each frame.
//	//
func R_DrawPlanes() {
	var angle, b1, b2, light, lumpnum, stop, t1, t2, x int32
	if ds_index >= len(drawsegs) {
		I_Error(26461, ds_index)
	}
	if lastvisplane_index >= len(visplanes)-1 {
		I_Error(26498, lastvisplane_index)
	}
	if (int64(lastopening)-int64(uintptr(unsafe.Pointer(&openings))))/2 > int64(SCREENWIDTH*64) {
		I_Error(26535, (int64(lastopening)-int64(uintptr(unsafe.Pointer(&openings))))/2)
	}
	for i := 0; i < lastvisplane_index; i++ {
		pl := &visplanes[i]
		if pl.Fminx > pl.Fmaxx {
			continue
		}
		// sky flat
		if pl.Fpicnum == skyflatnum {
			dc_iscale = pspriteiscale >> detailshift
			// Sky is allways drawn full bright,
			//  i.e. colormaps[0] is used.
			// Because of this hack, sky is not affected
			//  by INVUL inverse mapping.
			dc_colormap = colormaps
			dc_texturemid = skytexturemid
			x = pl.Fminx
			for {
				if !(x <= pl.Fmaxx) {
					break
				}
				dc_yl = int32(pl.Ftop[x])
				dc_yh = int32(pl.Fbottom[x])
				if dc_yl <= dc_yh {
					angle = int32((viewangle + xtoviewangle[x]) >> int32(ANGLETOSKYSHIFT))
					dc_x = x
					dc_source = R_GetColumn(skytexture, angle)
					colfunc()
				}
				goto _2
			_2:
				;
				x++
			}
			continue
		}
		// regular flat
		lumpnum = firstflat + flattranslation[pl.Fpicnum]
		ds_source = W_CacheLumpNum(lumpnum, int32(PU_STATIC))
		planeheight = xabs(pl.Fheight - viewz)
		light = pl.Flightlevel>>int32(LIGHTSEGSHIFT) + extralight
		if light >= int32(LIGHTLEVELS) {
			light = LIGHTLEVELS - 1
		}
		if light < 0 {
			light = 0
		}
		planezlight = zlight[light][:]
		if int(pl.Fmaxx+1) < len(pl.Ftop) {
			pl.Ftop[pl.Fmaxx+1] = 0xff
		}
		if pl.Fminx-1 >= 0 {
			pl.Ftop[pl.Fminx-1] = 0xff
		}
		stop = pl.Fmaxx + 1
		x = pl.Fminx
		for {
			if !(x <= stop) {
				break
			}
			if x-1 >= 0 {
				t1 = int32(pl.Ftop[x-1])
				b1 = int32(pl.Fbottom[x-1])
			} else {
				t1 = 0xff
				b1 = -1
			}
			if x < int32(len(pl.Ftop)) {
				t2 = int32(pl.Ftop[x])
				b2 = int32(pl.Fbottom[x])
			} else {
				t2 = 0xff
				b2 = -1
			}
			for t1 < t2 && t1 <= b1 {
				R_MapPlane(t1, spanstart[t1], x-1)
				t1++
			}
			for b1 > b2 && b1 >= t1 {
				R_MapPlane(b1, spanstart[b1], x-1)
				b1--
			}
			for t2 < t1 && t2 <= b2 {
				spanstart[t2] = x
				t2++
			}
			for b2 > b1 && b2 >= t2 {
				spanstart[b2] = x
				b2--
			}
			goto _3
		_3:
			;
			x++
		}
		W_ReleaseLumpNum(lumpnum)
	}
}

const ANG18013 = 2147483648
const HEIGHTBITS = 12
const INT_MAX15 = 2147483647
const SHRT_MAX1 = 32767

// C documentation
//
//	//
//	// R_RenderMaskedSegRange
//	//
func R_RenderMaskedSegRange(ds *drawseg_t, x1 int32, x2 int32) {
	var col uintptr
	var index uint32
	var lightnum, texnum, v1, v2 int32
	// Calculate light table.
	// Use different light tables
	//   for horizontal / vertical / diagonal. Diagonal?
	// OPTIMIZE: get rid of LIGHTSEGSHIFT globally
	curline = ds.Fcurline
	frontsector = curline.Ffrontsector
	backsector = curline.Fbacksector
	texnum = texturetranslation[(*side_t)(unsafe.Pointer(curline.Fsidedef)).Fmidtexture]
	lightnum = int32(frontsector.Flightlevel)>>int32(LIGHTSEGSHIFT) + extralight
	if curline.Fv1.Fy == curline.Fv2.Fy {
		lightnum--
	} else {
		if curline.Fv1.Fx == curline.Fv2.Fx {
			lightnum++
		}
	}
	if lightnum < 0 {
		walllights = scalelight[0]
	} else {
		if lightnum >= int32(LIGHTLEVELS) {
			walllights = scalelight[LIGHTLEVELS-1]
		} else {
			walllights = scalelight[lightnum]
		}
	}
	maskedtexturecol = ds.Fmaskedtexturecol
	rw_scalestep = ds.Fscalestep
	spryscale = ds.Fscale1 + (x1-ds.Fx1)*rw_scalestep
	mfloorclip = ds.Fsprbottomclip
	mceilingclip = ds.Fsprtopclip
	// find positioning
	if int32(curline.Flinedef.Fflags)&ML_DONTPEGBOTTOM != 0 {
		if frontsector.Ffloorheight > backsector.Ffloorheight {
			v1 = frontsector.Ffloorheight
		} else {
			v1 = backsector.Ffloorheight
		}
		dc_texturemid = v1
		dc_texturemid = dc_texturemid + textureheight[texnum] - viewz
	} else {
		if frontsector.Fceilingheight < backsector.Fceilingheight {
			v2 = frontsector.Fceilingheight
		} else {
			v2 = backsector.Fceilingheight
		}
		dc_texturemid = v2
		dc_texturemid = dc_texturemid - viewz
	}
	dc_texturemid += (*side_t)(unsafe.Pointer(curline.Fsidedef)).Frowoffset
	if fixedcolormap != nil {
		dc_colormap = fixedcolormap
	}
	// draw the columns
	dc_x = x1
	for {
		if !(dc_x <= x2) {
			break
		}
		// calculate lighting
		if int32(*(*int16)(unsafe.Pointer(maskedtexturecol + uintptr(dc_x)*2))) != int32(SHRT_MAX1) {
			if fixedcolormap == nil {
				index = uint32(spryscale >> int32(LIGHTSCALESHIFT))
				if index >= uint32(MAXLIGHTSCALE) {
					index = uint32(MAXLIGHTSCALE - 1)
				}
				dc_colormap = walllights[index]
			}
			sprtopscreen = centeryfrac - FixedMul(dc_texturemid, spryscale)
			dc_iscale = int32(0xffffffff / uint32(spryscale))
			// draw the texture
			col = R_GetColumn(texnum, int32(*(*int16)(unsafe.Pointer(maskedtexturecol + uintptr(dc_x)*2)))) - uintptr(3)
			R_DrawMaskedColumn(col)
			*(*int16)(unsafe.Pointer(maskedtexturecol + uintptr(dc_x)*2)) = int16(SHRT_MAX1)
		}
		spryscale += rw_scalestep
		goto _3
	_3:
		;
		dc_x++
	}
}

//
// R_RenderSegLoop
// Draws zero, one, or two textures (and possibly a masked
//  texture) for walls.
// Can draw or mark the starting pixel of floor and ceiling
//  textures.
// CALLED: CORE LOOPING ROUTINE.
//

func R_RenderSegLoop() {
	var angle angle_t
	var bottom, mid, top, yh, yl int32
	var ceilingclip_temp, floorclip_temp uintptr
	var index uint32
	var texturecolumn fixed_t
	ceilingclip_temp = uintptr(unsafe.Pointer(&ceilingclip)) + uintptr(rw_x)*2
	floorclip_temp = uintptr(unsafe.Pointer(&floorclip)) + uintptr(rw_x)*2
	for {
		if rw_x >= rw_stopx {
			break
		}
		// mark floor / ceiling areas
		yl = (topfrac + 1<<HEIGHTBITS - 1) >> int32(HEIGHTBITS)
		// no space above wall?
		if yl < int32(*(*int16)(unsafe.Pointer(ceilingclip_temp)))+int32(1) {
			yl = int32(*(*int16)(unsafe.Pointer(ceilingclip_temp))) + 1
		}
		if markceiling != 0 {
			top = int32(ceilingclip[rw_x]) + 1
			bottom = yl - 1
			if bottom >= int32(*(*int16)(unsafe.Pointer(floorclip_temp))) {
				bottom = int32(*(*int16)(unsafe.Pointer(floorclip_temp))) - 1
			}
			if top <= bottom {
				ceilingplane.Ftop[rw_x] = uint8(top)
				ceilingplane.Fbottom[rw_x] = uint8(bottom)
			}
		}
		yh = bottomfrac >> int32(HEIGHTBITS)
		if yh >= int32(*(*int16)(unsafe.Pointer(floorclip_temp))) {
			yh = int32(*(*int16)(unsafe.Pointer(floorclip_temp))) - 1
		}
		if markfloor != 0 {
			top = yh + 1
			bottom = int32(*(*int16)(unsafe.Pointer(floorclip_temp))) - 1
			if top <= int32(*(*int16)(unsafe.Pointer(ceilingclip_temp))) {
				top = int32(*(*int16)(unsafe.Pointer(ceilingclip_temp))) + 1
			}
			if top <= bottom {
				floorplane.Ftop[rw_x] = uint8(top)
				floorplane.Fbottom[rw_x] = uint8(bottom)
			}
		}
		// texturecolumn and lighting are independent of wall tiers
		if segtextured != 0 {
			// calculate texture offset
			angle = (rw_centerangle + xtoviewangle[rw_x]) >> int32(ANGLETOFINESHIFT)
			if angle >= FINEANGLES/2 { // DSB-23
				angle = 0
			}
			texturecolumn = rw_offset - FixedMul(finetangent[angle], rw_distance)
			texturecolumn >>= int32(FRACBITS)
			// calculate lighting
			index = uint32(rw_scale >> int32(LIGHTSCALESHIFT))
			if index >= uint32(MAXLIGHTSCALE) {
				index = uint32(MAXLIGHTSCALE - 1)
			}
			dc_colormap = walllights[index]
			dc_x = rw_x
			dc_iscale = int32(0xffffffff / uint32(rw_scale))
		} else {
			// purely to shut up the compiler
			texturecolumn = 0
		}
		// draw the wall tiers
		if midtexture != 0 {
			// single sided line
			dc_yl = yl
			dc_yh = yh
			dc_texturemid = rw_midtexturemid
			dc_source = R_GetColumn(midtexture, texturecolumn)
			colfunc()
			*(*int16)(unsafe.Pointer(ceilingclip_temp)) = int16(viewheight)
			*(*int16)(unsafe.Pointer(floorclip_temp)) = int16(-1)
		} else {
			// two sided line
			if toptexture != 0 {
				// top wall
				mid = pixhigh >> int32(HEIGHTBITS)
				pixhigh += pixhighstep
				if mid >= int32(*(*int16)(unsafe.Pointer(floorclip_temp))) {
					mid = int32(*(*int16)(unsafe.Pointer(floorclip_temp))) - 1
				}
				if mid >= yl {
					dc_yl = yl
					dc_yh = mid
					dc_texturemid = rw_toptexturemid
					dc_source = R_GetColumn(toptexture, texturecolumn)
					colfunc()
					*(*int16)(unsafe.Pointer(ceilingclip_temp)) = int16(mid)
				} else {
					*(*int16)(unsafe.Pointer(ceilingclip_temp)) = int16(yl - 1)
				}
			} else {
				// no top wall
				if markceiling != 0 {
					*(*int16)(unsafe.Pointer(ceilingclip_temp)) = int16(yl - 1)
				}
			}
			if bottomtexture != 0 {
				// bottom wall
				mid = (pixlow + 1<<HEIGHTBITS - 1) >> int32(HEIGHTBITS)
				pixlow += pixlowstep
				// no space above wall?
				if mid <= int32(*(*int16)(unsafe.Pointer(ceilingclip_temp))) {
					mid = int32(*(*int16)(unsafe.Pointer(ceilingclip_temp))) + 1
				}
				if mid <= yh {
					dc_yl = mid
					dc_yh = yh
					dc_texturemid = rw_bottomtexturemid
					dc_source = R_GetColumn(bottomtexture, texturecolumn)
					colfunc()
					*(*int16)(unsafe.Pointer(floorclip_temp)) = int16(mid)
				} else {
					*(*int16)(unsafe.Pointer(floorclip_temp)) = int16(yh + 1)
				}
			} else {
				// no bottom wall
				if markfloor != 0 {
					*(*int16)(unsafe.Pointer(floorclip_temp)) = int16(yh + 1)
				}
			}
			if maskedtexture != 0 {
				// save texturecol
				//  for backdrawing of masked mid texture
				*(*int16)(unsafe.Pointer(maskedtexturecol + uintptr(rw_x)*2)) = int16(texturecolumn)
			}
		}
		rw_scale += rw_scalestep
		topfrac += topstep
		bottomfrac += bottomstep
		ceilingclip_temp += 2
		floorclip_temp += 2
		goto _1
	_1:
		;
		rw_x++
	}
}

// C documentation
//
//	//
//	// R_StoreWallRange
//	// A wall segment will be drawn
//	//  between start and stop pixels (inclusive).
//	//
func R_StoreWallRange(start int32, stop int32) {
	var distangle, offsetangle angle_t
	var hyp, sineval, vtop, v3, v4 fixed_t
	var lightnum, v2, v5, v6 int32
	var v10, v7, v8 boolean
	var v11, v9 uintptr
	// don't overflow and crash
	if ds_index >= len(drawsegs) {
		return
	}
	if start >= viewwidth || start > stop {
		I_Error(26571, start, stop)
	}
	sidedef = curline.Fsidedef
	linedef = curline.Flinedef
	// mark the segment as visible for auto map
	linedef.Fflags |= ML_MAPPED
	// calculate rw_distance for scale calculation
	rw_normalangle = curline.Fangle + uint32(ANG909)
	offsetangle = uint32(xabs(int32(rw_normalangle - uint32(rw_angle1))))
	if offsetangle > uint32(ANG909) {
		offsetangle = uint32(ANG909)
	}
	distangle = uint32(ANG909) - offsetangle
	hyp = R_PointToDist(curline.Fv1.Fx, curline.Fv1.Fy)
	sineval = finesine[distangle>>int32(ANGLETOFINESHIFT)]
	rw_distance = FixedMul(hyp, sineval)
	v2 = start
	rw_x = v2
	drawsegs[ds_index].Fx1 = v2
	drawsegs[ds_index].Fx2 = stop
	drawsegs[ds_index].Fcurline = curline
	rw_stopx = stop + 1
	// calculate scale at both ends and step
	v3 = R_ScaleFromGlobalAngle(viewangle + xtoviewangle[start])
	rw_scale = v3
	drawsegs[ds_index].Fscale1 = v3
	if stop > start {
		drawsegs[ds_index].Fscale2 = R_ScaleFromGlobalAngle(viewangle + xtoviewangle[stop])
		v4 = (drawsegs[ds_index].Fscale2 - rw_scale) / (stop - start)
		rw_scalestep = v4
		drawsegs[ds_index].Fscalestep = v4
	} else {
		// UNUSED: try to fix the stretched line bug
		drawsegs[ds_index].Fscale2 = drawsegs[ds_index].Fscale1
	}
	// calculate texture boundaries
	//  and decide if floor / ceiling marks are needed
	worldtop = frontsector.Fceilingheight - viewz
	worldbottom = frontsector.Ffloorheight - viewz
	v7 = 0
	maskedtexture = v7
	v6 = int32(v7)
	bottomtexture = v6
	v5 = v6
	toptexture = v5
	midtexture = v5
	drawsegs[ds_index].Fmaskedtexturecol = uintptr(0)
	if backsector == nil {
		// single sided line
		midtexture = texturetranslation[sidedef.Fmidtexture]
		// a single sided line is terminal, so it must mark ends
		v8 = 1
		markceiling = v8
		markfloor = v8
		if int32(linedef.Fflags)&ML_DONTPEGBOTTOM != 0 {
			vtop = frontsector.Ffloorheight + textureheight[sidedef.Fmidtexture]
			// bottom of texture at bottom
			rw_midtexturemid = vtop - viewz
		} else {
			// top of texture at top
			rw_midtexturemid = worldtop
		}
		rw_midtexturemid += sidedef.Frowoffset
		drawsegs[ds_index].Fsilhouette = int32(SIL_BOTH)
		drawsegs[ds_index].Fsprtopclip = uintptr(unsafe.Pointer(&screenheightarray))
		drawsegs[ds_index].Fsprbottomclip = uintptr(unsafe.Pointer(&negonearray))
		drawsegs[ds_index].Fbsilheight = int32(INT_MAX15)
		drawsegs[ds_index].Ftsilheight = -1 - 0x7fffffff
	} else {
		// two sided line
		v9 = uintptr(0)
		drawsegs[ds_index].Fsprbottomclip = v9
		drawsegs[ds_index].Fsprtopclip = v9
		drawsegs[ds_index].Fsilhouette = 0
		if frontsector.Ffloorheight > backsector.Ffloorheight {
			drawsegs[ds_index].Fsilhouette = int32(SIL_BOTTOM)
			drawsegs[ds_index].Fbsilheight = frontsector.Ffloorheight
		} else {
			if backsector.Ffloorheight > viewz {
				drawsegs[ds_index].Fsilhouette = int32(SIL_BOTTOM)
				drawsegs[ds_index].Fbsilheight = int32(INT_MAX15)
				// ds_p->sprbottomclip = negonearray;
			}
		}
		if frontsector.Fceilingheight < backsector.Fceilingheight {
			drawsegs[ds_index].Fsilhouette |= int32(SIL_TOP)
			drawsegs[ds_index].Ftsilheight = frontsector.Fceilingheight
		} else {
			if backsector.Fceilingheight < viewz {
				drawsegs[ds_index].Fsilhouette |= int32(SIL_TOP)
				drawsegs[ds_index].Ftsilheight = -1 - 0x7fffffff
				// ds_p->sprtopclip = screenheightarray;
			}
		}
		if backsector.Fceilingheight <= frontsector.Ffloorheight {
			drawsegs[ds_index].Fsprbottomclip = uintptr(unsafe.Pointer(&negonearray))
			drawsegs[ds_index].Fbsilheight = int32(INT_MAX15)
			drawsegs[ds_index].Fsilhouette |= int32(SIL_BOTTOM)
		}
		if backsector.Ffloorheight >= frontsector.Fceilingheight {
			drawsegs[ds_index].Fsprtopclip = uintptr(unsafe.Pointer(&screenheightarray))
			drawsegs[ds_index].Ftsilheight = -1 - 0x7fffffff
			drawsegs[ds_index].Fsilhouette |= int32(SIL_TOP)
		}
		worldhigh = backsector.Fceilingheight - viewz
		worldlow = backsector.Ffloorheight - viewz
		// hack to allow height changes in outdoor areas
		if int32(frontsector.Fceilingpic) == skyflatnum && int32(backsector.Fceilingpic) == skyflatnum {
			worldtop = worldhigh
		}
		if worldlow != worldbottom || int32(backsector.Ffloorpic) != int32(frontsector.Ffloorpic) || int32(backsector.Flightlevel) != int32(frontsector.Flightlevel) {
			markfloor = 1
		} else {
			// same plane on both sides
			markfloor = 0
		}
		if worldhigh != worldtop || int32(backsector.Fceilingpic) != int32(frontsector.Fceilingpic) || int32(backsector.Flightlevel) != int32(frontsector.Flightlevel) {
			markceiling = 1
		} else {
			// same plane on both sides
			markceiling = 0
		}
		if backsector.Fceilingheight <= frontsector.Ffloorheight || backsector.Ffloorheight >= frontsector.Fceilingheight {
			// closed door
			v10 = 1
			markfloor = v10
			markceiling = v10
		}
		if worldhigh < worldtop {
			// top texture
			toptexture = texturetranslation[sidedef.Ftoptexture]
			if int32(linedef.Fflags)&ML_DONTPEGTOP != 0 {
				// top of texture at top
				rw_toptexturemid = worldtop
			} else {
				vtop = backsector.Fceilingheight + textureheight[sidedef.Ftoptexture]
				// bottom of texture
				rw_toptexturemid = vtop - viewz
			}
		}
		if worldlow > worldbottom {
			// bottom texture
			bottomtexture = texturetranslation[sidedef.Fbottomtexture]
			if int32(linedef.Fflags)&ML_DONTPEGBOTTOM != 0 {
				// bottom of texture at bottom
				// top of texture at top
				rw_bottomtexturemid = worldtop
			} else { // top of texture at top
				rw_bottomtexturemid = worldlow
			}
		}
		rw_toptexturemid += sidedef.Frowoffset
		rw_bottomtexturemid += sidedef.Frowoffset
		// allocate space for masked texture tables
		if sidedef.Fmidtexture != 0 {
			// masked midtexture
			maskedtexture = 1
			v11 = lastopening - uintptr(rw_x)*2
			maskedtexturecol = v11
			drawsegs[ds_index].Fmaskedtexturecol = v11
			lastopening += uintptr(rw_stopx-rw_x) * 2
		}
	}
	// calculate rw_offset (only needed for textured lines)
	segtextured = uint32(midtexture|toptexture|bottomtexture) | maskedtexture
	if segtextured != 0 {
		offsetangle = rw_normalangle - uint32(rw_angle1)
		if offsetangle > uint32(ANG18013) {
			offsetangle = -offsetangle
		}
		if offsetangle > uint32(ANG909) {
			offsetangle = uint32(ANG909)
		}
		sineval = finesine[offsetangle>>int32(ANGLETOFINESHIFT)]
		rw_offset = FixedMul(hyp, sineval)
		if rw_normalangle-uint32(rw_angle1) < uint32(ANG18013) {
			rw_offset = -rw_offset
		}
		rw_offset += sidedef.Ftextureoffset + curline.Foffset
		rw_centerangle = uint32(ANG909) + viewangle - rw_normalangle
		// calculate light table
		//  use different light tables
		//  for horizontal / vertical / diagonal
		// OPTIMIZE: get rid of LIGHTSEGSHIFT globally
		if fixedcolormap == nil {
			lightnum = int32(frontsector.Flightlevel)>>int32(LIGHTSEGSHIFT) + extralight
			if curline.Fv1.Fy == curline.Fv2.Fy {
				lightnum--
			} else {
				if curline.Fv1.Fx == curline.Fv2.Fx {
					lightnum++
				}
			}
			if lightnum < 0 {
				walllights = scalelight[0]
			} else {
				if lightnum >= int32(LIGHTLEVELS) {
					walllights = scalelight[LIGHTLEVELS-1]
				} else {
					walllights = scalelight[lightnum]
				}
			}
		}
	}
	// if a floor / ceiling plane is on the wrong side
	//  of the view plane, it is definitely invisible
	//  and doesn't need to be marked.
	if frontsector.Ffloorheight >= viewz {
		// above view plane
		markfloor = 0
	}
	if frontsector.Fceilingheight <= viewz && int32(frontsector.Fceilingpic) != skyflatnum {
		// below view plane
		markceiling = 0
	}
	// calculate incremental stepping values for texture edges
	worldtop >>= 4
	worldbottom >>= 4
	topstep = -FixedMul(rw_scalestep, worldtop)
	topfrac = centeryfrac>>4 - FixedMul(worldtop, rw_scale)
	bottomstep = -FixedMul(rw_scalestep, worldbottom)
	bottomfrac = centeryfrac>>4 - FixedMul(worldbottom, rw_scale)
	if backsector != nil {
		worldhigh >>= 4
		worldlow >>= 4
		if worldhigh < worldtop {
			pixhigh = centeryfrac>>4 - FixedMul(worldhigh, rw_scale)
			pixhighstep = -FixedMul(rw_scalestep, worldhigh)
		}
		if worldlow > worldbottom {
			pixlow = centeryfrac>>4 - FixedMul(worldlow, rw_scale)
			pixlowstep = -FixedMul(rw_scalestep, worldlow)
		}
	}
	// render it
	if markceiling != 0 {
		ceilingplane = R_CheckPlane(ceilingplane, rw_x, rw_stopx-1)
	}
	if markfloor != 0 {
		floorplane = R_CheckPlane(floorplane, rw_x, rw_stopx-1)
	}
	R_RenderSegLoop()
	// save sprite clipping info
	if (drawsegs[ds_index].Fsilhouette&int32(SIL_TOP) != 0 || maskedtexture != 0) && drawsegs[ds_index].Fsprtopclip == 0 {
		xmemcpy(lastopening, uintptr(unsafe.Pointer(&ceilingclip))+uintptr(start)*2, uint64(int32(2)*(rw_stopx-start)))
		drawsegs[ds_index].Fsprtopclip = lastopening - uintptr(start)*2
		lastopening += uintptr(rw_stopx-start) * 2
	}
	if (drawsegs[ds_index].Fsilhouette&int32(SIL_BOTTOM) != 0 || maskedtexture != 0) && drawsegs[ds_index].Fsprbottomclip == 0 {
		xmemcpy(lastopening, uintptr(unsafe.Pointer(&floorclip))+uintptr(start)*2, uint64(int32(2)*(rw_stopx-start)))
		drawsegs[ds_index].Fsprbottomclip = lastopening - uintptr(start)*2
		lastopening += uintptr(rw_stopx-start) * 2
	}
	if maskedtexture != 0 && drawsegs[ds_index].Fsilhouette&SIL_TOP == 0 {
		drawsegs[ds_index].Fsilhouette |= int32(SIL_TOP)
		drawsegs[ds_index].Ftsilheight = -1 - 0x7fffffff
	}
	if maskedtexture != 0 && drawsegs[ds_index].Fsilhouette&SIL_BOTTOM == 0 {
		drawsegs[ds_index].Fsilhouette |= int32(SIL_BOTTOM)
		drawsegs[ds_index].Fbsilheight = int32(INT_MAX15)
	}
	ds_index++
}

// C documentation
//
//	//
//	// R_InitSkyMap
//	// Called whenever the view size changes.
//	//
func R_InitSkyMap() {
	// skyflatnum = R_FlatNumForName ( SKYFLATNAME );
	skytexturemid = 100 * (1 << FRACBITS)
}

const ANG455 = 536870912
const BASEYCENTER = 100
const FF_FRAMEMASK3 = 32767
const FF_FULLBRIGHT1 = 32768
const INT_MAX17 = 2147483647

// C documentation
//
//	//
//	// R_InstallSpriteLump
//	// Local function for R_InitSprites.
//	//
func R_InstallSpriteLump(spritename string, lump int32, frame uint32, rotation uint32, flipped boolean) {
	var r int32
	if frame >= 29 || rotation > 8 {
		I_Error(26603, lump)
	}
	if int32(frame) > maxframe {
		maxframe = int32(frame)
	}
	if rotation == 0 {
		// the lump should be used for all rotations
		if sprtemp[frame].Frotate == 0 {
			I_Error(26656, spritename, uint32('A')+frame)
		}
		if sprtemp[frame].Frotate == 1 {
			I_Error(26712, spritename, uint32('A')+frame)
		}
		sprtemp[frame].Frotate = 0
		r = 0
		for {
			if r >= 8 {
				break
			}
			*(*int16)(unsafe.Pointer(uintptr(unsafe.Pointer(&sprtemp)) + uintptr(frame)*28 + 4 + uintptr(r)*2)) = int16(lump - firstspritelump)
			*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&sprtemp)) + uintptr(frame)*28 + 20 + uintptr(r))) = uint8(flipped)
			goto _1
		_1:
			;
			r++
		}
		return
	}
	// the lump is only used for one rotation
	if sprtemp[frame].Frotate == 0 {
		I_Error(26712, spritename, uint32('A')+frame)
	}
	sprtemp[frame].Frotate = 1
	// make 0 based
	rotation--
	if int32(*(*int16)(unsafe.Pointer(uintptr(unsafe.Pointer(&sprtemp)) + uintptr(frame)*28 + 4 + uintptr(rotation)*2))) != -1 {
		I_Error(26777, spritename, uint32('A')+frame, uint32('1')+rotation)
	}
	*(*int16)(unsafe.Pointer(uintptr(unsafe.Pointer(&sprtemp)) + uintptr(frame)*28 + 4 + uintptr(rotation)*2)) = int16(lump - firstspritelump)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&sprtemp)) + uintptr(frame)*28 + 20 + uintptr(rotation))) = uint8(flipped)
}

// C documentation
//
//	//
//	// R_InitSpriteDefs
//	// Pass a null terminated list of sprite names
//	//  (4 chars exactly) to be used.
//	// Builds the sprite rotation matrixes to account
//	//  for horizontally flipped sprites.
//	// Will report an error if the lumps are inconsistant.
//	// Only called at startup.
//	//
//	// Sprite lump names are 4 characters for the actor,
//	//  a letter for the frame, and a number for the rotation.
//	// A sprite that is flippable will have an additional
//	//  letter/number appended.
//	// The rotation character can be 0 to signify no rotations.
//	//
func R_InitSpriteDefs(namelist []uintptr) {
	var end, frame, i, l, patched, rotation, start int32
	// count the number of sprite names
	numsprites = int32(len(namelist))
	if numsprites == 0 {
		return
	}
	sprites = make([]spritedef_t, int(numsprites))
	start = firstspritelump - 1
	end = lastspritelump + 1
	// scan all the lump names for each of the names,
	//  noting the highest frame letter.
	// Just compare 4 characters as ints
	i = 0
	for {
		if i >= numsprites {
			break
		}
		spritename := gostring_n(namelist[i], 4)
		xmemset(uintptr(unsafe.Pointer(&sprtemp)), 0xff, 812)
		maxframe = -1
		// scan the lumps,
		//  filling in the frames for whatever is found
		l = start + 1
		for {
			if l >= end {
				break
			}

			if xstrncasecmp(lumpinfo[l].NamePtr(), namelist[i], 4) == 0 {
				frame = int32(lumpinfo[l].Fname[4] - 'A')
				rotation = int32(lumpinfo[l].Fname[5] - '0')
				if modifiedgame != 0 {
					patched = W_GetNumForName(lumpinfo[l].NamePtr())
				} else {
					patched = l
				}
				R_InstallSpriteLump(spritename, patched, uint32(frame), uint32(rotation), 0)
				if lumpinfo[l].Fname[6] != 0 {
					frame = int32(lumpinfo[l].Fname[6] - 'A')
					rotation = int32(lumpinfo[l].Fname[7] - '0')
					R_InstallSpriteLump(spritename, l, uint32(frame), uint32(rotation), 1)
				}
			}
			goto _2
		_2:
			;
			l++
		}
		// check the frames that were found for completeness
		if maxframe == -1 {
			sprites[i].Fnumframes = 0
			goto _1
		}
		maxframe++
		frame = 0
		for {
			if frame >= maxframe {
				break
			}
			switch int32(sprtemp[frame].Frotate) {
			case -1:
				goto _4
			case 0:
				goto _5
			case 1:
				goto _6
			}
			goto _7
		_4:
			;
			// no rotations were found for that frame at all
			I_Error(26839, spritename, frame+int32('A'))
			goto _7
		_5:
			;
			// only the first rotation is needed
			goto _7
		_6:
			;
			// must have all 8 frames
			rotation = 0
		_10:
			;
			if rotation >= 8 {
				goto _8
			}
			if int32(*(*int16)(unsafe.Pointer(uintptr(unsafe.Pointer(&sprtemp)) + uintptr(frame)*28 + 4 + uintptr(rotation)*2))) == -1 {
				I_Error(26887, spritename, frame+int32('A'))
			}
			goto _9
		_9:
			;
			rotation++
			goto _10
			goto _8
		_8:
			;
			goto _7
		_7:
			;
			goto _3
		_3:
			;
			frame++
		}
		// allocate space for the frames present and copy sprtemp to it
		sprites[i].Fnumframes = maxframe
		sprites[i].Fspriteframes = make([]spriteframe_t, maxframe)
		copy(sprites[i].Fspriteframes, sprtemp[:maxframe])
		goto _1
	_1:
		;
		i++
	}
}

// C documentation
//
//	//
//	// R_InitSprites
//	// Called at program start.
//	//
func R_InitSprites(namelist []uintptr) {
	var i int32
	i = 0
	for {
		if i >= SCREENWIDTH {
			break
		}
		negonearray[i] = int16(-1)
		goto _1
	_1:
		;
		i++
	}
	R_InitSpriteDefs(namelist)
}

// C documentation
//
//	//
//	// R_ClearSprites
//	// Called at frame start.
//	//
func R_ClearSprites() {
	vissprite_n = 0
}

func R_NewVisSprite() *vissprite_t {
	if vissprite_n == len(vissprites) {
		return &overflowsprite
	}
	vissprite_n++
	return &vissprites[vissprite_n-1]
}

func R_DrawMaskedColumn(column uintptr) {
	var basetexturemid fixed_t
	var bottomscreen, topscreen int32
	basetexturemid = dc_texturemid
	for {
		if int32((*column_t)(unsafe.Pointer(column)).Ftopdelta) == 0xff {
			break
		}
		// calculate unclipped screen coordinates
		//  for post
		topscreen = sprtopscreen + spryscale*int32((*column_t)(unsafe.Pointer(column)).Ftopdelta)
		bottomscreen = topscreen + spryscale*int32((*column_t)(unsafe.Pointer(column)).Flength)
		dc_yl = (topscreen + 1<<FRACBITS - 1) >> int32(FRACBITS)
		dc_yh = (bottomscreen - 1) >> int32(FRACBITS)
		if dc_yh >= int32(*(*int16)(unsafe.Pointer(mfloorclip + uintptr(dc_x)*2))) {
			dc_yh = int32(*(*int16)(unsafe.Pointer(mfloorclip + uintptr(dc_x)*2))) - 1
		}
		if dc_yl <= int32(*(*int16)(unsafe.Pointer(mceilingclip + uintptr(dc_x)*2))) {
			dc_yl = int32(*(*int16)(unsafe.Pointer(mceilingclip + uintptr(dc_x)*2))) + 1
		}
		if dc_yl <= dc_yh {
			dc_source = column + uintptr(3)
			dc_texturemid = basetexturemid - int32((*column_t)(unsafe.Pointer(column)).Ftopdelta)<<int32(FRACBITS)
			// dc_source = (byte *)column + 3 - column->topdelta;
			// Drawn by either R_DrawColumn
			//  or (SHADOW) R_DrawFuzzColumn.
			colfunc()
		}
		column = column + uintptr((*column_t)(unsafe.Pointer(column)).Flength) + uintptr(4)
		goto _1
	_1:
	}
	dc_texturemid = basetexturemid
}

// C documentation
//
//	//
//	// R_DrawVisSprite
//	//  mfloorclip and mceilingclip should also be set.
//	//
func R_DrawVisSprite(vis *vissprite_t, x1 int32, x2 int32) {
	var patch *patch_t
	var frac fixed_t
	var texturecolumn int32
	patch = W_CacheLumpNumT(vis.Fpatch+firstspritelump, int32(PU_CACHE))
	dc_colormap = vis.Fcolormap
	if dc_colormap == nil {
		// NULL colormap = shadow draw
		colfunc = fuzzcolfunc
	} else {
		if vis.Fmobjflags&MF_TRANSLATION != 0 {
			colfunc = transcolfunc
			dc_translation = translationtables[-256+(vis.Fmobjflags&MF_TRANSLATION>>(MF_TRANSSHIFT-8)):]
		}
	}
	dc_iscale = xabs(vis.Fxiscale) >> detailshift
	dc_texturemid = vis.Ftexturemid
	frac = vis.Fstartfrac
	spryscale = vis.Fscale
	sprtopscreen = centeryfrac - FixedMul(dc_texturemid, spryscale)
	dc_x = vis.Fx1
	for {
		if !(dc_x <= vis.Fx2) {
			break
		}
		texturecolumn = frac >> int32(FRACBITS)
		if texturecolumn < 0 || texturecolumn >= int32(patch.Fwidth) {
			I_Error(26942, 0)
		}
		R_DrawMaskedColumn(patch.GetColumn(texturecolumn))
		goto _1
	_1:
		;
		dc_x++
		frac += vis.Fxiscale
	}
	colfunc = basecolfunc
}

// C documentation
//
//	//
//	// R_ProjectSprite
//	// Generates a vissprite for a thing
//	//  if it might be visible.
//	//
func R_ProjectSprite(thing *mobj_t) {
	var ang angle_t
	var flip boolean
	var gxt, gyt, iscale, tr_x, tr_y, tx, tz, xscale fixed_t
	var index, lump, x1, x2, v1, v2 int32
	var rot uint32
	var sprdef *spritedef_t
	var sprframe *spriteframe_t
	var vis *vissprite_t
	// transform the origin point
	tr_x = thing.Fx - viewx
	tr_y = thing.Fy - viewy
	gxt = FixedMul(tr_x, viewcos)
	gyt = -FixedMul(tr_y, viewsin)
	tz = gxt - gyt
	// thing is behind view plane?
	if tz < 1<<FRACBITS*4 {
		return
	}
	xscale = FixedDiv(projection, tz)
	gxt = -FixedMul(tr_x, viewsin)
	gyt = FixedMul(tr_y, viewcos)
	tx = -(gyt + gxt)
	// too far off the side?
	if xabs(tx) > tz<<2 {
		return
	}
	// decide which patch to use for sprite relative to player
	if uint32(thing.Fsprite) >= uint32(numsprites) {
		I_Error(26979, thing.Fsprite)
	}
	sprdef = &sprites[thing.Fsprite]
	if thing.Fframe&int32(FF_FRAMEMASK3) >= (*spritedef_t)(unsafe.Pointer(sprdef)).Fnumframes {
		I_Error(27022, thing.Fsprite, thing.Fframe)
	}
	sprframe = &sprdef.Fspriteframes[thing.Fframe&int32(FF_FRAMEMASK3)]
	if (*spriteframe_t)(unsafe.Pointer(sprframe)).Frotate != 0 {
		// choose a different rotation based on player view
		ang = R_PointToAngle(thing.Fx, thing.Fy)
		rot = (ang - thing.Fangle + uint32(ANG455/2)*9) >> 29
		lump = int32(sprframe.Flump[rot])
		flip = uint32(sprframe.Fflip[rot])
	} else {
		// use single rotation for all views
		lump = int32(sprframe.Flump[0])
		flip = uint32(sprframe.Fflip[0])
	}
	// calculate edges of the shape
	tx -= spriteoffset[lump]
	x1 = (centerxfrac + FixedMul(tx, xscale)) >> int32(FRACBITS)
	// off the right side?
	if x1 > viewwidth {
		return
	}
	tx += spritewidth[lump]
	x2 = (centerxfrac+FixedMul(tx, xscale))>>int32(FRACBITS) - 1
	// off the left side
	if x2 < 0 {
		return
	}
	// store information in a vissprite
	vis = R_NewVisSprite()
	vis.Fmobjflags = thing.Fflags
	vis.Fscale = xscale << detailshift
	vis.Fgx = thing.Fx
	vis.Fgy = thing.Fy
	vis.Fgz = thing.Fz
	vis.Fgzt = thing.Fz + spritetopoffset[lump]
	vis.Ftexturemid = vis.Fgzt - viewz
	if x1 < 0 {
		v1 = 0
	} else {
		v1 = x1
	}
	vis.Fx1 = v1
	if x2 >= viewwidth {
		v2 = viewwidth - 1
	} else {
		v2 = x2
	}
	vis.Fx2 = v2
	iscale = FixedDiv(1<<FRACBITS, xscale)
	if flip != 0 {
		vis.Fstartfrac = spritewidth[lump] - 1
		vis.Fxiscale = -iscale
	} else {
		vis.Fstartfrac = 0
		vis.Fxiscale = iscale
	}
	if vis.Fx1 > x1 {

		vis.Fstartfrac += vis.Fxiscale * (vis.Fx1 - x1)
	}
	vis.Fpatch = lump
	// get light level
	if thing.Fflags&MF_SHADOW != 0 {
		// shadow draw
		vis.Fcolormap = nil
	} else {
		if fixedcolormap != nil {
			// fixed map
			vis.Fcolormap = fixedcolormap
		} else {
			if thing.Fframe&int32(FF_FULLBRIGHT1) != 0 {
				// full bright
				vis.Fcolormap = colormaps
			} else {
				// diminished light
				index = xscale >> (int32(LIGHTSCALESHIFT) - detailshift)
				if index >= int32(MAXLIGHTSCALE) {
					index = MAXLIGHTSCALE - 1
				}
				vis.Fcolormap = spritelights[index]
			}
		}
	}
}

// C documentation
//
//	//
//	// R_AddSprites
//	// During BSP traversal, this adds sprites by sector.
//	//
func R_AddSprites(sec *sector_t) {
	var lightnum int32
	var thing *mobj_t
	// BSP is traversed by subsector.
	// A sector might have been split into several
	//  subsectors during BSP building.
	// Thus we check whether its already added.
	if sec.Fvalidcount == validcount {
		return
	}
	// Well, now it will be done.
	sec.Fvalidcount = validcount
	lightnum = int32(sec.Flightlevel)>>int32(LIGHTSEGSHIFT) + extralight
	if lightnum < 0 {
		spritelights = scalelight[0]
	} else {
		if lightnum >= int32(LIGHTLEVELS) {
			spritelights = scalelight[LIGHTLEVELS-1]
		} else {
			spritelights = scalelight[lightnum]
		}
	}
	// Handle all things in sector.
	thing = sec.Fthinglist
	for {
		if thing == nil {
			break
		}
		R_ProjectSprite(thing)
		goto _1
	_1:
		;
		thing = thing.Fsnext
	}
}

// C documentation
//
//	//
//	// R_DrawPSprite
//	//
func R_DrawPSprite(psp *pspdef_t) {
	var flip boolean
	var lump, x1, x2, v1, v2 int32
	var sprdef *spritedef_t
	var sprframe *spriteframe_t
	var vis *vissprite_t
	var tx fixed_t
	// decide which patch to use
	if uint32(psp.Fstate.Fsprite) >= uint32(numsprites) {
		I_Error(26979, psp.Fstate.Fsprite)
	}
	sprdef = &sprites[psp.Fstate.Fsprite]
	if psp.Fstate.Fframe&int32(FF_FRAMEMASK3) >= (*spritedef_t)(unsafe.Pointer(sprdef)).Fnumframes {
		I_Error(27022, psp.Fstate.Fsprite, psp.Fstate.Fframe)
	}
	sprframe = &sprdef.Fspriteframes[psp.Fstate.Fframe&int32(FF_FRAMEMASK3)]
	lump = int32(sprframe.Flump[0])
	flip = uint32(sprframe.Fflip[0])
	// calculate edges of the shape
	tx = psp.Fsx - 160*(1<<FRACBITS)
	tx -= spriteoffset[lump]
	x1 = (centerxfrac + FixedMul(tx, pspritescale)) >> int32(FRACBITS)
	// off the right side
	if x1 > viewwidth {
		return
	}
	tx += spritewidth[lump]
	x2 = (centerxfrac+FixedMul(tx, pspritescale))>>int32(FRACBITS) - 1
	// off the left side
	if x2 < 0 {
		return
	}
	// store information in a vissprite
	vis = &vissprite_t{}
	vis.Fmobjflags = 0
	vis.Ftexturemid = BASEYCENTER<<FRACBITS + 1<<FRACBITS/2 - (psp.Fsy - spritetopoffset[lump])
	if x1 < 0 {
		v1 = 0
	} else {
		v1 = x1
	}
	vis.Fx1 = v1
	if x2 >= viewwidth {
		v2 = viewwidth - 1
	} else {
		v2 = x2
	}
	vis.Fx2 = v2
	vis.Fscale = pspritescale << detailshift
	if flip != 0 {
		vis.Fxiscale = -pspriteiscale
		vis.Fstartfrac = spritewidth[lump] - 1
	} else {
		vis.Fxiscale = pspriteiscale
		vis.Fstartfrac = 0
	}
	if vis.Fx1 > x1 {
		vis.Fstartfrac += vis.Fxiscale * fixed_t(vis.Fx1-x1)
	}
	vis.Fpatch = lump
	if viewplayer.Fpowers[pw_invisibility] > 4*32 || viewplayer.Fpowers[pw_invisibility]&int32(8) != 0 {
		// shadow draw
		vis.Fcolormap = nil
	} else {
		if fixedcolormap != nil {
			// fixed color
			vis.Fcolormap = fixedcolormap
		} else {
			if psp.Fstate.Fframe&int32(FF_FULLBRIGHT1) != 0 {
				// full bright
				vis.Fcolormap = colormaps
			} else {
				// local light
				vis.Fcolormap = spritelights[MAXLIGHTSCALE-1]
			}
		}
	}
	R_DrawVisSprite(vis, vis.Fx1, vis.Fx2)
}

// C documentation
//
//	//
//	// R_DrawPlayerSprites
//	//
func R_DrawPlayerSprites() {
	var i, lightnum int32
	// get light level
	lightnum = int32(viewplayer.Fmo.Fsubsector.Fsector.Flightlevel)>>int32(LIGHTSEGSHIFT) + extralight
	if lightnum < 0 {
		spritelights = scalelight[0]
	} else {
		if lightnum >= int32(LIGHTLEVELS) {
			spritelights = scalelight[LIGHTLEVELS-1]
		} else {
			spritelights = scalelight[lightnum]
		}
	}
	// clip to screen bounds
	mfloorclip = uintptr(unsafe.Pointer(&screenheightarray))
	mceilingclip = uintptr(unsafe.Pointer(&negonearray))
	// add all active psprites
	i = 0
	for {
		if i >= int32(NUMPSPRITES) {
			break
		}
		psp := &viewplayer.Fpsprites[i]
		if psp.Fstate != nil {
			R_DrawPSprite(psp)
		}
		goto _1
	_1:
		;
		i++
	}
}

func R_SortVisSprites() {
	bp := &vissprite_t{}
	var best, ds *vissprite_t
	var bestscale fixed_t
	var count, i int32
	count = int32(vissprite_n)
	bp.Fprev = bp
	bp.Fnext = bp
	if count == 0 {
		return
	}
	for i := 0; i < vissprite_n; i++ {
		ds := &vissprites[i]
		if i < len(vissprites)-1 {
			ds.Fnext = &vissprites[i+1]
		} else {
			ds.Fnext = nil
		}
		if i > 0 {
			ds.Fprev = &vissprites[i-1]
		} else {
			ds.Fprev = nil
		}
	}
	vissprites[0].Fprev = bp
	bp.Fnext = &vissprites[0]
	vissprites[vissprite_n-1].Fnext = bp
	bp.Fprev = &vissprites[vissprite_n-1]
	// pull the vissprites out by scale
	vsprsortedhead.Fprev = &vsprsortedhead
	vsprsortedhead.Fnext = &vsprsortedhead
	i = 0
	for {
		if i >= count {
			break
		}
		bestscale = int32(INT_MAX17)
		best = (*bp).Fnext
		ds = (*bp).Fnext
		for {
			if ds == bp {
				break
			}
			if ds.Fscale < bestscale {
				bestscale = ds.Fscale
				best = ds
			}
			goto _5
		_5:
			;
			ds = ds.Fnext
		}
		best.Fnext.Fprev = best.Fprev
		best.Fprev.Fnext = best.Fnext
		best.Fnext = &vsprsortedhead
		best.Fprev = vsprsortedhead.Fprev
		vsprsortedhead.Fprev.Fnext = best
		vsprsortedhead.Fprev = best
		goto _4
	_4:
		;
		i++
	}
}

// C documentation
//
//	//
//	// R_DrawSprite
//	//
var clipbot [320]int16
var cliptop [320]int16

func R_DrawSprite(spr *vissprite_t) {
	var ds int
	var lowscale, scale fixed_t
	var r1, r2, silhouette, x, v4, v5 int32
	var v2 int16
	x = spr.Fx1
	for {
		if !(x <= spr.Fx2) {
			break
		}
		v2 = int16(-2)
		cliptop[x] = v2
		clipbot[x] = v2
		goto _1
	_1:
		;
		x++
	}
	// Scan drawsegs from end to start for obscuring segs.
	// The first drawseg that has a greater scale
	//  is the clip seg.
	ds = ds_index - 1
	for {
		if !(ds >= 0) {
			break
		}
		// determine if the drawseg obscures the sprite
		if drawsegs[ds].Fx1 > spr.Fx2 || drawsegs[ds].Fx2 < spr.Fx1 || drawsegs[ds].Fsilhouette == 0 && drawsegs[ds].Fmaskedtexturecol == 0 {
			// does not cover sprite
			goto _3
		}
		if drawsegs[ds].Fx1 < spr.Fx1 {
			v4 = spr.Fx1
		} else {
			v4 = drawsegs[ds].Fx1
		}
		r1 = v4
		if drawsegs[ds].Fx2 > spr.Fx2 {
			v5 = spr.Fx2
		} else {
			v5 = drawsegs[ds].Fx2
		}
		r2 = v5
		if drawsegs[ds].Fscale1 > drawsegs[ds].Fscale2 {
			lowscale = drawsegs[ds].Fscale2
			scale = drawsegs[ds].Fscale1
		} else {
			lowscale = drawsegs[ds].Fscale1
			scale = drawsegs[ds].Fscale2
		}
		if scale < spr.Fscale || lowscale < spr.Fscale && R_PointOnSegSide(spr.Fgx, spr.Fgy, drawsegs[ds].Fcurline) == 0 {
			// masked mid texture?
			if drawsegs[ds].Fmaskedtexturecol != 0 {
				R_RenderMaskedSegRange(&drawsegs[ds], r1, r2)
			}
			// seg is behind sprite
			goto _3
		}
		// clip this piece of the sprite
		silhouette = drawsegs[ds].Fsilhouette
		if spr.Fgz >= drawsegs[ds].Fbsilheight {
			silhouette &= ^SIL_BOTTOM
		}
		if spr.Fgzt <= drawsegs[ds].Ftsilheight {
			silhouette &= ^SIL_TOP
		}
		if silhouette == 1 {
			// bottom sil
			x = r1
			for {
				if !(x <= r2) {
					break
				}
				if int32(clipbot[x]) == -int32(2) {
					clipbot[x] = *(*int16)(unsafe.Pointer(drawsegs[ds].Fsprbottomclip + uintptr(x)*2))
				}
				goto _6
			_6:
				;
				x++
			}
		} else {
			if silhouette == 2 {
				// top sil
				x = r1
				for {
					if !(x <= r2) {
						break
					}
					if int32(cliptop[x]) == -int32(2) {
						cliptop[x] = *(*int16)(unsafe.Pointer(drawsegs[ds].Fsprtopclip + uintptr(x)*2))
					}
					goto _7
				_7:
					;
					x++
				}
			} else {
				if silhouette == 3 {
					// both
					x = r1
					for {
						if !(x <= r2) {
							break
						}
						if int32(clipbot[x]) == -int32(2) {
							clipbot[x] = *(*int16)(unsafe.Pointer(drawsegs[ds].Fsprbottomclip + uintptr(x)*2))
						}
						if int32(cliptop[x]) == -int32(2) {
							cliptop[x] = *(*int16)(unsafe.Pointer(drawsegs[ds].Fsprtopclip + uintptr(x)*2))
						}
						goto _8
					_8:
						;
						x++
					}
				}
			}
		}
		goto _3
	_3:
		;
		ds -= 1
	}
	// all clipping has been performed, so draw the sprite
	// check for unclipped columns
	x = spr.Fx1
	for {
		if !(x <= spr.Fx2) {
			break
		}
		if int32(clipbot[x]) == -int32(2) {
			clipbot[x] = int16(viewheight)
		}
		if int32(cliptop[x]) == -int32(2) {
			cliptop[x] = int16(-1)
		}
		goto _9
	_9:
		;
		x++
	}
	mfloorclip = uintptr(unsafe.Pointer(&clipbot))
	mceilingclip = uintptr(unsafe.Pointer(&cliptop))
	R_DrawVisSprite(spr, spr.Fx1, spr.Fx2)
}

// C documentation
//
//	//
//	// R_DrawMasked
//	//
func R_DrawMasked() {
	var spr *vissprite_t
	R_SortVisSprites()
	if vissprite_n > 0 {
		// draw all vissprites back to front
		spr = vsprsortedhead.Fnext
		for {
			if spr == &vsprsortedhead {
				break
			}
			R_DrawSprite(spr)
			goto _1
		_1:
			;
			spr = spr.Fnext
		}
	}
	// render any remaining masked mid textures
	ds := ds_index - 1
	for {
		if ds < 0 {
			break
		}
		if drawsegs[ds].Fmaskedtexturecol != 0 {
			R_RenderMaskedSegRange(&drawsegs[ds], drawsegs[ds].Fx1, drawsegs[ds].Fx2)
		}
		goto _2
	_2:
		;
		ds -= 1
	}
	// draw the psprites on top of everything
	//  but does not draw on side views
	if viewangleoffset == 0 {
		R_DrawPlayerSprites()
	}
}

// C documentation
//
//	/* Update the message digest with the contents
//	 * of INBUF with length INLEN.
//	 */
func SHA1_Update(sha hash.Hash, inbuf uintptr, inlen uint64) {
	inBufBytes := unsafe.Slice((*byte)(unsafe.Pointer(inbuf)), inlen)
	sha.Write(inBufBytes)
}

func SHA1_UpdateInt32(sha hash.Hash, val uint32) {
	bp := alloc(16)
	(*(*[4]uint8)(unsafe.Pointer(bp)))[0] = uint8(val >> 24 & 0xff)
	(*(*[4]uint8)(unsafe.Pointer(bp)))[int32(1)] = uint8(val >> 16 & 0xff)
	(*(*[4]uint8)(unsafe.Pointer(bp)))[int32(2)] = uint8(val >> 8 & 0xff)
	(*(*[4]uint8)(unsafe.Pointer(bp)))[int32(3)] = uint8(val & 0xff)
	SHA1_Update(sha, bp, 4)
}

func SHA1_UpdateString(sha hash.Hash, str uintptr) {
	SHA1_Update(sha, str, xstrlen(str)+1)
}

func init() {
	S_music = [68]musicinfo_t{
		0: {},
		1: {
			Fname: __ccgo_ts(27069),
		},
		2: {
			Fname: __ccgo_ts(27074),
		},
		3: {
			Fname: __ccgo_ts(27079),
		},
		4: {
			Fname: __ccgo_ts(27084),
		},
		5: {
			Fname: __ccgo_ts(27089),
		},
		6: {
			Fname: __ccgo_ts(27094),
		},
		7: {
			Fname: __ccgo_ts(27099),
		},
		8: {
			Fname: __ccgo_ts(27104),
		},
		9: {
			Fname: __ccgo_ts(27109),
		},
		10: {
			Fname: __ccgo_ts(27114),
		},
		11: {
			Fname: __ccgo_ts(27119),
		},
		12: {
			Fname: __ccgo_ts(27124),
		},
		13: {
			Fname: __ccgo_ts(27129),
		},
		14: {
			Fname: __ccgo_ts(27134),
		},
		15: {
			Fname: __ccgo_ts(27139),
		},
		16: {
			Fname: __ccgo_ts(27144),
		},
		17: {
			Fname: __ccgo_ts(27149),
		},
		18: {
			Fname: __ccgo_ts(27154),
		},
		19: {
			Fname: __ccgo_ts(27159),
		},
		20: {
			Fname: __ccgo_ts(27164),
		},
		21: {
			Fname: __ccgo_ts(27169),
		},
		22: {
			Fname: __ccgo_ts(27174),
		},
		23: {
			Fname: __ccgo_ts(27179),
		},
		24: {
			Fname: __ccgo_ts(27184),
		},
		25: {
			Fname: __ccgo_ts(27189),
		},
		26: {
			Fname: __ccgo_ts(27194),
		},
		27: {
			Fname: __ccgo_ts(27199),
		},
		28: {
			Fname: __ccgo_ts(27204),
		},
		29: {
			Fname: __ccgo_ts(27210),
		},
		30: {
			Fname: __ccgo_ts(27216),
		},
		31: {
			Fname: __ccgo_ts(27222),
		},
		32: {
			Fname: __ccgo_ts(27229),
		},
		33: {
			Fname: __ccgo_ts(27236),
		},
		34: {
			Fname: __ccgo_ts(27243),
		},
		35: {
			Fname: __ccgo_ts(27250),
		},
		36: {
			Fname: __ccgo_ts(27257),
		},
		37: {
			Fname: __ccgo_ts(5374),
		},
		38: {
			Fname: __ccgo_ts(27264),
		},
		39: {
			Fname: __ccgo_ts(27271),
		},
		40: {
			Fname: __ccgo_ts(27277),
		},
		41: {
			Fname: __ccgo_ts(27284),
		},
		42: {
			Fname: __ccgo_ts(27291),
		},
		43: {
			Fname: __ccgo_ts(27296),
		},
		44: {
			Fname: __ccgo_ts(27303),
		},
		45: {
			Fname: __ccgo_ts(2533),
		},
		46: {
			Fname: __ccgo_ts(27310),
		},
		47: {
			Fname: __ccgo_ts(27317),
		},
		48: {
			Fname: __ccgo_ts(27324),
		},
		49: {
			Fname: __ccgo_ts(27330),
		},
		50: {
			Fname: __ccgo_ts(27337),
		},
		51: {
			Fname: __ccgo_ts(27344),
		},
		52: {
			Fname: __ccgo_ts(27351),
		},
		53: {
			Fname: __ccgo_ts(27358),
		},
		54: {
			Fname: __ccgo_ts(27365),
		},
		55: {
			Fname: __ccgo_ts(27372),
		},
		56: {
			Fname: __ccgo_ts(27378),
		},
		57: {
			Fname: __ccgo_ts(27385),
		},
		58: {
			Fname: __ccgo_ts(27392),
		},
		59: {
			Fname: __ccgo_ts(27399),
		},
		60: {
			Fname: __ccgo_ts(27406),
		},
		61: {
			Fname: __ccgo_ts(27412),
		},
		62: {
			Fname: __ccgo_ts(27419),
		},
		63: {
			Fname: __ccgo_ts(27426),
		},
		64: {
			Fname: __ccgo_ts(27431),
		},
		65: {
			Fname: __ccgo_ts(27438),
		},
		66: {
			Fname: __ccgo_ts(27445),
		},
		67: {
			Fname: __ccgo_ts(27452),
		},
	}
}

func init() {
	S_sfx = [109]sfxinfo_t{
		0: {
			Fname:        [9]int8{'n', 'o', 'n', 'e'},
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		1: {
			Fname:        [9]int8{'p', 'i', 's', 't', 'o', 'l'},
			Fpriority:    64,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		2: {
			Fname:        [9]int8{'s', 'h', 'o', 't', 'g', 'n'},
			Fpriority:    64,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		3: {
			Fname:        [9]int8{'s', 'g', 'c', 'o', 'c', 'k'},
			Fpriority:    64,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		4: {
			Fname:        [9]int8{'d', 's', 'h', 't', 'g', 'n'},
			Fpriority:    64,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		5: {
			Fname:        [9]int8{'d', 'b', 'o', 'p', 'n'},
			Fpriority:    64,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		6: {
			Fname:        [9]int8{'d', 'b', 'c', 'l', 's'},
			Fpriority:    64,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		7: {
			Fname:        [9]int8{'d', 'b', 'l', 'o', 'a', 'd'},
			Fpriority:    64,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		8: {
			Fname:        [9]int8{'p', 'l', 'a', 's', 'm', 'a'},
			Fpriority:    64,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		9: {
			Fname:        [9]int8{'b', 'f', 'g'},
			Fpriority:    64,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		10: {
			Fname:        [9]int8{'s', 'a', 'w', 'u', 'p'},
			Fpriority:    64,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		11: {
			Fname:        [9]int8{'s', 'a', 'w', 'i', 'd', 'l'},
			Fpriority:    118,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		12: {
			Fname:        [9]int8{'s', 'a', 'w', 'f', 'u', 'l'},
			Fpriority:    64,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		13: {
			Fname:        [9]int8{'s', 'a', 'w', 'h', 'i', 't'},
			Fpriority:    64,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		14: {
			Fname:        [9]int8{'r', 'l', 'a', 'u', 'n', 'c'},
			Fpriority:    64,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		15: {
			Fname:        [9]int8{'r', 'x', 'p', 'l', 'o', 'd'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		16: {
			Fname:        [9]int8{'f', 'i', 'r', 's', 'h', 't'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		17: {
			Fname:        [9]int8{'f', 'i', 'r', 'x', 'p', 'l'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		18: {
			Fname:        [9]int8{'p', 's', 't', 'a', 'r', 't'},
			Fpriority:    100,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		19: {
			Fname:        [9]int8{'p', 's', 't', 'o', 'p'},
			Fpriority:    100,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		20: {
			Fname:        [9]int8{'d', 'o', 'r', 'o', 'p', 'n'},
			Fpriority:    100,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		21: {
			Fname:        [9]int8{'d', 'o', 'r', 'c', 'l', 's'},
			Fpriority:    100,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		22: {
			Fname:        [9]int8{'s', 't', 'n', 'm', 'o', 'v'},
			Fpriority:    119,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		23: {
			Fname:        [9]int8{'s', 'w', 't', 'c', 'h', 'n'},
			Fpriority:    78,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		24: {
			Fname:        [9]int8{'s', 'w', 't', 'c', 'h', 'x'},
			Fpriority:    78,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		25: {
			Fname:        [9]int8{'p', 'l', 'p', 'a', 'i', 'n'},
			Fpriority:    96,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		26: {
			Fname:        [9]int8{'d', 'm', 'p', 'a', 'i', 'n'},
			Fpriority:    96,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		27: {
			Fname:        [9]int8{'p', 'o', 'p', 'a', 'i', 'n'},
			Fpriority:    96,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		28: {
			Fname:        [9]int8{'v', 'i', 'p', 'a', 'i', 'n'},
			Fpriority:    96,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		29: {
			Fname:        [9]int8{'m', 'n', 'p', 'a', 'i', 'n'},
			Fpriority:    96,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		30: {
			Fname:        [9]int8{'p', 'e', 'p', 'a', 'i', 'n'},
			Fpriority:    96,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		31: {
			Fname:        [9]int8{'s', 'l', 'o', 'p'},
			Fpriority:    78,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		32: {
			Fname:        [9]int8{'i', 't', 'e', 'm', 'u', 'p'},
			Fpriority:    78,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		33: {
			Fname:        [9]int8{'w', 'p', 'n', 'u', 'p'},
			Fpriority:    78,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		34: {
			Fname:        [9]int8{'o', 'o', 'f'},
			Fpriority:    96,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		35: {
			Fname:        [9]int8{'t', 'e', 'l', 'e', 'p', 't'},
			Fpriority:    32,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		36: {
			Fname:        [9]int8{'p', 'o', 's', 'i', 't', '1'},
			Fpriority:    98,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		37: {
			Fname:        [9]int8{'p', 'o', 's', 'i', 't', '2'},
			Fpriority:    98,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		38: {
			Fname:        [9]int8{'p', 'o', 's', 'i', 't', '3'},
			Fpriority:    98,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		39: {
			Fname:        [9]int8{'b', 'g', 's', 'i', 't', '1'},
			Fpriority:    98,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		40: {
			Fname:        [9]int8{'b', 'g', 's', 'i', 't', '2'},
			Fpriority:    98,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		41: {
			Fname:        [9]int8{'s', 'g', 't', 's', 'i', 't'},
			Fpriority:    98,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		42: {
			Fname:        [9]int8{'c', 'a', 'c', 's', 'i', 't'},
			Fpriority:    98,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		43: {
			Fname:        [9]int8{'b', 'r', 's', 's', 'i', 't'},
			Fpriority:    94,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		44: {
			Fname:        [9]int8{'c', 'y', 'b', 's', 'i', 't'},
			Fpriority:    92,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		45: {
			Fname:        [9]int8{'s', 'p', 'i', 's', 'i', 't'},
			Fpriority:    90,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		46: {
			Fname:        [9]int8{'b', 's', 'p', 's', 'i', 't'},
			Fpriority:    90,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		47: {
			Fname:        [9]int8{'k', 'n', 't', 's', 'i', 't'},
			Fpriority:    90,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		48: {
			Fname:        [9]int8{'v', 'i', 'l', 's', 'i', 't'},
			Fpriority:    90,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		49: {
			Fname:        [9]int8{'m', 'a', 'n', 's', 'i', 't'},
			Fpriority:    90,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		50: {
			Fname:        [9]int8{'p', 'e', 's', 'i', 't'},
			Fpriority:    90,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		51: {
			Fname:        [9]int8{'s', 'k', 'l', 'a', 't', 'k'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		52: {
			Fname:        [9]int8{'s', 'g', 't', 'a', 't', 'k'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		53: {
			Fname:        [9]int8{'s', 'k', 'e', 'p', 'c', 'h'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		54: {
			Fname:        [9]int8{'v', 'i', 'l', 'a', 't', 'k'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		55: {
			Fname:        [9]int8{'c', 'l', 'a', 'w'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		56: {
			Fname:        [9]int8{'s', 'k', 'e', 's', 'w', 'g'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		57: {
			Fname:        [9]int8{'p', 'l', 'd', 'e', 't', 'h'},
			Fpriority:    32,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		58: {
			Fname:        [9]int8{'p', 'd', 'i', 'e', 'h', 'i'},
			Fpriority:    32,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		59: {
			Fname:        [9]int8{'p', 'o', 'd', 't', 'h', '1'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		60: {
			Fname:        [9]int8{'p', 'o', 'd', 't', 'h', '2'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		61: {
			Fname:        [9]int8{'p', 'o', 'd', 't', 'h', '3'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		62: {
			Fname:        [9]int8{'b', 'g', 'd', 't', 'h', '1'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		63: {
			Fname:        [9]int8{'b', 'g', 'd', 't', 'h', '2'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		64: {
			Fname:        [9]int8{'s', 'g', 't', 'd', 't', 'h'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		65: {
			Fname:        [9]int8{'c', 'a', 'c', 'd', 't', 'h'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		66: {
			Fname:        [9]int8{'s', 'k', 'l', 'd', 't', 'h'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		67: {
			Fname:        [9]int8{'b', 'r', 's', 'd', 't', 'h'},
			Fpriority:    32,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		68: {
			Fname:        [9]int8{'c', 'y', 'b', 'd', 't', 'h'},
			Fpriority:    32,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		69: {
			Fname:        [9]int8{'s', 'p', 'i', 'd', 't', 'h'},
			Fpriority:    32,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		70: {
			Fname:        [9]int8{'b', 's', 'p', 'd', 't', 'h'},
			Fpriority:    32,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		71: {
			Fname:        [9]int8{'v', 'i', 'l', 'd', 't', 'h'},
			Fpriority:    32,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		72: {
			Fname:        [9]int8{'k', 'n', 't', 'd', 't', 'h'},
			Fpriority:    32,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		73: {
			Fname:        [9]int8{'p', 'e', 'd', 't', 'h'},
			Fpriority:    32,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		74: {
			Fname:        [9]int8{'s', 'k', 'e', 'd', 't', 'h'},
			Fpriority:    32,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		75: {
			Fname:        [9]int8{'p', 'o', 's', 'a', 'c', 't'},
			Fpriority:    120,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		76: {
			Fname:        [9]int8{'b', 'g', 'a', 'c', 't'},
			Fpriority:    120,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		77: {
			Fname:        [9]int8{'d', 'm', 'a', 'c', 't'},
			Fpriority:    120,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		78: {
			Fname:        [9]int8{'b', 's', 'p', 'a', 'c', 't'},
			Fpriority:    100,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		79: {
			Fname:        [9]int8{'b', 's', 'p', 'w', 'l', 'k'},
			Fpriority:    100,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		80: {
			Fname:        [9]int8{'v', 'i', 'l', 'a', 'c', 't'},
			Fpriority:    100,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		81: {
			Fname:        [9]int8{'n', 'o', 'w', 'a', 'y'},
			Fpriority:    78,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		82: {
			Fname:        [9]int8{'b', 'a', 'r', 'e', 'x', 'p'},
			Fpriority:    60,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		83: {
			Fname:        [9]int8{'p', 'u', 'n', 'c', 'h'},
			Fpriority:    64,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		84: {
			Fname:        [9]int8{'h', 'o', 'o', 'f'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		85: {
			Fname:        [9]int8{'m', 'e', 't', 'a', 'l'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		86: {
			Fname:        [9]int8{'c', 'h', 'g', 'u', 'n'},
			Fpriority:    64,
			Flink:        uintptr(unsafe.Pointer(&S_sfx)) + uintptr(sfx_pistol)*64,
			Fpitch:       150,
			Fnumchannels: -1,
		},
		87: {
			Fname:        [9]int8{'t', 'i', 'n', 'k'},
			Fpriority:    60,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		88: {
			Fname:        [9]int8{'b', 'd', 'o', 'p', 'n'},
			Fpriority:    100,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		89: {
			Fname:        [9]int8{'b', 'd', 'c', 'l', 's'},
			Fpriority:    100,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		90: {
			Fname:        [9]int8{'i', 't', 'm', 'b', 'k'},
			Fpriority:    100,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		91: {
			Fname:        [9]int8{'f', 'l', 'a', 'm', 'e'},
			Fpriority:    32,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		92: {
			Fname:        [9]int8{'f', 'l', 'a', 'm', 's', 't'},
			Fpriority:    32,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		93: {
			Fname:        [9]int8{'g', 'e', 't', 'p', 'o', 'w'},
			Fpriority:    60,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		94: {
			Fname:        [9]int8{'b', 'o', 's', 'p', 'i', 't'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		95: {
			Fname:        [9]int8{'b', 'o', 's', 'c', 'u', 'b'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		96: {
			Fname:        [9]int8{'b', 'o', 's', 's', 'i', 't'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		97: {
			Fname:        [9]int8{'b', 'o', 's', 'p', 'n'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		98: {
			Fname:        [9]int8{'b', 'o', 's', 'd', 't', 'h'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		99: {
			Fname:        [9]int8{'m', 'a', 'n', 'a', 't', 'k'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		100: {
			Fname:        [9]int8{'m', 'a', 'n', 'd', 't', 'h'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		101: {
			Fname:        [9]int8{'s', 's', 's', 'i', 't'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		102: {
			Fname:        [9]int8{'s', 's', 'd', 't', 'h'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		103: {
			Fname:        [9]int8{'k', 'e', 'e', 'n', 'p', 'n'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		104: {
			Fname:        [9]int8{'k', 'e', 'e', 'n', 'd', 't'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		105: {
			Fname:        [9]int8{'s', 'k', 'e', 'a', 'c', 't'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		106: {
			Fname:        [9]int8{'s', 'k', 'e', 's', 'i', 't'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		107: {
			Fname:        [9]int8{'s', 'k', 'e', 'a', 't', 'k'},
			Fpriority:    70,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
		108: {
			Fname:        [9]int8{'r', 'a', 'd', 'i', 'o'},
			Fpriority:    60,
			Fpitch:       -1,
			Fvolume:      -1,
			Fnumchannels: -1,
		},
	}
}

const MAX_CAPTURES = 32

// Array of end-of-level statistics that have been captured.

var captured_stats [32]wbstartstruct_t
var num_captured_stats int32 = 0

func StatCopy(stats *wbstartstruct_t) {
	if M_ParmExists(__ccgo_ts_str(5318)) != 0 && num_captured_stats < MAX_CAPTURES {
		captured_stats[num_captured_stats] = *stats
		num_captured_stats++
	}
}

func StatDump() {
}

type st_number_t struct {
	Fx      int32
	Fy      int32
	Fwidth  int32
	Foldnum int32
	Fnum    uintptr
	Fon     *boolean
	Fp      []*patch_t
	Fdata   weapontype_t
}

type st_percent_t struct {
	Fn st_number_t
	Fp *patch_t
}

type st_multicon_t struct {
	Fx       int32
	Fy       int32
	Foldinum int32
	Finum    *int32
	Fon      *boolean
	Fp       []*patch_t
	Fdata    int32
}

type st_binicon_t struct {
	Fx      int32
	Fy      int32
	Foldval boolean
	Fval    *boolean
	Fon     *boolean
	Fp      *patch_t
	Fdata   int32
}

func STlib_init() {
	sttminus = W_CacheLumpNameT(__ccgo_ts(27459), int32(PU_STATIC))
}

// C documentation
//
//	// ?
func STlib_initNum(st *st_number_t, x int32, y int32, pl []*patch_t, num uintptr, on *boolean, width int32) {
	st.Fx = x
	st.Fy = y
	st.Foldnum = 0
	st.Fwidth = width
	st.Fnum = num
	st.Fon = on
	st.Fp = pl
}

// C documentation
//
//	//
//	// A fairly efficient way to draw a number
//	//  based on differences from the old number.
//	// Note: worth the trouble?
//	//
func STlib_drawNum(n *st_number_t, refresh boolean) {
	var h, neg, num, numdigits, w, x, v1 int32
	var v2 bool
	numdigits = n.Fwidth
	num = *(*int32)(unsafe.Pointer(n.Fnum))
	w = int32(n.Fp[0].Fwidth)
	h = int32(n.Fp[0].Fheight)
	// [crispy] redraw only if necessary
	if n.Foldnum == num && refresh == 0 {
		return
	}
	n.Foldnum = *(*int32)(unsafe.Pointer(n.Fnum))
	neg = boolint32(num < 0)
	if neg != 0 {
		if numdigits == 2 && num < -9 {
			num = -9
		} else {
			if numdigits == 3 && num < -99 {
				num = -99
			}
		}
		num = -num
	}
	// clear the area
	x = n.Fx - numdigits*w
	if n.Fy-(SCREENHEIGHT-ST_HEIGHT) < 0 {
		I_Error(27468, 0)
	}
	V_CopyRect(x, n.Fy-(SCREENHEIGHT-ST_HEIGHT), st_backing_screen, w*numdigits, h, x, n.Fy)
	// if non-number, do not draw it
	if num == 1994 {
		return
	}
	x = n.Fx
	// in the special case of 0, you draw 0
	if num == 0 {
		V_DrawPatch(x-w, n.Fy, n.Fp[0])
	}
	// draw the new number
	for {
		if v2 = num != 0; v2 {
			v1 = numdigits
			numdigits--
		}
		if !(v2 && v1 != 0) {
			break
		}
		x -= w
		V_DrawPatch(x, n.Fy, n.Fp[num%10])
		num /= 10
	}
	// draw a minus sign if necessary
	if neg != 0 {
		V_DrawPatch(x-int32(8), n.Fy, sttminus)
	}
}

// C documentation
//
//	//
func STlib_updateNum(n *st_number_t, refresh boolean) {
	if *n.Fon != 0 {
		STlib_drawNum(n, refresh)
	}
}

// C documentation
//
//	//
func STlib_initPercent(st *st_percent_t, x int32, y int32, pl []*patch_t, num uintptr, on *boolean, percent *patch_t) {
	STlib_initNum(&st.Fn, x, y, pl, num, on, 3)
	st.Fp = percent
}

func STlib_updatePercent(per *st_percent_t, refresh int32) {
	if refresh != 0 && *(*boolean)(unsafe.Pointer(per.Fn.Fon)) != 0 {
		V_DrawPatch(per.Fn.Fx, per.Fn.Fy, per.Fp)
	}
	STlib_updateNum(&per.Fn, uint32(refresh))
}

func STlib_initMultIcon(st *st_multicon_t, x int32, y int32, il []*patch_t, inum *int32, on *boolean) {
	st.Fx = x
	st.Fy = y
	st.Foldinum = -1
	st.Finum = inum
	st.Fon = on
	st.Fp = il
}

func STlib_updateMultIcon(mi *st_multicon_t, refresh boolean) {
	var h, w, x, y int32
	if *mi.Fon != 0 && (mi.Foldinum != *(*int32)(unsafe.Pointer(mi.Finum)) || refresh != 0) && *(*int32)(unsafe.Pointer(mi.Finum)) != -1 {
		if mi.Foldinum != -1 {
			x = mi.Fx - int32(mi.Fp[mi.Foldinum].Fleftoffset)
			y = mi.Fy - int32(mi.Fp[mi.Foldinum].Ftopoffset)
			w = int32(mi.Fp[mi.Foldinum].Fwidth)
			h = int32(mi.Fp[mi.Foldinum].Fheight)
			if y-(SCREENHEIGHT-ST_HEIGHT) < 0 {
				I_Error(27493, 0)
			}
			V_CopyRect(x, y-(SCREENHEIGHT-ST_HEIGHT), st_backing_screen, w, h, x, y)
		}
		V_DrawPatch(mi.Fx, mi.Fy, mi.Fp[*mi.Finum])
		mi.Foldinum = *mi.Finum
	}
}

func STlib_initBinIcon(st *st_binicon_t, x int32, y int32, i *patch_t, val *boolean, on *boolean) {
	st.Fx = x
	st.Fy = y
	st.Foldval = 0
	st.Fval = val
	st.Fon = on
	st.Fp = i
}

func STlib_updateBinIcon(bi *st_binicon_t, refresh boolean) {
	var h, w, x, y int32
	if *bi.Fon != 0 && (bi.Foldval != *(*boolean)(unsafe.Pointer(bi.Fval)) || refresh != 0) {
		x = bi.Fx - int32((*patch_t)(unsafe.Pointer(bi.Fp)).Fleftoffset)
		y = bi.Fy - int32((*patch_t)(unsafe.Pointer(bi.Fp)).Ftopoffset)
		w = int32((*patch_t)(unsafe.Pointer(bi.Fp)).Fwidth)
		h = int32((*patch_t)(unsafe.Pointer(bi.Fp)).Fheight)
		if y-(SCREENHEIGHT-ST_HEIGHT) < 0 {
			I_Error(27522, 0)
		}
		if *(*boolean)(unsafe.Pointer(bi.Fval)) != 0 {
			V_DrawPatch(bi.Fx, bi.Fy, bi.Fp)
		} else {
			V_CopyRect(x, y-(SCREENHEIGHT-ST_HEIGHT), st_backing_screen, w, h, x, y)
		}
		bi.Foldval = *(*boolean)(unsafe.Pointer(bi.Fval))
	}
}

const ANG18015 = 2147483648
const ANG457 = 536870912
const NUMBONUSPALS = 4
const NUMREDPALS = 8
const RADIATIONPAL = 13
const STARTBONUSPALS = 9
const STARTREDPALS = 1
const ST_AMMO0WIDTH = 3
const ST_AMMO0X = 288
const ST_AMMO0Y = 173
const ST_AMMO1X = 288
const ST_AMMO1Y = 179
const ST_AMMO2X = 288
const ST_AMMO2Y = 191
const ST_AMMO3X = 288
const ST_AMMO3Y = 185
const ST_AMMOWIDTH = 3
const ST_AMMOX = 44
const ST_AMMOY = 171
const ST_ARMORX = 221
const ST_ARMORY = 171
const ST_ARMSBGX = 104
const ST_ARMSBGY = 168
const ST_ARMSX = 111
const ST_ARMSXSPACE = 12
const ST_ARMSY = 172
const ST_ARMSYSPACE = 10
const ST_FACESX = 143
const ST_FACESY = 168
const ST_FRAGSWIDTH = 2
const ST_FRAGSX = 138
const ST_FRAGSY = 171
const ST_FX = 143
const ST_HEALTHX = 90
const ST_HEALTHY = 171
const ST_KEY0X = 239
const ST_KEY0Y = 171
const ST_KEY1X = 239
const ST_KEY1Y = 181
const ST_KEY2X = 239
const ST_KEY2Y = 191
const ST_MAXAMMO0WIDTH = 3
const ST_MAXAMMO0X = 314
const ST_MAXAMMO0Y = 173
const ST_MAXAMMO1X = 314
const ST_MAXAMMO1Y = 179
const ST_MAXAMMO2X = 314
const ST_MAXAMMO2Y = 191
const ST_MAXAMMO3X = 314
const ST_MAXAMMO3Y = 185
const ST_MUCHPAIN = 20
const ST_NUMPAINFACES = 5
const ST_NUMSPECIALFACES = 3
const ST_NUMSTRAIGHTFACES = 3
const ST_NUMTURNFACES = 2
const ST_X = 0

// C documentation
//
//	// main player in game
var plyr *player_t

// C documentation
//
//	// ST_Start() has just been called
var st_firsttime boolean

// C documentation
//
//	// lump number for PLAYPAL
var lu_palette int32

// C documentation
//
//	// whether left-side main status bar is active
var st_statusbaron boolean

// C documentation
//
//	// !deathmatch
var st_notdeathmatch boolean

// C documentation
//
//	// !deathmatch && st_statusbaron
var st_armson boolean

// C documentation
//
//	// !deathmatch
var st_fragson boolean

// C documentation
//
//	// main bar left
var sbar *patch_t

// C documentation
//
//	// 0-9, tall numbers
var tallnum [10]*patch_t

// C documentation
//
//	// tall % sign
var tallpercent *patch_t

// C documentation
//
//	// 0-9, short, yellow (,different!) numbers
var shortnum [10]*patch_t

// C documentation
//
//	// 3 key-cards, 3 skulls
var keys [6]*patch_t

// C documentation
//
//	// face status patches
var faces [42]*patch_t

// C documentation
//
//	// face background
var faceback *patch_t

// C documentation
//
//	// main bar right
var armsbg *patch_t

// C documentation
//
//	// weapon ownership patches
var arms [6][2]*patch_t

// C documentation
//
//	// ready-weapon widget
var w_ready st_number_t

// C documentation
//
//	// in deathmatch only, summary of frags stats
var w_frags st_number_t

// C documentation
//
//	// health widget
var w_health st_percent_t

// C documentation
//
//	// arms background
var w_armsbg st_binicon_t

// C documentation
//
//	// weapon ownership widgets
var w_arms [6]st_multicon_t

// C documentation
//
//	// face status widget
var w_faces st_multicon_t

// C documentation
//
//	// keycard widgets
var w_keyboxes [3]st_multicon_t

// C documentation
//
//	// armor widget
var w_armor st_percent_t

// C documentation
//
//	// ammo widgets
var w_ammo [4]st_number_t

// C documentation
//
//	// max ammo widgets
var w_maxammo [4]st_number_t

// C documentation
//
//	// number of frags so far in deathmatch
var st_fragscount int32

// C documentation
//
//	// used to use appopriately pained face
var st_oldhealth int32 = -1

// C documentation
//
//	// used for evil grin
var oldweaponsowned [9]boolean

// C documentation
//
//	// count until face changes
var st_facecount int32 = 0

// C documentation
//
//	// current face index, used by w_faces
var st_faceindex int32 = 0

// C documentation
//
//	// holds key-type for each key box on bar
var keyboxes [3]int32

// C documentation
//
//	// a random number per tick
var st_randomnumber int32

func init() {
	cheat_mus = cheatseq_t{
		Fsequence:        [25]int8{'i', 'd', 'm', 'u', 's'},
		Fsequence_len:    6 - 1,
		Fparameter_chars: 2,
		Fparameter_buf:   [5]byte{},
	}
}

func init() {
	cheat_god = cheatseq_t{
		Fsequence:      [25]int8{'i', 'd', 'd', 'q', 'd'},
		Fsequence_len:  6 - 1,
		Fparameter_buf: [5]byte{},
	}
}

func init() {
	cheat_ammo = cheatseq_t{
		Fsequence:      [25]int8{'i', 'd', 'k', 'f', 'a'},
		Fsequence_len:  6 - 1,
		Fparameter_buf: [5]byte{},
	}
}

func init() {
	cheat_ammonokey = cheatseq_t{
		Fsequence:      [25]int8{'i', 'd', 'f', 'a'},
		Fsequence_len:  5 - 1,
		Fparameter_buf: [5]byte{},
	}
}

func init() {
	cheat_noclip = cheatseq_t{
		Fsequence:      [25]int8{'i', 'd', 's', 'p', 'i', 's', 'p', 'o', 'p', 'd'},
		Fsequence_len:  11 - 1,
		Fparameter_buf: [5]byte{},
	}
}

func init() {
	cheat_commercial_noclip = cheatseq_t{
		Fsequence:      [25]int8{'i', 'd', 'c', 'l', 'i', 'p'},
		Fsequence_len:  7 - 1,
		Fparameter_buf: [5]byte{},
	}
}

func init() {
	cheat_powerup = [7]cheatseq_t{
		0: {
			Fsequence:      [25]int8{'i', 'd', 'b', 'e', 'h', 'o', 'l', 'd', 'v'},
			Fsequence_len:  10 - 1,
			Fparameter_buf: [5]byte{},
		},
		1: {
			Fsequence:      [25]int8{'i', 'd', 'b', 'e', 'h', 'o', 'l', 'd', 's'},
			Fsequence_len:  10 - 1,
			Fparameter_buf: [5]byte{},
		},
		2: {
			Fsequence:      [25]int8{'i', 'd', 'b', 'e', 'h', 'o', 'l', 'd', 'i'},
			Fsequence_len:  10 - 1,
			Fparameter_buf: [5]byte{},
		},
		3: {
			Fsequence:      [25]int8{'i', 'd', 'b', 'e', 'h', 'o', 'l', 'd', 'r'},
			Fsequence_len:  10 - 1,
			Fparameter_buf: [5]byte{},
		},
		4: {
			Fsequence:      [25]int8{'i', 'd', 'b', 'e', 'h', 'o', 'l', 'd', 'a'},
			Fsequence_len:  10 - 1,
			Fparameter_buf: [5]byte{},
		},
		5: {
			Fsequence:      [25]int8{'i', 'd', 'b', 'e', 'h', 'o', 'l', 'd', 'l'},
			Fsequence_len:  10 - 1,
			Fparameter_buf: [5]byte{},
		},
		6: {
			Fsequence:      [25]int8{'i', 'd', 'b', 'e', 'h', 'o', 'l', 'd'},
			Fsequence_len:  9 - 1,
			Fparameter_buf: [5]byte{},
		},
	}
}

func init() {
	cheat_choppers = cheatseq_t{
		Fsequence:      [25]int8{'i', 'd', 'c', 'h', 'o', 'p', 'p', 'e', 'r', 's'},
		Fsequence_len:  11 - 1,
		Fparameter_buf: [5]byte{},
	}
}

func init() {
	cheat_clev = cheatseq_t{
		Fsequence:        [25]int8{'i', 'd', 'c', 'l', 'e', 'v'},
		Fsequence_len:    7 - 1,
		Fparameter_chars: 2,
		Fparameter_buf:   [5]byte{},
	}
}

func init() {
	cheat_mypos = cheatseq_t{
		Fsequence:      [25]int8{'i', 'd', 'm', 'y', 'p', 'o', 's'},
		Fsequence_len:  8 - 1,
		Fparameter_buf: [5]byte{},
	}
}

func ST_refreshBackground() {
	if st_statusbaron != 0 {
		V_UseBuffer(st_backing_screen)
		V_DrawPatch(ST_X, 0, sbar)
		if netgame != 0 {
			V_DrawPatch(ST_FX, 0, faceback)
		}
		V_RestoreBuffer()
		V_CopyRect(ST_X, 0, st_backing_screen, SCREENWIDTH, ST_HEIGHT, ST_X, SCREENHEIGHT-ST_HEIGHT)
	}
}

// C documentation
//
//	// Respond to keyboard input events,
//	//  intercept cheats.
func ST_Responder(ev *event_t) (r boolean) {
	var epsd, i, map1, musnum int32
	var v6, v8 GameMission_t
	var v10 bool
	// Filter automap on/off.
	if ev.Ftype1 == ev_keyup && uint32(ev.Fdata1)&0xffff0000 == uint32(int32('a')<<24+int32('m')<<16) {
		switch ev.Fdata1 {
		case int32('a')<<24 + int32('m')<<16 | int32('e')<<8:
			st_firsttime = 1
		case int32('a')<<24 + int32('m')<<16 | int32('x')<<8:
			//	fprintf(stderr, "AM exited\n");
			break
		}
	} else {
		if ev.Ftype1 == ev_keydown {
			if netgame == 0 && gameskill != sk_nightmare {
				// 'dqd' cheat for toggleable god mode
				if cht_CheckCheat(&cheat_god, int8(ev.Fdata2)) != 0 {
					plyr.Fcheats ^= int32(CF_GODMODE)
					if plyr.Fcheats&int32(CF_GODMODE) != 0 {
						if plyr.Fmo != nil {
							plyr.Fmo.Fhealth = 100
						}
						plyr.Fhealth = int32(DEH_DEFAULT_GOD_MODE_HEALTH)
						plyr.Fmessage = __ccgo_ts_str(27550)
					} else {
						plyr.Fmessage = __ccgo_ts_str(27573)
					}
				} else {
					if cht_CheckCheat(&cheat_ammonokey, int8(ev.Fdata2)) != 0 {
						plyr.Farmorpoints = int32(DEH_DEFAULT_IDFA_ARMOR)
						plyr.Farmortype = int32(DEH_DEFAULT_IDFA_ARMOR_CLASS)
						i = 0
						for {
							if i >= int32(NUMWEAPONS) {
								break
							}
							plyr.Fweaponowned[i] = 1
							goto _1
						_1:
							;
							i++
						}
						i = 0
						for {
							if i >= int32(NUMAMMO) {
								break
							}
							plyr.Fammo[i] = plyr.Fmaxammo[i]
							goto _2
						_2:
							;
							i++
						}
						plyr.Fmessage = __ccgo_ts_str(27597)
					} else {
						if cht_CheckCheat(&cheat_ammo, int8(ev.Fdata2)) != 0 {
							plyr.Farmorpoints = int32(DEH_DEFAULT_IDKFA_ARMOR)
							plyr.Farmortype = int32(DEH_DEFAULT_IDKFA_ARMOR_CLASS)
							i = 0
							for {
								if i >= int32(NUMWEAPONS) {
									break
								}
								plyr.Fweaponowned[i] = 1
								goto _3
							_3:
								;
								i++
							}
							i = 0
							for {
								if i >= int32(NUMAMMO) {
									break
								}
								plyr.Fammo[i] = plyr.Fmaxammo[i]
								goto _4
							_4:
								;
								i++
							}
							i = 0
							for {
								if i >= int32(NUMCARDS) {
									break
								}
								plyr.Fcards[i] = 1
								goto _5
							_5:
								;
								i++
							}
							plyr.Fmessage = __ccgo_ts_str(27618)
						} else {
							if cht_CheckCheat(&cheat_mus, int8(ev.Fdata2)) != 0 {
								plyr.Fmessage = __ccgo_ts_str(27640)
								var param [5]byte
								cht_GetParam(&cheat_mus, param[:])
								// Note: The original v1.9 had a bug that tried to play back
								// the Doom II music regardless of gamemode.  This was fixed
								// in the Ultimate Doom executable so that it would work for
								// the Doom 1 music as well.
								if gamemode == commercial || gameversion < exe_ultimate {
									musnum = int32(mus_runnin) + (int32((param[0]))-int32('0'))*int32(10) + int32(param[int32(1)]) - int32('0') - 1
									if (int32(param[0])-int32('0'))*int32(10)+int32(param[int32(1)])-int32('0') > 35 {
										plyr.Fmessage = __ccgo_ts_str(27653)
									} else {
										S_ChangeMusic(musnum, 1)
									}
								} else {
									musnum = int32(mus_e1m1) + (int32(param[0])-int32('1'))*9 + (int32(param[int32(1)]) - int32('1'))
									if (int32(param[0])-int32('1'))*9+int32(param[int32(1)])-int32('1') > 31 {
										plyr.Fmessage = __ccgo_ts_str(27653)
									} else {
										S_ChangeMusic(musnum, 1)
									}
								}
							} else {
								if gamemission == pack_chex {
									v6 = doom
								} else {
									if gamemission == pack_hacx {
										v6 = doom2
									} else {
										v6 = gamemission
									}
								}
								if v10 = v6 == doom && cht_CheckCheat(&cheat_noclip, int8(ev.Fdata2)) != 0; !v10 {
									if gamemission == pack_chex {
										v8 = doom
									} else {
										if gamemission == pack_hacx {
											v8 = doom2
										} else {
											v8 = gamemission
										}
									}
								}
								if v10 || v8 != doom && cht_CheckCheat(&cheat_commercial_noclip, int8(ev.Fdata2)) != 0 {
									// Noclip cheat.
									// For Doom 1, use the idspipsopd cheat; for all others, use
									// idclip
									plyr.Fcheats ^= int32(CF_NOCLIP)
									if plyr.Fcheats&int32(CF_NOCLIP) != 0 {
										plyr.Fmessage = __ccgo_ts_str(27674)
									} else {
										plyr.Fmessage = __ccgo_ts_str(27694)
									}
								}
							}
						}
					}
				}
				// 'behold?' power-up cheats
				i = 0
				for {
					if i >= 6 {
						break
					}
					if cht_CheckCheat(&cheat_powerup[i], int8(ev.Fdata2)) != 0 {
						if plyr.Fpowers[i] == 0 {
							P_GivePower(plyr, i)
						} else {
							if i != int32(pw_strength) {
								plyr.Fpowers[i] = 1
							} else {
								plyr.Fpowers[i] = 0
							}
						}
						plyr.Fmessage = __ccgo_ts_str(27715)
					}
					goto _11
				_11:
					;
					i++
				}
				// 'behold' power-up menu
				if cht_CheckCheat(&cheat_powerup[6], int8(ev.Fdata2)) != 0 {
					plyr.Fmessage = __ccgo_ts_str(27732)
				} else {
					if cht_CheckCheat(&cheat_choppers, int8(ev.Fdata2)) != 0 {
						plyr.Fweaponowned[wp_chainsaw] = 1
						plyr.Fpowers[pw_invulnerability] = 1
						plyr.Fmessage = __ccgo_ts_str(27778)
					} else {
						if cht_CheckCheat(&cheat_mypos, int8(ev.Fdata2)) != 0 {
							plyr.Fmessage = fmt.Sprintf(__ccgo_ts_str(27800), players[consoleplayer].Fmo.Fangle, players[consoleplayer].Fmo.Fx, players[consoleplayer].Fmo.Fy)
						}
					}
				}
			}
			// 'clev' change-level cheat
			if netgame == 0 && cht_CheckCheat(&cheat_clev, int8(ev.Fdata2)) != 0 {
				var param [5]byte
				cht_GetParam(&cheat_clev, param[:])
				if gamemode == commercial {
					epsd = 1
					map1 = (int32(param[0])-int32('0'))*int32(10) + int32(param[int32(1)]) - int32('0')
				} else {
					epsd = int32(param[0]) - int32('0')
					map1 = int32(param[int32(1)]) - int32('0')
				}
				// Chex.exe always warps to episode 1.
				if gameversion == exe_chex {
					epsd = 1
				}
				// Catch invalid maps.
				if epsd < 1 {
					return 0
				}
				if map1 < 1 {
					return 0
				}
				// Ohmygod - this is not going to work.
				if gamemode == retail && (epsd > 4 || map1 > 9) {
					return 0
				}
				if gamemode == registered && (epsd > 3 || map1 > 9) {
					return 0
				}
				if gamemode == shareware && (epsd > 1 || map1 > 9) {
					return 0
				}
				// The source release has this check as map > 34. However, Vanilla
				// Doom allows IDCLEV up to MAP40 even though it normally crashes.
				if gamemode == commercial && (epsd > 1 || map1 > 40) {
					return 0
				}
				// So be it.
				plyr.Fmessage = __ccgo_ts_str(27825)
				G_DeferedInitNew(gameskill, epsd, map1)
			}
		}
	}
	return 0
}

func ST_calcPainOffset() (r int32) {
	var health, v1 int32
	if plyr.Fhealth > 100 {
		v1 = 100
	} else {
		v1 = plyr.Fhealth
	}
	health = v1
	if health != oldhealth {
		lastcalc = (ST_NUMSTRAIGHTFACES + ST_NUMTURNFACES + ST_NUMSPECIALFACES) * ((int32(100) - health) * ST_NUMPAINFACES / 101)
		oldhealth = health
	}
	return lastcalc
}

var lastcalc int32

var oldhealth int32 = -1

// C documentation
//
//	//
//	// This is a not-very-pretty routine which handles
//	//  the face states and their timing.
//	// the precedence of expressions is:
//	//  dead > evil grin > turned head > straight ahead
//	//
func ST_updateFaceWidget() {
	var badguyangle, diffang angle_t
	var doevilgrin boolean
	var i, v2 int32
	if priority < 10 {
		// dead
		if plyr.Fhealth == 0 {
			priority = 9
			st_faceindex = ST_NUMPAINFACES*(ST_NUMSTRAIGHTFACES+ST_NUMTURNFACES+ST_NUMSPECIALFACES) + 1
			st_facecount = 1
		}
	}
	if priority < 9 {
		if plyr.Fbonuscount != 0 {
			// picking up bonus
			doevilgrin = 0
			i = 0
			for {
				if i >= int32(NUMWEAPONS) {
					break
				}
				if oldweaponsowned[i] != plyr.Fweaponowned[i] {
					doevilgrin = 1
					oldweaponsowned[i] = plyr.Fweaponowned[i]
				}
				goto _1
			_1:
				;
				i++
			}
			if doevilgrin != 0 {
				// evil grin if just picked up weapon
				priority = 8
				st_facecount = 2 * TICRATE
				st_faceindex = ST_calcPainOffset() + (ST_NUMSTRAIGHTFACES + ST_NUMTURNFACES + 1)
			}
		}
	}
	if priority < 8 {
		if plyr.Fdamagecount != 0 && plyr.Fattacker != nil && plyr.Fattacker != plyr.Fmo {
			// being attacked
			priority = 7
			if plyr.Fhealth-st_oldhealth > ST_MUCHPAIN {
				st_facecount = 1 * TICRATE
				st_faceindex = ST_calcPainOffset() + (ST_NUMSTRAIGHTFACES + ST_NUMTURNFACES)
			} else {
				badguyangle = R_PointToAngle2(plyr.Fmo.Fx, plyr.Fmo.Fy, (*mobj_t)(unsafe.Pointer(plyr.Fattacker)).Fx, (*mobj_t)(unsafe.Pointer(plyr.Fattacker)).Fy)
				if badguyangle > plyr.Fmo.Fangle {
					// whether right or left
					diffang = badguyangle - plyr.Fmo.Fangle
					i = boolint32(diffang > uint32(ANG18015))
				} else {
					// whether left or right
					diffang = plyr.Fmo.Fangle - badguyangle
					i = boolint32(diffang <= uint32(ANG18015))
				} // confusing, aint it?
				st_facecount = 1 * TICRATE
				st_faceindex = ST_calcPainOffset()
				if diffang < uint32(ANG457) {
					// head-on
					st_faceindex += ST_NUMSTRAIGHTFACES + ST_NUMTURNFACES + 1 + 1
				} else {
					if i != 0 {
						// turn face right
						st_faceindex += ST_NUMSTRAIGHTFACES
					} else {
						// turn face left
						st_faceindex += ST_NUMSTRAIGHTFACES + 1
					}
				}
			}
		}
	}
	if priority < 7 {
		// getting hurt because of your own damn stupidity
		if plyr.Fdamagecount != 0 {
			if plyr.Fhealth-st_oldhealth > ST_MUCHPAIN {
				priority = 7
				st_facecount = 1 * TICRATE
				st_faceindex = ST_calcPainOffset() + (ST_NUMSTRAIGHTFACES + ST_NUMTURNFACES)
			} else {
				priority = 6
				st_facecount = 1 * TICRATE
				st_faceindex = ST_calcPainOffset() + (ST_NUMSTRAIGHTFACES + ST_NUMTURNFACES + 1 + 1)
			}
		}
	}
	if priority < 6 {
		// rapid firing
		if plyr.Fattackdown != 0 {
			if lastattackdown == -1 {
				lastattackdown = 2 * TICRATE
			} else {
				lastattackdown--
				v2 = lastattackdown
				if v2 == 0 {
					priority = 5
					st_faceindex = ST_calcPainOffset() + (ST_NUMSTRAIGHTFACES + ST_NUMTURNFACES + 1 + 1)
					st_facecount = 1
					lastattackdown = 1
				}
			}
		} else {
			lastattackdown = -1
		}
	}
	if priority < 5 {
		// invulnerability
		if plyr.Fcheats&int32(CF_GODMODE) != 0 || plyr.Fpowers[pw_invulnerability] != 0 {
			priority = 4
			st_faceindex = ST_NUMPAINFACES * (ST_NUMSTRAIGHTFACES + ST_NUMTURNFACES + ST_NUMSPECIALFACES)
			st_facecount = 1
		}
	}
	// look left or look right if the facecount has timed out
	if st_facecount == 0 {
		st_faceindex = ST_calcPainOffset() + st_randomnumber%int32(3)
		st_facecount = TICRATE / 2
		priority = 0
	}
	st_facecount--
}

var lastattackdown int32 = -1

var priority int32

func ST_updateWidgets() {
	var i, v2 int32
	// must redirect the pointer if the ready weapon has changed.
	//  if (w_ready.data != plyr->readyweapon)
	//  {
	if weaponinfo[plyr.Freadyweapon].Fammo == am_noammo {
		w_ready.Fnum = uintptr(unsafe.Pointer(&largeammo))
	} else {
		w_ready.Fnum = uintptr(unsafe.Pointer(&plyr.Fammo[weaponinfo[plyr.Freadyweapon].Fammo]))
	}
	//{
	// static int tic=0;
	// static int dir=-1;
	// if (!(tic&15))
	//   plyr->ammo[weaponinfo[plyr->readyweapon].ammo]+=dir;
	// if (plyr->ammo[weaponinfo[plyr->readyweapon].ammo] == -100)
	//   dir = 1;
	// tic++;
	// }
	w_ready.Fdata = plyr.Freadyweapon
	// if (*w_ready.on)
	//  STlib_updateNum(&w_ready, true);
	// refresh weapon change
	//  }
	// update keycard multiple widgets
	i = 0
	for {
		if i >= 3 {
			break
		}
		if plyr.Fcards[i] != 0 {
			v2 = i
		} else {
			v2 = -1
		}
		keyboxes[i] = v2
		if plyr.Fcards[i+int32(3)] != 0 {
			keyboxes[i] = i + 3
		}
		goto _1
	_1:
		;
		i++
	}
	// refresh everything if this is him coming back to life
	ST_updateFaceWidget()
	// used by the w_armsbg widget
	st_notdeathmatch = booluint32(deathmatch == 0)
	// used by w_arms[] widgets
	st_armson = booluint32(st_statusbaron != 0 && deathmatch == 0)
	// used by w_frags widget
	st_fragson = booluint32(deathmatch != 0 && st_statusbaron != 0)
	st_fragscount = 0
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		if i != consoleplayer {
			st_fragscount += plyr.Ffrags[i]
		} else {
			st_fragscount -= plyr.Ffrags[i]
		}
		goto _3
	_3:
		;
		i++
	}
}

var largeammo int32 = 1994

func ST_Ticker() {
	st_randomnumber = M_Random()
	ST_updateWidgets()
	st_oldhealth = plyr.Fhealth
}

var st_palette int32 = 0

func ST_doPaletteStuff() {
	var bzc, cnt, palette int32
	var pal uintptr
	cnt = plyr.Fdamagecount
	if plyr.Fpowers[pw_strength] != 0 {
		// slowly fade the berzerk out
		bzc = 12 - plyr.Fpowers[pw_strength]>>6
		if bzc > cnt {
			cnt = bzc
		}
	}
	if cnt != 0 {
		if cnt >= 4 {
			palette = (cnt + 7) >> 3
			if palette >= int32(NUMREDPALS) {
				palette = NUMREDPALS - 1
			}
		} else {
			palette = 0
		}
		palette += int32(STARTREDPALS)
	} else {
		if plyr.Fbonuscount != 0 {
			if plyr.Fbonuscount >= 4 {
				palette = (plyr.Fbonuscount + 7) >> 3
				if palette >= int32(NUMBONUSPALS) {
					palette = NUMBONUSPALS - 1
				}
			} else {
				palette = 0
			}
			palette += int32(STARTBONUSPALS)
		} else {
			if plyr.Fpowers[pw_ironfeet] > 4*32 || plyr.Fpowers[pw_ironfeet]&int32(8) != 0 {
				palette = int32(RADIATIONPAL)
			} else {
				palette = 0
			}
		}
	}
	// In Chex Quest, the player never sees red.  Instead, the
	// radiation suit palette is used to tint the screen green,
	// as though the player is being covered in goo by an
	// attacking flemoid.
	if gameversion == exe_chex && palette >= int32(STARTREDPALS) && palette < STARTREDPALS+NUMREDPALS {
		palette = int32(RADIATIONPAL)
	}
	if palette != st_palette {
		st_palette = palette
		pal = W_CacheLumpNum(lu_palette, int32(PU_CACHE)) + uintptr(palette*int32(768))
		I_SetPalette(pal)
	}
}

func ST_drawWidgets(refresh boolean) {
	// used by w_arms[] widgets
	st_armson = booluint32(st_statusbaron != 0 && deathmatch == 0)
	// used by w_frags widget
	st_fragson = booluint32(deathmatch != 0 && st_statusbaron != 0)
	STlib_updateNum(&w_ready, refresh)
	for i := 0; i < 4; i++ {
		STlib_updateNum(&w_ammo[i], refresh)
		STlib_updateNum(&w_maxammo[i], refresh)
	}
	STlib_updatePercent(&w_health, int32(refresh))
	STlib_updatePercent(&w_armor, int32(refresh))
	STlib_updateBinIcon(&w_armsbg, refresh)
	for i := 0; i < 6; i++ {
		STlib_updateMultIcon(&w_arms[i], refresh)
	}
	STlib_updateMultIcon(&w_faces, refresh)
	for i := 0; i < 3; i++ {
		STlib_updateMultIcon(&w_keyboxes[i], refresh)
	}
	STlib_updateNum(&w_frags, refresh)
}

func ST_doRefresh() {
	st_firsttime = 0
	// draw status bar background to off-screen buff
	ST_refreshBackground()
	// and refresh all widgets
	ST_drawWidgets(1)
}

func ST_diffDraw() {
	// update all widgets
	ST_drawWidgets(0)
}

func ST_Drawer(fullscreen boolean, refresh boolean) {
	st_statusbaron = booluint32(fullscreen == 0 || automapactive != 0)
	st_firsttime = booluint32(st_firsttime != 0 || refresh != 0)
	// Do red-/gold-shifts from damage/items
	ST_doPaletteStuff()
	// If just after ST_Start(), refresh all
	if st_firsttime != 0 {
		ST_doRefresh()
	} else {
		ST_diffDraw()
	}
}

// Iterates through all graphics to be loaded or unloaded, along with
// the variable they use, invoking the specified callback function.

func ST_loadUnloadGraphics(callback func(uintptr, **patch_t)) {
	bp := alloc(48)
	var facenum, i, j int32
	// Load the numbers, tall and short
	i = 0
	for {
		if i >= 10 {
			break
		}
		snprintf_ccgo(bp, 9, 27843, i)
		callback(bp, &tallnum[i])
		snprintf_ccgo(bp, 9, 27852, i)
		callback(bp, &shortnum[i])
		goto _1
	_1:
		;
		i++
	}
	// Load percent key.
	//Note: why not load STMINUS here, too?
	callback(__ccgo_ts(27862), &tallpercent)
	// key cards
	i = 0
	for {
		if i >= int32(NUMCARDS) {
			break
		}
		snprintf_ccgo(bp, 9, 27871, i)
		callback(bp, &keys[i])
		goto _2
	_2:
		;
		i++
	}
	// arms background
	callback(__ccgo_ts(27880), &armsbg)
	// arms ownership widgets
	i = 0
	for {
		if i >= 6 {
			break
		}
		snprintf_ccgo(bp, 9, 27887, i+2)
		// gray #
		callback(bp, &arms[i][0])
		// yellow #
		arms[i][1] = shortnum[i+int32(2)]
		goto _3
	_3:
		;
		i++
	}
	// face backgrounds for different color players
	snprintf_ccgo(bp, 9, 27896, consoleplayer)
	callback(bp, &faceback)
	// status bar background bits
	callback(__ccgo_ts(27903), &sbar)
	// face states
	facenum = 0
	i = 0
	for {
		if i >= ST_NUMPAINFACES {
			break
		}
		j = 0
		for {
			if j >= ST_NUMSTRAIGHTFACES {
				break
			}
			snprintf_ccgo(bp, 9, 27909, i, j)
			callback(bp, &faces[facenum])
			facenum++
			goto _5
		_5:
			;
			j++
		}
		snprintf_ccgo(bp, 9, 27919, i) // turn right
		callback(bp, &faces[facenum])
		facenum++
		snprintf_ccgo(bp, 9, 27928, i) // turn left
		callback(bp, &faces[facenum])
		facenum++
		snprintf_ccgo(bp, 9, 27937, i) // ouch!
		callback(bp, &faces[facenum])
		facenum++
		snprintf_ccgo(bp, 9, 27947, i) // evil grin ;)
		callback(bp, &faces[facenum])
		facenum++
		snprintf_ccgo(bp, 9, 27956, i) // pissed off
		callback(bp, &faces[facenum])
		facenum++
		goto _4
	_4:
		;
		i++
	}
	callback(__ccgo_ts(27966), &faces[facenum])
	facenum++
	callback(__ccgo_ts(27974), &faces[facenum])
	facenum++
}

func ST_loadCallback(lumpname uintptr, variable **patch_t) {
	*variable = W_CacheLumpNameT(lumpname, int32(PU_STATIC))
}

func ST_loadGraphics() {
	ST_loadUnloadGraphics(ST_loadCallback)
}

func ST_loadData() {
	lu_palette = W_GetNumForName(__ccgo_ts(1490))
	ST_loadGraphics()
}

func ST_initData() {
	var i int32
	st_firsttime = 1
	plyr = &players[consoleplayer]
	st_statusbaron = 1
	st_faceindex = 0
	st_palette = -1
	st_oldhealth = -1
	i = 0
	for {
		if i >= int32(NUMWEAPONS) {
			break
		}
		oldweaponsowned[i] = plyr.Fweaponowned[i]
		goto _2
	_2:
		;
		i++
	}
	i = 0
	for {
		if i >= 3 {
			break
		}
		keyboxes[i] = -1
		goto _3
	_3:
		;
		i++
	}
	STlib_init()
}

func ST_createWidgets() {
	// ready weapon ammo
	STlib_initNum(&w_ready, ST_AMMOX, ST_AMMOY, tallnum[:], uintptr(unsafe.Pointer(&plyr.Fammo[weaponinfo[plyr.Freadyweapon].Fammo])), &st_statusbaron, ST_AMMOWIDTH)
	// the last weapon type
	w_ready.Fdata = plyr.Freadyweapon
	// health percentage
	STlib_initPercent(&w_health, ST_HEALTHX, ST_HEALTHY, tallnum[:], uintptr(unsafe.Pointer(&plyr.Fhealth)), &st_statusbaron, tallpercent)
	// arms background
	STlib_initBinIcon(&w_armsbg, ST_ARMSBGX, ST_ARMSBGY, armsbg, &st_notdeathmatch, &st_statusbaron)
	// weapons owned
	for i := int32(0); i < 6; i++ {
		STlib_initMultIcon(&w_arms[i], ST_ARMSX+i%3*ST_ARMSXSPACE, ST_ARMSY+i/int32(3)*ST_ARMSYSPACE, arms[i][:], (*int32)(unsafe.Pointer(&plyr.Fweaponowned[i+1])), &st_armson)
	}
	// frags sum
	STlib_initNum(&w_frags, ST_FRAGSX, ST_FRAGSY, tallnum[:], uintptr(unsafe.Pointer(&st_fragscount)), &st_fragson, ST_FRAGSWIDTH)
	// faces
	STlib_initMultIcon(&w_faces, ST_FACESX, ST_FACESY, faces[:], &st_faceindex, &st_statusbaron)
	// armor percentage - should be colored later
	STlib_initPercent(&w_armor, ST_ARMORX, ST_ARMORY, tallnum[:], uintptr(unsafe.Pointer(&plyr.Farmorpoints)), &st_statusbaron, tallpercent)
	// keyboxes 0-2
	STlib_initMultIcon(&w_keyboxes[0], ST_KEY0X, ST_KEY0Y, keys[:], &keyboxes[0], &st_statusbaron)
	STlib_initMultIcon(&w_keyboxes[1], ST_KEY1X, ST_KEY1Y, keys[:], &keyboxes[1], &st_statusbaron)
	STlib_initMultIcon(&w_keyboxes[2], ST_KEY2X, ST_KEY2Y, keys[:], &keyboxes[2], &st_statusbaron)
	// ammo count (all four kinds)
	STlib_initNum(&w_ammo[0], ST_AMMO0X, ST_AMMO0Y, shortnum[:], uintptr(unsafe.Pointer(&plyr.Fammo[0])), &st_statusbaron, ST_AMMO0WIDTH)
	STlib_initNum(&w_ammo[1], ST_AMMO1X, ST_AMMO1Y, shortnum[:], uintptr(unsafe.Pointer(&plyr.Fammo[1])), &st_statusbaron, ST_AMMO0WIDTH)
	STlib_initNum(&w_ammo[2], ST_AMMO2X, ST_AMMO2Y, shortnum[:], uintptr(unsafe.Pointer(&plyr.Fammo[2])), &st_statusbaron, ST_AMMO0WIDTH)
	STlib_initNum(&w_ammo[3], ST_AMMO3X, ST_AMMO3Y, shortnum[:], uintptr(unsafe.Pointer(&plyr.Fammo[3])), &st_statusbaron, ST_AMMO0WIDTH)
	// max ammo count (all four kinds)
	STlib_initNum(&w_maxammo[0], ST_MAXAMMO0X, ST_MAXAMMO0Y, shortnum[:], uintptr(unsafe.Pointer(&plyr.Fmaxammo[0])), &st_statusbaron, ST_MAXAMMO0WIDTH)
	STlib_initNum(&w_maxammo[1], ST_MAXAMMO1X, ST_MAXAMMO1Y, shortnum[:], uintptr(unsafe.Pointer(&plyr.Fmaxammo[1])), &st_statusbaron, ST_MAXAMMO0WIDTH)
	STlib_initNum(&w_maxammo[2], ST_MAXAMMO2X, ST_MAXAMMO2Y, shortnum[:], uintptr(unsafe.Pointer(&plyr.Fmaxammo[2])), &st_statusbaron, ST_MAXAMMO0WIDTH)
	STlib_initNum(&w_maxammo[3], ST_MAXAMMO3X, ST_MAXAMMO3Y, shortnum[:], uintptr(unsafe.Pointer(&plyr.Fmaxammo[3])), &st_statusbaron, ST_MAXAMMO0WIDTH)
}

var st_stopped int32 = 1

func ST_Start() {
	if st_stopped == 0 {
		ST_Stop()
	}
	ST_initData()
	ST_createWidgets()
	st_stopped = 0
}

func ST_Stop() {
	if st_stopped != 0 {
		return
	}
	I_SetPalette(W_CacheLumpNum(lu_palette, int32(PU_CACHE)))
	st_stopped = 1
}

func ST_Init() {
	ST_loadData()
	st_backing_screen = Z_Malloc(SCREENWIDTH*ST_HEIGHT, int32(PU_STATIC), uintptr(0))
}

const NORM_SEP = 128

//
// This is used to get the local FILE:LINE info from CPP
// prior to really call the function in question.
//

// when to clip out sounds
// Does not fit the large outdoor areas.

// Distance tp origin when sounds should be maxed out.
// This should relate to movement clipping resolution
// (see BLOCKMAP handling).
// In the source code release: (160*FRACUNIT).  Changed back to the
// Vanilla value of 200 (why was this changed?)

// The range over which sound attenuates

// Stereo separation

type channel_t struct {
	Fsfxinfo *sfxinfo_t
	Forigin  *degenmobj_t
	Fhandle  int32
}

// The set of channels available

var channels []channel_t

func init() {
	sfxVolume = 8
	musicVolume = 8
	snd_channels = 8
}

// Internal volume level, ranging from 0-127

var snd_SfxVolume int32

// Whether songs are mus_paused

var mus_paused boolean

// Music currently being played

var mus_playing *musicinfo_t

//
// Initializes sound stuff, including volume
// Sets channels, SFX and music volume,
//  allocates channel buffer, sets S_sfx lookup.
//

func S_Init(sfxVolume int32, musicVolume int32) {
	var i, v3 int32
	I_PrecacheSounds(S_sfx[:])
	S_SetSfxVolume(sfxVolume)
	S_SetMusicVolume(musicVolume)
	// Allocating the internal channels for mixing
	// (the maximum numer of sounds rendered
	// simultaneously) within zone memory.
	channels = make([]channel_t, snd_channels)
	// no sounds are playing, and they are not mus_paused
	mus_paused = 0
	// Note that sounds have not been cached (yet).
	i = 1
	for {
		if i >= int32(NUMSFX) {
			break
		}
		v3 = -1
		S_sfx[i].Fusefulness = v3
		S_sfx[i].Flumpnum = v3
		goto _2
	_2:
		;
		i++
	}
	I_AtExit(S_Shutdown, 1)
}

func S_Shutdown() {
	I_ShutdownSound()
	I_ShutdownMusic()
}

func S_StopChannel(cnum int32) {
	var i int32
	c := &channels[cnum]
	if c.Fsfxinfo != nil {
		// stop the sound playing
		if I_SoundIsPlaying(c.Fhandle) != 0 {
			I_StopSound(c.Fhandle)
		}
		// check to see if other channels are playing the sound
		i = 0
		for {
			if i >= snd_channels {
				break
			}
			if cnum != i && c.Fsfxinfo == channels[i].Fsfxinfo {
				break
			}
			goto _1
		_1:
			;
			i++
		}
		// degrade usefulness of sound data
		c.Fsfxinfo.Fusefulness--
		c.Fsfxinfo = nil
	}
}

//
// Per level startup code.
// Kills playing sounds at start of level,
//  determines music if any, changes music.
//

func S_Start() {
	var cnum, mnum int32
	var spmus [9]int32
	// kill all playing sounds at start of level
	//  (trust me - a good idea)
	cnum = 0
	for {
		if cnum >= snd_channels {
			break
		}
		if channels[cnum].Fsfxinfo != nil {
			S_StopChannel(cnum)
		}
		goto _1
	_1:
		;
		cnum++
	}
	// start new music for the level
	mus_paused = 0
	if gamemode == commercial {
		mnum = int32(mus_runnin) + gamemap - 1
	} else {
		spmus = [9]int32{
			0: int32(mus_e3m4),
			1: int32(mus_e3m2),
			2: int32(mus_e3m3),
			3: int32(mus_e1m5),
			4: int32(mus_e2m7),
			5: int32(mus_e2m4),
			6: int32(mus_e2m6),
			7: int32(mus_e2m5),
			8: int32(mus_e1m9),
		}
		if gameepisode < 4 {
			mnum = int32(mus_e1m1) + (gameepisode-1)*9 + gamemap - 1
		} else {
			mnum = spmus[gamemap-1]
		}
	}
	S_ChangeMusic(mnum, 1)
}

func S_StopSound(origin *degenmobj_t) {
	var cnum int32
	cnum = 0
	for {
		if cnum >= snd_channels {
			break
		}
		if channels[cnum].Fsfxinfo != nil && channels[cnum].Forigin == origin {
			S_StopChannel(cnum)
			break
		}
		goto _1
	_1:
		;
		cnum++
	}
}

//
// S_GetChannel :
//   If none available, return -1.  Otherwise channel #.
//

func S_GetChannel(origin *degenmobj_t, sfxinfo *sfxinfo_t) (r int32) {
	var cnum int32
	// Find an open channel
	cnum = 0
	for {
		if cnum >= snd_channels {
			break
		}
		if channels[cnum].Fsfxinfo == nil {
			break
		} else {
			if origin != nil && channels[cnum].Forigin == origin {
				S_StopChannel(cnum)
				break
			}
		}
		goto _1
	_1:
		;
		cnum++
	}
	// None available
	if cnum == snd_channels {
		// Look for lower priority
		cnum = 0
		for {
			if cnum >= snd_channels {
				break
			}
			if channels[cnum].Fsfxinfo.Fpriority >= sfxinfo.Fpriority {
				break
			}
			goto _2
		_2:
			;
			cnum++
		}
		if cnum == snd_channels {
			// FUCK!  No lower priority.  Sorry, Charlie.
			return -1
		} else {
			// Otherwise, kick out lower priority.
			S_StopChannel(cnum)
		}
	}
	c := &channels[cnum]
	// channel is decided to be cnum.
	c.Fsfxinfo = sfxinfo
	c.Forigin = origin
	return cnum
}

//
// Changes volume and stereo-separation variables
//  from the norm of a sound effect to be played.
// If the sound is not audible, returns a 0.
// Otherwise, modifies parameters and returns 1.
//

func S_AdjustSoundParams(listener *degenmobj_t, source *degenmobj_t, vol uintptr, sep uintptr) (r int32) {
	var adx, ady, approx_dist fixed_t
	var angle angle_t
	var v1 int32
	// calculate the distance to sound origin
	//  and clip it if necessary
	adx = xabs(listener.Fx - source.Fx)
	ady = xabs(listener.Fy - source.Fy)
	// From _GG1_ p.428. Appox. eucledian distance fast.
	if adx < ady {
		v1 = adx
	} else {
		v1 = ady
	}
	approx_dist = adx + ady - v1>>int32(1)
	if gamemap != 8 && approx_dist > 1200*(1<<FRACBITS) {
		return 0
	}
	// angle of source to listener
	angle = R_PointToAngle2(listener.Fx, listener.Fy, source.Fx, source.Fy)
	// TODO: Andre/GORE: Is this a safe cast? Can we guarantee this isn't just a degenmobj_t?
	mo := (*mobj_t)(unsafe.Pointer(listener))
	if angle > mo.Fangle {
		angle = angle - mo.Fangle
	} else {
		angle = angle + (0xffffffff - mo.Fangle)
	}
	angle >>= uint32(ANGLETOFINESHIFT)
	// stereo separation
	*(*int32)(unsafe.Pointer(sep)) = 128 - FixedMul(96*(1<<FRACBITS), finesine[angle])>>FRACBITS
	// volume calculation
	if approx_dist < 200*(1<<FRACBITS) {
		*(*int32)(unsafe.Pointer(vol)) = snd_SfxVolume
	} else {
		if gamemap == 8 {
			if approx_dist > 1200*(1<<FRACBITS) {
				approx_dist = 1200 * (1 << FRACBITS)
			}
			*(*int32)(unsafe.Pointer(vol)) = 15 + (snd_SfxVolume-int32(15))*((1200*(1<<FRACBITS)-approx_dist)>>int32(FRACBITS))/((1200*(1<<FRACBITS)-200*(1<<FRACBITS))>>FRACBITS)
		} else {
			// distance effect
			*(*int32)(unsafe.Pointer(vol)) = snd_SfxVolume * ((1200*(1<<FRACBITS) - approx_dist) >> int32(FRACBITS)) / ((1200*(1<<FRACBITS) - 200*(1<<FRACBITS)) >> FRACBITS)
		}
	}
	return boolint32(*(*int32)(unsafe.Pointer(vol)) > 0)
}

func S_StartSound(origin *degenmobj_t, sfx_id int32) {
	bp := alloc(32)
	var cnum, rc int32
	var sfx *sfxinfo_t
	*(*int32)(unsafe.Pointer(bp + 4)) = snd_SfxVolume
	// check for bogus sound #
	if sfx_id < 1 || sfx_id > int32(NUMSFX) {
		I_Error(27983, sfx_id)
	}
	sfx = &S_sfx[sfx_id]
	// Initialize sound parameters
	if sfx.Flink != 0 {
		*(*int32)(unsafe.Pointer(bp + 4)) += sfx.Fvolume
		if *(*int32)(unsafe.Pointer(bp + 4)) < 1 {
			return
		}
		if *(*int32)(unsafe.Pointer(bp + 4)) > snd_SfxVolume {
			*(*int32)(unsafe.Pointer(bp + 4)) = snd_SfxVolume
		}
	}
	// Check to see if it is audible,
	//  and if not, modify the params
	if origin != nil && origin != &players[consoleplayer].Fmo.degenmobj_t {
		rc = S_AdjustSoundParams(&players[consoleplayer].Fmo.degenmobj_t, origin, bp+4, bp)
		if origin.Fx == players[consoleplayer].Fmo.Fx && origin.Fy == players[consoleplayer].Fmo.Fy {
			*(*int32)(unsafe.Pointer(bp)) = int32(NORM_SEP)
		}
		if rc == 0 {
			return
		}
	} else {
		*(*int32)(unsafe.Pointer(bp)) = int32(NORM_SEP)
	}
	// kill old sound
	S_StopSound(origin)
	// try to find a channel
	cnum = S_GetChannel(origin, sfx)
	if cnum < 0 {
		return
	}
	// increase the usefulness
	sfx.Fusefulness = max(1, sfx.Fusefulness+1)
	if sfx.Flumpnum < 0 {
		sfx.Flumpnum = I_GetSfxLumpNum(sfx)
	}
	channels[cnum].Fhandle = I_StartSound(sfx, cnum, *(*int32)(unsafe.Pointer(bp + 4)), *(*int32)(unsafe.Pointer(bp)))
}

//
// Stop and resume music, during game PAUSE.
//

func S_PauseSound() {
	if mus_playing != nil && mus_paused == 0 {
		I_PauseSong()
		mus_paused = 1
	}
}

func S_ResumeSound() {
	if mus_playing != nil && mus_paused != 0 {
		I_ResumeSong()
		mus_paused = 0
	}
}

//
// Updates music & sounds
//

func S_UpdateSounds(listener *degenmobj_t) {
	bp := alloc(16)
	var audible, cnum int32
	var sfx *sfxinfo_t
	I_UpdateSound()
	cnum = 0
	for {
		if cnum >= snd_channels {
			break
		}
		c := &channels[cnum]
		sfx = c.Fsfxinfo
		if sfx != nil {
			if I_SoundIsPlaying(c.Fhandle) != 0 {
				// initialize parameters
				*(*int32)(unsafe.Pointer(bp)) = snd_SfxVolume
				*(*int32)(unsafe.Pointer(bp + 4)) = int32(NORM_SEP)
				if (*sfxinfo_t)(unsafe.Pointer(sfx)).Flink != 0 {
					*(*int32)(unsafe.Pointer(bp)) += (*sfxinfo_t)(unsafe.Pointer(sfx)).Fvolume
					if *(*int32)(unsafe.Pointer(bp)) < 1 {
						S_StopChannel(cnum)
						goto _1
					} else {
						if *(*int32)(unsafe.Pointer(bp)) > snd_SfxVolume {
							*(*int32)(unsafe.Pointer(bp)) = snd_SfxVolume
						}
					}
				}
				// check non-local sounds for distance clipping
				//  or modify their params
				if c.Forigin != nil && listener != c.Forigin {
					audible = S_AdjustSoundParams(listener, c.Forigin, bp, bp+4)
					if audible == 0 {
						S_StopChannel(cnum)
					} else {
						I_UpdateSoundParams(c.Fhandle, *(*int32)(unsafe.Pointer(bp)), *(*int32)(unsafe.Pointer(bp + 4)))
					}
				}
			} else {
				// if channel is allocated but sound has stopped,
				//  free it
				S_StopChannel(cnum)
			}
		}
		goto _1
	_1:
		;
		cnum++
	}
}

func S_SetMusicVolume(volume int32) {
	if volume < 0 || volume > 127 {
		I_Error(27997, volume)
	}
	I_SetMusicVolume(volume)
}

func S_SetSfxVolume(volume int32) {
	if volume < 0 || volume > 127 {
		I_Error(28031, volume)
	}
	snd_SfxVolume = volume
}

//
// Starts some music with the music id found in sounds.h.
//

func S_StartMusic(m_id int32) {
	S_ChangeMusic(m_id, 0)
}

func S_ChangeMusic(musicnum int32, looping int32) {
	bp := alloc(32)
	var handle uintptr
	var music *musicinfo_t
	// The Doom IWAD file has two versions of the intro music: d_intro
	// and d_introa.  The latter is used for OPL playback.
	if musicnum == int32(mus_intro) && (snd_musicdevice == int32(SNDDEVICE_ADLIB) || snd_musicdevice == int32(SNDDEVICE_SB)) {
		musicnum = int32(mus_introa)
	}
	if musicnum <= int32(mus_None) || musicnum >= int32(NUMMUSIC) {
		I_Error(28063, musicnum)
	} else {
		music = &S_music[musicnum]
	}
	if mus_playing == music {
		return
	}
	// shutdown old music
	S_StopMusic()
	// get lumpnum if neccessary
	if music.Flumpnum == 0 {
		M_snprintf(bp, 9, __ccgo_ts_str(28083), gostring(music.Fname))
		music.Flumpnum = W_GetNumForName(bp)
	}
	music.Fdata = W_CacheLumpNum(music.Flumpnum, int32(PU_STATIC))
	handle = I_RegisterSong(music.Fdata, W_LumpLength(uint32(music.Flumpnum)))
	music.Fhandle = handle
	I_PlaySong(handle, uint32(looping))
	mus_playing = music
}

func S_StopMusic() {
	if mus_playing != nil {
		if mus_paused != 0 {
			I_ResumeSong()
		}
		I_StopSong()
		I_UnRegisterSong(mus_playing.Fhandle)
		W_ReleaseLumpNum(mus_playing.Flumpnum)
		mus_playing.Fdata = uintptr(0)
		mus_playing = nil
	}
}

// to get a global angle from cartesian coordinates, the coordinates are
// flipped until they are in the first octant of the coordinate system, then
// the y (<=x) is scaled and divided by x to get a tangent (slope) value
// which is looked up in the tantoangle[] table.  The +1 size is to handle
// the case when x==y without additional checking.

func SlopeDiv(num uint32, den uint32) (r int32) {
	var ans uint32
	if den < 512 {
		return int32(SLOPERANGE)
	} else {
		ans = num << 3 / (den >> 8)
		if ans <= uint32(SLOPERANGE) {
			return int32(ans)
		} else {
			return int32(SLOPERANGE)
		}
	}
	return r
}

func init() {
	// Calculate all the various tables

	finetangent = [4096]fixed_t{}
	finesine = [10240]fixed_t{}

	for i := range finetangent {
		a := (float64(i-FINEANGLES/4) + 0.5) * (math.Pi * 2 / FINEANGLES)
		fv := fixed_t(math.Tan(a) * FRACUNIT)
		t := fv
		finetangent[i] = t
	}
	for i := range finesine {
		a := (float64(i) + 0.5) * (math.Pi * 2 / FINEANGLES)
		t := fixed_t(math.Sin(a) * FRACUNIT)
		finesine[i] = t
	}

	finecosine = finesine[FINEANGLES/4:]
	//finecosine = uintptr(unsafe.Pointer(&finesine)) + uintptr(FINEANGLES/4)*4

	tantoangle = [2049]angle_t{}
	for i := range len(tantoangle) {
		f := math.Atan(float64(i)/float64(SLOPERANGE)) / (math.Pi * 2)
		t := uint32(f * 0xffffffff)
		tantoangle[i] = angle_t(t)
	}
}

const MOUSE_SPEED_BOX_HEIGHT = 9
const MOUSE_SPEED_BOX_WIDTH = 120

// The screen buffer that the v_video.c code draws to.

var dest_screen = uintptr(0)

// C documentation
//
//	//
//	// V_MarkRect
//	//
func V_MarkRect(x int32, y int32, width int32, height int32) {
	// If we are temporarily using an alternate screen, do not
	// affect the update box.
	if dest_screen == I_VideoBuffer {
		M_AddToBox(&dirtybox, x, y)
		M_AddToBox(&dirtybox, x+width-1, y+height-1)
	}
}

// C documentation
//
//	//
//	// V_CopyRect
//	//
func V_CopyRect(srcx int32, srcy int32, source uintptr, width int32, height int32, destx int32, desty int32) {
	var dest, src uintptr
	if srcx < 0 || srcx+width > SCREENWIDTH || srcy < 0 || srcy+height > SCREENHEIGHT || destx < 0 || destx+width > SCREENWIDTH || desty < 0 || desty+height > SCREENHEIGHT {
		I_Error(28088, 0)
	}
	V_MarkRect(destx, desty, width, height)
	src = source + uintptr(SCREENWIDTH*srcy) + uintptr(srcx)
	dest = dest_screen + uintptr(SCREENWIDTH*desty) + uintptr(destx)
	for {
		if height <= 0 {
			break
		}
		xmemcpy(dest, src, uint64(width))
		src += SCREENWIDTH
		dest += SCREENWIDTH
		goto _1
	_1:
		;
		height--
	}
}

//
// V_DrawPatch
// Masks a column based masked pic to the screen.
//

func V_DrawPatch(x int32, y int32, patch *patch_t) {
	var col, count, w, v2 int32
	var dest, desttop, source, v3 uintptr
	y -= int32(patch.Ftopoffset)
	x -= int32(patch.Fleftoffset)
	if x < 0 || x+int32(patch.Fwidth) > SCREENWIDTH || y < 0 || y+int32(patch.Fheight) > SCREENHEIGHT {
		I_Error(28103, x, y, int32(patch.Fwidth), int32(patch.Fheight), int32(patch.Ftopoffset), int32(patch.Fleftoffset))
	}
	V_MarkRect(x, y, int32(patch.Fwidth), int32(patch.Fheight))
	col = 0
	desttop = dest_screen + uintptr(y*SCREENWIDTH) + uintptr(x)
	w = int32(patch.Fwidth)
	for {
		if col >= w {
			break
		}
		column := patch.GetColumn(col)
		// step through the posts in a column
		for int32((*column_t)(unsafe.Pointer(column)).Ftopdelta) != 0xff {
			source = column + uintptr(3)
			dest = desttop + uintptr(int32((*column_t)(unsafe.Pointer(column)).Ftopdelta)*SCREENWIDTH)
			count = int32((*column_t)(unsafe.Pointer(column)).Flength)
			for {
				v2 = count
				count--
				if v2 == 0 {
					break
				}
				v3 = source
				source++
				*(*uint8)(unsafe.Pointer(dest)) = *(*uint8)(unsafe.Pointer(v3))
				dest += SCREENWIDTH
			}
			column = column + uintptr((*column_t)(unsafe.Pointer(column)).Flength) + uintptr(4)
		}
		goto _1
	_1:
		;
		col++
		desttop++
	}
}

//
// V_DrawPatchFlipped
// Masks a column based masked pic to the screen.
// Flips horizontally, e.g. to mirror face.
//

func V_DrawPatchFlipped(x int32, y int32, patch *patch_t) {
	var col, count, w, v2 int32
	var dest, desttop, source, v3 uintptr
	y -= int32(patch.Ftopoffset)
	x -= int32(patch.Fleftoffset)
	if x < 0 || x+int32(patch.Fwidth) > SCREENWIDTH || y < 0 || y+int32(patch.Fheight) > SCREENHEIGHT {
		I_Error(28187, 0)
	}
	V_MarkRect(x, y, int32(patch.Fwidth), int32(patch.Fheight))
	col = 0
	desttop = dest_screen + uintptr(y*SCREENWIDTH) + uintptr(x)
	w = int32(patch.Fwidth)
	for {
		if col >= w {
			break
		}
		column := patch.GetColumn(w - 1 - col)
		// step through the posts in a column
		for int32((*column_t)(unsafe.Pointer(column)).Ftopdelta) != 0xff {
			source = column + uintptr(3)
			dest = desttop + uintptr(int32((*column_t)(unsafe.Pointer(column)).Ftopdelta)*SCREENWIDTH)
			count = int32((*column_t)(unsafe.Pointer(column)).Flength)
			for {
				v2 = count
				count--
				if v2 == 0 {
					break
				}
				v3 = source
				source++
				*(*uint8)(unsafe.Pointer(dest)) = *(*uint8)(unsafe.Pointer(v3))
				dest += SCREENWIDTH
			}
			column = column + uintptr((*column_t)(unsafe.Pointer(column)).Flength) + uintptr(4)
		}
		goto _1
	_1:
		;
		col++
		desttop++
	}
}

//
// V_DrawPatchDirect
// Draws directly to the screen on the pc.
//

func V_DrawPatchDirect(x int32, y int32, patch *patch_t) {
	V_DrawPatch(x, y, patch)
}

//
// V_DrawBlock
// Draw a linear block of pixels into the view buffer.
//

func V_DrawBlock(x int32, y int32, width int32, height int32, src uintptr) {
	var dest uintptr
	var v1 int32
	if x < 0 || x+width > SCREENWIDTH || y < 0 || y+height > SCREENHEIGHT {
		I_Error(28288, 0)
	}
	V_MarkRect(x, y, width, height)
	dest = dest_screen + uintptr(y*SCREENWIDTH) + uintptr(x)
	for {
		v1 = height
		height--
		if v1 == 0 {
			break
		}
		xmemcpy(dest, src, uint64(width))
		src += uintptr(width)
		dest += SCREENWIDTH
	}
}

func V_DrawFilledBox(x int32, y int32, w int32, h int32, c int32) {
	var buf, buf1, v3 uintptr
	var x1, y1 int32
	buf = I_VideoBuffer + uintptr(SCREENWIDTH*y) + uintptr(x)
	y1 = 0
	for {
		if y1 >= h {
			break
		}
		buf1 = buf
		x1 = 0
		for {
			if x1 >= w {
				break
			}
			v3 = buf1
			buf1++
			*(*uint8)(unsafe.Pointer(v3)) = uint8(c)
			goto _2
		_2:
			;
			x1++
		}
		buf += SCREENWIDTH
		goto _1
	_1:
		;
		y1++
	}
}

func V_DrawHorizLine(x int32, y int32, w int32, c int32) {
	var buf, v2 uintptr
	var x1 int32
	buf = I_VideoBuffer + uintptr(SCREENWIDTH*y) + uintptr(x)
	x1 = 0
	for {
		if x1 >= w {
			break
		}
		v2 = buf
		buf++
		*(*uint8)(unsafe.Pointer(v2)) = uint8(c)
		goto _1
	_1:
		;
		x1++
	}
}

func V_DrawVertLine(x int32, y int32, h int32, c int32) {
	var buf uintptr
	var y1 int32
	buf = I_VideoBuffer + uintptr(SCREENWIDTH*y) + uintptr(x)
	y1 = 0
	for {
		if y1 >= h {
			break
		}
		*(*uint8)(unsafe.Pointer(buf)) = uint8(c)
		buf += SCREENWIDTH
		goto _1
	_1:
		;
		y1++
	}
}

func V_DrawBox(x int32, y int32, w int32, h int32, c int32) {
	V_DrawHorizLine(x, y, w, c)
	V_DrawHorizLine(x, y+h-1, w, c)
	V_DrawVertLine(x, y, h, c)
	V_DrawVertLine(x+w-1, y, h, c)
}

// C documentation
//
//	//
//	// V_Init
//	//
func V_Init() {
	// no-op!
	// There used to be separate screens that could be drawn to; these are
	// now handled in the upper layers.
}

// Set the buffer that the code draws to.

func V_UseBuffer(buffer uintptr) {
	dest_screen = buffer
}

// Restore screen buffer to the i_video screen buffer.

func V_RestoreBuffer() {
	dest_screen = I_VideoBuffer
}

func V_DrawMouseSpeedBox(speed int32) {
	var bgcolor, black, bordercolor, box_x, box_y, linelen, original_speed, red, redline_x, white, yellow int32
	// Get palette indices for colors for widget. These depend on the
	// palette of the game being played.
	bgcolor = I_GetPaletteIndex(0x77, 0x77, 0x77)
	bordercolor = I_GetPaletteIndex(0x55, 0x55, 0x55)
	red = I_GetPaletteIndex(0xff, 0x00, 0x00)
	black = I_GetPaletteIndex(0x00, 0x00, 0x00)
	yellow = I_GetPaletteIndex(0xff, 0xff, 0x00)
	white = I_GetPaletteIndex(0xff, 0xff, 0xff)
	// If the mouse is turned off or acceleration is turned off, don't
	// draw the box at all.
	if usemouse == 0 || math.Abs(float64(mouse_acceleration-1)) < float64(0.01) {
		return
	}
	// Calculate box position
	box_x = SCREENWIDTH - MOUSE_SPEED_BOX_WIDTH - 10
	box_y = 15
	V_DrawFilledBox(box_x, box_y, int32(MOUSE_SPEED_BOX_WIDTH), int32(MOUSE_SPEED_BOX_HEIGHT), bgcolor)
	V_DrawBox(box_x, box_y, int32(MOUSE_SPEED_BOX_WIDTH), int32(MOUSE_SPEED_BOX_HEIGHT), bordercolor)
	// Calculate the position of the red line.  This is 1/3 of the way
	// along the box.
	redline_x = MOUSE_SPEED_BOX_WIDTH / 3
	// Undo acceleration and get back the original mouse speed
	if speed < mouse_threshold {
		original_speed = speed
	} else {
		original_speed = speed - mouse_threshold
		original_speed = int32(float32(original_speed) / mouse_acceleration)
		original_speed += mouse_threshold
	}
	// Calculate line length
	linelen = original_speed * redline_x / mouse_threshold
	// Draw horizontal "thermometer"
	if linelen > MOUSE_SPEED_BOX_WIDTH-1 {
		linelen = MOUSE_SPEED_BOX_WIDTH - 1
	}
	V_DrawHorizLine(box_x+int32(1), box_y+int32(4), MOUSE_SPEED_BOX_WIDTH-2, black)
	if linelen < redline_x {
		V_DrawHorizLine(box_x+int32(1), box_y+MOUSE_SPEED_BOX_HEIGHT/2, linelen, white)
	} else {
		V_DrawHorizLine(box_x+int32(1), box_y+MOUSE_SPEED_BOX_HEIGHT/2, redline_x, white)
		V_DrawHorizLine(box_x+redline_x, box_y+MOUSE_SPEED_BOX_HEIGHT/2, linelen-redline_x, yellow)
	}
	// Draw red line
	V_DrawVertLine(box_x+redline_x, box_y+int32(1), MOUSE_SPEED_BOX_HEIGHT-2, red)
}

const DM_KILLERSX = 10
const DM_KILLERSY = 100
const DM_MATRIXX = 42
const DM_MATRIXY = 68
const DM_SPACINGX = 40
const DM_TOTALSX = 269
const DM_VICTIMSX = 5
const DM_VICTIMSY = 50
const NG_SPACINGX = 64
const NG_STATSY = 50
const NUMMAPS = 9
const SHOWNEXTLOCDELAY = 4
const SP_STATSX = 50
const SP_STATSY = 50
const SP_TIMEX = 16
const WI_SPACINGY = 33
const WI_TITLEY = 2

//
// Data needed to add patches to full screen intermission pics.
// Patches are statistics messages, and animations.
// Loads of by-pixel layout and placement, offsets etc.
//

//
// Different vetween registered DOOM (1994) and
//  Ultimate DOOM - Final edition (retail, 1995?).
// This is supposedly ignored for commercial
//  release (aka DOOM II), which had 34 maps
//  in one episode. So there.

// in tics
//U #define PAUSELEN		(TICRATE*2)
//U #define SCORESTEP		100
//U #define ANIMPERIOD		32
// pixel distance from "(YOU)" to "PLAYER N"
//U #define STARDIST		10
//U #define WK 1

// GLOBAL LOCATIONS

// SINGPLE-PLAYER STUFF

// NET GAME STUFF

// DEATHMATCH STUFF

type animenum_t = int32

const ANIM_ALWAYS = 0
const ANIM_RANDOM = 1
const ANIM_LEVEL = 2

type point_t struct {
	Fx int32
	Fy int32
}

// C documentation
//
//	//
//	// Animation.
//	// There is another anim_t used in p_spec.
//	//
type anim_t1 struct {
	Ftype1     animenum_t
	Fperiod    int32
	Fnanims    int32
	Floc       point_t
	Fdata1     int32
	Fdata2     int32
	Fp         [3]*patch_t
	Fnexttic   int32
	Flastdrawn int32
	Fctr       int32
	Fstate     int32
}

var lnodes = [4][9]point_t{
	0: {
		0: {
			Fx: 185,
			Fy: 164,
		},
		1: {
			Fx: 148,
			Fy: 143,
		},
		2: {
			Fx: 69,
			Fy: 122,
		},
		3: {
			Fx: 209,
			Fy: 102,
		},
		4: {
			Fx: 116,
			Fy: 89,
		},
		5: {
			Fx: 166,
			Fy: 55,
		},
		6: {
			Fx: 71,
			Fy: 56,
		},
		7: {
			Fx: 135,
			Fy: 29,
		},
		8: {
			Fx: 71,
			Fy: 24,
		},
	},
	1: {
		0: {
			Fx: 254,
			Fy: 25,
		},
		1: {
			Fx: 97,
			Fy: 50,
		},
		2: {
			Fx: 188,
			Fy: 64,
		},
		3: {
			Fx: 128,
			Fy: 78,
		},
		4: {
			Fx: 214,
			Fy: 92,
		},
		5: {
			Fx: 133,
			Fy: 130,
		},
		6: {
			Fx: 208,
			Fy: 136,
		},
		7: {
			Fx: 148,
			Fy: 140,
		},
		8: {
			Fx: 235,
			Fy: 158,
		},
	},
	2: {
		0: {
			Fx: 156,
			Fy: 168,
		},
		1: {
			Fx: 48,
			Fy: 154,
		},
		2: {
			Fx: 174,
			Fy: 95,
		},
		3: {
			Fx: 265,
			Fy: 75,
		},
		4: {
			Fx: 130,
			Fy: 48,
		},
		5: {
			Fx: 279,
			Fy: 23,
		},
		6: {
			Fx: 198,
			Fy: 48,
		},
		7: {
			Fx: 140,
			Fy: 25,
		},
		8: {
			Fx: 281,
			Fy: 136,
		},
	},
}

//
// Animation locations for episode 0 (1).
// Using patches saves a lot of space,
//  as they replace 320x200 full screen frames.
//

var epsd0animinfo = [10]anim_t1{
	0: {
		Fperiod: TICRATE / 3,
		Fnanims: 3,
		Floc: point_t{
			Fx: 224,
			Fy: 104,
		},
	},
	1: {
		Fperiod: TICRATE / 3,
		Fnanims: 3,
		Floc: point_t{
			Fx: 184,
			Fy: 160,
		},
	},
	2: {
		Fperiod: TICRATE / 3,
		Fnanims: 3,
		Floc: point_t{
			Fx: 112,
			Fy: 136,
		},
	},
	3: {
		Fperiod: TICRATE / 3,
		Fnanims: 3,
		Floc: point_t{
			Fx: 72,
			Fy: 112,
		},
	},
	4: {
		Fperiod: TICRATE / 3,
		Fnanims: 3,
		Floc: point_t{
			Fx: 88,
			Fy: 96,
		},
	},
	5: {
		Fperiod: TICRATE / 3,
		Fnanims: 3,
		Floc: point_t{
			Fx: 64,
			Fy: 48,
		},
	},
	6: {
		Fperiod: TICRATE / 3,
		Fnanims: 3,
		Floc: point_t{
			Fx: 192,
			Fy: 40,
		},
	},
	7: {
		Fperiod: TICRATE / 3,
		Fnanims: 3,
		Floc: point_t{
			Fx: 136,
			Fy: 16,
		},
	},
	8: {
		Fperiod: TICRATE / 3,
		Fnanims: 3,
		Floc: point_t{
			Fx: 80,
			Fy: 16,
		},
	},
	9: {
		Fperiod: TICRATE / 3,
		Fnanims: 3,
		Floc: point_t{
			Fx: 64,
			Fy: 24,
		},
	},
}

var epsd1animinfo = [9]anim_t1{
	0: {
		Ftype1:  ANIM_LEVEL,
		Fperiod: TICRATE / 3,
		Fnanims: 1,
		Floc: point_t{
			Fx: 128,
			Fy: 136,
		},
		Fdata1: 1,
	},
	1: {
		Ftype1:  ANIM_LEVEL,
		Fperiod: TICRATE / 3,
		Fnanims: 1,
		Floc: point_t{
			Fx: 128,
			Fy: 136,
		},
		Fdata1: 2,
	},
	2: {
		Ftype1:  ANIM_LEVEL,
		Fperiod: TICRATE / 3,
		Fnanims: 1,
		Floc: point_t{
			Fx: 128,
			Fy: 136,
		},
		Fdata1: 3,
	},
	3: {
		Ftype1:  ANIM_LEVEL,
		Fperiod: TICRATE / 3,
		Fnanims: 1,
		Floc: point_t{
			Fx: 128,
			Fy: 136,
		},
		Fdata1: 4,
	},
	4: {
		Ftype1:  ANIM_LEVEL,
		Fperiod: TICRATE / 3,
		Fnanims: 1,
		Floc: point_t{
			Fx: 128,
			Fy: 136,
		},
		Fdata1: 5,
	},
	5: {
		Ftype1:  ANIM_LEVEL,
		Fperiod: TICRATE / 3,
		Fnanims: 1,
		Floc: point_t{
			Fx: 128,
			Fy: 136,
		},
		Fdata1: 6,
	},
	6: {
		Ftype1:  ANIM_LEVEL,
		Fperiod: TICRATE / 3,
		Fnanims: 1,
		Floc: point_t{
			Fx: 128,
			Fy: 136,
		},
		Fdata1: 7,
	},
	7: {
		Ftype1:  ANIM_LEVEL,
		Fperiod: TICRATE / 3,
		Fnanims: 3,
		Floc: point_t{
			Fx: 192,
			Fy: 144,
		},
		Fdata1: 8,
	},
	8: {
		Ftype1:  ANIM_LEVEL,
		Fperiod: TICRATE / 3,
		Fnanims: 1,
		Floc: point_t{
			Fx: 128,
			Fy: 136,
		},
		Fdata1: 8,
	},
}

var epsd2animinfo = [6]anim_t1{
	0: {
		Fperiod: TICRATE / 3,
		Fnanims: 3,
		Floc: point_t{
			Fx: 104,
			Fy: 168,
		},
	},
	1: {
		Fperiod: TICRATE / 3,
		Fnanims: 3,
		Floc: point_t{
			Fx: 40,
			Fy: 136,
		},
	},
	2: {
		Fperiod: TICRATE / 3,
		Fnanims: 3,
		Floc: point_t{
			Fx: 160,
			Fy: 96,
		},
	},
	3: {
		Fperiod: TICRATE / 3,
		Fnanims: 3,
		Floc: point_t{
			Fx: 104,
			Fy: 80,
		},
	},
	4: {
		Fperiod: TICRATE / 3,
		Fnanims: 3,
		Floc: point_t{
			Fx: 120,
			Fy: 32,
		},
	},
	5: {
		Fperiod: TICRATE / 4,
		Fnanims: 3,
		Floc: point_t{
			Fx: 40,
		},
	},
}

var NUMANIMS = [4]int32{
	0: int32(len(epsd0animinfo)),
	1: int32(len(epsd1animinfo)),
	2: int32(len(epsd2animinfo)),
}

var anims1 = [4][]anim_t1{
	0: epsd0animinfo[:],
	1: epsd1animinfo[:],
	2: epsd2animinfo[:],
}

//
// GENERAL DATA
//

//
// Locally used stuff.
//

// States for single-player

// in seconds
//#define SHOWLASTLOCDELAY	SHOWNEXTLOCDELAY

// C documentation
//
//	// used to accelerate or skip a stage
var acceleratestage int32

// C documentation
//
//	// wbs->pnum
var me int32

// C documentation
//
//	// specifies current state
var state stateenum_t

// C documentation
//
//	// contains information passed into intermission
var wbs *wbstartstruct_t

var plrs []wbplayerstruct_t // wbs->plyr[]

// C documentation
//
//	// used for general timing
var cnt int32

// C documentation
//
//	// used for timing of background animation
var bcnt int32

var cnt_kills [4]int32
var cnt_items [4]int32
var cnt_secret [4]int32
var cnt_time int32
var cnt_par int32
var cnt_pause int32

// C documentation
//
//	// # of commercial levels
var NUMCMAPS int32

//
//	GRAPHICS
//

// C documentation
//
//	// You Are Here graphic
var yah = [3]*patch_t{}

// C documentation
//
//	// splat
var splat = [2]*patch_t{}

// C documentation
//
//	// %, : graphics
var percent *patch_t
var colon *patch_t

// C documentation
//
//	// 0-9 graphic
var num [10]*patch_t

// C documentation
//
//	// minus sign
var wiminus *patch_t

// C documentation
//
//	// "Finished!" graphics
var finished *patch_t

// C documentation
//
//	// "Entering" graphic
var entering *patch_t

// C documentation
//
//	// "secret"
var sp_secret *patch_t

// C documentation
//
//	// "Kills", "Scrt", "Items", "Frags"
var kills *patch_t
var secret *patch_t
var items *patch_t
var frags *patch_t

// C documentation
//
//	// Time sucks.
var timepatch *patch_t
var par *patch_t
var sucks *patch_t

// C documentation
//
//	// "killers", "victims"
var killers *patch_t
var victims *patch_t

// C documentation
//
//	// "Total", your face, your dead face
var total *patch_t
var star *patch_t
var bstar *patch_t

// C documentation
//
//	// "red P[1..MAXPLAYERS]"
var p [4]*patch_t

// C documentation
//
//	// "gray P[1..MAXPLAYERS]"
var bp [4]*patch_t

// C documentation
//
//	// Name graphics of each level (centered)
var lnames []*patch_t

// C documentation
//
//	// Buffer storing the backdrop
var background *patch_t

//
// CODE
//

// C documentation
//
//	// slam background
func WI_slamBackground() {
	V_DrawPatch(0, 0, background)
}

// C documentation
//
//	// Draws "<Levelname> Finished!"
func WI_drawLF() {
	var y int32
	y = int32(WI_TITLEY)
	if gamemode != commercial || wbs.Flast < NUMCMAPS {
		// draw <LevelName>
		V_DrawPatch((SCREENWIDTH-int32(lnames[wbs.Flast].Fwidth))/int32(2), y, lnames[wbs.Flast])
		// draw "Finished!"
		y += 5 * int32(lnames[wbs.Flast].Fheight) / 4
		V_DrawPatch((SCREENWIDTH-int32(finished.Fwidth))/int32(2), y, finished)
	} else {
		if wbs.Flast == NUMCMAPS {
			// MAP33 - nothing is displayed!
		} else {
			if wbs.Flast > NUMCMAPS {
				// > MAP33.  Doom bombs out here with a Bad V_DrawPatch error.
				// I'm pretty sure that doom2.exe is just reading into random
				// bits of memory at this point, but let's try to be accurate
				// anyway.  This deliberately triggers a V_DrawPatch error.
				bp := patch_t{
					Fwidth:      int16(SCREENWIDTH),
					Fheight:     int16(SCREENHEIGHT),
					Fleftoffset: 1,
					Ftopoffset:  1,
				}
				V_DrawPatch(0, y, &bp)
			}
		}
	}
}

// C documentation
//
//	// Draws "Entering <LevelName>"
func WI_drawEL() {
	var y int32
	y = int32(WI_TITLEY)
	// draw "Entering"
	V_DrawPatch((SCREENWIDTH-int32(entering.Fwidth))/int32(2), y, entering)
	// draw level
	y += 5 * int32(lnames[wbs.Fnext].Fheight) / 4
	V_DrawPatch((SCREENWIDTH-int32(lnames[wbs.Fnext].Fwidth))/int32(2), y, lnames[wbs.Fnext])
}

func WI_drawOnLnode(n int32, c []*patch_t) {
	var bottom, i, left, right, top int32
	var fits boolean
	fits = 0
	i = 0
	for cond := true; cond; cond = fits == 0 && i != 2 && c[i] != nil {
		left = (*(*point_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&lnodes)) + uintptr(wbs.Fepsd)*72 + uintptr(n)*8))).Fx - int32(c[i].Fleftoffset)
		top = (*(*point_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&lnodes)) + uintptr(wbs.Fepsd)*72 + uintptr(n)*8))).Fy - int32(c[i].Ftopoffset)
		right = left + int32(c[i].Fwidth)
		bottom = top + int32(c[i].Fheight)
		if left >= 0 && right < SCREENWIDTH && top >= 0 && bottom < SCREENHEIGHT {
			fits = 1
		} else {
			i++
		}
	}
	if fits != 0 && i < 2 {
		V_DrawPatch((*(*point_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&lnodes)) + uintptr(wbs.Fepsd)*72 + uintptr(n)*8))).Fx, (*(*point_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&lnodes)) + uintptr(wbs.Fepsd)*72 + uintptr(n)*8))).Fy, c[i])
	} else {
		// DEBUG
		fprintf_ccgo(os.Stdout, 28344, n+1)
	}
}

func WI_initAnimatedBack() {
	var a *anim_t1
	var i int32
	if gamemode == commercial {
		return
	}
	if wbs.Fepsd > 2 {
		return
	}
	i = 0
	for {
		if i >= NUMANIMS[wbs.Fepsd] {
			break
		}
		a = &anims1[wbs.Fepsd][i]
		// init variables
		(*anim_t1)(unsafe.Pointer(a)).Fctr = -1
		// specify the next time to draw it
		if a.Ftype1 == ANIM_ALWAYS {
			a.Fnexttic = bcnt + 1 + M_Random()%a.Fperiod
		} else {
			if a.Ftype1 == ANIM_RANDOM {
				a.Fnexttic = bcnt + 1 + a.Fdata2 + M_Random()%a.Fdata1
			} else {
				if a.Ftype1 == ANIM_LEVEL {
					a.Fnexttic = bcnt + 1
				}
			}
		}
		goto _1
	_1:
		;
		i++
	}
}

func WI_updateAnimatedBack() {
	var a *anim_t1
	var i int32
	if gamemode == commercial {
		return
	}
	if wbs.Fepsd > 2 {
		return
	}
	i = 0
	for {
		if i >= NUMANIMS[wbs.Fepsd] {
			break
		}
		a = &anims1[wbs.Fepsd][i]
		if bcnt == (*anim_t1)(unsafe.Pointer(a)).Fnexttic {
			switch (*anim_t1)(unsafe.Pointer(a)).Ftype1 {
			case ANIM_ALWAYS:
				a.Fctr++
				if a.Fctr >= a.Fnanims {
					a.Fctr = 0
				}
				a.Fnexttic = bcnt + a.Fperiod
			case ANIM_RANDOM:
				a.Fctr++
				if a.Fctr == a.Fnanims {
					a.Fctr = -1
					a.Fnexttic = bcnt + a.Fdata2 + M_Random()%a.Fdata1
				} else {
					a.Fnexttic = bcnt + a.Fperiod
				}
			case ANIM_LEVEL:
				// gawd-awful hack for level anims
				if !(state == StatCount && i == 7) && wbs.Fnext == a.Fdata1 {
					a.Fctr++
					if a.Fctr == a.Fnanims {
						a.Fctr--
					}
					a.Fnexttic = bcnt + a.Fperiod
				}
				break
			}
		}
		goto _1
	_1:
		;
		i++
	}
}

func WI_drawAnimatedBack() {
	var a *anim_t1
	var i int32
	if gamemode == commercial {
		return
	}
	if wbs.Fepsd > 2 {
		return
	}
	i = 0
	for {
		if i >= NUMANIMS[wbs.Fepsd] {
			break
		}
		a = &anims1[wbs.Fepsd][i]
		if a.Fctr >= 0 {
			V_DrawPatch(a.Floc.Fx, a.Floc.Fy, a.Fp[a.Fctr])
		}
		goto _1
	_1:
		;
		i++
	}
}

//
// Draws a number.
// If digits > 0, then use that many digits minimum,
//  otherwise only use as many as necessary.
// Returns new x position.
//

func WI_drawNum(x int32, y int32, n int32, digits int32) (r int32) {
	var fontwidth, neg, temp, v1 int32
	fontwidth = int32((*patch_t)(unsafe.Pointer(num[0])).Fwidth)
	if digits < 0 {
		if n == 0 {
			// make variable-length zeros 1 digit long
			digits = 1
		} else {
			// figure out # of digits in #
			digits = 0
			temp = n
			for temp != 0 {
				temp /= 10
				digits++
			}
		}
	}
	neg = boolint32(n < 0)
	if neg != 0 {
		n = -n
	}
	// if non-number, do not draw it
	if n == 1994 {
		return 0
	}
	// draw the new number
	for {
		v1 = digits
		digits--
		if v1 == 0 {
			break
		}
		x -= fontwidth
		V_DrawPatch(x, y, num[n%int32(10)])
		n /= 10
	}
	// draw a minus sign if necessary
	if neg != 0 {
		x -= 8
		V_DrawPatch(x, y, wiminus)
	}
	return x
}

func WI_drawPercent(x int32, y int32, p int32) {
	if p < 0 {
		return
	}
	V_DrawPatch(x, y, percent)
	WI_drawNum(x, y, p, -1)
}

// C documentation
//
//	//
//	// Display level completion time and par,
//	//  or "sucks" message if overflow.
//	//
func WI_drawTime(x int32, y int32, t int32) {
	var div, n int32
	if t < 0 {
		return
	}
	if t <= 61*59 {
		div = 1
		for cond := true; cond; cond = t/div != 0 {
			n = t / div % 60
			x = WI_drawNum(x, y, n, 2) - int32(colon.Fwidth)
			div *= 60
			// draw
			if div == 60 || t/div != 0 {
				V_DrawPatch(x, y, colon)
			}
		}
	} else {
		// "sucks"
		V_DrawPatch(x-int32(sucks.Fwidth), y, sucks)
	}
}

func WI_End() {
	WI_unloadData()
}

func WI_initNoState() {
	state = NoState
	acceleratestage = 0
	cnt = 10
}

func WI_updateNoState() {
	var v1 int32
	WI_updateAnimatedBack()
	cnt--
	v1 = cnt
	if v1 == 0 {
		// Don't call WI_End yet.  G_WorldDone doesnt immediately
		// change gamestate, so WI_Drawer is still going to get
		// run until that happens.  If we do that after WI_End
		// (which unloads all the graphics), we're in trouble.
		//WI_End();
		G_WorldDone()
	}
}

var snl_pointeron uint32 = 0

func WI_initShowNextLoc() {
	state = ShowNextLoc
	acceleratestage = 0
	cnt = SHOWNEXTLOCDELAY * TICRATE
	WI_initAnimatedBack()
}

func WI_updateShowNextLoc() {
	var v1 int32
	WI_updateAnimatedBack()
	cnt--
	v1 = cnt
	if v1 == 0 || acceleratestage != 0 {
		WI_initNoState()
	} else {
		snl_pointeron = booluint32(cnt&31 < 20)
	}
}

func WI_drawShowNextLoc() {
	var i, last, v1 int32
	WI_slamBackground()
	// draw animated background
	WI_drawAnimatedBack()
	if gamemode != commercial {
		if wbs.Fepsd > 2 {
			WI_drawEL()
			return
		}
		if wbs.Flast == 8 {
			v1 = wbs.Fnext - 1
		} else {
			v1 = wbs.Flast
		}
		last = v1
		// draw a splat on taken cities.
		i = 0
		for {
			if !(i <= last) {
				break
			}
			WI_drawOnLnode(i, splat[:])
			goto _2
		_2:
			;
			i++
		}
		// splat the secret level?
		if wbs.Fdidsecret != 0 {
			WI_drawOnLnode(8, splat[:])
		}
		// draw flashing ptr
		if snl_pointeron != 0 {
			WI_drawOnLnode(wbs.Fnext, yah[:])
		}
	}
	// draws which level you are entering..
	if gamemode != commercial || wbs.Fnext != 30 {
		WI_drawEL()
	}
}

func WI_drawNoState() {
	snl_pointeron = 1
	WI_drawShowNextLoc()
}

func WI_fragSum(playernum int32) (r int32) {
	var frags, i int32
	frags = 0
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		if playeringame[i] != 0 && i != playernum {
			frags += plrs[playernum].Ffrags[i]
		}
		goto _1
	_1:
		;
		i++
	}
	// JDC hack - negative frags.
	frags -= plrs[playernum].Ffrags[playernum]
	// UNUSED if (frags < 0)
	// 	frags = 0;
	return frags
}

var dm_state int32
var dm_frags [4][4]int32
var dm_totals [4]int32

func WI_initDeathmatchStats() {
	var i, j int32
	state = StatCount
	acceleratestage = 0
	dm_state = 1
	cnt_pause = int32(TICRATE)
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		if playeringame[i] != 0 {
			j = 0
			for {
				if j >= int32(MAXPLAYERS) {
					break
				}
				if playeringame[j] != 0 {
					dm_frags[i][j] = 0
				}
				goto _2
			_2:
				;
				j++
			}
			dm_totals[i] = 0
		}
		goto _1
	_1:
		;
		i++
	}
	WI_initAnimatedBack()
}

func WI_updateDeathmatchStats() {
	var i, j, v5 int32
	var stillticking boolean
	WI_updateAnimatedBack()
	if acceleratestage != 0 && dm_state != 4 {
		acceleratestage = 0
		i = 0
		for {
			if i >= int32(MAXPLAYERS) {
				break
			}
			if playeringame[i] != 0 {
				j = 0
				for {
					if j >= int32(MAXPLAYERS) {
						break
					}
					if playeringame[j] != 0 {
						dm_frags[i][j] = plrs[i].Ffrags[j]
					}
					goto _2
				_2:
					;
					j++
				}
				dm_totals[i] = WI_fragSum(i)
			}
			goto _1
		_1:
			;
			i++
		}
		S_StartSound(nil, int32(sfx_barexp))
		dm_state = 4
	}
	if dm_state == 2 {
		if bcnt&3 == 0 {
			S_StartSound(nil, int32(sfx_pistol))
		}
		stillticking = 0
		i = 0
		for {
			if i >= int32(MAXPLAYERS) {
				break
			}
			if playeringame[i] != 0 {
				j = 0
				for {
					if j >= int32(MAXPLAYERS) {
						break
					}
					if playeringame[j] != 0 && dm_frags[i][j] != plrs[i].Ffrags[j] {
						if plrs[i].Ffrags[j] < 0 {
							dm_frags[i][j]--
						} else {
							dm_frags[i][j]++
						}
						if dm_frags[i][j] > 99 {
							dm_frags[i][j] = 99
						}
						if dm_frags[i][j] < -99 {
							dm_frags[i][j] = -99
						}
						stillticking = 1
					}
					goto _4
				_4:
					;
					j++
				}
				dm_totals[i] = WI_fragSum(i)
				if dm_totals[i] > 99 {
					dm_totals[i] = 99
				}
				if dm_totals[i] < -99 {
					dm_totals[i] = -99
				}
			}
			goto _3
		_3:
			;
			i++
		}
		if stillticking == 0 {
			S_StartSound(nil, int32(sfx_barexp))
			dm_state++
		}
	} else {
		if dm_state == 4 {
			if acceleratestage != 0 {
				S_StartSound(nil, int32(sfx_slop))
				if gamemode == commercial {
					WI_initNoState()
				} else {
					WI_initShowNextLoc()
				}
			}
		} else {
			if dm_state&int32(1) != 0 {
				cnt_pause--
				v5 = cnt_pause
				if v5 == 0 {
					dm_state++
					cnt_pause = int32(TICRATE)
				}
			}
		}
	}
}

func WI_drawDeathmatchStats() {
	var i, j, w, x, y int32
	WI_slamBackground()
	// draw animated background
	WI_drawAnimatedBack()
	WI_drawLF()
	// draw stat titles (top line)
	V_DrawPatch(int32(DM_TOTALSX)-int32(total.Fwidth)/int32(2), DM_MATRIXY-WI_SPACINGY+10, total)
	V_DrawPatch(int32(DM_KILLERSX), int32(DM_KILLERSY), killers)
	V_DrawPatch(int32(DM_VICTIMSX), int32(DM_VICTIMSY), victims)
	// draw P?
	x = DM_MATRIXX + DM_SPACINGX
	y = int32(DM_MATRIXY)
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		if playeringame[i] != 0 {
			V_DrawPatch(x-int32((*patch_t)(unsafe.Pointer(p[i])).Fwidth)/int32(2), DM_MATRIXY-WI_SPACINGY, p[i])
			V_DrawPatch(int32(DM_MATRIXX)-int32((*patch_t)(unsafe.Pointer(p[i])).Fwidth)/int32(2), y, p[i])
			if i == me {
				V_DrawPatch(x-int32((*patch_t)(unsafe.Pointer(p[i])).Fwidth)/int32(2), DM_MATRIXY-WI_SPACINGY, bstar)
				V_DrawPatch(int32(DM_MATRIXX)-int32((*patch_t)(unsafe.Pointer(p[i])).Fwidth)/int32(2), y, star)
			}
		} else {
			// V_DrawPatch(x-SHORT(bp[i]->width)/2,
			//   DM_MATRIXY - WI_SPACINGY, bp[i]);
			// V_DrawPatch(DM_MATRIXX-SHORT(bp[i]->width)/2,
			//   y, bp[i]);
		}
		x += int32(DM_SPACINGX)
		y += int32(WI_SPACINGY)
		goto _1
	_1:
		;
		i++
	}
	// draw stats
	y = DM_MATRIXY + 10
	w = int32((*patch_t)(unsafe.Pointer(num[0])).Fwidth)
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		x = DM_MATRIXX + DM_SPACINGX
		if playeringame[i] != 0 {
			j = 0
			for {
				if j >= int32(MAXPLAYERS) {
					break
				}
				if playeringame[j] != 0 {
					WI_drawNum(x+w, y, dm_frags[i][j], 2)
				}
				x += int32(DM_SPACINGX)
				goto _3
			_3:
				;
				j++
			}
			WI_drawNum(int32(DM_TOTALSX)+w, y, dm_totals[i], 2)
		}
		y += int32(WI_SPACINGY)
		goto _2
	_2:
		;
		i++
	}
}

var cnt_frags [4]int32
var dofrags int32
var ng_state int32

func WI_initNetgameStats() {
	var i, v2, v3, v4 int32
	state = StatCount
	acceleratestage = 0
	ng_state = 1
	cnt_pause = int32(TICRATE)
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		if playeringame[i] == 0 {
			goto _1
		}
		v4 = 0
		cnt_frags[i] = v4
		v3 = v4
		cnt_secret[i] = v3
		v2 = v3
		cnt_items[i] = v2
		cnt_kills[i] = v2
		dofrags += WI_fragSum(i)
		goto _1
	_1:
		;
		i++
	}
	dofrags = boolint32(dofrags != 0)
	WI_initAnimatedBack()
}

func WI_updateNetgameStats() {
	var fsum, i, v6, v7 int32
	var stillticking boolean
	WI_updateAnimatedBack()
	if acceleratestage != 0 && ng_state != 10 {
		acceleratestage = 0
		i = 0
		for {
			if i >= int32(MAXPLAYERS) {
				break
			}
			if playeringame[i] == 0 {
				goto _1
			}
			cnt_kills[i] = plrs[i].Fskills * 100 / wbs.Fmaxkills
			cnt_items[i] = plrs[i].Fsitems * 100 / wbs.Fmaxitems
			cnt_secret[i] = plrs[i].Fssecret * 100 / wbs.Fmaxsecret
			if dofrags != 0 {
				cnt_frags[i] = WI_fragSum(i)
			}
			goto _1
		_1:
			;
			i++
		}
		S_StartSound(nil, int32(sfx_barexp))
		ng_state = 10
	}
	if ng_state == 2 {
		if bcnt&3 == 0 {
			S_StartSound(nil, int32(sfx_pistol))
		}
		stillticking = 0
		i = 0
		for {
			if i >= int32(MAXPLAYERS) {
				break
			}
			if playeringame[i] == 0 {
				goto _2
			}
			*(*int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&cnt_kills)) + uintptr(i)*4)) += 2
			if cnt_kills[i] >= plrs[i].Fskills*int32(100)/wbs.Fmaxkills {
				cnt_kills[i] = plrs[i].Fskills * 100 / wbs.Fmaxkills
			} else {
				stillticking = 1
			}
			goto _2
		_2:
			;
			i++
		}
		if stillticking == 0 {
			S_StartSound(nil, int32(sfx_barexp))
			ng_state++
		}
	} else {
		if ng_state == 4 {
			if bcnt&3 == 0 {
				S_StartSound(nil, int32(sfx_pistol))
			}
			stillticking = 0
			i = 0
			for {
				if i >= int32(MAXPLAYERS) {
					break
				}
				if playeringame[i] == 0 {
					goto _3
				}
				*(*int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&cnt_items)) + uintptr(i)*4)) += 2
				if cnt_items[i] >= plrs[i].Fsitems*int32(100)/wbs.Fmaxitems {
					cnt_items[i] = plrs[i].Fsitems * 100 / wbs.Fmaxitems
				} else {
					stillticking = 1
				}
				goto _3
			_3:
				;
				i++
			}
			if stillticking == 0 {
				S_StartSound(nil, int32(sfx_barexp))
				ng_state++
			}
		} else {
			if ng_state == 6 {
				if bcnt&3 == 0 {
					S_StartSound(nil, int32(sfx_pistol))
				}
				stillticking = 0
				i = 0
				for {
					if i >= int32(MAXPLAYERS) {
						break
					}
					if playeringame[i] == 0 {
						goto _4
					}
					*(*int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&cnt_secret)) + uintptr(i)*4)) += 2
					if cnt_secret[i] >= plrs[i].Fssecret*int32(100)/wbs.Fmaxsecret {
						cnt_secret[i] = plrs[i].Fssecret * 100 / wbs.Fmaxsecret
					} else {
						stillticking = 1
					}
					goto _4
				_4:
					;
					i++
				}
				if stillticking == 0 {
					S_StartSound(nil, int32(sfx_barexp))
					ng_state += 1 + 2*boolint32(dofrags == 0)
				}
			} else {
				if ng_state == 8 {
					if bcnt&3 == 0 {
						S_StartSound(nil, int32(sfx_pistol))
					}
					stillticking = 0
					i = 0
					for {
						if i >= int32(MAXPLAYERS) {
							break
						}
						if playeringame[i] == 0 {
							goto _5
						}
						*(*int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&cnt_frags)) + uintptr(i)*4)) += 1
						v6 = WI_fragSum(i)
						fsum = v6
						if cnt_frags[i] >= v6 {
							cnt_frags[i] = fsum
						} else {
							stillticking = 1
						}
						goto _5
					_5:
						;
						i++
					}
					if stillticking == 0 {
						S_StartSound(nil, int32(sfx_pldeth))
						ng_state++
					}
				} else {
					if ng_state == 10 {
						if acceleratestage != 0 {
							S_StartSound(nil, int32(sfx_sgcock))
							if gamemode == commercial {
								WI_initNoState()
							} else {
								WI_initShowNextLoc()
							}
						}
					} else {
						if ng_state&int32(1) != 0 {
							cnt_pause--
							v7 = cnt_pause
							if v7 == 0 {
								ng_state++
								cnt_pause = int32(TICRATE)
							}
						}
					}
				}
			}
		}
	}
}

func WI_drawNetgameStats() {
	var i, pwidth, x, y int32
	pwidth = int32(percent.Fwidth)
	WI_slamBackground()
	// draw animated background
	WI_drawAnimatedBack()
	WI_drawLF()
	// draw stat titles (top line)
	V_DrawPatch(32+int32(star.Fwidth)/int32(2)+int32(32)*boolint32(dofrags == 0)+int32(NG_SPACINGX)-int32(kills.Fwidth), int32(NG_STATSY), kills)
	V_DrawPatch(32+int32(star.Fwidth)/int32(2)+int32(32)*boolint32(dofrags == 0)+2*NG_SPACINGX-int32(items.Fwidth), int32(NG_STATSY), items)
	V_DrawPatch(32+int32(star.Fwidth)/int32(2)+int32(32)*boolint32(dofrags == 0)+3*NG_SPACINGX-int32(secret.Fwidth), int32(NG_STATSY), secret)
	if dofrags != 0 {
		V_DrawPatch(32+int32(star.Fwidth)/int32(2)+int32(32)*boolint32(dofrags == 0)+4*NG_SPACINGX-int32(frags.Fwidth), int32(NG_STATSY), frags)
	}
	// draw stats
	y = int32(NG_STATSY) + int32(kills.Fheight)
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		if playeringame[i] == 0 {
			goto _1
		}
		x = 32 + int32(star.Fwidth)/int32(2) + 32*boolint32(dofrags == 0)
		V_DrawPatch(x-int32((*patch_t)(unsafe.Pointer(p[i])).Fwidth), y, p[i])
		if i == me {
			V_DrawPatch(x-int32((*patch_t)(unsafe.Pointer(p[i])).Fwidth), y, star)
		}
		x += int32(NG_SPACINGX)
		WI_drawPercent(x-pwidth, y+int32(10), cnt_kills[i])
		x += int32(NG_SPACINGX)
		WI_drawPercent(x-pwidth, y+int32(10), cnt_items[i])
		x += int32(NG_SPACINGX)
		WI_drawPercent(x-pwidth, y+int32(10), cnt_secret[i])
		x += int32(NG_SPACINGX)
		if dofrags != 0 {
			WI_drawNum(x, y+int32(10), cnt_frags[i], -1)
		}
		y += int32(WI_SPACINGY)
		goto _1
	_1:
		;
		i++
	}
}

var sp_state int32

func WI_initStats() {
	var v1, v2, v3 int32
	state = StatCount
	acceleratestage = 0
	sp_state = 1
	v2 = -1
	cnt_secret[0] = v2
	v1 = v2
	cnt_items[0] = v1
	cnt_kills[0] = v1
	v3 = -1
	cnt_par = v3
	cnt_time = v3
	cnt_pause = int32(TICRATE)
	WI_initAnimatedBack()
}

func WI_updateStats() {
	var v1 int32
	WI_updateAnimatedBack()
	if acceleratestage != 0 && sp_state != 10 {
		acceleratestage = 0
		cnt_kills[0] = plrs[me].Fskills * 100 / wbs.Fmaxkills
		cnt_items[0] = plrs[me].Fsitems * 100 / wbs.Fmaxitems
		cnt_secret[0] = plrs[me].Fssecret * 100 / wbs.Fmaxsecret
		cnt_time = plrs[me].Fstime / int32(TICRATE)
		cnt_par = wbs.Fpartime / int32(TICRATE)
		S_StartSound(nil, int32(sfx_barexp))
		sp_state = 10
	}
	if sp_state == 2 {
		*(*int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&cnt_kills)))) += 2
		if bcnt&3 == 0 {
			S_StartSound(nil, int32(sfx_pistol))
		}
		if cnt_kills[0] >= plrs[me].Fskills*int32(100)/wbs.Fmaxkills {
			cnt_kills[0] = plrs[me].Fskills * 100 / wbs.Fmaxkills
			S_StartSound(nil, int32(sfx_barexp))
			sp_state++
		}
	} else {
		if sp_state == 4 {
			*(*int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&cnt_items)))) += 2
			if bcnt&3 == 0 {
				S_StartSound(nil, int32(sfx_pistol))
			}
			if cnt_items[0] >= plrs[me].Fsitems*int32(100)/wbs.Fmaxitems {
				cnt_items[0] = plrs[me].Fsitems * 100 / wbs.Fmaxitems
				S_StartSound(nil, int32(sfx_barexp))
				sp_state++
			}
		} else {
			if sp_state == 6 {
				*(*int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&cnt_secret)))) += 2
				if bcnt&3 == 0 {
					S_StartSound(nil, int32(sfx_pistol))
				}
				if cnt_secret[0] >= plrs[me].Fssecret*int32(100)/wbs.Fmaxsecret {
					cnt_secret[0] = plrs[me].Fssecret * 100 / wbs.Fmaxsecret
					S_StartSound(nil, int32(sfx_barexp))
					sp_state++
				}
			} else {
				if sp_state == 8 {
					if bcnt&3 == 0 {
						S_StartSound(nil, int32(sfx_pistol))
					}
					cnt_time += 3
					if cnt_time >= plrs[me].Fstime/int32(TICRATE) {
						cnt_time = plrs[me].Fstime / int32(TICRATE)
					}
					cnt_par += 3
					if cnt_par >= wbs.Fpartime/int32(TICRATE) {
						cnt_par = wbs.Fpartime / int32(TICRATE)
						if cnt_time >= plrs[me].Fstime/int32(TICRATE) {
							S_StartSound(nil, int32(sfx_barexp))
							sp_state++
						}
					}
				} else {
					if sp_state == 10 {
						if acceleratestage != 0 {
							S_StartSound(nil, int32(sfx_sgcock))
							if gamemode == commercial {
								WI_initNoState()
							} else {
								WI_initShowNextLoc()
							}
						}
					} else {
						if sp_state&int32(1) != 0 {
							cnt_pause--
							v1 = cnt_pause
							if v1 == 0 {
								sp_state++
								cnt_pause = int32(TICRATE)
							}
						}
					}
				}
			}
		}
	}
}

func WI_drawStats() {
	var lh int32
	lh = 3 * int32((*patch_t)(unsafe.Pointer(num[0])).Fheight) / 2
	WI_slamBackground()
	// draw animated background
	WI_drawAnimatedBack()
	WI_drawLF()
	V_DrawPatch(int32(SP_STATSX), int32(SP_STATSY), kills)
	WI_drawPercent(SCREENWIDTH-SP_STATSX, int32(SP_STATSY), cnt_kills[0])
	V_DrawPatch(int32(SP_STATSX), int32(SP_STATSY)+lh, items)
	WI_drawPercent(SCREENWIDTH-SP_STATSX, int32(SP_STATSY)+lh, cnt_items[0])
	V_DrawPatch(int32(SP_STATSX), int32(SP_STATSY)+int32(2)*lh, sp_secret)
	WI_drawPercent(SCREENWIDTH-SP_STATSX, int32(SP_STATSY)+int32(2)*lh, cnt_secret[0])
	V_DrawPatch(int32(SP_TIMEX), SCREENHEIGHT-32, timepatch)
	WI_drawTime(SCREENWIDTH/2-SP_TIMEX, SCREENHEIGHT-32, cnt_time)
	if wbs.Fepsd < 3 {
		V_DrawPatch(SCREENWIDTH/2+SP_TIMEX, SCREENHEIGHT-32, par)
		WI_drawTime(SCREENWIDTH-SP_TIMEX, SCREENHEIGHT-32, cnt_par)
	}
}

func WI_checkForAccelerate() {
	// check for button presses to skip delays
	for i := 0; i < MAXPLAYERS; i++ {
		if playeringame[i] != 0 {
			player := &players[i]
			if int32(player.Fcmd.Fbuttons)&BT_ATTACK != 0 {
				if player.Fattackdown == 0 {
					acceleratestage = 1
				}
				player.Fattackdown = 1
			} else {
				player.Fattackdown = 0
			}
			if int32(player.Fcmd.Fbuttons)&BT_USE != 0 {
				if player.Fusedown == 0 {
					acceleratestage = 1
				}
				player.Fusedown = 1
			} else {
				player.Fusedown = 0
			}
		}
	}
}

// C documentation
//
//	// Updates stuff each tick
func WI_Ticker() {
	// counter for general background animation
	bcnt++
	if bcnt == 1 {
		// intermission music
		if gamemode == commercial {
			S_ChangeMusic(int32(mus_dm2int), 1)
		} else {
			S_ChangeMusic(int32(mus_inter), 1)
		}
	}
	WI_checkForAccelerate()
	switch state {
	case StatCount:
		if deathmatch != 0 {
			WI_updateDeathmatchStats()
		} else {
			if netgame != 0 {
				WI_updateNetgameStats()
			} else {
				WI_updateStats()
			}
		}
	case ShowNextLoc:
		WI_updateShowNextLoc()
	case NoState:
		WI_updateNoState()
		break
	}
}

// Common load/unload function.  Iterates over all the graphics
// lumps to be loaded/unloaded into memory.

func WI_loadUnloadData(callback func(uintptr, **patch_t)) {
	bp1 := alloc(48)
	var a *anim_t1
	var i, j int32
	if gamemode == commercial {
		i = 0
		for {
			if i >= NUMCMAPS {
				break
			}
			snprintf_ccgo(bp1, 9, 28378, i)
			callback(bp1, &lnames[i])
			goto _1
		_1:
			;
			i++
		}
	} else {
		i = 0
		for {
			if i >= int32(NUMMAPS) {
				break
			}
			snprintf_ccgo(bp1, 9, 28389, wbs.Fepsd, i)
			callback(bp1, &lnames[i])
			goto _2
		_2:
			;
			i++
		}
		// you are here
		callback(__ccgo_ts(28398), &yah[0])
		// you are here (alt.)
		callback(__ccgo_ts(28405), &yah[1])
		// splat
		callback(__ccgo_ts(28412), &splat[0])
		if wbs.Fepsd < 3 {
			j = 0
			for {
				if j >= NUMANIMS[wbs.Fepsd] {
					break
				}
				a = &anims1[wbs.Fepsd][j]
				i = 0
				for {
					if i >= a.Fnanims {
						break
					}
					// MONDO HACK!
					if wbs.Fepsd != 1 || j != 8 {
						// animations
						snprintf_ccgo(bp1, 9, 28420, wbs.Fepsd, j, i)
						callback(bp1, &a.Fp[i])
					} else {
						// HACK ALERT!
						a.Fp[i] = anims1[int32(1)][4].Fp[i]
					}
					goto _4
				_4:
					;
					i++
				}
				goto _3
			_3:
				;
				j++
			}
		}
	}
	// More hacks on minus sign.
	callback(__ccgo_ts(28434), &wiminus)
	i = 0
	for {
		if i >= 10 {
			break
		}
		// numbers 0-9
		snprintf_ccgo(bp1, 9, 28442, i)
		callback(bp1, &num[i])
		goto _5
	_5:
		;
		i++
	}
	// percent sign
	callback(__ccgo_ts(28450), &percent)
	// "finished"
	callback(__ccgo_ts(28457), &finished)
	// "entering"
	callback(__ccgo_ts(28461), &entering)
	// "kills"
	callback(__ccgo_ts(28469), &kills)
	// "scrt"
	callback(__ccgo_ts(28476), &secret)
	// "secret"
	callback(__ccgo_ts(28483), &sp_secret)
	// french wad uses WIOBJ (?)
	if W_CheckNumForName(__ccgo_ts(28491)) >= 0 {
		// "items"
		if netgame != 0 && deathmatch == 0 {
			callback(__ccgo_ts(28491), &items)
		} else {
			callback(__ccgo_ts(28497), &items)
		}
	} else {
		callback(__ccgo_ts(28497), &items)
	}
	// "frgs"
	callback(__ccgo_ts(28504), &frags)
	// ":"
	callback(__ccgo_ts(28511), &colon)
	// "time"
	callback(__ccgo_ts(28519), &timepatch)
	// "sucks"
	callback(__ccgo_ts(28526), &sucks)
	// "par"
	callback(__ccgo_ts(28534), &par)
	// "killers" (vertical)
	callback(__ccgo_ts(28540), &killers)
	// "victims" (horiz)
	callback(__ccgo_ts(28548), &victims)
	// "total"
	callback(__ccgo_ts(28556), &total)
	i = 0
	for {
		if i >= int32(MAXPLAYERS) {
			break
		}
		// "1,2,3,4"
		snprintf_ccgo(bp1, 9, 28563, i)
		callback(bp1, &p[i])
		// "1,2,3,4"
		snprintf_ccgo(bp1, 9, 28570, i+int32(1))
		callback(bp1, &bp[i])
		goto _6
	_6:
		;
		i++
	}
	// Background image
	if gamemode == commercial {
		M_StringCopy(bp1, __ccgo_ts(1951), 9)
	} else {
		if gamemode == retail && wbs.Fepsd == 3 {
			M_StringCopy(bp1, __ccgo_ts(1951), 9)
		} else {
			snprintf_ccgo(bp1, 9, 28577, wbs.Fepsd)
		}
	}
	// Draw backdrop and save to a temporary buffer
	callback(bp1, &background)
}

func WI_loadCallback(name uintptr, variable **patch_t) {
	*variable = W_CacheLumpNameT(name, int32(PU_STATIC))
}

func WI_loadData() {
	if gamemode == commercial {
		NUMCMAPS = 32
	}
	lnames = make([]*patch_t, NUMMAPS)
	WI_loadUnloadData(WI_loadCallback)
	// These two graphics are special cased because we're sharing
	// them with the status bar code
	// your face
	star = W_CacheLumpNameT(__ccgo_ts(28585), int32(PU_STATIC))
	// dead face
	bstar = W_CacheLumpNameT(__ccgo_ts(27974), int32(PU_STATIC))
}

func WI_unloadCallback(name uintptr, variable **patch_t) {
	W_ReleaseLumpName(name)
	*variable = nil
}

func WI_unloadData() {
	WI_loadUnloadData(WI_unloadCallback)
	// We do not free these lumps as they are shared with the status
	// bar code.
	// W_ReleaseLumpName("STFST01");
	// W_ReleaseLumpName("STFDEAD0");
}

func WI_Drawer() {
	switch state {
	case StatCount:
		if deathmatch != 0 {
			WI_drawDeathmatchStats()
		} else {
			if netgame != 0 {
				WI_drawNetgameStats()
			} else {
				WI_drawStats()
			}
		}
	case ShowNextLoc:
		WI_drawShowNextLoc()
	case NoState:
		WI_drawNoState()
		break
	}
}

func WI_initVariables(wbstartstruct *wbstartstruct_t) {
	var v1 int32
	wbs = wbstartstruct
	acceleratestage = 0
	v1 = 0
	bcnt = v1
	cnt = v1
	me = wbs.Fpnum
	plrs = wbs.Fplyr[:]
	if wbs.Fmaxkills == 0 {
		wbs.Fmaxkills = 1
	}
	if wbs.Fmaxitems == 0 {
		wbs.Fmaxitems = 1
	}
	if wbs.Fmaxsecret == 0 {
		wbs.Fmaxsecret = 1
	}
	if gamemode != retail {
		if wbs.Fepsd > 2 {
			*(*int32)(unsafe.Pointer(wbs)) -= 3
		}
	}
}

func WI_Start(wbstartstruct *wbstartstruct_t) {
	WI_initVariables(wbstartstruct)
	WI_loadData()
	if deathmatch != 0 {
		WI_initDeathmatchStats()
	} else {
		if netgame != 0 {
			WI_initNetgameStats()
		} else {
			WI_initStats()
		}
	}
}

var open_wadfiles []*os.File

func GetFileNumber(handle *os.File) (r int32) {
	for i := 0; i < len(open_wadfiles); i++ {
		if open_wadfiles[i] == handle {
			return int32(i)
		}
	}

	open_wadfiles = append(open_wadfiles, handle)
	return int32(len(open_wadfiles) - 1)
}

func ChecksumAddLump(sha hash.Hash, lump *lumpinfo_t) {
	bp := alloc(16)
	M_StringCopy(bp, lump.NamePtr(), 9)
	SHA1_UpdateString(sha, bp)
	SHA1_UpdateInt32(sha, uint32(GetFileNumber(lump.Fwad_file)))
	SHA1_UpdateInt32(sha, uint32(lump.Fposition))
	SHA1_UpdateInt32(sha, uint32(lump.Fsize))
}

func W_Checksum(digest *sha1_digest_t) {
	//bp := alloc(96)
	var i uint32
	//SHA1_Init(bp)
	sha := sha1.New()
	open_wadfiles = nil
	// Go through each entry in the WAD directory, adding information
	// about each entry to the SHA1 hash.
	i = 0
	for {
		if i >= numlumps {
			break
		}
		ChecksumAddLump(sha, &lumpinfo[i])
		goto _1
	_1:
		;
		i++
	}
	copy(digest[:], sha.Sum(nil))
}

func W_OpenFile(path string) *os.File {
	f, err := os.Open(path)
	if err != nil {
		log.Printf("Error opening file %q: %v", path, err)
		return nil
	}
	return f
}

func W_Read(wad *os.File, offset uint32, buffer uintptr, buffer_len uint64) (r uint64) {
	buf := unsafe.Slice((*byte)(unsafe.Pointer(buffer)), buffer_len)
	n, err := wad.ReadAt(buf, int64(offset))
	if err != nil {
		log.Printf("Error reading from file: %v", err)
	}
	return uint64(n)
}

//
// This is used to get the local FILE:LINE info from CPP
// prior to really call the function in question.
//

// Parse the command line, merging WAD files that are sppecified.
// Returns true if at least one file was added.

func W_ParseCommandLine() (r boolean) {
	var filename string
	var modifiedgame boolean
	var p, v1 int32
	modifiedgame = 0
	//!
	// @arg <files>
	// @vanilla
	//
	// Load the specified PWAD files.
	//
	p = M_CheckParmWithArgs(__ccgo_ts_str(28599), 1)
	if p != 0 {
		// the parms after p are wadfile/lump names,
		// until end of parms or another - preceded parm
		modifiedgame = 1 // homebrew levels
		for {
			p++
			v1 = p
			if !(v1 != int32(len(myargs)) && myargs[p][0] != '-') {
				break
			}
			filename = D_TryFindWADByName(myargs[p])
			fprintf_ccgo(os.Stdout, 2817, filename)
			W_AddFile(filename)
		}
	}
	//    W_PrintDirectory();
	return modifiedgame
}

type wadinfo_t struct {
	Fidentification [4]int8
	Fnumlumps       int32
	Finfotableofs   int32
}

type filelump_t struct {
	Ffilepos int32
	Fsize    int32
	Fname    [8]int8
}

// Hash table for fast lookups

var lumphash []*lumpinfo_t

// Hash function used for lump names.

func W_LumpNameHash(s uintptr) (r uint32) {
	var i, result uint32
	// This is the djb2 string hash function, modded to work on strings
	// that have a maximum length of 8.
	result = 5381
	i = 0
	for {
		if !(i < 8 && int32(*(*int8)(unsafe.Pointer(s + uintptr(i)))) != int32('\000')) {
			break
		}
		result = result<<int32(5) ^ result ^ uint32(xtoupper(int32(*(*int8)(unsafe.Pointer(s + uintptr(i))))))
		goto _1
	_1:
		;
		i++
	}
	return result
}

// C documentation
//
//	// Increase the size of the lumpinfo[] array to the specified size.
func ExtendLumpInfo(newnumlumps int32) {
	if newnumlumps >= int32(len(lumpinfo)) {
		// TODO: Should be lumpinfo = append(lumpinfo, lumpinfo_t{})
		panic("ExtendLumpInfo called with newnumlumps >= len(lumpinfo)")
	}

	numlumps = uint32(newnumlumps)
}

// LUMP BASED ROUTINES.
//
// Stop go garbage collecting these
var wad_files = map[uintptr]*os.File{}

//
// W_AddFile
// All files are optional, but at least one file must be
//  found (PWAD, if all required lumps are present).
// Files with a .wad extension are wadlink files
//  with multiple lumps.
// Other files are single lumps with the base filename
//  for the lump name.

func W_AddFile(filename string) *os.File {
	bp := alloc(32)
	var fileinfo, filerover uintptr
	var wad_file *os.File
	var i uint32
	var length, newnumlumps, startlump int32
	// open the file and add to directory
	stat, err := os.Stat(filename)
	if err != nil {
		log.Printf("Error stating file %q: %v", filename, err)
		return nil
	}
	wad_file = W_OpenFile(filename)
	if wad_file == nil {
		fprintf_ccgo(os.Stdout, 28631, filename)
		return nil
	}
	newnumlumps = int32(numlumps)
	if !strings.EqualFold(filepath.Ext(filename), ".wad") {
		// single lump file
		// fraggle: Swap the filepos and size here.  The WAD directory
		// parsing code expects a little-endian directory, so will swap
		// them back.  Effectively we're constructing a "fake WAD directory"
		// here, as it would appear on disk.
		fileinfo = Z_Malloc(16, int32(PU_STATIC), uintptr(0))
		(*filelump_t)(unsafe.Pointer(fileinfo)).Ffilepos = 0
		(*filelump_t)(unsafe.Pointer(fileinfo)).Fsize = int32(stat.Size())
		// Name the lump after the base of the filename (without the
		// extension).
		M_ExtractFileBase(filename, fileinfo+8)
		newnumlumps++
	} else {
		// WAD file
		W_Read(wad_file, 0, bp, 12)
		if xstrncmp(bp, __ccgo_ts(28654), 4) != 0 {
			// Homebrew levels?
			if xstrncmp(bp, __ccgo_ts(28659), 4) != 0 {
				I_Error(28664, filename)
			}
			// ???modifiedgame = true;
		}
		(*(*wadinfo_t)(unsafe.Pointer(bp))).Fnumlumps = (*(*wadinfo_t)(unsafe.Pointer(bp))).Fnumlumps
		(*(*wadinfo_t)(unsafe.Pointer(bp))).Finfotableofs = (*(*wadinfo_t)(unsafe.Pointer(bp))).Finfotableofs
		length = int32(uint64((*(*wadinfo_t)(unsafe.Pointer(bp))).Fnumlumps) * 16)
		fileinfo = Z_Malloc(length, int32(PU_STATIC), uintptr(0))
		W_Read(wad_file, uint32((*(*wadinfo_t)(unsafe.Pointer(bp))).Finfotableofs), fileinfo, uint64(length))
		newnumlumps += (*(*wadinfo_t)(unsafe.Pointer(bp))).Fnumlumps
	}
	// Increase size of numlumps array to accomodate the new file.
	startlump = int32(numlumps)
	ExtendLumpInfo(newnumlumps)
	filerover = fileinfo
	i = uint32(startlump)
	for {
		if i >= numlumps {
			break
		}
		lump_p := &lumpinfo[i]
		lump_p.Fwad_file = wad_file
		lump_p.Fposition = (*filelump_t)(unsafe.Pointer(filerover)).Ffilepos
		lump_p.Fsize = (*filelump_t)(unsafe.Pointer(filerover)).Fsize
		lump_p.Fcache = uintptr(0)
		xstrncpy(lump_p.NamePtr(), filerover+8, 8)
		filerover += 16
		goto _1
	_1:
		;
		i++
	}
	Z_Free(fileinfo)
	lumphash = nil
	wad_files[wad_file.Fd()] = wad_file
	return wad_file
}

//
// W_CheckNumForName
// Returns -1 if name not found.
//

func W_CheckNumForName(name uintptr) (r int32) {
	// Do we have a hash table yet?
	if lumphash != nil {
		// We do! Excellent.
		hash := int32(W_LumpNameHash(name) % numlumps)
		for lump_p := lumphash[hash]; lump_p != nil; lump_p = lump_p.Fnext {
			if xstrncasecmp(lump_p.NamePtr(), name, 8) == 0 {
				return lumpIndex(lump_p)
			}
		}
	} else {
		// We don't have a hash table generate yet. Linear search :-(
		//
		// scan backwards so patch lump files take precedence
		for i := int32(numlumps - 1); i >= 0; i-- {
			if xstrncasecmp(lumpinfo[i].NamePtr(), name, 8) == 0 {
				return i
			}
		}
	}
	// TFB. Not found.
	return -1
}

// C documentation
//
//	//
//	// W_GetNumForName
//	// Calls W_CheckNumForName, but bombs out if not found.
//	//
func W_GetNumForName(name uintptr) (r int32) {
	var i int32
	i = W_CheckNumForName(name)
	if i < 0 {
		I_Error(28706, name)
	}
	return i
}

// C documentation
//
//	//
//	// W_LumpLength
//	// Returns the buffer size needed to load the given lump.
//	//
func W_LumpLength(lump uint32) (r int32) {
	if lump >= numlumps {
		I_Error(28737, lump)
	}
	return lumpinfo[lump].Fsize
}

// C documentation
//
//	//
//	// W_ReadLump
//	// Loads the lump into the given buffer,
//	//  which must be >= W_LumpLength().
//	//
func W_ReadLump(lump uint32, dest uintptr) {
	var c int32
	if lump >= numlumps {
		I_Error(28766, lump)
	}
	l := &lumpinfo[lump]
	I_BeginRead()
	c = int32(W_Read(l.Fwad_file, uint32(l.Fposition), dest, uint64(l.Fsize)))
	if c < l.Fsize {
		I_Error(28793, c, l.Fsize, lump)
	}
	I_EndRead()
}

//
// W_CacheLumpNum
//
// Load a lump into memory and return a pointer to a buffer containing
// the lump data.
//
// 'tag' is the type of zone memory buffer to allocate for the lump
// (usually PU_STATIC or PU_CACHE).  If the lump is loaded as
// PU_STATIC, it should be released back using W_ReleaseLumpNum
// when no longer needed (do not use Z_ChangeTag).
//

func W_CacheLumpNum(lumpnum int32, tag int32) (r uintptr) {
	var result uintptr
	if uint32(lumpnum) >= numlumps {
		I_Error(28835, lumpnum)
	}
	lump := &lumpinfo[lumpnum]
	// Get the pointer to return.  If the lump is in a memory-mapped
	// file, we can just return a pointer to within the memory-mapped
	// region.  If the lump is in an ordinary file, we may already
	// have it cached; otherwise, load it into memory.
	if lump.Fcache != uintptr(0) {
		// Already cached, so just switch the zone tag.
		result = lump.Fcache
		Z_ChangeTag2(lump.Fcache, tag, __ccgo_ts(28866), 410)
	} else {
		// Not yet loaded, so load it now
		lump.Fcache = Z_Malloc(W_LumpLength(uint32(lumpnum)), tag, uintptr(unsafe.Pointer(&lump.Fcache)))
		W_ReadLump(uint32(lumpnum), lump.Fcache)
		result = lump.Fcache
	}
	return result
}

func W_CacheLumpNumT[T lumpType](lumpnum int32, tag int32) T {
	var result uintptr
	result = W_CacheLumpNum(lumpnum, tag)
	if result == uintptr(0) {
		panic("lump failure")
	}
	return (T)(unsafe.Pointer(result))
}

// C documentation
//
//	//
//	// W_CacheLumpName
//	//
func W_CacheLumpName(name uintptr, tag int32) (r uintptr) {
	return W_CacheLumpNum(W_GetNumForName(name), tag)
}

func W_CacheLumpNameT[T lumpType](name uintptr, tag int32) T {
	var result uintptr
	result = W_CacheLumpName(name, tag)
	if result == uintptr(0) {
		panic("lump failure")
	}
	return (T)(unsafe.Pointer(result))
}

//
// Release a lump back to the cache, so that it can be reused later
// without having to read from disk again, or alternatively, discarded
// if we run out of memory.
//
// Back in Vanilla Doom, this was just done using Z_ChangeTag
// directly, but now that we have WAD mmap, things are a bit more
// complicated ...
//

func W_ReleaseLumpNum(lumpnum int32) {
	if uint32(lumpnum) >= numlumps {
		I_Error(28874, lumpnum)
	}
	lump := &lumpinfo[lumpnum]
	Z_ChangeTag2(lump.Fcache, int32(PU_CACHE), __ccgo_ts(28866), 461)
}

func W_ReleaseLumpName(name uintptr) {
	W_ReleaseLumpNum(W_GetNumForName(name))
}

// Generate a hash table for fast lookups

func W_GenerateHashTable() {
	var hash, i uint32
	// Free the old hash table, if there is one
	lumphash = nil
	// Generate hash table
	if numlumps > 0 {
		lumphash = make([]*lumpinfo_t, numlumps)
		i = 0
		for {
			if i >= numlumps {
				break
			}
			hash = W_LumpNameHash(lumpinfo[i].NamePtr()) % numlumps
			// Hook into the hash table
			lumpinfo[i].Fnext = lumphash[hash]
			lumphash[hash] = &lumpinfo[i]
			goto _1
		_1:
			;
			i++
		}
	}
	// All done!
}

// C documentation
//
//	// Lump names that are unique to particular game types. This lets us check
//	// the user is not trying to play with the wrong executable, eg.
//	// chocolate-doom -iwad hexen.wad.
var unique_lumps = [4]struct {
	Fmission  GameMission_t
	Flumpname uintptr
}{
	0: {
		Flumpname: __ccgo_ts(28907),
	},
	1: {
		Fmission:  heretic,
		Flumpname: __ccgo_ts(28914),
	},
	2: {
		Fmission:  hexen,
		Flumpname: __ccgo_ts(28921),
	},
	3: {
		Fmission:  strife,
		Flumpname: __ccgo_ts(28928),
	},
}

func W_CheckCorrectIWAD(mission GameMission_t) {
	var i, lumpnum int32
	i = 0
	for {
		if uint64(i) >= 64/16 {
			break
		}
		if mission != unique_lumps[i].Fmission {
			lumpnum = W_CheckNumForName(unique_lumps[i].Flumpname)
			if lumpnum >= 0 {
				I_Error(28935, D_SuggestGameName(unique_lumps[i].Fmission, indetermined), __ccgo_ts_str(29063), D_GameMissionString(mission), __ccgo_ts_str(29063), D_GameMissionString(unique_lumps[i].Fmission))
			}
		}
		goto _1
	_1:
		;
		i++
	}
}

const MINFRAGMENT = 64
const ZONEID = 1919505

//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Simple basic typedefs, isolated here to make it easier
//	 separating modules.
//

//
// ZONE MEMORY ALLOCATION
//
// There is never any space between memblocks,
//  and there will never be two contiguous free memblocks.
// The rover can be left pointing at a non-empty block.
//
// It is of no value to free a cachable block,
//  because it will get overwritten automatically if needed.
//

type memblock_t struct {
	Fsize int32
	Fuser uintptr
	Ftag  int32
	Fid   int32
	Fnext uintptr
	Fprev uintptr
}

//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Simple basic typedefs, isolated here to make it easier
//	 separating modules.
//

//
// ZONE MEMORY ALLOCATION
//
// There is never any space between memblocks,
//  and there will never be two contiguous free memblocks.
// The rover can be left pointing at a non-empty block.
//
// It is of no value to free a cachable block,
//  because it will get overwritten automatically if needed.
//

type memzone_t struct {
	Fsize      int32
	Fblocklist memblock_t
	Frover     uintptr
}

// C documentation
//
//	//
//	// Z_Init
//	//
func Z_Init() {
	var size int32
	var block, v1, v2, v3 uintptr
	mainzone = I_ZoneBase(&size)
	(*memzone_t)(unsafe.Pointer(mainzone)).Fsize = size
	// set the entire zone to one free block
	v2 = mainzone + uintptr(56)
	block = v2
	v1 = v2
	(*memzone_t)(unsafe.Pointer(mainzone)).Fblocklist.Fprev = v1
	(*memzone_t)(unsafe.Pointer(mainzone)).Fblocklist.Fnext = v1
	(*memzone_t)(unsafe.Pointer(mainzone)).Fblocklist.Fuser = mainzone
	(*memzone_t)(unsafe.Pointer(mainzone)).Fblocklist.Ftag = int32(PU_STATIC)
	(*memzone_t)(unsafe.Pointer(mainzone)).Frover = block
	v3 = mainzone + 8
	(*memblock_t)(unsafe.Pointer(block)).Fnext = v3
	(*memblock_t)(unsafe.Pointer(block)).Fprev = v3
	// free block
	(*memblock_t)(unsafe.Pointer(block)).Ftag = int32(PU_FREE)
	(*memblock_t)(unsafe.Pointer(block)).Fsize = int32(uint64((*memzone_t)(unsafe.Pointer(mainzone)).Fsize) - 56)
}

// C documentation
//
//	//
//	// Z_Free
//	//
func Z_Free(ptr uintptr) {
	var block, other uintptr
	block = ptr - uintptr(40)
	if (*memblock_t)(unsafe.Pointer(block)).Fid != int32(ZONEID) {
		I_Error(29075, 0)
	}
	if (*memblock_t)(unsafe.Pointer(block)).Ftag != int32(PU_FREE) && (*memblock_t)(unsafe.Pointer(block)).Fuser != uintptr(0) {
		// clear the user's mark
		*(*uintptr)(unsafe.Pointer((*memblock_t)(unsafe.Pointer(block)).Fuser)) = uintptr(0)
	}
	// mark as free
	(*memblock_t)(unsafe.Pointer(block)).Ftag = int32(PU_FREE)
	(*memblock_t)(unsafe.Pointer(block)).Fuser = uintptr(0)
	(*memblock_t)(unsafe.Pointer(block)).Fid = 0
	other = (*memblock_t)(unsafe.Pointer(block)).Fprev
	if (*memblock_t)(unsafe.Pointer(other)).Ftag == int32(PU_FREE) {
		// merge with previous free block
		*(*int32)(unsafe.Pointer(other)) += (*memblock_t)(unsafe.Pointer(block)).Fsize
		(*memblock_t)(unsafe.Pointer(other)).Fnext = (*memblock_t)(unsafe.Pointer(block)).Fnext
		(*memblock_t)(unsafe.Pointer((*memblock_t)(unsafe.Pointer(other)).Fnext)).Fprev = other
		if block == (*memzone_t)(unsafe.Pointer(mainzone)).Frover {
			(*memzone_t)(unsafe.Pointer(mainzone)).Frover = other
		}
		block = other
	}
	other = (*memblock_t)(unsafe.Pointer(block)).Fnext
	if (*memblock_t)(unsafe.Pointer(other)).Ftag == int32(PU_FREE) {
		// merge the next free block onto the end
		*(*int32)(unsafe.Pointer(block)) += (*memblock_t)(unsafe.Pointer(other)).Fsize
		(*memblock_t)(unsafe.Pointer(block)).Fnext = (*memblock_t)(unsafe.Pointer(other)).Fnext
		(*memblock_t)(unsafe.Pointer((*memblock_t)(unsafe.Pointer(block)).Fnext)).Fprev = block
		if other == (*memzone_t)(unsafe.Pointer(mainzone)).Frover {
			(*memzone_t)(unsafe.Pointer(mainzone)).Frover = block
		}
	}
}

//
// Z_Malloc
// You can pass a NULL user if the tag is < PU_PURGELEVEL.
//

func Z_Malloc(size int32, tag int32, user uintptr) (r uintptr) {
	var base, newblock, result, rover, start, v1 uintptr
	var extra int32
	size = int32((uint64(size) + 8 - uint64(1)) & 0xffff_fff8)
	// scan through the block list,
	// looking for the first free block
	// of sufficient size,
	// throwing out any purgable blocks along the way.
	// account for size of block header
	size = int32(uint64(size) + 40)
	// if there is a free block behind the rover,
	//  back up over them
	base = (*memzone_t)(unsafe.Pointer(mainzone)).Frover
	if (*memblock_t)(unsafe.Pointer((*memblock_t)(unsafe.Pointer(base)).Fprev)).Ftag == int32(PU_FREE) {
		base = (*memblock_t)(unsafe.Pointer(base)).Fprev
	}
	rover = base
	start = (*memblock_t)(unsafe.Pointer(base)).Fprev
	for cond := true; cond; cond = (*memblock_t)(unsafe.Pointer(base)).Ftag != int32(PU_FREE) || (*memblock_t)(unsafe.Pointer(base)).Fsize < size {
		if rover == start {
			// scanned all the way around the list
			I_Error(29114, size)
		}
		if (*memblock_t)(unsafe.Pointer(rover)).Ftag != int32(PU_FREE) {
			if (*memblock_t)(unsafe.Pointer(rover)).Ftag < int32(PU_PURGELEVEL) {
				// hit a block that can't be purged,
				// so move base past it
				v1 = (*memblock_t)(unsafe.Pointer(rover)).Fnext
				rover = v1
				base = v1
			} else {
				// free the rover block (adding the size to base)
				// the rover can be the base block
				base = (*memblock_t)(unsafe.Pointer(base)).Fprev
				Z_Free(rover + uintptr(40))
				base = (*memblock_t)(unsafe.Pointer(base)).Fnext
				rover = (*memblock_t)(unsafe.Pointer(base)).Fnext
			}
		} else {
			rover = (*memblock_t)(unsafe.Pointer(rover)).Fnext
		}
	}
	// found a block big enough
	extra = (*memblock_t)(unsafe.Pointer(base)).Fsize - size
	if extra > int32(MINFRAGMENT) {
		// there will be a free fragment after the allocated block
		newblock = base + uintptr(size)
		(*memblock_t)(unsafe.Pointer(newblock)).Fsize = extra
		(*memblock_t)(unsafe.Pointer(newblock)).Ftag = int32(PU_FREE)
		(*memblock_t)(unsafe.Pointer(newblock)).Fuser = uintptr(0)
		(*memblock_t)(unsafe.Pointer(newblock)).Fprev = base
		(*memblock_t)(unsafe.Pointer(newblock)).Fnext = (*memblock_t)(unsafe.Pointer(base)).Fnext
		(*memblock_t)(unsafe.Pointer((*memblock_t)(unsafe.Pointer(newblock)).Fnext)).Fprev = newblock
		(*memblock_t)(unsafe.Pointer(base)).Fnext = newblock
		(*memblock_t)(unsafe.Pointer(base)).Fsize = size
	}
	if user == uintptr(0) && tag >= int32(PU_PURGELEVEL) {
		I_Error(29157, 0)
	}
	(*memblock_t)(unsafe.Pointer(base)).Fuser = user
	(*memblock_t)(unsafe.Pointer(base)).Ftag = tag
	result = base + uintptr(40)
	if (*memblock_t)(unsafe.Pointer(base)).Fuser != 0 {
		*(*uintptr)(unsafe.Pointer((*memblock_t)(unsafe.Pointer(base)).Fuser)) = result
	}
	// next allocation will start looking here
	(*memzone_t)(unsafe.Pointer(mainzone)).Frover = (*memblock_t)(unsafe.Pointer(base)).Fnext
	(*memblock_t)(unsafe.Pointer(base)).Fid = int32(ZONEID)
	return result
}

// C documentation
//
//	//
//	// Z_FreeTags
//	//
func Z_FreeTags(lowtag int32, hightag int32) {
	var block, next uintptr
	block = (*memzone_t)(unsafe.Pointer(mainzone)).Fblocklist.Fnext
	for {
		if block == mainzone+8 {
			break
		}
		// get link before freeing
		next = (*memblock_t)(unsafe.Pointer(block)).Fnext
		// free block?
		if (*memblock_t)(unsafe.Pointer(block)).Ftag == int32(PU_FREE) {
			goto _1
		}
		if (*memblock_t)(unsafe.Pointer(block)).Ftag >= lowtag && (*memblock_t)(unsafe.Pointer(block)).Ftag <= hightag {
			Z_Free(block + uintptr(40))
		}
		goto _1
	_1:
		;
		block = next
	}
}

// C documentation
//
//	//
//	// Z_CheckHeap
//	//
func Z_CheckHeap() {
	var block uintptr
	block = (*memzone_t)(unsafe.Pointer(mainzone)).Fblocklist.Fnext
	for {
		if (*memblock_t)(unsafe.Pointer(block)).Fnext == mainzone+8 {
			// all blocks have been hit
			break
		}
		if block+uintptr((*memblock_t)(unsafe.Pointer(block)).Fsize) != (*memblock_t)(unsafe.Pointer(block)).Fnext {
			I_Error(29436, 0)
		}
		if (*memblock_t)(unsafe.Pointer((*memblock_t)(unsafe.Pointer(block)).Fnext)).Fprev != block {
			I_Error(29491, 0)
		}
		if (*memblock_t)(unsafe.Pointer(block)).Ftag == int32(PU_FREE) && (*memblock_t)(unsafe.Pointer((*memblock_t)(unsafe.Pointer(block)).Fnext)).Ftag == int32(PU_FREE) {
			I_Error(29546, 0)
		}
		goto _1
	_1:
		;
		block = (*memblock_t)(unsafe.Pointer(block)).Fnext
	}
}

// C documentation
//
//	//
//	// Z_ChangeTag
//	//
func Z_ChangeTag2(ptr uintptr, tag int32, file uintptr, line int32) {
	var block uintptr
	block = ptr - uintptr(40)
	if (*memblock_t)(unsafe.Pointer(block)).Fid != int32(ZONEID) {
		I_Error(29588, file, line)
	}
	if tag >= int32(PU_PURGELEVEL) && (*memblock_t)(unsafe.Pointer(block)).Fuser == uintptr(0) {
		I_Error(29632, file, line)
	}
	(*memblock_t)(unsafe.Pointer(block)).Ftag = tag
}

// Read data from the specified position in the file into the
// provided buffer.  Returns the number of bytes read.

func init() {
	vanilla_keyboard_mapping = 1
}

// Is the shift key currently down?

var shiftdown int32 = 0

// C documentation
//
//	// Lookup table for mapping ASCII characters to their equivalent when
//	// shift is pressed on an American layout keyboard:
var shiftxform = [128]uint8{
	1:   1,
	2:   2,
	3:   3,
	4:   4,
	5:   5,
	6:   6,
	7:   7,
	8:   8,
	9:   9,
	10:  10,
	11:  11,
	12:  12,
	13:  13,
	14:  14,
	15:  15,
	16:  16,
	17:  17,
	18:  18,
	19:  19,
	20:  20,
	21:  21,
	22:  22,
	23:  23,
	24:  24,
	25:  25,
	26:  26,
	27:  27,
	28:  28,
	29:  29,
	30:  30,
	31:  31,
	32:  ' ',
	33:  '!',
	34:  '"',
	35:  '#',
	36:  '$',
	37:  '%',
	38:  '&',
	39:  '"',
	40:  '(',
	41:  ')',
	42:  '*',
	43:  '+',
	44:  '<',
	45:  '_',
	46:  '>',
	47:  '?',
	48:  ')',
	49:  '!',
	50:  '@',
	51:  '#',
	52:  '$',
	53:  '%',
	54:  '^',
	55:  '&',
	56:  '*',
	57:  '(',
	58:  ':',
	59:  ':',
	60:  '<',
	61:  '+',
	62:  '>',
	63:  '?',
	64:  '@',
	65:  'A',
	66:  'B',
	67:  'C',
	68:  'D',
	69:  'E',
	70:  'F',
	71:  'G',
	72:  'H',
	73:  'I',
	74:  'J',
	75:  'K',
	76:  'L',
	77:  'M',
	78:  'N',
	79:  'O',
	80:  'P',
	81:  'Q',
	82:  'R',
	83:  'S',
	84:  'T',
	85:  'U',
	86:  'V',
	87:  'W',
	88:  'X',
	89:  'Y',
	90:  'Z',
	91:  '[',
	92:  '!',
	93:  ']',
	94:  '"',
	95:  '_',
	96:  '\'',
	97:  'A',
	98:  'B',
	99:  'C',
	100: 'D',
	101: 'E',
	102: 'F',
	103: 'G',
	104: 'H',
	105: 'I',
	106: 'J',
	107: 'K',
	108: 'L',
	109: 'M',
	110: 'N',
	111: 'O',
	112: 'P',
	113: 'Q',
	114: 'R',
	115: 'S',
	116: 'T',
	117: 'U',
	118: 'V',
	119: 'W',
	120: 'X',
	121: 'Y',
	122: 'Z',
	123: '{',
	124: '|',
	125: '}',
	126: '~',
	127: 127,
}

// Get the equivalent ASCII (Unicode?) character for a keypress.

func GetTypedChar(key uint8) (r uint8) {
	// Is shift held down?  If so, perform a translation.
	if shiftdown > 0 {
		if key >= 0 && key < 128 {
			key = shiftxform[key]
		} else {
			key = 0
		}
	}
	return key
}

func UpdateShiftStatus(pressed int32, key uint8) {
	var change int32
	if pressed != 0 {
		change = 1
	} else {
		change = -1
	}
	if key == 0x80+0x36 {
		shiftdown += change
	}
}

type DoomKeyEvent struct {
	Pressed bool
	Key     uint8
}

func I_GetEvent() {
	var bp event_t
	var event DoomKeyEvent
	for dg_frontend.GetKey(&event) {
		var pressed int32
		if event.Pressed {
			pressed = 1
		}

		UpdateShiftStatus(pressed, event.Key)
		// process event
		if event.Pressed {
			// data1 has the key pressed, data2 has the character
			// (shift-translated, etc)
			bp.Ftype1 = ev_keydown
			bp.Fdata1 = int32(event.Key)
			bp.Fdata2 = int32(GetTypedChar(event.Key))
			if bp.Fdata1 != 0 {
				D_PostEvent(&bp)
			}
		} else {
			bp.Ftype1 = ev_keyup
			bp.Fdata1 = int32(event.Key)
			// data2 is just initialized to zero for ev_keyup.
			// For ev_keydown it's the shifted Unicode character
			// that was typed, but if something wants to detect
			// key releases it should do so based on data1
			// (key ID), not the printable char.
			bp.Fdata2 = 0
			if bp.Fdata1 != 0 {
				D_PostEvent(&bp)
			}
			break
		}
	}
	/*
	   case SDL_MOUSEMOTION:
	       event.type = ev_mouse;
	       event.data1 = mouse_button_state;
	       event.data2 = AccelerateMouse(sdlevent.motion.xrel);
	       event.data3 = -AccelerateMouse(sdlevent.motion.yrel);
	       D_PostEvent(&event);
	       break;
	*/
}

func I_InitInput() {
}

const INT_MAX19 = 2147483647

var colors [256]color.RGBA

func init() {
	mouse_acceleration = float32(2)
	mouse_threshold = 10
}

func I_InitGraphics() {
	/* Allocate screen to draw to */
	I_VideoBuffer = Z_Malloc(SCREENWIDTH*SCREENHEIGHT, int32(PU_STATIC), uintptr(0)) // For DOOM to draw on
	I_InitInput()
}

func I_StartFrame() {
}

func I_StartTic() {
	I_GetEvent()
}

func I_UpdateNoBlit() {
}

//
// I_FinishUpdate
//

func I_FinishUpdate() {
	var line_in = I_VideoBuffer
	for y := SCREENHEIGHT - 1; y >= 0; y-- {
		for i := 0; i < SCREENWIDTH; i++ {
			inRaw := *(*uint8)(unsafe.Pointer(line_in + uintptr(i)))
			col := colors[inRaw]
			pos := SCREENWIDTH*4*int(SCREENHEIGHT-y-1) + i*4
			DG_ScreenBuffer.Pix[pos] = col.R
			DG_ScreenBuffer.Pix[pos+1] = col.G
			DG_ScreenBuffer.Pix[pos+2] = col.B
			DG_ScreenBuffer.Pix[pos+3] = 0xff
		}
		line_in += SCREENWIDTH
	}
	dg_frontend.DrawFrame(DG_ScreenBuffer)
}

// C documentation
//
//	//
//	// I_ReadScreen
//	//
func I_ReadScreen(scr uintptr) {
	xmemcpy(scr, I_VideoBuffer, SCREENWIDTH*SCREENHEIGHT)
}

//
// I_SetPalette
//

func I_SetPalette(palette uintptr) {
	for i := range 256 {
		colors[i].R = *(*uint8)(unsafe.Pointer(palette))
		colors[i].G = *(*uint8)(unsafe.Pointer(palette + 1))
		colors[i].B = *(*uint8)(unsafe.Pointer(palette + 2))
		palette += 3
	}
}

// Given an RGB value, find the closest matching palette index.

func I_GetPaletteIndex(r int32, g int32, b int32) (r1 int32) {
	var best, best_diff, diff int32
	fprintf_ccgo(os.Stdout, 30076)
	best = 0
	best_diff = int32(INT_MAX19)
	for i := int32(0); i < 256; i++ {
		red := int32(colors[i].R)
		green := int32(colors[i].G)
		blue := int32(colors[i].B)
		diff = (r-red)*(r-red) + (g-green)*(g-green) + (b-blue)*(b-blue)
		if diff < best_diff {
			best = i
			best_diff = diff
		}
		if diff == 0 {
			break
		}
	}
	return best
}

func I_BeginRead() {
}

func I_EndRead() {
}

func I_SetWindowTitle(title string) {
	dg_frontend.SetTitle(title)
}

func I_GraphicsCheckCommandLine() {
}

func I_SetGrabMouseCallback(func1 func() boolean) {
}

func I_EnableLoadingDisk() {
}

func I_BindVideoVariables() {
}

func I_DisplayFPSDots(dots_on boolean) {
}

func I_CheckIsScreensaver() {
}

func doomgeneric_Create(args []string) {
	// save arguments
	myargs = args
	M_FindResponseFile()

	DG_ScreenBuffer = image.NewRGBA(image.Rect(0, 0, SCREENWIDTH, SCREENHEIGHT))
	D_DoomMain()
}

func Run(fg DoomFrontend, args []string) {
	if dg_frontend != nil {
		log.Printf("Run called twice, ignoring second call")
	}
	dg_frontend = fg
	dg_exiting = false
	start_time = time.Now()

	// Convert command line arguments to C strings.
	args = append([]string{"doom"}, args...) // prepend "doom" as argv[0]
	doomgeneric_Create(args)
	for !dg_exiting {
		doomgeneric_Tick()
	}
	dg_frontend = nil
}

func __ccgo_fp(f interface{}) uintptr {
	type iface [2]uintptr
	return (*iface)(unsafe.Pointer(&f))[1]
}

var DG_ScreenBuffer *image.RGBA

var EpiDef menu_t

var EpisodeMenu [4]menuitem_t

// The screen buffer; this is modified to draw things to the screen

var I_VideoBuffer uintptr

var LoadDef menu_t

var LoadMenu [6]menuitem_t

var MainDef menu_t

var MainMenu [6]menuitem_t

var NewDef menu_t

var NewGameMenu [5]menuitem_t

var OptionsDef menu_t

var OptionsMenu [8]menuitem_t

var ReadDef1 menu_t

var ReadDef2 menu_t

var ReadMenu1 [1]menuitem_t

var ReadMenu2 [1]menuitem_t

//
// Information about all the music
//

var S_music [68]musicinfo_t

//
// Information about all the sfx
//

var S_sfx [NUMSFX]sfxinfo_t

var SaveDef menu_t

// C documentation
//
//	//
//	// SAVE GAME MENU
//	//
var SaveMenu [6]menuitem_t

var SoundDef menu_t

var SoundMenu [4]menuitem_t

var TRACEANGLE int32

//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Refresh/render internal state variables (global).
//

// Data.
//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Created by the sound utility written by Dave Taylor.
//	Kept as a sample, DOOM2  sounds. Frozen.
//

//
// CEILINGS
//

var activeceilings [MAXCEILINGS]*ceiling_t

//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Refresh/render internal state variables (global).
//

// Data.
//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Created by the sound utility written by Dave Taylor.
//	Kept as a sample, DOOM2  sounds. Frozen.
//

var activeplats [MAXPLATS]*plat_t

// Used in the test suite to stop the demo running in the
// background, as it messes with screenshots
var dont_run_demo bool
var advancedemo boolean

var aimslope fixed_t

//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Refresh/render internal state variables (global).
//

// C documentation
//
//	//
//	// CHANGE THE TEXTURE OF A WALL SWITCH TO ITS OPPOSITE
//	//
var alphSwitchList [41]switchlist_t

var angleturn [3]fixed_t

//
// P_InitPicAnims
//

// C documentation
//
//	// Floor/ceiling animation sequences,
//	//  defined by first and last frame,
//	//  i.e. the flat (64x64 tile) name to
//	//  be used.
//	// The full animation sequence is given
//	//  using all the flats between the start
//	//  and end entry, in the order found in
//	//  the WAD file.
//	//
var animdefs [23]animdef_t

var anims [32]anim_t

var attackrange fixed_t

var automapactive boolean

var autostart boolean

var backsector *sector_t

var basecolfunc func()

var basexscale fixed_t

var baseyscale fixed_t

// C documentation
//
//	//
//	// SLIDE MOVE
//	// Allows the player to slide along any angled walls.
//	//
var bestslidefrac fixed_t

var bestslideline *line_t

// C documentation
//
//	// "BFG Edition" version of doom2.wad does not include TITLEPIC.
var bfgedition boolean

// C documentation
//
//	// for thing chains
var blocklinks uintptr

var blockmap uintptr

// offsets in blockmap are from here
var blockmaplump uintptr

var bmapheight int32

// C documentation
//
//	// origin of block map
var bmaporgx fixed_t

var bmaporgy fixed_t

// C documentation
//
//	// BLOCKMAP
//	// Created from axis aligned bounding box
//	// of the map, a rectangular array of
//	// blocks of size ...
//	// Used to speed up collision detection
//	// by spatial subdivision in 2D.
//	//
//	// Blockmap size.
var bmapwidth int32

var bodyque [32]*mobj_t

var bodyqueslot int32

var bombdamage int32

// C documentation
//
//	//
//	// RADIUS ATTACK
//	//
var bombsource *mobj_t

var bombspot *mobj_t

var bottomfrac fixed_t

var bottomslope fixed_t

var bottomstep fixed_t

var bottomtexture int32

var braintargeton int32

var braintargets [32]*mobj_t

// C documentation
//
//	//
//	// P_BulletSlope
//	// Sets a slope so a near miss is at aproximately
//	// the height of the intended target
//	//
var bulletslope fixed_t

var buttonlist [MAXBUTTONS]button_t

var cacheddistance [200]fixed_t

var cachedheight [200]fixed_t

var cachedxstep [200]fixed_t

var cachedystep [200]fixed_t

var castattacking boolean

var castdeath boolean

var castframes int32

var castnum int32

var castonmelee int32

var castorder [18]castinfo_t

var caststate *state_t

var casttics int32

var ceilingclip [320]int16

// C documentation
//
//	// keep track of the line that lowers the ceiling,
//	// so missiles don't explode against sky hack walls
var ceilingline *line_t

var ceilingplane *visplane_t

var centerx int32

var centerxfrac fixed_t

var centery int32

var centeryfrac fixed_t

//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Created by the sound utility written by Dave Taylor.
//	Kept as a sample, DOOM2  sounds. Frozen.
//

//
// Locally used constants, shortcuts.
//

var chat_macros [10][]byte

var chat_on boolean

var cheat_amap cheatseq_t

var cheat_ammo cheatseq_t

var cheat_ammonokey cheatseq_t

var cheat_choppers cheatseq_t

var cheat_clev cheatseq_t

var cheat_commercial_noclip cheatseq_t

var cheat_god cheatseq_t

var cheat_mus cheatseq_t

var cheat_mypos cheatseq_t

var cheat_noclip cheatseq_t

var cheat_player_arrow [16]mline_t

var cheat_powerup [7]cheatseq_t

// C documentation
//
//	//
//	// R_CheckBBox
//	// Checks BSP node/subtree bounding box.
//	// Returns true
//	//  if some part of the bbox might be visible.
//	//
var checkcoord [12][4]int32

var clipammo [4]int32

// C documentation
//
//	//
//	// precalculated math tables
//	//
var clipangle angle_t

var colfunc func()

var colormaps []lighttable_t

var columnofs [1120]int32

//
// This is used to get the local FILE:LINE info from CPP
// prior to really call the function in question.
//

//
// DEFAULTS
//

// Location where all configuration data is stored -
// default.cfg, savegames, etc.

var configdir string

var consistancy [4][128]uint8

var consoleplayer int32

// C documentation
//
//	//
//	// PIT_VileCheck
//	// Detect a corpse that could be raised.
//	//
var corpsehit *mobj_t

// C documentation
//
//	// DOOM II Par Times
var cpars [32]int32

// C documentation
//
//	//
//	// SECTOR HEIGHT CHANGING
//	// After modifying a sectors floor or ceiling height,
//	// call this routine to adjust the positions
//	// of all things that touch the sector.
//	//
//	// If anything doesn't fit anymore, true will be returned.
//	// If crunch is true, they will take damage
//	//  as they are being crushed.
//	// If Crunch is false, you should set the sector height back
//	//  the way it was and call P_ChangeSector again
//	//  to undo the changes.
//	//
var crushchange boolean

//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Refresh/render internal state variables (global).
//

//#include "r_local.h"

var curline *seg_t

// C documentation
//
//	// current menudef
var currentMenu *menu_t

var d_episode int32

var d_map int32

// C documentation
//
//	//
//	// G_InitNew
//	// Can be called by the startup code or the menu task,
//	// consoleplayer, displayplayer, playeringame[] should be set.
//	//
var d_skill skill_t

// C documentation
//
//	//
//	// R_DrawColumn
//	// Source is the top of the column to scale.
//	//
var dc_colormap []lighttable_t

var dc_iscale fixed_t

// C documentation
//
//	// first pixel in a column (possibly virtual)
var dc_source uintptr

var dc_texturemid fixed_t

// C documentation
//
//	//
//	// R_DrawTranslatedColumn
//	// Used to draw player sprites
//	//  with the green colorramp mapped to others.
//	// Could be used with different translation
//	//  tables, e.g. the lighter colored version
//	//  of the BaronOfHell, the HellKnight, uses
//	//  identical sprites, kinda brightened up.
//	//
var dc_translation []byte

var dc_x int32

var dc_yh int32

var dc_yl int32

// Control whether if a mouse button is double clicked, it acts like
// "use" has been pressed

var dclick_use int32

var deathmatch int32

var deathmatch_pos int

// Maintain single and multi player starting spots.

var deathmatchstarts [10]mapthing_t

//
// G_PlayDemo
//

var defdemoname string

var demo_p uintptr

var demobuffer uintptr

var demoend uintptr

var demoname string

var demoplayback boolean

var demorecording boolean

// C documentation
//
//	//
//	//  DEMO LOOP
//	//
var demosequence int32

// C documentation
//
//	// Blocky mode, has default, 0 = high, 1 = normal
var detailLevel int32

// C documentation
//
//	// 0 = high, 1 = low
var detailshift int32

var devparm boolean

var diags [4]dirtype_t

var dirtybox box_t

var displayplayer int32

var distscale [320]fixed_t

var doom1_endmsg [NUM_QUITMESSAGES]string

var doom2_endmsg [NUM_QUITMESSAGES]string

var drawsegs [256]drawseg_t

var drone boolean

var ds_colormap []lighttable_t

var ds_index int

// C documentation
//
//	// start of a 64*64 tile image
var ds_source uintptr

var ds_x1 int32

var ds_x2 int32

var ds_xfrac fixed_t

var ds_xstep fixed_t

// C documentation
//
//	//
//	// R_DrawSpan
//	// With DOOM style restrictions on view orientation,
//	//  the floors and ceilings consist of horizontal slices
//	//  or spans with constant z depth.
//	// However, rotation around the world z axis is possible,
//	//  thus this mapping, while simpler and faster than
//	//  perspective correct texture mapping, has to traverse
//	//  the texture at an angle in all but a few cases.
//	// In consequence, flats are not stored by column (like walls),
//	//  and the inner loop has to step in texture space u and v.
//	//
var ds_y int32

var ds_yfrac fixed_t

var ds_ystep fixed_t

var earlyout boolean

var endstring string

// C documentation
//
//	//
//	//      M_Episode
//	//
var epi int32

// C documentation
//
//	// bumped light from gun blasts
var extralight int32

var fastparm boolean

var finalecount uint32

var finaleflat uintptr

// ?
//#include "doomstat.h"
//#include "r_local.h"
//#include "f_finale.h"

// C documentation
//
//	// Stage of animation:
var finalestage finalestage_t

var finaletext uintptr

var finecosine []fixed_t

var finesine [10240]fixed_t

var finetangent [4096]fixed_t

var firstflat int32

var firstspritelump int32

var fixedcolormap []lighttable_t

// C documentation
//
//	// for global animation
var flattranslation []int32

// C documentation
//
//	// If "floatok" true, move would be ok
//	// if within "tmfloorz - tmceilingz".
var floatok boolean

// C documentation
//
//	//
//	// Clip values are the solid pixel bounding the range.
//	//  floorclip starts out SCREENHEIGHT
//	//  ceilingclip starts out -1
//	//
var floorclip [320]int16

var floorplane *visplane_t

var forwardmove [2]fixed_t

// C documentation

var frontsector *sector_t

var fuzzcolfunc func()

//
// Spectre/Invisibility.
//

var fuzzoffset [50]int32

var fuzzpos int32

var gameaction gameaction_t

var gamedescription string

var gameepisode int32

var gamemap int32

var gamemission GameMission_t

// C documentation
//
//	// Game Mode - identify IWAD as shareware, retail etc.
var gamemode GameMode_t

var gameskill skill_t

var gamestate gamestate_t

// The number of tics that have been run (using RunTic) so far.

var gametic int32

var gameversion GameVersion_t

var gammamsg [5]string

// C documentation
var hu_font [63]*patch_t

var inhelpscreens boolean

var intercept_pos int32

// C documentation
//
//	//
//	// INTERCEPT ROUTINES
//	//
var intercepts [189]intercept_t

var iquehead int32

var iquetail int32

var itemOn int16

// C documentation
//
//	//
//	// P_RemoveMobj
//	//
var itemrespawnque [128]mapthing_t

var itemrespawntime [128]int32

// location of IWAD and WAD files

var iwadfile string

//
// Joystick controls
//

var joybfire int32

var joybjump int32

var joybmenu int32

var joybnextweapon int32

var joybprevweapon int32

var joybspeed int32

var joybstrafe int32

var joybstrafeleft int32

var joybstraferight int32

var joybuse int32

var key_arti_all int32

var key_arti_blastradius int32

var key_arti_egg int32

var key_arti_health int32

var key_arti_invulnerability int32

var key_arti_poisonbag int32

var key_arti_teleport int32

var key_arti_teleportother int32

var key_demo_quit int32

var key_down int32

var key_fire int32

var key_flycenter int32

var key_flydown int32

// Heretic keyboard controls
var key_flyup int32

var key_invdrop int32

var key_invend int32

var key_invhome int32

var key_invkey int32

var key_invleft int32

var key_invpop int32

var key_invquery int32

var key_invright int32

var key_invuse int32

//
// Hexen key controls
//

var key_jump int32

var key_left int32

var key_lookcenter int32

var key_lookdown int32

var key_lookup int32

var key_map_clearmark int32

var key_map_east int32

var key_map_follow int32

var key_map_grid int32

var key_map_mark int32

var key_map_maxzoom int32

// Map control keys:

var key_map_north int32

var key_map_south int32

var key_map_toggle int32

var key_map_west int32

var key_map_zoomin int32

var key_map_zoomout int32

var key_menu_abort int32

// menu keys:

var key_menu_activate int32

var key_menu_back int32

var key_menu_confirm int32

var key_menu_decscreen int32

var key_menu_detail int32

var key_menu_down int32

var key_menu_endgame int32

var key_menu_forward int32

var key_menu_gamma int32

var key_menu_help int32

var key_menu_incscreen int32

var key_menu_left int32

var key_menu_load int32

var key_menu_messages int32

var key_menu_qload int32

var key_menu_qsave int32

var key_menu_quit int32

var key_menu_right int32

var key_menu_save int32

var key_menu_screenshot int32

var key_menu_up int32

var key_menu_volume int32

var key_message_refresh int32

var key_mission int32

// Multiplayer chat keys:

var key_multi_msg int32

var key_multi_msgplayer [8]int32

var key_nextweapon int32

var key_pause int32

var key_prevweapon int32

//
// Keyboard controls
//

var key_right int32

var key_speed int32

var key_spy int32

var key_strafe int32

var key_strafeleft int32

var key_straferight int32

var key_up int32

var key_use int32

var key_useartifact int32

//
// Strife key controls
//
// haleyjd 09/01/10
//

// Note: Strife also uses key_invleft, key_invright, key_jump, key_lookup, and
// key_lookdown, but with different default values.

var key_usehealth int32

// Weapon selection keys:

var key_weapon1 int32

var key_weapon2 int32

var key_weapon3 int32

var key_weapon4 int32

var key_weapon5 int32

var key_weapon6 int32

var key_weapon7 int32

var key_weapon8 int32

var la_damage int32

var lastanim *anim_t

var lastflat int32

var lastopening uintptr

var lastspritelump int32

// C documentation
//
//	//
//	// NetUpdate
//	// Builds ticcmds for console player,
//	// sends out a packet
//	//
var lasttime int32

var lastvisplane_index int

var levelTimeCount int32

// C documentation
//
//	//
//	// P_UpdateSpecials
//	// Animate planes, scroll walls, etc.
//	//
var levelTimer boolean

var leveltime int32

var linedef *line_t

var lines []line_t

// TODO: ANDRE/GORE: This is a hack to allow easy conversion of addresses into indexs
func lineIndex(l *line_t) int32 {
	idx := int32((uintptr(unsafe.Pointer(l)) - uintptr(unsafe.Pointer(&lines[0]))) / unsafe.Sizeof(line_t{}))
	if idx < 0 || idx >= int32(len(lines)) {
		log.Fatalf("lineIndex: line %p out of bounds, %d lines length %d", l, idx, len(lines))
	}
	return idx
}

var linespeciallist [64]*line_t

// C documentation
//
//	//
//	// P_LineAttack
//	//
var linetarget *mobj_t

var longtics boolean

var lowfloor fixed_t

var lowres_turn boolean

//
// GLOBALS
//

// Location of each lump on disk.

// TODO: GORE/ANDRE - once we've got Go memory management fully in place, this should
// become a dynamic array that can be resized. We keep it static at the moment
// so that addresses don't change for the Z_Change... functions
var lumpinfo [4096]lumpinfo_t

func lumpIndex(l *lumpinfo_t) int32 {
	idx := (uintptr(unsafe.Pointer(l)) - uintptr(unsafe.Pointer(&lumpinfo[0]))) / unsafe.Sizeof(lumpinfo_t{})
	if idx < 0 || idx >= uintptr(len(lumpinfo)) {
		log.Fatalf("lumpIndex: lump %p out of bounds, %d lumps length", l, len(lumpinfo))
	}
	return int32(idx)
}

// C documentation
//
//	// If true, the main game loop has started.
var main_loop_started boolean

var mainzone uintptr

//
// Builtin map names.
// The actual names can be found in DStrings.h.
//

var mapnames [45]string

// List of names for levels in commercial IWADs
// (doom2.wad, plutonia.wad, tnt.wad).  These are stored in a
// single large array; WADs like pl2.wad have a MAP33, and rely on
// the layout in the Vanilla executable, where it is possible to
// overflow the end of one array into the next.

var mapnames_commercial [96]string

var markceiling boolean

// C documentation
//
//	// False if the back side is the same plane.
var markfloor boolean

var maskedtexture boolean

var maskedtexturecol uintptr

// C documentation
//
//	// a weapon is found with two clip loads,
//	// a big item has five clip loads
var maxammo [4]int32

var maxframe int32

var mceilingclip uintptr

var menuactive boolean

var messageLastMenuActive int32

// C documentation
//
//	// timed message = no input from user
var messageNeedsInput boolean

var messageRoutine *func(int32)

// C documentation
//
//	// ...and here is the message string!
var messageString string

// C documentation
//
//	// 1 = message to be printed
var messageToPrint int32

var message_dontfuckwithme boolean

// C documentation
//
//	//
//	// R_DrawMaskedColumn
//	// Used for sprites and masked mid textures.
//	// Masked means: partly transparent, i.e. stored
//	//  in posts/runs of opaque pixels.
//	//
var mfloorclip uintptr

var midtexture int32

var mobjinfo [137]mobjinfo_t

// C documentation
//
//	// Set if homebrew PWAD stuff has been added.
var modifiedgame boolean

// C documentation
//
//	//
//	// defaulted values
//	//
var mouseSensitivity int32

// Mouse acceleration
//
// This emulates some of the behavior of DOS mouse drivers by increasing
// the speed when the mouse is moved fast.
//
// The mouse input values are input directly to the game, but when
// the values exceed the value of mouse_threshold, they are multiplied
// by mouse_acceleration to increase the speed.

var mouse_acceleration float32

var mouse_threshold int32

var mousebbackward int32

//
// Mouse controls
//

var mousebfire int32

var mousebforward int32

var mousebjump int32

var mousebnextweapon int32

var mousebprevweapon int32

var mousebstrafe int32

var mousebstrafeleft int32

var mousebstraferight int32

var mousebuse int32

// C documentation
//
//	// mouse values are used once
var mousex int32

var mousey int32

// Maximum volume of music.

var musicVolume int32

var myargs []string

// C documentation
//
//	// constant arrays
//	//  used for psprite clipping and initializing clipping
var negonearray [320]int16

/* Support signed or unsigned plain-char */

/* Implementation choices... */

/* Arbitrary numbers... */

/* POSIX/SUS requirements follow. These numbers come directly
 * from SUS and have nothing to do with the host system. */

/*---------------------------------------------------------------------*
 *  local definitions                                                  *
 *---------------------------------------------------------------------*/

/*---------------------------------------------------------------------*
 *  external declarations                                              *
 *---------------------------------------------------------------------*/

/*---------------------------------------------------------------------*
 *  public data                                                        *
 *---------------------------------------------------------------------*/

var net_client_connected boolean

//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Main loop stuff.
//

var netcmds []ticcmd_t

var netdemo boolean

var netgame boolean

// C documentation
//
//	// newend is one past the last valid seg in `solidsegs`
var newend int

var nodes []node_t

var nodrawers boolean

var nofit boolean

var nomonsters boolean

var numbraintargets int32

var numflats int32

var numlines int32

//
// SPECIAL SPAWNING
//

// C documentation
//
//	//
//	// P_SpawnSpecials
//	// After the map has been loaded, scan for specials
//	//  that spawn thinkers
//	//
var numlinespecials int16

var numlumps uint32

var numnodes int32

var numsectors int32

var numsegs int32

var numsides int32

var numspechit int32

var numspritelumps int32

var numsprites int32

var numsubsectors int32

var numswitches int32

var numtextures int32

// C documentation
//
//	//
//	// MAP related Lookup tables.
//	// Store VERTEXES, LINEDEFS, SIDEDEFS, etc.
//	//
var numvertexes int32

// Amount to offset the timer for game sync.

var offsetms fixed_t

// Gamestate the last time G_Ticker was called.

var oldgamestate gamestate_t

// Index of the special effects (INVUL inverse) map.

//
// Movement.
//

// 16 pixels of bob

var onground boolean

var openbottom fixed_t

// C documentation
//
//	// ?
var openings [20480]int16

var openrange fixed_t

// C documentation
//
//	//
//	// P_LineOpening
//	// Sets opentop and openbottom to the window
//	// through a two sided line.
//	// OPTIMIZE: keep this precalculated
//	//
var opentop fixed_t

// C documentation
//
//	//
//	// P_NewChaseDir related LUT.
//	//
var opposite [9]dirtype_t

// C documentation
//
//	//
//	// R_NewVisSprite
//	//
var overflowsprite vissprite_t

var pagename uintptr

var pagetic int32

// C documentation
//
//	// DOOM Par Times
var pars [4][10]int32

var paused boolean

var pixhigh fixed_t

var pixhighstep fixed_t

var pixlow fixed_t

var pixlowstep fixed_t

var planeheight fixed_t

// C documentation
//
//	//
//	// texture mapping
//	//
var planezlight [][]lighttable_t

// C documentation
//
//	//
//	// The vector graphics for the automap.
//	//  A line drawing of the player pointing right,
//	//   starting from the middle.
//	//
var player_arrow [7]mline_t

var player_names [4]string

var playeringame [4]boolean

var players [4]player_t

func playerIndex(p *player_t) int32 {
	idx := int32((uintptr(unsafe.Pointer(p)) - uintptr(unsafe.Pointer(&players[0]))) / unsafe.Sizeof(player_t{}))
	if idx < 0 || idx >= int32(len(players)) {
		log.Fatalf("playerIndex: player %p out of bounds, %d players length %d", p, idx, len(players))
	}
	return idx
}

var playerstarts [4]mapthing_t

var precache boolean

var prndindex int32

var projection fixed_t

var pspriteiscale fixed_t

// C documentation
//
//	//
//	// Sprite rotation 0 is facing the viewer,
//	//  rotation 1 is one angle turn CLOCKWISE around the axis.
//	// This is not the same as the angle,
//	//  which increases counter clockwise (protractor).
//	// There was a lot of stuff grabbed wrong, so I changed it...
//	//
var pspritescale fixed_t

// C documentation
//
//	// -1 = no quicksave slot picked!
var quickSaveSlot int32

// C documentation
//
//	//
//	// M_QuitDOOM
//	//
var quitsounds [8]int32

var quitsounds2 [8]int32

// C documentation
//
//	// REJECT
//	// For fast sight rejection.
//	// Speeds up enemy AI by skipping detailed
//	//  LineOf Sight calculation.
//	// Without special effect, this could be
//	//  used as a PVS lookup as well.
//	//
var rejectmatrix uintptr

var respawnmonsters boolean

var respawnparm boolean

var rndindex int32

// C documentation
//
//	// angle to line origin
var rw_angle1 int32

var rw_bottomtexturemid fixed_t

var rw_centerangle angle_t

var rw_distance fixed_t

var rw_midtexturemid fixed_t

var rw_normalangle angle_t

var rw_offset fixed_t

var rw_scale fixed_t

var rw_scalestep fixed_t

var rw_stopx int32

var rw_toptexturemid fixed_t

// C documentation
//
//	//
//	// regular wall
//	//
var rw_x int32

var saveCharIndex int

// old save description before edit
var saveOldString string

var saveSlot int32

// C documentation
//
//	// we are going to be entering a savegame string
var saveStringEnter int32

//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Refresh/render internal state variables (global).
//

var save_stream *os.File

var savegame_error boolean

// Location where savegames are stored

var savegamedir string

var savegamestrings [10]string

var savename string

var scaledviewwidth int32

var scalelight [16][48][]lighttable_t

var scalelightfixed [48][]lighttable_t

// C documentation
//
//	// temp for screenblocks (0-9)
var screenSize int32

var screenblocks int32

var screenheightarray [320]int16

// If true, game is running as a screensaver

var screensaver_mode boolean

// C documentation
//
//	//
//	// G_DoCompleted
//	//
var secretexit boolean

var sectors []sector_t

// TODO: ANDRE/GORE: Faster way do to pointer division to determine offset?
func sectorIndex(sector *sector_t) int32 {
	idx := int32((uintptr(unsafe.Pointer(sector)) - uintptr(unsafe.Pointer(&sectors[0]))) / unsafe.Sizeof(sector_t{}))
	if idx < 0 || idx >= int32(len(sectors)) {
		log.Fatalf("sectorIndex: sector %p out of bounds, %d sectors length %d", sector, idx, len(sectors))
	}
	return idx
}

var segs []seg_t

// OPTIMIZE: closed two sided lines as single sided

// C documentation
//
//	// True if any of the segs textures might be visible.
var segtextured boolean

var sendpause boolean

var sendsave boolean

var setblocks int32

var setdetail int32

// C documentation
//
//	//
//	// R_SetViewSize
//	// Do not really change anything here,
//	//  because it might be in the middle of a refresh.
//	// The change will take effect next refresh.
//	//
var setsizeneeded boolean

// Maximum volume of a sound effect.
// Internal default is max out of 0-15.

var sfxVolume int32

var shootthing *mobj_t

// C documentation
//
//	// Height if not aiming up or down
//	// ???: use slope for monsters?
var shootz fixed_t

// C documentation
//
//	// Show messages has default, 0 = off, 1 = on
var showMessages int32

var show_endoom int32

var sidedef *side_t

var sidemove [2]fixed_t

var sides []side_t

var sightcounts [2]int32

// State.
//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Refresh/render internal state variables (global).
//

// C documentation
//
//	//
//	// P_CheckSight
//	//
var sightzstart fixed_t

var singledemo boolean

// When set to true, a single tic is run each time TryRunTics() is called.
// This is used for -timedemo mode.

var singletics boolean

var skullAnimCounter int16

// C documentation
//
//	// graphic name of skulls
//	// warning: initializer-string for array of chars is too long
var skullName [2]uintptr

// C documentation
//
//	//
//	// sky mapping
//	//
var skyflatnum int32

var skytexture int32

var skytexturemid int32

var slidemo *mobj_t

// Maximum number of bytes to dedicate to allocated sound effects.
// (Default: 64MB)

var snd_cachesize int32

// Number of channels to use

var snd_channels int32

// Config variable that controls the sound buffer size.
// We default to 28ms (1000 / 35fps = 1 buffer per tic).

var snd_maxslicetime_ms int32

// External command to invoke to play back music.

var snd_musiccmd uintptr

var snd_musicdevice int32

// Sound sample rate to use for digital output (Hz)

var snd_samplerate int32

var snd_sfxdevice int32

var solidsegs [32]cliprange_t

//
// ENEMY THINKING
// Enemies are allways spawned
// with targetplayer = -1, threshold = 0
// Most monsters are spawned unaware of all players,
// but some can be made preaware
//

//
// Called by P_NoiseAlert.
// Recursively traverse adjacent sectors,
// sound blocking lines cut off traversal.
//

var soundtarget *mobj_t

var spanfunc func()

// C documentation
//
//	//
//	// spanstart holds the start of a plane span
//	// initialized to 0 at start
//	//
var spanstart [200]int32

// keep track of special lines as they are hit,
// but don't process them until the move is proven valid

var spechit [20]*line_t

var spritelights [48][]lighttable_t

var spriteoffset []fixed_t

//
// INITIALIZATION FUNCTIONS
//

// C documentation
//
//	// variables used to look up
//	//  and range check thing_t sprites patches
var sprites []spritedef_t

var spritetopoffset []fixed_t

// C documentation
//
//	// needed for pre rendering
var spritewidth []fixed_t

var sprnames []uintptr

var sprtemp [29]spriteframe_t

var sprtopscreen fixed_t

var spryscale fixed_t

//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Created by the sound utility written by Dave Taylor.
//	Kept as a sample, DOOM2  sounds. Frozen.
//

//
// STATUS BAR DATA
//

// Palette indices.
// For damage/bonus red-/gold-shifts
// Radiation suit, green shift.

// N/256*100% probability
//  that the normal face state will change

// For Responder

// Location of status bar

// Should be set to patch width
//  for tall numbers later on

// Number of status faces.

// Location and size of statistics,
//  justified according to widget type.
// Problem is, within which space? STbar? Screen?
// Note: this could be read in by a lump.
//       Problem is, is the stuff rendered
//       into a buffer,
//       or into the frame buffer?

// AMMO number pos.

// HEALTH number pos.

// Weapon pos.

// Frags pos.

// ARMOR number pos.

// Key icon positions.

// Ammunition counter.

// Indicate maximum ammunition.
// Only needed because backpack exists.

// pistol

// shotgun

// chain gun

// missile launcher

// plasma gun

// bfg

// WPNS title

// DETH title

//Incoming messages window location
//UNUSED
// #define ST_MSGTEXTX	   (viewwindowx)
// #define ST_MSGTEXTY	   (viewwindowy+viewheight-18)
// Dimensions given in characters.
// Or shall I say, in lines?

// Width, in characters again.
// Height, in lines.

// C documentation
//
//	// graphics are drawn to a backing screen and blitted to the real screen
var st_backing_screen uintptr

var startepisode int32

var startloadgame int32

var startmap int32

var startskill skill_t

var starttime int32

var states [967]state_t

func stateIndex(s *state_t) int32 {
	idx := int32((uintptr(unsafe.Pointer(s)) - uintptr(unsafe.Pointer(&states[0]))) / unsafe.Sizeof(state_t{}))
	if idx < 0 || idx >= int32(len(states)) {
		log.Fatalf("stateIndex: state %p out of bounds, %d states length %d", s, idx, len(states))
	}
	return idx
}

// C documentation
//
//	// Store demo, do not accept any inputs
var storedemo boolean

var strace divline_t

// C documentation
//
//	//
//	// Hack display negative frags.
//	//  Loads and store the stminus lump.
//	//
var sttminus *patch_t

var subsectors []subsector_t

var switchlist [100]int32

var t2x fixed_t

var t2y fixed_t

var tantoangle [2049]angle_t

// C documentation
//
//	//
//	//      M_QuickSave
//	//

// if true, load all graphics at start

var testcontrols boolean

var testcontrols_mousespeed int32

var texturecolumnlump [][]int16

var texturecolumnofs [][]uint16

var texturecomposite uintptr

var texturecompositesize []int32

// C documentation
//
//	// needed for texture pegging
var textureheight []fixed_t

var textures []*texture_t

var textures_hashtable []*texture_t

var texturetranslation []int32

var texturewidthmask []int32

//
// THINKERS
// All thinkers should be allocated by Z_Malloc
// so they can be operated on uniformly.
// The actual structures will vary in size,
// but the first element must be thinker_t.
//

// C documentation
//
//	// Both the head and tail of the thinker list.
var thinkercap thinker_t

var thintriangle_guy [3]mline_t

// Reduce the bandwidth needed by sampling game input less and transmitting
// less.  If ticdup is 2, sample half normal, 3 = one third normal, etc.

var ticdup int32

// If non-zero, exit the level after this number of minutes.

var timelimit int32

var timingdemo boolean

// C documentation

//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Refresh/render internal state variables (global).
//

// Data.
//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//	Created by the sound utility written by Dave Taylor.
//	Kept as a sample, DOOM2  sounds. Frozen.
//

// Spechit overrun magic value.
//
// This is the value used by PrBoom-plus.  I think the value below is
// actually better and works with more demos.  However, I think
// it's better for the spechits emulation to be compatible with
// PrBoom-plus, at least so that the big spechits emulation list
// on Doomworld can also be used with Chocolate Doom.

// This is from a post by myk on the Doomworld forums,
// outputted from entryway's spechit_magic generator for
// s205n546.lmp.  The _exact_ value of this isn't too
// important; as long as it is in the right general
// range, it will usually work.  Otherwise, we can use
// the generator (hacked doom2.exe) and provide it
// with -spechit.

//#define DEFAULT_SPECHIT_MAGIC 0x84f968e8

var tmbbox box_t

var tmceilingz fixed_t

var tmdropoffz fixed_t

var tmflags int32

var tmfloorz fixed_t

var tmthing *mobj_t

var tmx fixed_t

var tmxmove fixed_t

var tmy fixed_t

var tmymove fixed_t

var topfrac fixed_t

var topslope fixed_t

var topstep fixed_t

var toptexture int32

var totalitems int32

var totalkills int32

var totalsecret int32

var trace divline_t

var transcolfunc func()

var translationtables []byte

var turbodetected [4]boolean

// Gamma correction level to use

var usegamma int32

var usemouse int32

var usergame boolean

// C documentation
//
//	//
//	// USE LINES
//	//
var usething *mobj_t

// C documentation
//
//	// increment every time a check is made
var validcount int32

var vanilla_demo_limit int32

var vanilla_keyboard_mapping int32

var vanilla_savegame_limit int32

var vertexes []vertex_t

var viewactive boolean

var viewangle angle_t

// Fineangles in the SCREENWIDTH wide window.

var viewangleoffset uint32

// C documentation
//
//	// The viewangletox[viewangle + FINEANGLES/4] lookup
//	// maps the visible view angles to screen X coordinates,
//	// flattening the arc to a flat projection plane.
//	// There will be many angles mapped to the same X.
var viewangletox [4096]int32

var viewcos fixed_t

var viewheight int32

var viewplayer *player_t

var viewsin fixed_t

var viewwidth int32

var viewwindowx int32

var viewwindowy int32

var viewx fixed_t

var viewy fixed_t

var viewz fixed_t

var viletryx fixed_t

var viletryy fixed_t

//
// opening
//

// C documentation
//
//	// Here comes the obnoxious "visplane".
var visplanes [128]visplane_t

var vissprite_n int

// C documentation
//
//	//
//	// GAME FUNCTIONS
//	//
var vissprites [128]vissprite_t

// C documentation
//
//	//
//	// R_SortVisSprites
//	//
var vsprsortedhead vissprite_t

var walllights [48][]lighttable_t

// C documentation
//
//	//
//	// PSPRITE ACTIONS for waepons.
//	// This struct controls the weapon animations.
//	//
//	// Each entry is:
//	//   ammo/amunition type
//	//  upstate
//	//  downstate
//	// readystate
//	// atkstate, i.e. attack/fire/hit frame
//	// flashstate, muzzle flash
//	//
var weaponinfo [9]weaponinfo_t

var whichSkull int16

//
// D_Display
//  draw current display, possibly wiping it from the previous
//

// C documentation
//
//	// wipegamestate can be set to -1 to force a wipe on the next draw
var wipegamestate gamestate_t

var wminfo wbstartstruct_t

var worldbottom int32

var worldhigh int32

var worldlow int32

var worldtop int32

// C documentation
//
//	//
//	// P_Move
//	// Move in the current direction,
//	// returns false if the move is blocked.
//	//
var xspeed [8]fixed_t

// C documentation
//
//	// The xtoviewangleangle[] table maps a screen pixel
//	// to the lowest viewangle that maps back to x ranges
//	// from clipangle to -clipangle.
var xtoviewangle [321]angle_t

var ylookup [832]uintptr

var yslope [200]fixed_t

var yspeed [8]fixed_t

var zlight [16][128][]lighttable_t

func fprintf_ccgo(output io.Writer, index int, args ...any) {
	fmt.Fprintf(output, __ccgo_ts_str(index), args...)
}

func snprintf_ccgo(bp uintptr, maxlen int, index int, args ...any) {
	if maxlen <= 0 {
		panic("snprintf_ccgo: negative length")
	}
	fmtStr, ok := __ccgo_ts_map[index]
	if !ok {
		panic(fmt.Sprintf("index %d not found in __ccgo_ts_map", index))
	}
	if len(fmtStr) > 0 && fmtStr[len(fmtStr)-1] == 0 {
		// Remove the null terminator for printing
		fmtStr = fmtStr[:len(fmtStr)-1]
	}
	n := fmt.Sprintf(string(fmtStr), args...)
	if len(n) >= maxlen {
		panic(fmt.Sprintf("snprintf_ccgo: output length %d exceeds buffer size %d", len(n), maxlen))
	}
	copyBytes := []byte(n)
	copyBytes = append(copyBytes, 0) // Add null terminator
	if len(copyBytes) > maxlen {
		copyBytes = copyBytes[:maxlen]
	}
	output := unsafe.Slice((*uint8)(unsafe.Pointer(bp)), maxlen)
	copy(output, copyBytes)
}

func __ccgo_ts(index int) uintptr {
	val, ok := __ccgo_ts_map[index]
	if !ok {
		panic("index not found in __ccgo_ts_map")
	}
	return uintptr(unsafe.Pointer(&val[0]))
}

func __ccgo_ts_str(index int) string {
	val, ok := __ccgo_ts_map[index]
	if !ok {
		panic("index not found in __ccgo_ts_map")
	}
	if len(val) > 0 && val[len(val)-1] == 0 {
		// Remove the null terminator for string representation
		return string(val[:len(val)-1])
	}
	return string(val)
}

var __ccgo_ts_map = map[int][]byte{
	0:     []byte("AMMNUM%d\x00"),
	9:     []byte("Follow Mode ON\x00"),
	24:    []byte("Follow Mode OFF\x00"),
	40:    []byte("Grid ON\x00"),
	48:    []byte("Grid OFF\x00"),
	57:    []byte("%s %d\x00"),
	63:    []byte("Marked Spot\x00"),
	75:    []byte("All Marks Cleared\x00"),
	93:    []byte("fuck %d\n\x00"),
	103:   []byte("are you sure you want to\nquit this great game?\x00"),
	150:   []byte("please don't leave, there's more\ndemons to toast!\x00"),
	200:   []byte("let's beat it -- this is turning\ninto a bloodbath!\x00"),
	251:   []byte("i wouldn't leave if i were you.\ndos is much worse.\x00"),
	302:   []byte("you're trying to say you like dos\nbetter than me, right?\x00"),
	359:   []byte("don't leave yet -- there's a\ndemon around that corner!\x00"),
	414:   []byte("ya know, next time you come in here\ni'm gonna toast ya.\x00"),
	470:   []byte("go ahead and leave. see if i care.\x00"),
	505:   []byte("you want to quit?\nthen, thou hast lost an eighth!\x00"),
	555:   []byte("don't go now, there's a \ndimensional shambler waiting\nat the dos prompt!\x00"),
	628:   []byte("get outta here and go back\nto your boring programs.\x00"),
	680:   []byte("if i were your boss, i'd \n deathmatch ya in a minute!\x00"),
	734:   []byte("look, bud. you leave now\nand you forfeit your body count!\x00"),
	792:   []byte("just leave. when you come\nback, i'll be waiting with a bat.\x00"),
	852:   []byte("you're lucky i don't smack\nyou for thinking about leaving.\x00"),
	911:   []byte("doom2.wad\x00"),
	921:   []byte("Doom II\x00"),
	929:   []byte("plutonia.wad\x00"),
	942:   []byte("Final Doom: Plutonia Experiment\x00"),
	974:   []byte("tnt.wad\x00"),
	982:   []byte("Final Doom: TNT: Evilution\x00"),
	1009:  []byte("doom.wad\x00"),
	1018:  []byte("Doom\x00"),
	1023:  []byte("doom1.wad\x00"),
	1033:  []byte("Doom Shareware\x00"),
	1048:  []byte("chex.wad\x00"),
	1057:  []byte("Chex Quest\x00"),
	1068:  []byte("hacx.wad\x00"),
	1077:  []byte("Hacx\x00"),
	1082:  []byte("freedm.wad\x00"),
	1093:  []byte("FreeDM\x00"),
	1100:  []byte("freedoom2.wad\x00"),
	1114:  []byte("Freedoom: Phase 2\x00"),
	1132:  []byte("freedoom1.wad\x00"),
	1146:  []byte("Freedoom: Phase 1\x00"),
	1164:  []byte("heretic.wad\x00"),
	1176:  []byte("Heretic\x00"),
	1184:  []byte("heretic1.wad\x00"),
	1197:  []byte("Heretic Shareware\x00"),
	1215:  []byte("hexen.wad\x00"),
	1225:  []byte("Hexen\x00"),
	1231:  []byte("strife1.wad\x00"),
	1243:  []byte("Strife\x00"),
	1250:  []byte(".\x00"),
	1252:  []byte("/\x00"),
	1254:  []byte("Trying IWAD file:%s\n\x00"),
	1275:  []byte("-iwad\x00"),
	1281:  []byte("IWAD file '%s' not found!\x00"),
	1307:  []byte("-iwad not specified, trying a few iwad names\n\x00"),
	1353:  []byte("unknown.wad\x00"),
	1365:  []byte("Unknown game?\x00"),
	1379:  []byte("Disconnected from server in drone mode.\x00"),
	1419:  []byte("Disconnected from server.\n\x00"),
	1446:  []byte("TryRunTics: lowtic < gametic\x00"),
	1475:  []byte("gametic>lowtic\x00"),
	1490:  []byte("PLAYPAL\x00"),
	1498:  []byte("M_PAUSE\x00"),
	1506:  []byte("mouse_sensitivity\x00"),
	1524:  []byte("sfx_volume\x00"),
	1535:  []byte("music_volume\x00"),
	1548:  []byte("show_messages\x00"),
	1562:  []byte("screenblocks\x00"),
	1575:  []byte("detaillevel\x00"),
	1587:  []byte("snd_channels\x00"),
	1600:  []byte("vanilla_savegame_limit\x00"),
	1623:  []byte("vanilla_demo_limit\x00"),
	1642:  []byte("show_endoom\x00"),
	1654:  []byte("chatmacro%d\x00"),
	1666:  []byte(" WARNING: You are playing using one of the Doom Classic\n IWAD files shipped with the Doom 3: BFG Edition. These are\n known to be incompatible with the regular IWAD files and\n may cause demos and network games to get out of sync.\n\x00"),
	1896:  []byte("TITLEPIC\x00"),
	1905:  []byte("demo1\x00"),
	1911:  []byte("CREDIT\x00"),
	1918:  []byte("demo2\x00"),
	1924:  []byte("HELP2\x00"),
	1930:  []byte("demo3\x00"),
	1936:  []byte("demo4\x00"),
	1942:  []byte("titlepic\x00"),
	1951:  []byte("INTERPIC\x00"),
	1960:  []byte("                         DOOM 2: Hell on Earth v%d.%d                           \x00"),
	2041:  []byte("                            DOOM Shareware Startup v%d.%d                           \x00"),
	2126:  []byte("                            DOOM Registered Startup v%d.%d                           \x00"),
	2212:  []byte("                          DOOM System Startup v%d.%d                          \x00"),
	2291:  []byte("                         The Ultimate DOOM Startup v%d.%d                        \x00"),
	2373:  []byte("                     DOOM 2: TNT - Evilution v%d.%d                           \x00"),
	2452:  []byte("                   DOOM 2: Plutonia Experiment v%d.%d                           \x00"),
	2533:  []byte("doom2\x00"),
	2539:  []byte("tnt\x00"),
	2543:  []byte("plutonia\x00"),
	2552:  []byte("Valid mission packs are:\n\x00"),
	2578:  []byte("	%s\n\x00"),
	2583:  []byte("Unknown mission pack name: %s\x00"),
	2613:  []byte("MAP01\x00"),
	2619:  []byte("E1M1\x00"),
	2624:  []byte("Unknown or invalid IWAD file.\x00"),
	2654:  []byte("E4M1\x00"),
	2659:  []byte("E3M1\x00"),
	2664:  []byte("-pack\x00"),
	2670:  []byte("FREEDOOM\x00"),
	2679:  []byte("FREEDM\x00"),
	2686:  []byte("Unknown\x00"),
	2694:  []byte("The Ultimate DOOM\x00"),
	2712:  []byte("DOOM Registered\x00"),
	2728:  []byte("DOOM Shareware\x00"),
	2743:  []byte("DOOM 2: Hell on Earth\x00"),
	2765:  []byte("DOOM 2: Plutonia Experiment\x00"),
	2793:  []byte("DOOM 2: TNT - Evilution\x00"),
	2817:  []byte(" adding %s\n\x00"),
	2829:  []byte("===========================================================================\nATTENTION:  This version of DOOM has been modified.  If you would like to\nget a copy of the original game, call 1-800-IDGAMES or see the readme file.\n        You will not receive technical support for modified games.\n                      press enter to continue\n===========================================================================\n\x00"),
	3245:  []byte("===========================================================================\n                 Commercial product - do not distribute!\n         Please report software piracy to the SPA: 1-800-388-PIR8\n===========================================================================\n\x00"),
	3521:  []byte("===========================================================================\n                                Shareware!\n===========================================================================\n\x00"),
	3717:  []byte("%s\x00"),
	3720:  []byte("\n\x00"),
	3722:  []byte("Doom 1.666\x00"),
	3733:  []byte("1.666\x00"),
	3739:  []byte("Doom 1.7/1.7a\x00"),
	3753:  []byte("1.7\x00"),
	3757:  []byte("Doom 1.8\x00"),
	3766:  []byte("1.8\x00"),
	3770:  []byte("Doom 1.9\x00"),
	3779:  []byte("1.9\x00"),
	3783:  []byte("hacx\x00"),
	3788:  []byte("Ultimate Doom\x00"),
	3802:  []byte("ultimate\x00"),
	3811:  []byte("Final Doom\x00"),
	3822:  []byte("final\x00"),
	3828:  []byte("Final Doom (alt)\x00"),
	3845:  []byte("final2\x00"),
	3852:  []byte("chex\x00"),
	3857:  []byte("-gameversion\x00"),
	3870:  []byte("Supported game versions:\n\x00"),
	3896:  []byte("	%s (%s)\n\x00"),
	3906:  []byte("Unknown game version '%s'\x00"),
	3932:  []byte("Emulating the behavior of the '%s' executable.\n\x00"),
	3980:  []byte("-testcontrols\x00"),
	3994:  []byte("ENDOOM\x00"),
	4001:  []byte("Doom Generic 0.1\x00"),
	4018:  []byte("Z_Init: Init zone memory allocation daemon. \n\x00"),
	4064:  []byte("-nomonsters\x00"),
	4076:  []byte("-respawn\x00"),
	4085:  []byte("-fast\x00"),
	4091:  []byte("-devparm\x00"),
	4100:  []byte("-deathmatch\x00"),
	4112:  []byte("-altdeath\x00"),
	4122:  []byte("Development mode ON.\n\x00"),
	4144:  []byte("-turbo\x00"),
	4151:  []byte("turbo scale: %d%%\n\x00"),
	4170:  []byte("V_Init: allocate screens.\n\x00"),
	4197:  []byte("M_LoadDefaults: Load system defaults.\n\x00"),
	4236:  []byte("default.cfg\x00"),
	4248:  []byte("doomgenericdoom.cfg\x00"),
	4268:  []byte("Game mode indeterminate.  No IWAD file was found.  Try\nspecifying one with the '-iwad' command line parameter.\n\x00"),
	4380:  []byte("W_Init: Init WADfiles.\n\x00"),
	4404:  []byte("dmenupic\x00"),
	4413:  []byte("BFG Edition: Using workarounds as needed.\n\x00"),
	4456:  []byte("-playdemo\x00"),
	4466:  []byte("-timedemo\x00"),
	4476:  []byte(".lmp\x00"),
	4481:  []byte("%s.lmp\x00"),
	4488:  []byte("Playing demo %s.\n\x00"),
	4506:  []byte("\nYou cannot -file with the shareware version. Register!\x00"),
	4562:  []byte("\nThis is not the registered version.\x00"),
	4599:  []byte("SS_START\x00"),
	4608:  []byte("FF_END\x00"),
	4615:  []byte(" WARNING: The loaded WAD file contains modified sprites or\n floor textures.  You may want to use the '-merge' command\n line option instead of '-file'.\n\x00"),
	4767:  []byte(" WARNING: You are playing using one of the Freedoom IWAD\n files, which might not work in this port. See this page\n for more information on how to play using Freedoom:\n   http://www.chocolate-doom.org/wiki/index.php/Freedoom\n\x00"),
	4992:  []byte("I_Init: Setting up machine state.\n\x00"),
	5027:  []byte("-skill\x00"),
	5034:  []byte("-episode\x00"),
	5043:  []byte("-timer\x00"),
	5050:  []byte("-avg\x00"),
	5055:  []byte("-warp\x00"),
	5061:  []byte("-loadgame\x00"),
	5071:  []byte("M_Init: Init miscellaneous info.\n\x00"),
	5105:  []byte("R_Init: Init DOOM refresh daemon - \x00"),
	5141:  []byte("\nP_Init: Init Playloop state.\n\x00"),
	5172:  []byte("S_Init: Setting up sound.\n\x00"),
	5199:  []byte("D_CheckNetGame: Checking network game status.\n\x00"),
	5246:  []byte("HU_Init: Setting up heads up display.\n\x00"),
	5285:  []byte("ST_Init: Init status bar.\n\x00"),
	5312:  []byte("map01\x00"),
	5318:  []byte("-statdump\x00"),
	5328:  []byte("External statistics registered.\n\x00"),
	5361:  []byte("-record\x00"),
	5369:  []byte("none\x00"),
	5374:  []byte("doom\x00"),
	5379:  []byte("heretic\x00"),
	5387:  []byte("hexen\x00"),
	5393:  []byte("strife\x00"),
	5400:  []byte("Player 1 left the game\x00"),
	5423:  []byte("NOTE: Turning resolution is reduced; this is probably because there is a client recording a Vanilla demo.\n\x00"),
	5530:  []byte("-longtics\x00"),
	5540:  []byte("-left\x00"),
	5546:  []byte("-right\x00"),
	5553:  []byte("-solo-net\x00"),
	5563:  []byte("startskill %d  deathmatch: %d  startmap: %d  startepisode: %d\n\x00"),
	5626:  []byte("player %d of %d (%d nodes)\n\x00"),
	5654:  []byte("Austin Virtual Gaming: Levels will end after 20 minutes\n\x00"),
	5711:  []byte("Levels will end after %d minute\x00"),
	5743:  []byte("s\x00"),
	5745:  []byte(".\n\x00"),
	5748:  []byte("FLOOR4_8\x00"),
	5757:  []byte("Once you beat the big badasses and\nclean out the moon base you're supposed\nto win, aren't you? Aren't you? Where's\nyour fat reward and ticket home? What\nthe hell is this? It's not supposed to\nend this way!\n\nIt stinks like rotten meat, but looks\nlike the lost Deimos base.  Looks like\nyou're stuck on The Shores of Hell.\nThe only way out is through.\n\nTo continue the DOOM experience, play\nThe Shores of Hell and its amazing\nsequel, Inferno!\n\x00"),
	6198:  []byte("SFLR6_1\x00"),
	6206:  []byte("You've done it! The hideous cyber-\ndemon lord that ruled the lost Deimos\nmoon base has been slain and you\nare triumphant! But ... where are\nyou? You clamber to the edge of the\nmoon and look down to see the awful\ntruth.\n\nDeimos floats above Hell itself!\nYou've never heard of anyone escaping\nfrom Hell, but you'll make the bastards\nsorry they ever heard of you! Quickly,\nyou rappel down to  the surface of\nHell.\n\nNow, it's on to the final chapter of\nDOOM! -- Inferno.\x00"),
	6673:  []byte("MFLR8_4\x00"),
	6681:  []byte("The loathsome spiderdemon that\nmasterminded the invasion of the moon\nbases and caused so much death has had\nits ass kicked for all time.\n\nA hidden doorway opens and you enter.\nYou've proven too tough for Hell to\ncontain, and now Hell at last plays\nfair -- for you emerge from the door\nto see the green fields of Earth!\nHome at last.\n\nYou wonder what's been happening on\nEarth while you were battling evil\nunleashed. It's good that no Hell-\nspawn could have come through that\ndoor with you ...\x00"),
	7174:  []byte("MFLR8_3\x00"),
	7182:  []byte("the spider mastermind must have sent forth\nits legions of hellspawn before your\nfinal confrontation with that terrible\nbeast from hell.  but you stepped forward\nand brought forth eternal damnation and\nsuffering upon the horde as a true hero\nwould in the face of something so evil.\n\nbesides, someone was gonna pay for what\nhappened to daisy, your pet rabbit.\n\nbut now, you see spread before you more\npotential pain and gibbitude as a nation\nof demons run amok among our cities.\n\nnext stop, hell on earth!\x00"),
	7686:  []byte("SLIME16\x00"),
	7694:  []byte("YOU HAVE ENTERED DEEPLY INTO THE INFESTED\nSTARPORT. BUT SOMETHING IS WRONG. THE\nMONSTERS HAVE BROUGHT THEIR OWN REALITY\nWITH THEM, AND THE STARPORT'S TECHNOLOGY\nIS BEING SUBVERTED BY THEIR PRESENCE.\n\nAHEAD, YOU SEE AN OUTPOST OF HELL, A\nFORTIFIED ZONE. IF YOU CAN GET PAST IT,\nYOU CAN PENETRATE INTO THE HAUNTED HEART\nOF THE STARBASE AND FIND THE CONTROLLING\nSWITCH WHICH HOLDS EARTH'S POPULATION\nHOSTAGE.\x00"),
	8100:  []byte("RROCK14\x00"),
	8108:  []byte("YOU HAVE WON! YOUR VICTORY HAS ENABLED\nHUMANKIND TO EVACUATE EARTH AND ESCAPE\nTHE NIGHTMARE.  NOW YOU ARE THE ONLY\nHUMAN LEFT ON THE FACE OF THE PLANET.\nCANNIBAL MUTATIONS, CARNIVOROUS ALIENS,\nAND EVIL SPIRITS ARE YOUR ONLY NEIGHBORS.\nYOU SIT BACK AND WAIT FOR DEATH, CONTENT\nTHAT YOU HAVE SAVED YOUR SPECIES.\n\nBUT THEN, EARTH CONTROL BEAMS DOWN A\nMESSAGE FROM SPACE: \"SENSORS HAVE LOCATED\nTHE SOURCE OF THE ALIEN INVASION. IF YOU\nGO THERE, YOU MAY BE ABLE TO BLOCK THEIR\nENTRY.  THE ALIEN BASE IS IN THE HEART OF\nYOUR OWN HOME CITY, NOT FAR FROM THE\nSTARPORT.\" SLOWLY AND PAINFULLY YOU GET\nUP AND RETURN TO THE FRAY.\x00"),
	8726:  []byte("RROCK07\x00"),
	8734:  []byte("YOU ARE AT THE CORRUPT HEART OF THE CITY,\nSURROUNDED BY THE CORPSES OF YOUR ENEMIES.\nYOU SEE NO WAY TO DESTROY THE CREATURES'\nENTRYWAY ON THIS SIDE, SO YOU CLENCH YOUR\nTEETH AND PLUNGE THROUGH IT.\n\nTHERE MUST BE A WAY TO CLOSE IT ON THE\nOTHER SIDE. WHAT DO YOU CARE IF YOU'VE\nGOT TO GO THROUGH HELL TO GET TO IT?\x00"),
	9047:  []byte("RROCK17\x00"),
	9055:  []byte("THE HORRENDOUS VISAGE OF THE BIGGEST\nDEMON YOU'VE EVER SEEN CRUMBLES BEFORE\nYOU, AFTER YOU PUMP YOUR ROCKETS INTO\nHIS EXPOSED BRAIN. THE MONSTER SHRIVELS\nUP AND DIES, ITS THRASHING LIMBS\nDEVASTATING UNTOLD MILES OF HELL'S\nSURFACE.\n\nYOU'VE DONE IT. THE INVASION IS OVER.\nEARTH IS SAVED. HELL IS A WRECK. YOU\nWONDER WHERE BAD FOLKS WILL GO WHEN THEY\nDIE, NOW. WIPING THE SWEAT FROM YOUR\nFOREHEAD YOU BEGIN THE LONG TREK BACK\nHOME. REBUILDING EARTH OUGHT TO BE A\nLOT MORE FUN THAN RUINING IT WAS.\n\x00"),
	9550:  []byte("RROCK13\x00"),
	9558:  []byte("CONGRATULATIONS, YOU'VE FOUND THE SECRET\nLEVEL! LOOKS LIKE IT'S BEEN BUILT BY\nHUMANS, RATHER THAN DEMONS. YOU WONDER\nWHO THE INMATES OF THIS CORNER OF HELL\nWILL BE.\x00"),
	9723:  []byte("RROCK19\x00"),
	9731:  []byte("CONGRATULATIONS, YOU'VE FOUND THE\nSUPER SECRET LEVEL!  YOU'D BETTER\nBLAZE THROUGH THIS ONE!\n\x00"),
	9824:  []byte("You've fought your way out of the infested\nexperimental labs.   It seems that UAC has\nonce again gulped it down.  With their\nhigh turnover, it must be hard for poor\nold UAC to buy corporate health insurance\nnowadays..\n\nAhead lies the military complex, now\nswarming with diseased horrors hot to get\ntheir teeth into you. With luck, the\ncomplex still has some warlike ordnance\nlaying around.\x00"),
	10214: []byte("You hear the grinding of heavy machinery\nahead.  You sure hope they're not stamping\nout new hellspawn, but you're ready to\nream out a whole herd if you have to.\nThey might be planning a blood feast, but\nyou feel about as mean as two thousand\nmaniacs packed into one mad killer.\n\nYou don't plan to go down easy.\x00"),
	10525: []byte("The vista opening ahead looks real damn\nfamiliar. Smells familiar, too -- like\nfried excrement. You didn't like this\nplace before, and you sure as hell ain't\nplanning to like it now. The more you\nbrood on it, the madder you get.\nHefting your gun, an evil grin trickles\nonto your face. Time to take some names.\x00"),
	10835: []byte("Suddenly, all is silent, from one horizon\nto the other. The agonizing echo of Hell\nfades away, the nightmare sky turns to\nblue, the heaps of monster corpses start \nto evaporate along with the evil stench \nthat filled the air. Jeeze, maybe you've\ndone it. Have you really won?\n\nSomething rumbles in the distance.\nA blue light begins to glow inside the\nruined skull of the demon-spitter.\x00"),
	11221: []byte("What now? Looks totally different. Kind\nof like King Tut's condo. Well,\nwhatever's here can't be any worse\nthan usual. Can it?  Or maybe it's best\nto let sleeping gods lie..\x00"),
	11395: []byte("Time for a vacation. You've burst the\nbowels of hell and by golly you're ready\nfor a break. You mutter to yourself,\nMaybe someone else can kick Hell's ass\nnext time around. Ahead lies a quiet town,\nwith peaceful flowing water, quaint\nbuildings, and presumably no Hellspawn.\n\nAs you step off the transport, you hear\nthe stomp of a cyberdemon's iron shoe.\x00"),
	11749: []byte("You gloat over the steaming carcass of the\nGuardian.  With its death, you've wrested\nthe Accelerator from the stinking claws\nof Hell.  You relax and glance around the\nroom.  Damn!  There was supposed to be at\nleast one working prototype, but you can't\nsee it. The demons must have taken it.\n\nYou must find the prototype, or all your\nstruggles will have been wasted. Keep\nmoving, keep fighting, keep killing.\nOh yes, keep living, too.\x00"),
	12183: []byte("Even the deadly Arch-Vile labyrinth could\nnot stop you, and you've gotten to the\nprototype Accelerator which is soon\nefficiently and permanently deactivated.\n\nYou're good at that kind of thing.\x00"),
	12377: []byte("You've bashed and battered your way into\nthe heart of the devil-hive.  Time for a\nSearch-and-Destroy mission, aimed at the\nGatekeeper, whose foul offspring is\ncascading to Earth.  Yeah, he's bad. But\nyou know who's worse!\n\nGrinning evilly, you check your gear, and\nget ready to give the bastard a little Hell\nof your own making!\x00"),
	12706: []byte("The Gatekeeper's evil face is splattered\nall over the place.  As its tattered corpse\ncollapses, an inverted Gate forms and\nsucks down the shards of the last\nprototype Accelerator, not to mention the\nfew remaining demons.  You're done. Hell\nhas gone back to pounding bad dead folks \ninstead of good live ones.  Remember to\ntell your grandkids to put a rocket\nlauncher in your coffin. If you go to Hell\nwhen you die, you'll need it for some\nfinal cleaning-up ...\x00"),
	13167: []byte("You've found the second-hardest level we\ngot. Hope you have a saved game a level or\ntwo previous.  If not, be prepared to die\naplenty. For master marines only.\x00"),
	13327: []byte("Betcha wondered just what WAS the hardest\nlevel we had ready for ya?  Now you know.\nNo one gets out alive.\x00"),
	13434: []byte("ZOMBIEMAN\x00"),
	13444: []byte("SHOTGUN GUY\x00"),
	13456: []byte("HEAVY WEAPON DUDE\x00"),
	13474: []byte("IMP\x00"),
	13478: []byte("DEMON\x00"),
	13484: []byte("LOST SOUL\x00"),
	13494: []byte("CACODEMON\x00"),
	13504: []byte("HELL KNIGHT\x00"),
	13516: []byte("BARON OF HELL\x00"),
	13530: []byte("ARACHNOTRON\x00"),
	13542: []byte("PAIN ELEMENTAL\x00"),
	13557: []byte("REVENANT\x00"),
	13566: []byte("MANCUBUS\x00"),
	13575: []byte("ARCH-VILE\x00"),
	13585: []byte("THE SPIDER MASTERMIND\x00"),
	13607: []byte("THE CYBERDEMON\x00"),
	13622: []byte("OUR HERO\x00"),
	13631: []byte("BOSSBACK\x00"),
	13640: []byte("PFUB2\x00"),
	13646: []byte("PFUB1\x00"),
	13652: []byte("END0\x00"),
	13657: []byte("END%d\x00"),
	13663: []byte("VICTORY2\x00"),
	13672: []byte("ENDPIC\x00"),
	13679: []byte("F_SKY1\x00"),
	13686: []byte("SKY1\x00"),
	13691: []byte("SKY2\x00"),
	13696: []byte("SKY3\x00"),
	13701: []byte("Press escape to quit.\x00"),
	13723: []byte("DOOM%02i.%s\x00"),
	13735: []byte("screen shot\x00"),
	13747: []byte("%s is turbo!\x00"),
	13760: []byte("consistency failure (%d should be %d)\x00"),
	13798: []byte("NET GAME\x00"),
	13807: []byte("G_CheckSpot: unexpected angle %d\n\x00"),
	13841: []byte("Only %d deathmatch spots, 4 required\x00"),
	13878: []byte("map31\x00"),
	13884: []byte("rb\x00"),
	13887: []byte("Bad savegame\x00"),
	13900: []byte("wb\x00"),
	13903: []byte("recovery.dsg\x00"),
	13916: []byte("Failed to open either '%s' or '%s' to write savegame.\x00"),
	13970: []byte("Savegame buffer overrun\x00"),
	13994: []byte("Failed to open savegame file '%s' for writing.\nBut your game has been saved to '%s' for recovery.\x00"),
	14092: []byte("\x00"),
	14093: []byte("game saved.\x00"),
	14105: []byte("SKY4\x00"),
	14110: []byte("-maxdemo\x00"),
	14119: []byte("Doom 1.2 does not have a version code!\x00"),
	14158: []byte("v1.4\x00"),
	14163: []byte("v1.5\x00"),
	14168: []byte("v1.6/v1.666\x00"),
	14180: []byte("v1.7/v1.7a\x00"),
	14191: []byte("v1.8\x00"),
	14196: []byte("v1.9\x00"),
	14201: []byte("v1.0/v1.1/v1.2\x00"),
	14216: []byte("%d.%d (unknown)\x00"),
	14232: []byte("Demo is from a different game version!\n(read %d, should be %d)\n\n*** You may need to upgrade your version of Doom to v1.9. ***\n    See: https://www.doomworld.com/classicdoom/info/patches.php\n    This appears to be %s.\x00"),
	14449: []byte("-netdemo\x00"),
	14458: []byte("-nodraw\x00"),
	14466: []byte("timed %d gametics in %d realtics (%f fps)\x00"),
	14508: []byte("Demo %s recorded\x00"),
	14525: []byte("No\x00"),
	14528: []byte("I'm ready to kick butt!\x00"),
	14552: []byte("I'm OK.\x00"),
	14560: []byte("I'm not looking too good!\x00"),
	14586: []byte("Help!\x00"),
	14592: []byte("You suck!\x00"),
	14602: []byte("Next time, scumbag...\x00"),
	14624: []byte("Come here!\x00"),
	14635: []byte("I'll take care of it.\x00"),
	14657: []byte("Yes\x00"),
	14661: []byte("Green: \x00"),
	14669: []byte("Indigo: \x00"),
	14678: []byte("Brown: \x00"),
	14686: []byte("Red: \x00"),
	14692: []byte("E1M1: Hangar\x00"),
	14705: []byte("E1M2: Nuclear Plant\x00"),
	14725: []byte("E1M3: Toxin Refinery\x00"),
	14746: []byte("E1M4: Command Control\x00"),
	14768: []byte("E1M5: Phobos Lab\x00"),
	14785: []byte("E1M6: Central Processing\x00"),
	14810: []byte("E1M7: Computer Station\x00"),
	14833: []byte("E1M8: Phobos Anomaly\x00"),
	14854: []byte("E1M9: Military Base\x00"),
	14874: []byte("E2M1: Deimos Anomaly\x00"),
	14895: []byte("E2M2: Containment Area\x00"),
	14918: []byte("E2M3: Refinery\x00"),
	14933: []byte("E2M4: Deimos Lab\x00"),
	14950: []byte("E2M5: Command Center\x00"),
	14971: []byte("E2M6: Halls of the Damned\x00"),
	14997: []byte("E2M7: Spawning Vats\x00"),
	15017: []byte("E2M8: Tower of Babel\x00"),
	15038: []byte("E2M9: Fortress of Mystery\x00"),
	15064: []byte("E3M1: Hell Keep\x00"),
	15080: []byte("E3M2: Slough of Despair\x00"),
	15104: []byte("E3M3: Pandemonium\x00"),
	15122: []byte("E3M4: House of Pain\x00"),
	15142: []byte("E3M5: Unholy Cathedral\x00"),
	15165: []byte("E3M6: Mt. Erebus\x00"),
	15182: []byte("E3M7: Limbo\x00"),
	15194: []byte("E3M8: Dis\x00"),
	15204: []byte("E3M9: Warrens\x00"),
	15218: []byte("E4M1: Hell Beneath\x00"),
	15237: []byte("E4M2: Perfect Hatred\x00"),
	15258: []byte("E4M3: Sever The Wicked\x00"),
	15281: []byte("E4M4: Unruly Evil\x00"),
	15299: []byte("E4M5: They Will Repent\x00"),
	15322: []byte("E4M6: Against Thee Wickedly\x00"),
	15350: []byte("E4M7: And Hell Followed\x00"),
	15374: []byte("E4M8: Unto The Cruel\x00"),
	15395: []byte("E4M9: Fear\x00"),
	15406: []byte("NEWLEVEL\x00"),
	15415: []byte("level 1: entryway\x00"),
	15433: []byte("level 2: underhalls\x00"),
	15453: []byte("level 3: the gantlet\x00"),
	15474: []byte("level 4: the focus\x00"),
	15493: []byte("level 5: the waste tunnels\x00"),
	15520: []byte("level 6: the crusher\x00"),
	15541: []byte("level 7: dead simple\x00"),
	15562: []byte("level 8: tricks and traps\x00"),
	15588: []byte("level 9: the pit\x00"),
	15605: []byte("level 10: refueling base\x00"),
	15630: []byte("level 11: 'o' of destruction!\x00"),
	15660: []byte("level 12: the factory\x00"),
	15682: []byte("level 13: downtown\x00"),
	15701: []byte("level 14: the inmost dens\x00"),
	15727: []byte("level 15: industrial zone\x00"),
	15753: []byte("level 16: suburbs\x00"),
	15771: []byte("level 17: tenements\x00"),
	15791: []byte("level 18: the courtyard\x00"),
	15815: []byte("level 19: the citadel\x00"),
	15837: []byte("level 20: gotcha!\x00"),
	15855: []byte("level 21: nirvana\x00"),
	15873: []byte("level 22: the catacombs\x00"),
	15897: []byte("level 23: barrels o' fun\x00"),
	15922: []byte("level 24: the chasm\x00"),
	15942: []byte("level 25: bloodfalls\x00"),
	15963: []byte("level 26: the abandoned mines\x00"),
	15993: []byte("level 27: monster condo\x00"),
	16017: []byte("level 28: the spirit world\x00"),
	16044: []byte("level 29: the living end\x00"),
	16069: []byte("level 30: icon of sin\x00"),
	16091: []byte("level 31: wolfenstein\x00"),
	16113: []byte("level 32: grosse\x00"),
	16130: []byte("level 1: congo\x00"),
	16145: []byte("level 2: well of souls\x00"),
	16168: []byte("level 3: aztec\x00"),
	16183: []byte("level 4: caged\x00"),
	16198: []byte("level 5: ghost town\x00"),
	16218: []byte("level 6: baron's lair\x00"),
	16240: []byte("level 7: caughtyard\x00"),
	16260: []byte("level 8: realm\x00"),
	16275: []byte("level 9: abattoire\x00"),
	16294: []byte("level 10: onslaught\x00"),
	16314: []byte("level 11: hunted\x00"),
	16331: []byte("level 12: speed\x00"),
	16347: []byte("level 13: the crypt\x00"),
	16367: []byte("level 14: genesis\x00"),
	16385: []byte("level 15: the twilight\x00"),
	16408: []byte("level 16: the omen\x00"),
	16427: []byte("level 17: compound\x00"),
	16446: []byte("level 18: neurosphere\x00"),
	16468: []byte("level 19: nme\x00"),
	16482: []byte("level 20: the death domain\x00"),
	16509: []byte("level 21: slayer\x00"),
	16526: []byte("level 22: impossible mission\x00"),
	16555: []byte("level 23: tombstone\x00"),
	16575: []byte("level 24: the final frontier\x00"),
	16604: []byte("level 25: the temple of darkness\x00"),
	16637: []byte("level 26: bunker\x00"),
	16654: []byte("level 27: anti-christ\x00"),
	16676: []byte("level 28: the sewers\x00"),
	16697: []byte("level 29: odyssey of noises\x00"),
	16725: []byte("level 30: the gateway of hell\x00"),
	16755: []byte("level 31: cyberden\x00"),
	16774: []byte("level 32: go 2 it\x00"),
	16792: []byte("level 1: system control\x00"),
	16816: []byte("level 2: human bbq\x00"),
	16835: []byte("level 3: power control\x00"),
	16858: []byte("level 4: wormhole\x00"),
	16876: []byte("level 5: hanger\x00"),
	16892: []byte("level 6: open season\x00"),
	16913: []byte("level 7: prison\x00"),
	16929: []byte("level 8: metal\x00"),
	16944: []byte("level 9: stronghold\x00"),
	16964: []byte("level 10: redemption\x00"),
	16985: []byte("level 11: storage facility\x00"),
	17012: []byte("level 12: crater\x00"),
	17029: []byte("level 13: nukage processing\x00"),
	17057: []byte("level 14: steel works\x00"),
	17079: []byte("level 15: dead zone\x00"),
	17099: []byte("level 16: deepest reaches\x00"),
	17125: []byte("level 17: processing area\x00"),
	17151: []byte("level 18: mill\x00"),
	17166: []byte("level 19: shipping/respawning\x00"),
	17196: []byte("level 20: central processing\x00"),
	17225: []byte("level 21: administration center\x00"),
	17257: []byte("level 22: habitat\x00"),
	17275: []byte("level 23: lunar mining project\x00"),
	17306: []byte("level 24: quarry\x00"),
	17323: []byte("level 25: baron's den\x00"),
	17345: []byte("level 26: ballistyx\x00"),
	17365: []byte("level 27: mount pain\x00"),
	17386: []byte("level 28: heck\x00"),
	17401: []byte("level 29: river styx\x00"),
	17422: []byte("level 30: last call\x00"),
	17442: []byte("level 31: pharaoh\x00"),
	17460: []byte("level 32: caribbean\x00"),
	17480: []byte("STCFN%.3d\x00"),
	17490: []byte("Unknown level\x00"),
	17504: []byte("[Message unsent]\x00"),
	17521: []byte("You mumble to yourself\x00"),
	17544: []byte("Who's there?\x00"),
	17557: []byte("You scare yourself\x00"),
	17576: []byte("You start to rave\x00"),
	17594: []byte("You've lost it...\x00"),
	17612: []byte("TROO\x00"),
	17617: []byte("SHTG\x00"),
	17622: []byte("PUNG\x00"),
	17627: []byte("PISG\x00"),
	17632: []byte("PISF\x00"),
	17637: []byte("SHTF\x00"),
	17642: []byte("SHT2\x00"),
	17647: []byte("CHGG\x00"),
	17652: []byte("CHGF\x00"),
	17657: []byte("MISG\x00"),
	17662: []byte("MISF\x00"),
	17667: []byte("SAWG\x00"),
	17672: []byte("PLSG\x00"),
	17677: []byte("PLSF\x00"),
	17682: []byte("BFGG\x00"),
	17687: []byte("BFGF\x00"),
	17692: []byte("BLUD\x00"),
	17697: []byte("PUFF\x00"),
	17702: []byte("BAL1\x00"),
	17707: []byte("BAL2\x00"),
	17712: []byte("PLSS\x00"),
	17717: []byte("PLSE\x00"),
	17722: []byte("MISL\x00"),
	17727: []byte("BFS1\x00"),
	17732: []byte("BFE1\x00"),
	17737: []byte("BFE2\x00"),
	17742: []byte("TFOG\x00"),
	17747: []byte("IFOG\x00"),
	17752: []byte("PLAY\x00"),
	17757: []byte("POSS\x00"),
	17762: []byte("SPOS\x00"),
	17767: []byte("VILE\x00"),
	17772: []byte("FIRE\x00"),
	17777: []byte("FATB\x00"),
	17782: []byte("FBXP\x00"),
	17787: []byte("SKEL\x00"),
	17792: []byte("MANF\x00"),
	17797: []byte("FATT\x00"),
	17802: []byte("CPOS\x00"),
	17807: []byte("SARG\x00"),
	17812: []byte("HEAD\x00"),
	17817: []byte("BAL7\x00"),
	17822: []byte("BOSS\x00"),
	17827: []byte("BOS2\x00"),
	17832: []byte("SKUL\x00"),
	17837: []byte("SPID\x00"),
	17842: []byte("BSPI\x00"),
	17847: []byte("APLS\x00"),
	17852: []byte("APBX\x00"),
	17857: []byte("CYBR\x00"),
	17862: []byte("PAIN\x00"),
	17867: []byte("SSWV\x00"),
	17872: []byte("KEEN\x00"),
	17877: []byte("BBRN\x00"),
	17882: []byte("BOSF\x00"),
	17887: []byte("ARM1\x00"),
	17892: []byte("ARM2\x00"),
	17897: []byte("BAR1\x00"),
	17902: []byte("BEXP\x00"),
	17907: []byte("FCAN\x00"),
	17912: []byte("BON1\x00"),
	17917: []byte("BON2\x00"),
	17922: []byte("BKEY\x00"),
	17927: []byte("RKEY\x00"),
	17932: []byte("YKEY\x00"),
	17937: []byte("BSKU\x00"),
	17942: []byte("RSKU\x00"),
	17947: []byte("YSKU\x00"),
	17952: []byte("STIM\x00"),
	17957: []byte("MEDI\x00"),
	17962: []byte("SOUL\x00"),
	17967: []byte("PINV\x00"),
	17972: []byte("PSTR\x00"),
	17977: []byte("PINS\x00"),
	17982: []byte("MEGA\x00"),
	17987: []byte("SUIT\x00"),
	17992: []byte("PMAP\x00"),
	17997: []byte("PVIS\x00"),
	18002: []byte("CLIP\x00"),
	18007: []byte("AMMO\x00"),
	18012: []byte("ROCK\x00"),
	18017: []byte("BROK\x00"),
	18022: []byte("CELL\x00"),
	18027: []byte("CELP\x00"),
	18032: []byte("SHEL\x00"),
	18037: []byte("SBOX\x00"),
	18042: []byte("BPAK\x00"),
	18047: []byte("BFUG\x00"),
	18052: []byte("MGUN\x00"),
	18057: []byte("CSAW\x00"),
	18062: []byte("LAUN\x00"),
	18067: []byte("PLAS\x00"),
	18072: []byte("SHOT\x00"),
	18077: []byte("SGN2\x00"),
	18082: []byte("COLU\x00"),
	18087: []byte("SMT2\x00"),
	18092: []byte("GOR1\x00"),
	18097: []byte("POL2\x00"),
	18102: []byte("POL5\x00"),
	18107: []byte("POL4\x00"),
	18112: []byte("POL3\x00"),
	18117: []byte("POL1\x00"),
	18122: []byte("POL6\x00"),
	18127: []byte("GOR2\x00"),
	18132: []byte("GOR3\x00"),
	18137: []byte("GOR4\x00"),
	18142: []byte("GOR5\x00"),
	18147: []byte("SMIT\x00"),
	18152: []byte("COL1\x00"),
	18157: []byte("COL2\x00"),
	18162: []byte("COL3\x00"),
	18167: []byte("COL4\x00"),
	18172: []byte("CAND\x00"),
	18177: []byte("CBRA\x00"),
	18182: []byte("COL6\x00"),
	18187: []byte("TRE1\x00"),
	18192: []byte("TRE2\x00"),
	18197: []byte("ELEC\x00"),
	18202: []byte("CEYE\x00"),
	18207: []byte("FSKU\x00"),
	18212: []byte("COL5\x00"),
	18217: []byte("TBLU\x00"),
	18222: []byte("TGRN\x00"),
	18227: []byte("TRED\x00"),
	18232: []byte("SMBT\x00"),
	18237: []byte("SMGT\x00"),
	18242: []byte("SMRT\x00"),
	18247: []byte("HDB1\x00"),
	18252: []byte("HDB2\x00"),
	18257: []byte("HDB3\x00"),
	18262: []byte("HDB4\x00"),
	18267: []byte("HDB5\x00"),
	18272: []byte("HDB6\x00"),
	18277: []byte("POB1\x00"),
	18282: []byte("POB2\x00"),
	18287: []byte("BRS1\x00"),
	18292: []byte("TLMP\x00"),
	18297: []byte("TLP2\x00"),
	18302: []byte("use_joystick\x00"),
	18315: []byte("joystick_index\x00"),
	18330: []byte("joystick_x_axis\x00"),
	18346: []byte("joystick_y_axis\x00"),
	18362: []byte("joystick_strafe_axis\x00"),
	18383: []byte("joystick_x_invert\x00"),
	18401: []byte("joystick_y_invert\x00"),
	18419: []byte("joystick_strafe_invert\x00"),
	18442: []byte("joystick_physical_button%d\x00"),
	18469: []byte("I_InitStretchTables: Generating lookup tables..\x00"),
	18517: []byte("..\x00"),
	18520: []byte("I_InitSquashTable: Generating lookup table..\x00"),
	18565: []byte("I_ResetScaleTables: Regenerating lookup tables..\n\x00"),
	18615: []byte("I_ResetScaleTables: Regenerating lookup table..\n\x00"),
	18664: []byte("-scanline\x00"),
	18674: []byte("-nosound\x00"),
	18683: []byte("-nosfx\x00"),
	18690: []byte("-nomusic\x00"),
	18699: []byte("snd_musicdevice\x00"),
	18715: []byte("snd_sfxdevice\x00"),
	18729: []byte("snd_sbport\x00"),
	18740: []byte("snd_sbirq\x00"),
	18750: []byte("snd_sbdma\x00"),
	18760: []byte("snd_mport\x00"),
	18770: []byte("snd_maxslicetime_ms\x00"),
	18790: []byte("snd_musiccmd\x00"),
	18803: []byte("snd_samplerate\x00"),
	18818: []byte("snd_cachesize\x00"),
	18832: []byte("Unable to allocate %d MiB of RAM for zone\x00"),
	18874: []byte("-mb\x00"),
	18878: []byte("zone memory: %p, %x allocated for zone\n\x00"),
	18918: []byte(" Doom Generic is free software, covered by the GNU General Public\n License.  There is NO warranty; not even for MERCHANTABILITY or FITNESS\n FOR A PARTICULAR PURPOSE. You are welcome to change and distribute\n copies under certain conditions. See the source for more information.\n\x00"),
	19236: []byte("$`\\!\x00"),
	19257: []byte("%s --error --text=%s\x00"),
	19278: []byte("Warning: recursive call to I_Error detected.\n\x00"),
	19324: []byte("\n\n\x00"),
	19327: []byte("-nogui\x00"),
	19334: []byte("-setmem\x00"),
	19342: []byte("dos622\x00"),
	19349: []byte("dos71\x00"),
	19355: []byte("dosbox\x00"),
	19362: []byte("not a read stream\n\x00"),
	19381: []byte("Error seeking to %d\n\x00"),
	19402: []byte("show_talk\x00"),
	19412: []byte("voice_volume\x00"),
	19425: []byte("key_right\x00"),
	19435: []byte("key_left\x00"),
	19444: []byte("key_up\x00"),
	19451: []byte("key_down\x00"),
	19460: []byte("key_strafeleft\x00"),
	19475: []byte("key_straferight\x00"),
	19491: []byte("key_useHealth\x00"),
	19505: []byte("key_jump\x00"),
	19514: []byte("key_flyup\x00"),
	19524: []byte("key_flydown\x00"),
	19536: []byte("key_flycenter\x00"),
	19550: []byte("key_lookup\x00"),
	19561: []byte("key_lookdown\x00"),
	19574: []byte("key_lookcenter\x00"),
	19589: []byte("key_invquery\x00"),
	19602: []byte("key_mission\x00"),
	19614: []byte("key_invPop\x00"),
	19625: []byte("key_invKey\x00"),
	19636: []byte("key_invHome\x00"),
	19648: []byte("key_invEnd\x00"),
	19659: []byte("key_invleft\x00"),
	19671: []byte("key_invright\x00"),
	19684: []byte("key_invLeft\x00"),
	19696: []byte("key_invRight\x00"),
	19709: []byte("key_useartifact\x00"),
	19725: []byte("key_invUse\x00"),
	19736: []byte("key_invDrop\x00"),
	19748: []byte("key_lookUp\x00"),
	19759: []byte("key_lookDown\x00"),
	19772: []byte("key_fire\x00"),
	19781: []byte("key_use\x00"),
	19789: []byte("key_strafe\x00"),
	19800: []byte("key_speed\x00"),
	19810: []byte("use_mouse\x00"),
	19820: []byte("mouseb_fire\x00"),
	19832: []byte("mouseb_strafe\x00"),
	19846: []byte("mouseb_forward\x00"),
	19861: []byte("mouseb_jump\x00"),
	19873: []byte("joyb_fire\x00"),
	19883: []byte("joyb_strafe\x00"),
	19895: []byte("joyb_use\x00"),
	19904: []byte("joyb_speed\x00"),
	19915: []byte("joyb_jump\x00"),
	19925: []byte("screensize\x00"),
	19936: []byte("usegamma\x00"),
	19945: []byte("savedir\x00"),
	19953: []byte("messageson\x00"),
	19964: []byte("back_flat\x00"),
	19974: []byte("nickname\x00"),
	19983: []byte("chatmacro0\x00"),
	19994: []byte("chatmacro1\x00"),
	20005: []byte("chatmacro2\x00"),
	20016: []byte("chatmacro3\x00"),
	20027: []byte("chatmacro4\x00"),
	20038: []byte("chatmacro5\x00"),
	20049: []byte("chatmacro6\x00"),
	20060: []byte("chatmacro7\x00"),
	20071: []byte("chatmacro8\x00"),
	20082: []byte("chatmacro9\x00"),
	20093: []byte("comport\x00"),
	20101: []byte("graphical_startup\x00"),
	20119: []byte("autoadjust_video_settings\x00"),
	20145: []byte("fullscreen\x00"),
	20156: []byte("aspect_ratio_correct\x00"),
	20177: []byte("startup_delay\x00"),
	20191: []byte("screen_width\x00"),
	20204: []byte("screen_height\x00"),
	20218: []byte("screen_bpp\x00"),
	20229: []byte("grabmouse\x00"),
	20239: []byte("novert\x00"),
	20246: []byte("mouse_acceleration\x00"),
	20265: []byte("mouse_threshold\x00"),
	20281: []byte("opl_io_port\x00"),
	20293: []byte("png_screenshots\x00"),
	20309: []byte("vanilla_keyboard_mapping\x00"),
	20334: []byte("video_driver\x00"),
	20347: []byte("window_position\x00"),
	20363: []byte("joystick_physical_button0\x00"),
	20389: []byte("joystick_physical_button1\x00"),
	20415: []byte("joystick_physical_button2\x00"),
	20441: []byte("joystick_physical_button3\x00"),
	20467: []byte("joystick_physical_button4\x00"),
	20493: []byte("joystick_physical_button5\x00"),
	20519: []byte("joystick_physical_button6\x00"),
	20545: []byte("joystick_physical_button7\x00"),
	20571: []byte("joystick_physical_button8\x00"),
	20597: []byte("joystick_physical_button9\x00"),
	20623: []byte("joyb_strafeleft\x00"),
	20639: []byte("joyb_straferight\x00"),
	20656: []byte("joyb_menu_activate\x00"),
	20675: []byte("joyb_prevweapon\x00"),
	20691: []byte("joyb_nextweapon\x00"),
	20707: []byte("mouseb_strafeleft\x00"),
	20725: []byte("mouseb_straferight\x00"),
	20744: []byte("mouseb_use\x00"),
	20755: []byte("mouseb_backward\x00"),
	20771: []byte("mouseb_prevweapon\x00"),
	20789: []byte("mouseb_nextweapon\x00"),
	20807: []byte("dclick_use\x00"),
	20818: []byte("key_pause\x00"),
	20828: []byte("key_menu_activate\x00"),
	20846: []byte("key_menu_up\x00"),
	20858: []byte("key_menu_down\x00"),
	20872: []byte("key_menu_left\x00"),
	20886: []byte("key_menu_right\x00"),
	20901: []byte("key_menu_back\x00"),
	20915: []byte("key_menu_forward\x00"),
	20932: []byte("key_menu_confirm\x00"),
	20949: []byte("key_menu_abort\x00"),
	20964: []byte("key_menu_help\x00"),
	20978: []byte("key_menu_save\x00"),
	20992: []byte("key_menu_load\x00"),
	21006: []byte("key_menu_volume\x00"),
	21022: []byte("key_menu_detail\x00"),
	21038: []byte("key_menu_qsave\x00"),
	21053: []byte("key_menu_endgame\x00"),
	21070: []byte("key_menu_messages\x00"),
	21088: []byte("key_menu_qload\x00"),
	21103: []byte("key_menu_quit\x00"),
	21117: []byte("key_menu_gamma\x00"),
	21132: []byte("key_spy\x00"),
	21140: []byte("key_menu_incscreen\x00"),
	21159: []byte("key_menu_decscreen\x00"),
	21178: []byte("key_menu_screenshot\x00"),
	21198: []byte("key_map_toggle\x00"),
	21213: []byte("key_map_north\x00"),
	21227: []byte("key_map_south\x00"),
	21241: []byte("key_map_east\x00"),
	21254: []byte("key_map_west\x00"),
	21267: []byte("key_map_zoomin\x00"),
	21282: []byte("key_map_zoomout\x00"),
	21298: []byte("key_map_maxzoom\x00"),
	21314: []byte("key_map_follow\x00"),
	21329: []byte("key_map_grid\x00"),
	21342: []byte("key_map_mark\x00"),
	21355: []byte("key_map_clearmark\x00"),
	21373: []byte("key_weapon1\x00"),
	21385: []byte("key_weapon2\x00"),
	21397: []byte("key_weapon3\x00"),
	21409: []byte("key_weapon4\x00"),
	21421: []byte("key_weapon5\x00"),
	21433: []byte("key_weapon6\x00"),
	21445: []byte("key_weapon7\x00"),
	21457: []byte("key_weapon8\x00"),
	21469: []byte("key_prevweapon\x00"),
	21484: []byte("key_nextweapon\x00"),
	21499: []byte("key_arti_all\x00"),
	21512: []byte("key_arti_health\x00"),
	21528: []byte("key_arti_poisonbag\x00"),
	21547: []byte("key_arti_blastradius\x00"),
	21568: []byte("key_arti_teleport\x00"),
	21586: []byte("key_arti_teleportother\x00"),
	21609: []byte("key_arti_egg\x00"),
	21622: []byte("key_arti_invulnerability\x00"),
	21647: []byte("key_message_refresh\x00"),
	21667: []byte("key_demo_quit\x00"),
	21681: []byte("key_multi_msg\x00"),
	21695: []byte("key_multi_msgplayer1\x00"),
	21716: []byte("key_multi_msgplayer2\x00"),
	21737: []byte("key_multi_msgplayer3\x00"),
	21758: []byte("key_multi_msgplayer4\x00"),
	21779: []byte("key_multi_msgplayer5\x00"),
	21800: []byte("key_multi_msgplayer6\x00"),
	21821: []byte("key_multi_msgplayer7\x00"),
	21842: []byte("key_multi_msgplayer8\x00"),
	21863: []byte("%x\x00"),
	21866: []byte("%d\x00"),
	21869: []byte("-config\x00"),
	21877: []byte("	default file: %s\n\x00"),
	21896: []byte("saving config in %s\n\x00"),
	21917: []byte("-extraconfig\x00"),
	21930: []byte("        extra configuration file: %s\n\x00"),
	21968: []byte("Unknown configuration variable: '%s'\x00"),
	22005: []byte("Using %s for configuration and saves\n\x00"),
	22043: []byte(".savegame/\x00"),
	22054: []byte("Using %s for savegames\n\x00"),
	22078: []byte("key_multi_msgplayer%d\x00"),
	22100: []byte("M_SKULL1\x00"),
	22109: []byte("M_SKULL2\x00"),
	22118: []byte("empty slot\x00"),
	22129: []byte("M_LOADG\x00"),
	22137: []byte("M_LSLEFT\x00"),
	22146: []byte("M_LSCNTR\x00"),
	22155: []byte("M_LSRGHT\x00"),
	22164: []byte("you can't do load while in a net game!\n\npress a key.\x00"),
	22217: []byte("M_SAVEG\x00"),
	22225: []byte("_\x00"),
	22227: []byte("you can't save if you aren't playing!\n\npress a key.\x00"),
	22279: []byte("quicksave over your game named\n\n'%s'?\n\npress y or n.\x00"),
	22332: []byte("you can't quickload during a netgame!\n\npress a key.\x00"),
	22384: []byte("you haven't picked a quicksave slot yet!\n\npress a key.\x00"),
	22439: []byte("do you want to quickload the game named\n\n'%s'?\n\npress y or n.\x00"),
	22501: []byte("HELP\x00"),
	22506: []byte("HELP1\x00"),
	22512: []byte("Unhandled game version\x00"),
	22535: []byte("M_SVOL\x00"),
	22542: []byte("M_DOOM\x00"),
	22549: []byte("M_NEWG\x00"),
	22556: []byte("M_SKILL\x00"),
	22564: []byte("you can't start a new game\nwhile in a network game.\n\npress a key.\x00"),
	22630: []byte("M_EPISOD\x00"),
	22639: []byte("are you sure? this skill level\nisn't even remotely fair.\n\npress y or n.\x00"),
	22711: []byte("this is the shareware version of doom.\n\nyou need to order the entire trilogy.\n\npress a key.\x00"),
	22803: []byte("M_Episode: 4th episode requires UltimateDOOM\n\x00"),
	22849: []byte("M_GDHIGH\x00"),
	22858: []byte("M_GDLOW\x00"),
	22866: []byte("M_MSGOFF\x00"),
	22875: []byte("M_MSGON\x00"),
	22883: []byte("M_OPTTTL\x00"),
	22892: []byte("Messages OFF\x00"),
	22905: []byte("Messages ON\x00"),
	22917: []byte("you can't end a netgame!\n\npress a key.\x00"),
	22956: []byte("are you sure you want to end the game?\n\npress y or n.\x00"),
	23010: []byte("%s\n\n(press y to quit to dos.)\x00"),
	23040: []byte("High detail\x00"),
	23052: []byte("Low detail\x00"),
	23063: []byte("M_THERML\x00"),
	23072: []byte("M_THERMM\x00"),
	23081: []byte("M_THERMR\x00"),
	23090: []byte("M_THERMO\x00"),
	23099: []byte("M_CELL1\x00"),
	23107: []byte("M_CELL2\x00"),
	23115: []byte("r\x00"),
	23117: []byte("Couldn't read file %s\x00"),
	23139: []byte("/tmp\x00"),
	23144: []byte(" 0x%x\x00"),
	23150: []byte(" 0X%x\x00"),
	23156: []byte(" 0%o\x00"),
	23161: []byte(" %d\x00"),
	23165: []byte("Warning: Truncated '%s' lump name to '%.8s'.\n\x00"),
	23211: []byte("Failed to duplicate string (length %d)\n\x00"),
	23251: []byte("M_StringReplace: Failed to allocate new string\x00"),
	23298: []byte("M_StringJoin: Failed to allocate new string.\x00"),
	23343: []byte("You need a blue key to activate this object\x00"),
	23387: []byte("You need a red key to activate this object\x00"),
	23430: []byte("You need a yellow key to activate this object\x00"),
	23476: []byte("You need a blue key to open this door\x00"),
	23514: []byte("You need a yellow key to open this door\x00"),
	23554: []byte("You need a red key to open this door\x00"),
	23591: []byte("EV_VerticalDoor: Tried to close something that wasn't a door.\n\x00"),
	23654: []byte("Weird actor->movedir!\x00"),
	23676: []byte("P_NewChaseDir: called with no target\x00"),
	23713: []byte("P_GiveAmmo: bad type %d\x00"),
	23737: []byte("Picked up the armor.\x00"),
	23758: []byte("Picked up the MegaArmor!\x00"),
	23783: []byte("Picked up a health bonus.\x00"),
	23809: []byte("Picked up an armor bonus.\x00"),
	23835: []byte("Supercharge!\x00"),
	23848: []byte("MegaSphere!\x00"),
	23860: []byte("Picked up a blue keycard.\x00"),
	23886: []byte("Picked up a yellow keycard.\x00"),
	23914: []byte("Picked up a red keycard.\x00"),
	23939: []byte("Picked up a blue skull key.\x00"),
	23967: []byte("Picked up a yellow skull key.\x00"),
	23997: []byte("Picked up a red skull key.\x00"),
	24024: []byte("Picked up a stimpack.\x00"),
	24046: []byte("Picked up a medikit that you REALLY need!\x00"),
	24088: []byte("Picked up a medikit.\x00"),
	24109: []byte("Invulnerability!\x00"),
	24126: []byte("Berserk!\x00"),
	24135: []byte("Partial Invisibility\x00"),
	24156: []byte("Radiation Shielding Suit\x00"),
	24181: []byte("Computer Area Map\x00"),
	24199: []byte("Light Amplification Visor\x00"),
	24225: []byte("Picked up a clip.\x00"),
	24243: []byte("Picked up a box of bullets.\x00"),
	24271: []byte("Picked up a rocket.\x00"),
	24291: []byte("Picked up a box of rockets.\x00"),
	24319: []byte("Picked up an energy cell.\x00"),
	24345: []byte("Picked up an energy cell pack.\x00"),
	24376: []byte("Picked up 4 shotgun shells.\x00"),
	24404: []byte("Picked up a box of shotgun shells.\x00"),
	24439: []byte("Picked up a backpack full of ammo!\x00"),
	24474: []byte("You got the BFG9000!  Oh, yes.\x00"),
	24505: []byte("You got the chaingun!\x00"),
	24527: []byte("A chainsaw!  Find some meat!\x00"),
	24556: []byte("You got the rocket launcher!\x00"),
	24585: []byte("You got the plasma gun!\x00"),
	24609: []byte("You got the shotgun!\x00"),
	24630: []byte("You got the super shotgun!\x00"),
	24657: []byte("P_SpecialThing: Unknown gettable thing\x00"),
	24696: []byte("PTR_SlideTraverse: not a line?\x00"),
	24727: []byte("-spechit\x00"),
	24736: []byte("SpechitOverrun: Warning: unable to emulatean overrun where numspechit=%d\n\x00"),
	24810: []byte("P_SpawnMapThing: Unknown type %d at (%d, %d)\x00"),
	24855: []byte("P_AddActivePlat: no more plats!\x00"),
	24887: []byte("P_RemoveActivePlat: can't find plat!\x00"),
	24924: []byte("temp.dsg\x00"),
	24933: []byte("doomsav%d.dsg\x00"),
	24947: []byte("%s%s\x00"),
	24952: []byte("saveg_read8: Unexpected end of file while reading save game\n\x00"),
	25013: []byte("saveg_write8: Error while writing save game\n\x00"),
	25058: []byte("version %d\x00"),
	25069: []byte("Unknown tclass %d in savegame\x00"),
	25099: []byte("P_UnarchiveSpecials:Unknown tclass %d in savegame\x00"),
	25149: []byte("PadRejectArray: REJECT lump too short to pad! (%d > %d)\n\x00"),
	25206: []byte("-reject_pad_with_ff\x00"),
	25226: []byte("map0%d\x00"),
	25233: []byte("map%d\x00"),
	25239: []byte("P_CrossSubsector: ss %d with numss = %d\x00"),
	25279: []byte("P_InitPicAnims: bad cycle from %s to %s\x00"),
	25319: []byte("Sector with more than 22 adjoining sectors. Vanilla will crash here\x00"),
	25387: []byte("P_PlayerInSpecialSector: unknown special %d\x00"),
	25431: []byte("-donut\x00"),
	25438: []byte("DonutOverrun: The second parameter for \"-donut\" switch should be greater than 0 and less than number of flats (%d). Using default value (%d) instead. \n\x00"),
	25590: []byte("EV_DoDonut: linedef had no second sidedef! Unexpected behavior may occur in Vanilla Doom. \n\x00"),
	25682: []byte("EV_DoDonut: WARNING: emulating buffer overrun due to NULL back sector. Unexpected behavior may occur in Vanilla Doom.\n\x00"),
	25801: []byte("Too many scrolling wall linedefs! (Vanilla limit is 64)\x00"),
	25857: []byte("P_StartButton: no button slots left!\x00"),
	25894: []byte("R_Subsector: ss %d with numss = %d\x00"),
	25929: []byte("r_data.c\x00"),
	25938: []byte("R_GenerateLookup: column without a patch (%s)\n\x00"),
	25985: []byte("R_GenerateLookup: texture %d is >64k\x00"),
	26022: []byte("PNAMES\x00"),
	26029: []byte("TEXTURE1\x00"),
	26038: []byte("TEXTURE2\x00"),
	26047: []byte("S_START\x00"),
	26055: []byte("S_END\x00"),
	26061: []byte("[\x00"),
	26063: []byte(" \x00"),
	26065: []byte("]\x00"),
	26067: []byte("\x00"),
	26069: []byte("R_InitTextures: bad texture directory\x00"),
	26107: []byte("R_InitTextures: Missing patch in texture %s\x00"),
	26151: []byte("F_START\x00"),
	26159: []byte("F_END\x00"),
	26165: []byte("COLORMAP\x00"),
	26174: []byte("R_FlatNumForName: %s not found\x00"),
	26205: []byte("R_TextureNumForName: %s not found\x00"),
	26239: []byte("R_DrawColumn: %d to %d at %d\x00"),
	26268: []byte("R_DrawFuzzColumn: %d to %d at %d\x00"),
	26301: []byte("R_DrawSpan: %d to %d at %d\x00"),
	26328: []byte("FLOOR7_2\x00"),
	26337: []byte("GRNROCK\x00"),
	26345: []byte("brdr_t\x00"),
	26352: []byte("brdr_b\x00"),
	26359: []byte("brdr_l\x00"),
	26366: []byte("brdr_r\x00"),
	26373: []byte("brdr_tl\x00"),
	26381: []byte("brdr_tr\x00"),
	26389: []byte("brdr_bl\x00"),
	26397: []byte("brdr_br\x00"),
	26405: []byte("R_MapPlane: %d, %d at %d\x00"),
	26430: []byte("R_FindPlane: no more visplanes\x00"),
	26461: []byte("R_DrawPlanes: drawsegs overflow (%d)\x00"),
	26498: []byte("R_DrawPlanes: visplane overflow (%d)\x00"),
	26535: []byte("R_DrawPlanes: opening overflow (%d)\x00"),
	26571: []byte("Bad R_RenderWallRange: %d to %d\x00"),
	26603: []byte("R_InstallSpriteLump: Bad frame characters in lump %d\x00"),
	26656: []byte("R_InitSprites: Sprite %s frame %c has multip rot=0 lump\x00"),
	26712: []byte("R_InitSprites: Sprite %s frame %c has rotations and a rot=0 lump\x00"),
	26777: []byte("R_InitSprites: Sprite %s : %c : %c has two lumps mapped to it\x00"),
	26839: []byte("R_InitSprites: No patches found for %s frame %c\x00"),
	26887: []byte("R_InitSprites: Sprite %s frame %c is missing rotations\x00"),
	26942: []byte("R_DrawSpriteRange: bad texturecolumn\x00"),
	26979: []byte("R_ProjectSprite: invalid sprite number %d \x00"),
	27022: []byte("R_ProjectSprite: invalid sprite frame %d : %d \x00"),
	27069: []byte("e1m1\x00"),
	27074: []byte("e1m2\x00"),
	27079: []byte("e1m3\x00"),
	27084: []byte("e1m4\x00"),
	27089: []byte("e1m5\x00"),
	27094: []byte("e1m6\x00"),
	27099: []byte("e1m7\x00"),
	27104: []byte("e1m8\x00"),
	27109: []byte("e1m9\x00"),
	27114: []byte("e2m1\x00"),
	27119: []byte("e2m2\x00"),
	27124: []byte("e2m3\x00"),
	27129: []byte("e2m4\x00"),
	27134: []byte("e2m5\x00"),
	27139: []byte("e2m6\x00"),
	27144: []byte("e2m7\x00"),
	27149: []byte("e2m8\x00"),
	27154: []byte("e2m9\x00"),
	27159: []byte("e3m1\x00"),
	27164: []byte("e3m2\x00"),
	27169: []byte("e3m3\x00"),
	27174: []byte("e3m4\x00"),
	27179: []byte("e3m5\x00"),
	27184: []byte("e3m6\x00"),
	27189: []byte("e3m7\x00"),
	27194: []byte("e3m8\x00"),
	27199: []byte("e3m9\x00"),
	27204: []byte("inter\x00"),
	27210: []byte("intro\x00"),
	27216: []byte("bunny\x00"),
	27222: []byte("victor\x00"),
	27229: []byte("introa\x00"),
	27236: []byte("runnin\x00"),
	27243: []byte("stalks\x00"),
	27250: []byte("countd\x00"),
	27257: []byte("betwee\x00"),
	27264: []byte("the_da\x00"),
	27271: []byte("shawn\x00"),
	27277: []byte("ddtblu\x00"),
	27284: []byte("in_cit\x00"),
	27291: []byte("dead\x00"),
	27296: []byte("stlks2\x00"),
	27303: []byte("theda2\x00"),
	27310: []byte("ddtbl2\x00"),
	27317: []byte("runni2\x00"),
	27324: []byte("dead2\x00"),
	27330: []byte("stlks3\x00"),
	27337: []byte("romero\x00"),
	27344: []byte("shawn2\x00"),
	27351: []byte("messag\x00"),
	27358: []byte("count2\x00"),
	27365: []byte("ddtbl3\x00"),
	27372: []byte("ampie\x00"),
	27378: []byte("theda3\x00"),
	27385: []byte("adrian\x00"),
	27392: []byte("messg2\x00"),
	27399: []byte("romer2\x00"),
	27406: []byte("tense\x00"),
	27412: []byte("shawn3\x00"),
	27419: []byte("openin\x00"),
	27426: []byte("evil\x00"),
	27431: []byte("ultima\x00"),
	27438: []byte("read_m\x00"),
	27445: []byte("dm2ttl\x00"),
	27452: []byte("dm2int\x00"),
	27459: []byte("STTMINUS\x00"),
	27468: []byte("drawNum: n->y - ST_Y < 0\x00"),
	27493: []byte("updateMultIcon: y - ST_Y < 0\x00"),
	27522: []byte("updateBinIcon: y - ST_Y < 0\x00"),
	27550: []byte("Degreelessness Mode On\x00"),
	27573: []byte("Degreelessness Mode Off\x00"),
	27597: []byte("Ammo (no keys) Added\x00"),
	27618: []byte("Very Happy Ammo Added\x00"),
	27640: []byte("Music Change\x00"),
	27653: []byte("IMPOSSIBLE SELECTION\x00"),
	27674: []byte("No Clipping Mode ON\x00"),
	27694: []byte("No Clipping Mode OFF\x00"),
	27715: []byte("Power-up Toggled\x00"),
	27732: []byte("inVuln, Str, Inviso, Rad, Allmap, or Lite-amp\x00"),
	27778: []byte("... doesn't suck - GM\x00"),
	27800: []byte("ang=0x%x;x,y=(0x%x,0x%x)\x00"),
	27825: []byte("Changing Level...\x00"),
	27843: []byte("STTNUM%d\x00"),
	27852: []byte("STYSNUM%d\x00"),
	27862: []byte("STTPRCNT\x00"),
	27871: []byte("STKEYS%d\x00"),
	27880: []byte("STARMS\x00"),
	27887: []byte("STGNUM%d\x00"),
	27896: []byte("STFB%d\x00"),
	27903: []byte("STBAR\x00"),
	27909: []byte("STFST%d%d\x00"),
	27919: []byte("STFTR%d0\x00"),
	27928: []byte("STFTL%d0\x00"),
	27937: []byte("STFOUCH%d\x00"),
	27947: []byte("STFEVL%d\x00"),
	27956: []byte("STFKILL%d\x00"),
	27966: []byte("STFGOD0\x00"),
	27974: []byte("STFDEAD0\x00"),
	27983: []byte("Bad sfx #: %d\x00"),
	27997: []byte("Attempt to set music volume at %d\x00"),
	28031: []byte("Attempt to set sfx volume at %d\x00"),
	28063: []byte("Bad music number %d\x00"),
	28083: []byte("d_%s\x00"),
	28088: []byte("Bad V_CopyRect\x00"),
	28103: []byte("Bad V_DrawPatch x=%d y=%d patch.width=%d patch.height=%d topoffset=%d leftoffset=%d\x00"),
	28187: []byte("Bad V_DrawPatchFlipped\x00"),
	28210: []byte("Bad V_DrawTLPatch\x00"),
	28228: []byte("Bad V_DrawAltTLPatch\x00"),
	28249: []byte("Bad V_DrawShadowedPatch\x00"),
	28273: []byte("TINTTAB\x00"),
	28281: []byte("XLATAB\x00"),
	28288: []byte("Bad V_DrawBlock\x00"),
	28304: []byte("pcx\x00"),
	28308: []byte("V_ScreenShot: Couldn't create a PCX\x00"),
	28344: []byte("Could not place patch on level %d\x00"),
	28378: []byte("CWILV%2.2d\x00"),
	28389: []byte("WILV%d%d\x00"),
	28398: []byte("WIURH0\x00"),
	28405: []byte("WIURH1\x00"),
	28412: []byte("WISPLAT\x00"),
	28420: []byte("WIA%d%.2d%.2d\x00"),
	28434: []byte("WIMINUS\x00"),
	28442: []byte("WINUM%d\x00"),
	28450: []byte("WIPCNT\x00"),
	28457: []byte("WIF\x00"),
	28461: []byte("WIENTER\x00"),
	28469: []byte("WIOSTK\x00"),
	28476: []byte("WIOSTS\x00"),
	28483: []byte("WISCRT2\x00"),
	28491: []byte("WIOBJ\x00"),
	28497: []byte("WIOSTI\x00"),
	28504: []byte("WIFRGS\x00"),
	28511: []byte("WICOLON\x00"),
	28519: []byte("WITIME\x00"),
	28526: []byte("WISUCKS\x00"),
	28534: []byte("WIPAR\x00"),
	28540: []byte("WIKILRS\x00"),
	28548: []byte("WIVCTMS\x00"),
	28556: []byte("WIMSTT\x00"),
	28563: []byte("STPB%d\x00"),
	28570: []byte("WIBP%d\x00"),
	28577: []byte("WIMAP%d\x00"),
	28585: []byte("STFST01\x00"),
	28593: []byte("-mmap\x00"),
	28599: []byte("-file\x00"),
	28605: []byte("Couldn't realloc lumpinfo\x00"),
	28631: []byte(" couldn't open %s\n\x00"),
	28650: []byte("wad\x00"),
	28654: []byte("IWAD\x00"),
	28659: []byte("PWAD\x00"),
	28664: []byte("Wad file %s doesn't have IWAD or PWAD id\n\x00"),
	28706: []byte("W_GetNumForName: %s not found!\x00"),
	28737: []byte("W_LumpLength: %d >= numlumps\x00"),
	28766: []byte("W_ReadLump: %d >= numlumps\x00"),
	28793: []byte("W_ReadLump: only read %d of %d on lump %d\x00"),
	28835: []byte("W_CacheLumpNum: %d >= numlumps\x00"),
	28866: []byte("w_wad.c\x00"),
	28874: []byte("W_ReleaseLumpNum: %d >= numlumps\x00"),
	28907: []byte("POSSA1\x00"),
	28914: []byte("IMPXA1\x00"),
	28921: []byte("ETTNA1\x00"),
	28928: []byte("AGRDA1\x00"),
	28935: []byte("\nYou are trying to use a %s IWAD file with the %s%s binary.\nThis isn't going to work.\nYou probably want to use the %s%s binary.\x00"),
	29063: []byte("doomgeneric\x00"),
	29075: []byte("Z_Free: freed a pointer without ZONEID\x00"),
	29114: []byte("Z_Malloc: failed on allocation of %d bytes\x00"),
	29157: []byte("Z_Malloc: an owner is required for purgable blocks\x00"),
	29208: []byte("zone size: %d  location: %p\n\x00"),
	29237: []byte("tag range: %d to %d\n\x00"),
	29258: []byte("block:%p    size:%7i    user:%p    tag:%3i\n\x00"),
	29302: []byte("ERROR: block size does not touch the next block\n\x00"),
	29351: []byte("ERROR: next block doesn't have proper back link\n\x00"),
	29400: []byte("ERROR: two consecutive free blocks\n\x00"),
	29436: []byte("Z_CheckHeap: block size does not touch the next block\n\x00"),
	29491: []byte("Z_CheckHeap: next block doesn't have proper back link\n\x00"),
	29546: []byte("Z_CheckHeap: two consecutive free blocks\n\x00"),
	29588: []byte("%s:%d: Z_ChangeTag: block without a ZONEID!\x00"),
	29632: []byte("%s:%d: Z_ChangeTag: an owner is required for purgable blocks\x00"),
	29693: []byte("Z_ChangeUser: Tried to change user for invalid block!\x00"),
	29747: []byte("I_InitGraphics: framebuffer: x_res: %d, y_res: %d, x_virtual: %d, y_virtual: %d, bpp: %d\n\x00"),
	29837: []byte("I_InitGraphics: framebuffer: RGBA: %d%d%d%d, red_off: %d, green_off: %d, blue_off: %d, transp_off: %d\n\x00"),
	29940: []byte("I_InitGraphics: DOOM screen size: w x h: %d x %d\n\x00"),
	29990: []byte("-scaling\x00"),
	29999: []byte("I_InitGraphics: Scaling factor: %d\n\x00"),
	30035: []byte("I_InitGraphics: Auto-scaling factor: %d\n\x00"),
	30076: []byte("I_GetPaletteIndex\n\x00"),
}
